/* automatically generated by rust-bindgen 0.72.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize)
        };
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = unsafe {
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize)
        };
        unsafe { *byte = Self::change_bit(*byte, index, val) };
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if unsafe { Self::raw_get_bit(this, i + bit_offset) } {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            unsafe { Self::raw_set_bit(this, index + bit_offset, val_bit_is_set) };
        }
    }
}
pub const _GLIBCXX_CSTDINT: u32 = 1;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 11;
pub const __GLIBCXX__: u32 = 20230528;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T: u32 = 1;
pub const _GLIBCXX_HAVE_INT64_T_LONG: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_INT128: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _GLIBCXX_CSTDDEF: u32 = 1;
pub const VULKAN_H_: u32 = 1;
pub const VULKAN_CORE_H_: u32 = 1;
pub const VK_VERSION_1_0: u32 = 1;
pub const VK_USE_64_BIT_PTR_DEFINES: u32 = 1;
pub const VK_HEADER_VERSION: u32 = 309;
pub const VK_ATTACHMENT_UNUSED: i32 = -1;
pub const VK_FALSE: u32 = 0;
pub const VK_LOD_CLAMP_NONE: f64 = 1000.0;
pub const VK_QUEUE_FAMILY_IGNORED: i32 = -1;
pub const VK_REMAINING_ARRAY_LAYERS: i32 = -1;
pub const VK_REMAINING_MIP_LEVELS: i32 = -1;
pub const VK_SUBPASS_EXTERNAL: i32 = -1;
pub const VK_TRUE: u32 = 1;
pub const VK_WHOLE_SIZE: i32 = -1;
pub const VK_MAX_MEMORY_TYPES: u32 = 32;
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: u32 = 256;
pub const VK_UUID_SIZE: u32 = 16;
pub const VK_MAX_EXTENSION_NAME_SIZE: u32 = 256;
pub const VK_MAX_DESCRIPTION_SIZE: u32 = 256;
pub const VK_MAX_MEMORY_HEAPS: u32 = 16;
pub const VK_VERSION_1_1: u32 = 1;
pub const VK_MAX_DEVICE_GROUP_SIZE: u32 = 32;
pub const VK_LUID_SIZE: u32 = 8;
pub const VK_QUEUE_FAMILY_EXTERNAL: i32 = -2;
pub const VK_VERSION_1_2: u32 = 1;
pub const VK_MAX_DRIVER_NAME_SIZE: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE: u32 = 256;
pub const VK_VERSION_1_3: u32 = 1;
pub const VK_VERSION_1_4: u32 = 1;
pub const VK_MAX_GLOBAL_PRIORITY_SIZE: u32 = 16;
pub const VK_KHR_surface: u32 = 1;
pub const VK_KHR_SURFACE_SPEC_VERSION: u32 = 25;
pub const VK_KHR_SURFACE_EXTENSION_NAME: &[u8; 15] = b"VK_KHR_surface\0";
pub const VK_KHR_swapchain: u32 = 1;
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION: u32 = 70;
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_swapchain\0";
pub const VK_KHR_display: u32 = 1;
pub const VK_KHR_DISPLAY_SPEC_VERSION: u32 = 23;
pub const VK_KHR_DISPLAY_EXTENSION_NAME: &[u8; 15] = b"VK_KHR_display\0";
pub const VK_KHR_display_swapchain: u32 = 1;
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION: u32 = 10;
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_display_swapchain\0";
pub const VK_KHR_sampler_mirror_clamp_to_edge: u32 = 1;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION: u32 = 3;
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_sampler_mirror_clamp_to_edge\0";
pub const VK_KHR_video_queue: u32 = 1;
pub const VK_KHR_VIDEO_QUEUE_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_QUEUE_EXTENSION_NAME: &[u8; 19] = b"VK_KHR_video_queue\0";
pub const VK_KHR_video_decode_queue: u32 = 1;
pub const VK_KHR_VIDEO_DECODE_QUEUE_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_DECODE_QUEUE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_decode_queue\0";
pub const VK_KHR_video_encode_h264: u32 = 1;
pub const VULKAN_VIDEO_CODEC_H264STD_H_: u32 = 1;
pub const vulkan_video_codec_h264std: u32 = 1;
pub const VULKAN_VIDEO_CODECS_COMMON_H_: u32 = 1;
pub const vulkan_video_codecs_common: u32 = 1;
pub const STD_VIDEO_H264_CPB_CNT_LIST_SIZE: u32 = 32;
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H264_SCALING_LIST_4X4_NUM_ELEMENTS: u32 = 16;
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H264_SCALING_LIST_8X8_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H264_MAX_NUM_LIST_REF: u32 = 32;
pub const STD_VIDEO_H264_MAX_CHROMA_PLANES: u32 = 2;
pub const STD_VIDEO_H264_NO_REFERENCE_PICTURE: u32 = 255;
pub const VULKAN_VIDEO_CODEC_H264STD_ENCODE_H_: u32 = 1;
pub const vulkan_video_codec_h264std_encode: u32 = 1;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_ENCODE_EXTENSION_NAME: &[u8; 38] =
    b"VK_STD_vulkan_video_codec_h264_encode\0";
pub const VK_KHR_VIDEO_ENCODE_H264_SPEC_VERSION: u32 = 14;
pub const VK_KHR_VIDEO_ENCODE_H264_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_encode_h264\0";
pub const VK_KHR_video_encode_h265: u32 = 1;
pub const VULKAN_VIDEO_CODEC_H265STD_H_: u32 = 1;
pub const vulkan_video_codec_h265std: u32 = 1;
pub const STD_VIDEO_H265_CPB_CNT_LIST_SIZE: u32 = 32;
pub const STD_VIDEO_H265_SUBLAYERS_LIST_SIZE: u32 = 7;
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H265_SCALING_LIST_4X4_NUM_ELEMENTS: u32 = 16;
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H265_SCALING_LIST_8X8_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_LISTS: u32 = 6;
pub const STD_VIDEO_H265_SCALING_LIST_16X16_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_LISTS: u32 = 2;
pub const STD_VIDEO_H265_SCALING_LIST_32X32_NUM_ELEMENTS: u32 = 64;
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_LIST_SIZE: u32 = 6;
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_COLS_LIST_SIZE: u32 = 19;
pub const STD_VIDEO_H265_CHROMA_QP_OFFSET_TILE_ROWS_LIST_SIZE: u32 = 21;
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMPONENTS_LIST_SIZE: u32 = 3;
pub const STD_VIDEO_H265_PREDICTOR_PALETTE_COMP_ENTRIES_LIST_SIZE: u32 = 128;
pub const STD_VIDEO_H265_MAX_NUM_LIST_REF: u32 = 15;
pub const STD_VIDEO_H265_MAX_CHROMA_PLANES: u32 = 2;
pub const STD_VIDEO_H265_MAX_SHORT_TERM_REF_PIC_SETS: u32 = 64;
pub const STD_VIDEO_H265_MAX_DPB_SIZE: u32 = 16;
pub const STD_VIDEO_H265_MAX_LONG_TERM_REF_PICS_SPS: u32 = 32;
pub const STD_VIDEO_H265_MAX_LONG_TERM_PICS: u32 = 16;
pub const STD_VIDEO_H265_MAX_DELTA_POC: u32 = 48;
pub const STD_VIDEO_H265_NO_REFERENCE_PICTURE: u32 = 255;
pub const VULKAN_VIDEO_CODEC_H265STD_ENCODE_H_: u32 = 1;
pub const vulkan_video_codec_h265std_encode: u32 = 1;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_ENCODE_EXTENSION_NAME: &[u8; 38] =
    b"VK_STD_vulkan_video_codec_h265_encode\0";
pub const VK_KHR_VIDEO_ENCODE_H265_SPEC_VERSION: u32 = 14;
pub const VK_KHR_VIDEO_ENCODE_H265_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_encode_h265\0";
pub const VK_KHR_video_decode_h264: u32 = 1;
pub const VULKAN_VIDEO_CODEC_H264STD_DECODE_H_: u32 = 1;
pub const vulkan_video_codec_h264std_decode: u32 = 1;
pub const VK_STD_VULKAN_VIDEO_CODEC_H264_DECODE_EXTENSION_NAME: &[u8; 38] =
    b"VK_STD_vulkan_video_codec_h264_decode\0";
pub const STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_LIST_SIZE: u32 = 2;
pub const VK_KHR_VIDEO_DECODE_H264_SPEC_VERSION: u32 = 9;
pub const VK_KHR_VIDEO_DECODE_H264_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_decode_h264\0";
pub const VK_KHR_dynamic_rendering: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_dynamic_rendering\0";
pub const VK_KHR_multiview: u32 = 1;
pub const VK_KHR_MULTIVIEW_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_multiview\0";
pub const VK_KHR_get_physical_device_properties2: u32 = 1;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION: u32 = 2;
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME: &[u8; 39] =
    b"VK_KHR_get_physical_device_properties2\0";
pub const VK_KHR_device_group: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION: u32 = 4;
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_device_group\0";
pub const VK_KHR_shader_draw_parameters: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_shader_draw_parameters\0";
pub const VK_KHR_maintenance1: u32 = 1;
pub const VK_KHR_MAINTENANCE_1_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE_1_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance1\0";
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance1\0";
pub const VK_KHR_device_group_creation: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_device_group_creation\0";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR: u32 = 32;
pub const VK_KHR_external_memory_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_external_memory_capabilities\0";
pub const VK_LUID_SIZE_KHR: u32 = 8;
pub const VK_KHR_external_memory: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_external_memory\0";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR: i32 = -2;
pub const VK_KHR_external_memory_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_external_memory_fd\0";
pub const VK_KHR_external_semaphore_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME: &[u8; 39] =
    b"VK_KHR_external_semaphore_capabilities\0";
pub const VK_KHR_external_semaphore: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_external_semaphore\0";
pub const VK_KHR_external_semaphore_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_external_semaphore_fd\0";
pub const VK_KHR_push_descriptor: u32 = 1;
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION: u32 = 2;
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_push_descriptor\0";
pub const VK_KHR_shader_float16_int8: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_shader_float16_int8\0";
pub const VK_KHR_16bit_storage: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME: &[u8; 21] = b"VK_KHR_16bit_storage\0";
pub const VK_KHR_incremental_present: u32 = 1;
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION: u32 = 2;
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_incremental_present\0";
pub const VK_KHR_descriptor_update_template: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_descriptor_update_template\0";
pub const VK_KHR_imageless_framebuffer: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_imageless_framebuffer\0";
pub const VK_KHR_create_renderpass2: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_create_renderpass2\0";
pub const VK_KHR_shared_presentable_image: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_shared_presentable_image\0";
pub const VK_KHR_external_fence_capabilities: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME: &[u8; 35] =
    b"VK_KHR_external_fence_capabilities\0";
pub const VK_KHR_external_fence: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME: &[u8; 22] = b"VK_KHR_external_fence\0";
pub const VK_KHR_external_fence_fd: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION: u32 = 1;
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_external_fence_fd\0";
pub const VK_KHR_performance_query: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_performance_query\0";
pub const VK_KHR_maintenance2: u32 = 1;
pub const VK_KHR_MAINTENANCE_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_2_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance2\0";
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance2\0";
pub const VK_KHR_get_surface_capabilities2: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME: &[u8; 33] =
    b"VK_KHR_get_surface_capabilities2\0";
pub const VK_KHR_variable_pointers: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_variable_pointers\0";
pub const VK_KHR_get_display_properties2: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME: &[u8; 31] =
    b"VK_KHR_get_display_properties2\0";
pub const VK_KHR_dedicated_allocation: u32 = 1;
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 3;
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_dedicated_allocation\0";
pub const VK_KHR_storage_buffer_storage_class: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_storage_buffer_storage_class\0";
pub const VK_KHR_relaxed_block_layout: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_relaxed_block_layout\0";
pub const VK_KHR_get_memory_requirements2: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_get_memory_requirements2\0";
pub const VK_KHR_image_format_list: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION: u32 = 1;
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_image_format_list\0";
pub const VK_KHR_sampler_ycbcr_conversion: u32 = 1;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION: u32 = 14;
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_sampler_ycbcr_conversion\0";
pub const VK_KHR_bind_memory2: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_bind_memory2\0";
pub const VK_KHR_maintenance3: u32 = 1;
pub const VK_KHR_MAINTENANCE_3_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_3_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance3\0";
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance3\0";
pub const VK_KHR_draw_indirect_count: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_draw_indirect_count\0";
pub const VK_KHR_shader_subgroup_extended_types: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_shader_subgroup_extended_types\0";
pub const VK_KHR_8bit_storage: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_8bit_storage\0";
pub const VK_KHR_shader_atomic_int64: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_shader_atomic_int64\0";
pub const VK_KHR_shader_clock: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_shader_clock\0";
pub const VK_KHR_video_decode_h265: u32 = 1;
pub const VULKAN_VIDEO_CODEC_H265STD_DECODE_H_: u32 = 1;
pub const vulkan_video_codec_h265std_decode: u32 = 1;
pub const VK_STD_VULKAN_VIDEO_CODEC_H265_DECODE_EXTENSION_NAME: &[u8; 38] =
    b"VK_STD_vulkan_video_codec_h265_decode\0";
pub const STD_VIDEO_DECODE_H265_REF_PIC_SET_LIST_SIZE: u32 = 8;
pub const VK_KHR_VIDEO_DECODE_H265_SPEC_VERSION: u32 = 8;
pub const VK_KHR_VIDEO_DECODE_H265_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_video_decode_h265\0";
pub const VK_KHR_global_priority: u32 = 1;
pub const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_global_priority\0";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR: u32 = 16;
pub const VK_KHR_driver_properties: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME: &[u8; 25] = b"VK_KHR_driver_properties\0";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR: u32 = 256;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR: u32 = 256;
pub const VK_KHR_shader_float_controls: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION: u32 = 4;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_shader_float_controls\0";
pub const VK_KHR_depth_stencil_resolve: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_depth_stencil_resolve\0";
pub const VK_KHR_swapchain_mutable_format: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_swapchain_mutable_format\0";
pub const VK_KHR_timeline_semaphore: u32 = 1;
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_timeline_semaphore\0";
pub const VK_KHR_vulkan_memory_model: u32 = 1;
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION: u32 = 3;
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_vulkan_memory_model\0";
pub const VK_KHR_shader_terminate_invocation: u32 = 1;
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME: &[u8; 35] =
    b"VK_KHR_shader_terminate_invocation\0";
pub const VK_KHR_fragment_shading_rate: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_fragment_shading_rate\0";
pub const VK_KHR_dynamic_rendering_local_read: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DYNAMIC_RENDERING_LOCAL_READ_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_dynamic_rendering_local_read\0";
pub const VK_KHR_shader_quad_control: u32 = 1;
pub const VK_KHR_SHADER_QUAD_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_QUAD_CONTROL_EXTENSION_NAME: &[u8; 27] = b"VK_KHR_shader_quad_control\0";
pub const VK_KHR_spirv_1_4: u32 = 1;
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_spirv_1_4\0";
pub const VK_KHR_surface_protected_capabilities: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_surface_protected_capabilities\0";
pub const VK_KHR_separate_depth_stencil_layouts: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_separate_depth_stencil_layouts\0";
pub const VK_KHR_present_wait: u32 = 1;
pub const VK_KHR_PRESENT_WAIT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PRESENT_WAIT_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_present_wait\0";
pub const VK_KHR_uniform_buffer_standard_layout: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_uniform_buffer_standard_layout\0";
pub const VK_KHR_buffer_device_address: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_buffer_device_address\0";
pub const VK_KHR_deferred_host_operations: u32 = 1;
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION: u32 = 4;
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_deferred_host_operations\0";
pub const VK_KHR_pipeline_executable_properties: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME: &[u8; 38] =
    b"VK_KHR_pipeline_executable_properties\0";
pub const VK_KHR_map_memory2: u32 = 1;
pub const VK_KHR_MAP_MEMORY_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAP_MEMORY_2_EXTENSION_NAME: &[u8; 19] = b"VK_KHR_map_memory2\0";
pub const VK_KHR_shader_integer_dot_product: u32 = 1;
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_shader_integer_dot_product\0";
pub const VK_KHR_pipeline_library: u32 = 1;
pub const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_pipeline_library\0";
pub const VK_KHR_shader_non_semantic_info: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_shader_non_semantic_info\0";
pub const VK_KHR_present_id: u32 = 1;
pub const VK_KHR_PRESENT_ID_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PRESENT_ID_EXTENSION_NAME: &[u8; 18] = b"VK_KHR_present_id\0";
pub const VK_KHR_video_encode_queue: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_QUEUE_SPEC_VERSION: u32 = 12;
pub const VK_KHR_VIDEO_ENCODE_QUEUE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_encode_queue\0";
pub const VK_KHR_synchronization2: u32 = 1;
pub const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_synchronization2\0";
pub const VK_KHR_fragment_shader_barycentric: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: u32 = 1;
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &[u8; 35] =
    b"VK_KHR_fragment_shader_barycentric\0";
pub const VK_KHR_shader_subgroup_uniform_control_flow: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME: &[u8; 44] =
    b"VK_KHR_shader_subgroup_uniform_control_flow\0";
pub const VK_KHR_zero_initialize_workgroup_memory: u32 = 1;
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME: &[u8; 40] =
    b"VK_KHR_zero_initialize_workgroup_memory\0";
pub const VK_KHR_workgroup_memory_explicit_layout: u32 = 1;
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME: &[u8; 40] =
    b"VK_KHR_workgroup_memory_explicit_layout\0";
pub const VK_KHR_copy_commands2: u32 = 1;
pub const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME: &[u8; 22] = b"VK_KHR_copy_commands2\0";
pub const VK_KHR_format_feature_flags2: u32 = 1;
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION: u32 = 2;
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_format_feature_flags2\0";
pub const VK_KHR_ray_tracing_maintenance1: u32 = 1;
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_ray_tracing_maintenance1\0";
pub const VK_KHR_portability_enumeration: u32 = 1;
pub const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME: &[u8; 31] =
    b"VK_KHR_portability_enumeration\0";
pub const VK_KHR_maintenance4: u32 = 1;
pub const VK_KHR_MAINTENANCE_4_SPEC_VERSION: u32 = 2;
pub const VK_KHR_MAINTENANCE_4_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance4\0";
pub const VK_KHR_shader_subgroup_rotate: u32 = 1;
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_SPEC_VERSION: u32 = 2;
pub const VK_KHR_SHADER_SUBGROUP_ROTATE_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_shader_subgroup_rotate\0";
pub const VK_KHR_shader_maximal_reconvergence: u32 = 1;
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_MAXIMAL_RECONVERGENCE_EXTENSION_NAME: &[u8; 36] =
    b"VK_KHR_shader_maximal_reconvergence\0";
pub const VK_KHR_maintenance5: u32 = 1;
pub const VK_KHR_MAINTENANCE_5_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_5_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance5\0";
pub const VK_KHR_ray_tracing_position_fetch: u32 = 1;
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_POSITION_FETCH_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_ray_tracing_position_fetch\0";
pub const VK_KHR_pipeline_binary: u32 = 1;
pub const VK_MAX_PIPELINE_BINARY_KEY_SIZE_KHR: u32 = 32;
pub const VK_KHR_PIPELINE_BINARY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_PIPELINE_BINARY_EXTENSION_NAME: &[u8; 23] = b"VK_KHR_pipeline_binary\0";
pub const VK_KHR_cooperative_matrix: u32 = 1;
pub const VK_KHR_COOPERATIVE_MATRIX_SPEC_VERSION: u32 = 2;
pub const VK_KHR_COOPERATIVE_MATRIX_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_cooperative_matrix\0";
pub const VK_KHR_compute_shader_derivatives: u32 = 1;
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: u32 = 1;
pub const VK_KHR_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &[u8; 34] =
    b"VK_KHR_compute_shader_derivatives\0";
pub const VK_KHR_video_decode_av1: u32 = 1;
pub const VULKAN_VIDEO_CODEC_AV1STD_H_: u32 = 1;
pub const vulkan_video_codec_av1std: u32 = 1;
pub const STD_VIDEO_AV1_NUM_REF_FRAMES: u32 = 8;
pub const STD_VIDEO_AV1_REFS_PER_FRAME: u32 = 7;
pub const STD_VIDEO_AV1_TOTAL_REFS_PER_FRAME: u32 = 8;
pub const STD_VIDEO_AV1_MAX_TILE_COLS: u32 = 64;
pub const STD_VIDEO_AV1_MAX_TILE_ROWS: u32 = 64;
pub const STD_VIDEO_AV1_MAX_SEGMENTS: u32 = 8;
pub const STD_VIDEO_AV1_SEG_LVL_MAX: u32 = 8;
pub const STD_VIDEO_AV1_PRIMARY_REF_NONE: u32 = 7;
pub const STD_VIDEO_AV1_SELECT_INTEGER_MV: u32 = 2;
pub const STD_VIDEO_AV1_SELECT_SCREEN_CONTENT_TOOLS: u32 = 2;
pub const STD_VIDEO_AV1_SKIP_MODE_FRAMES: u32 = 2;
pub const STD_VIDEO_AV1_MAX_LOOP_FILTER_STRENGTHS: u32 = 4;
pub const STD_VIDEO_AV1_LOOP_FILTER_ADJUSTMENTS: u32 = 2;
pub const STD_VIDEO_AV1_MAX_CDEF_FILTER_STRENGTHS: u32 = 8;
pub const STD_VIDEO_AV1_MAX_NUM_PLANES: u32 = 3;
pub const STD_VIDEO_AV1_GLOBAL_MOTION_PARAMS: u32 = 6;
pub const STD_VIDEO_AV1_MAX_NUM_Y_POINTS: u32 = 14;
pub const STD_VIDEO_AV1_MAX_NUM_CB_POINTS: u32 = 10;
pub const STD_VIDEO_AV1_MAX_NUM_CR_POINTS: u32 = 10;
pub const STD_VIDEO_AV1_MAX_NUM_POS_LUMA: u32 = 24;
pub const STD_VIDEO_AV1_MAX_NUM_POS_CHROMA: u32 = 25;
pub const VULKAN_VIDEO_CODEC_AV1STD_DECODE_H_: u32 = 1;
pub const vulkan_video_codec_av1std_decode: u32 = 1;
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_DECODE_EXTENSION_NAME: &[u8; 37] =
    b"VK_STD_vulkan_video_codec_av1_decode\0";
pub const VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR: u32 = 7;
pub const VK_KHR_VIDEO_DECODE_AV1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_DECODE_AV1_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_video_decode_av1\0";
pub const VK_KHR_video_encode_av1: u32 = 1;
pub const VULKAN_VIDEO_CODEC_AV1STD_ENCODE_H_: u32 = 1;
pub const vulkan_video_codec_av1std_encode: u32 = 1;
pub const VK_STD_VULKAN_VIDEO_CODEC_AV1_ENCODE_EXTENSION_NAME: &[u8; 37] =
    b"VK_STD_vulkan_video_codec_av1_encode\0";
pub const VK_KHR_VIDEO_ENCODE_AV1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_AV1_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_video_encode_av1\0";
pub const VK_KHR_video_maintenance1: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_1_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_maintenance1\0";
pub const VK_KHR_vertex_attribute_divisor: u32 = 1;
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &[u8; 32] =
    b"VK_KHR_vertex_attribute_divisor\0";
pub const VK_KHR_load_store_op_none: u32 = 1;
pub const VK_KHR_LOAD_STORE_OP_NONE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_LOAD_STORE_OP_NONE_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_load_store_op_none\0";
pub const VK_KHR_shader_float_controls2: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_FLOAT_CONTROLS_2_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_shader_float_controls2\0";
pub const VK_KHR_index_type_uint8: u32 = 1;
pub const VK_KHR_INDEX_TYPE_UINT8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_INDEX_TYPE_UINT8_EXTENSION_NAME: &[u8; 24] = b"VK_KHR_index_type_uint8\0";
pub const VK_KHR_line_rasterization: u32 = 1;
pub const VK_KHR_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_LINE_RASTERIZATION_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_line_rasterization\0";
pub const VK_KHR_calibrated_timestamps: u32 = 1;
pub const VK_KHR_CALIBRATED_TIMESTAMPS_SPEC_VERSION: u32 = 1;
pub const VK_KHR_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &[u8; 29] =
    b"VK_KHR_calibrated_timestamps\0";
pub const VK_KHR_shader_expect_assume: u32 = 1;
pub const VK_KHR_SHADER_EXPECT_ASSUME_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_EXPECT_ASSUME_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_shader_expect_assume\0";
pub const VK_KHR_maintenance6: u32 = 1;
pub const VK_KHR_MAINTENANCE_6_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_6_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance6\0";
pub const VK_KHR_video_encode_quantization_map: u32 = 1;
pub const VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_SPEC_VERSION: u32 = 2;
pub const VK_KHR_VIDEO_ENCODE_QUANTIZATION_MAP_EXTENSION_NAME: &[u8; 37] =
    b"VK_KHR_video_encode_quantization_map\0";
pub const VK_KHR_shader_relaxed_extended_instruction: u32 = 1;
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_SPEC_VERSION: u32 = 1;
pub const VK_KHR_SHADER_RELAXED_EXTENDED_INSTRUCTION_EXTENSION_NAME: &[u8; 43] =
    b"VK_KHR_shader_relaxed_extended_instruction\0";
pub const VK_KHR_maintenance7: u32 = 1;
pub const VK_KHR_MAINTENANCE_7_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_7_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance7\0";
pub const VK_KHR_maintenance8: u32 = 1;
pub const VK_KHR_MAINTENANCE_8_SPEC_VERSION: u32 = 1;
pub const VK_KHR_MAINTENANCE_8_EXTENSION_NAME: &[u8; 20] = b"VK_KHR_maintenance8\0";
pub const VK_KHR_video_maintenance2: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_2_SPEC_VERSION: u32 = 1;
pub const VK_KHR_VIDEO_MAINTENANCE_2_EXTENSION_NAME: &[u8; 26] = b"VK_KHR_video_maintenance2\0";
pub const VK_KHR_depth_clamp_zero_one: u32 = 1;
pub const VK_KHR_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_depth_clamp_zero_one\0";
pub const VK_EXT_debug_report: u32 = 1;
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION: u32 = 10;
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_debug_report\0";
pub const VK_NV_glsl_shader: u32 = 1;
pub const VK_NV_GLSL_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME: &[u8; 18] = b"VK_NV_glsl_shader\0";
pub const VK_EXT_depth_range_unrestricted: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_depth_range_unrestricted\0";
pub const VK_IMG_filter_cubic: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME: &[u8; 20] = b"VK_IMG_filter_cubic\0";
pub const VK_AMD_rasterization_order: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME: &[u8; 27] = b"VK_AMD_rasterization_order\0";
pub const VK_AMD_shader_trinary_minmax: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME: &[u8; 29] =
    b"VK_AMD_shader_trinary_minmax\0";
pub const VK_AMD_shader_explicit_vertex_parameter: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME: &[u8; 40] =
    b"VK_AMD_shader_explicit_vertex_parameter\0";
pub const VK_EXT_debug_marker: u32 = 1;
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION: u32 = 4;
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_debug_marker\0";
pub const VK_AMD_gcn_shader: u32 = 1;
pub const VK_AMD_GCN_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME: &[u8; 18] = b"VK_AMD_gcn_shader\0";
pub const VK_NV_dedicated_allocation: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME: &[u8; 27] = b"VK_NV_dedicated_allocation\0";
pub const VK_EXT_transform_feedback: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_transform_feedback\0";
pub const VK_NVX_binary_import: u32 = 1;
pub const VK_NVX_BINARY_IMPORT_SPEC_VERSION: u32 = 2;
pub const VK_NVX_BINARY_IMPORT_EXTENSION_NAME: &[u8; 21] = b"VK_NVX_binary_import\0";
pub const VK_NVX_image_view_handle: u32 = 1;
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION: u32 = 3;
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME: &[u8; 25] = b"VK_NVX_image_view_handle\0";
pub const VK_AMD_draw_indirect_count: u32 = 1;
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME: &[u8; 27] = b"VK_AMD_draw_indirect_count\0";
pub const VK_AMD_negative_viewport_height: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME: &[u8; 32] =
    b"VK_AMD_negative_viewport_height\0";
pub const VK_AMD_gpu_shader_half_float: u32 = 1;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME: &[u8; 29] =
    b"VK_AMD_gpu_shader_half_float\0";
pub const VK_AMD_shader_ballot: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME: &[u8; 21] = b"VK_AMD_shader_ballot\0";
pub const VK_AMD_texture_gather_bias_lod: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME: &[u8; 31] =
    b"VK_AMD_texture_gather_bias_lod\0";
pub const VK_AMD_shader_info: u32 = 1;
pub const VK_AMD_SHADER_INFO_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME: &[u8; 19] = b"VK_AMD_shader_info\0";
pub const VK_AMD_shader_image_load_store_lod: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME: &[u8; 35] =
    b"VK_AMD_shader_image_load_store_lod\0";
pub const VK_NV_corner_sampled_image: u32 = 1;
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION: u32 = 2;
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME: &[u8; 27] = b"VK_NV_corner_sampled_image\0";
pub const VK_IMG_format_pvrtc: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION: u32 = 1;
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME: &[u8; 20] = b"VK_IMG_format_pvrtc\0";
pub const VK_NV_external_memory_capabilities: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME: &[u8; 35] =
    b"VK_NV_external_memory_capabilities\0";
pub const VK_NV_external_memory: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME: &[u8; 22] = b"VK_NV_external_memory\0";
pub const VK_EXT_validation_flags: u32 = 1;
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION: u32 = 3;
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_validation_flags\0";
pub const VK_EXT_shader_subgroup_ballot: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_shader_subgroup_ballot\0";
pub const VK_EXT_shader_subgroup_vote: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_shader_subgroup_vote\0";
pub const VK_EXT_texture_compression_astc_hdr: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME: &[u8; 36] =
    b"VK_EXT_texture_compression_astc_hdr\0";
pub const VK_EXT_astc_decode_mode: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_astc_decode_mode\0";
pub const VK_EXT_pipeline_robustness: u32 = 1;
pub const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_pipeline_robustness\0";
pub const VK_EXT_conditional_rendering: u32 = 1;
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_conditional_rendering\0";
pub const VK_NV_clip_space_w_scaling: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION: u32 = 1;
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME: &[u8; 27] = b"VK_NV_clip_space_w_scaling\0";
pub const VK_EXT_direct_mode_display: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_direct_mode_display\0";
pub const VK_EXT_display_surface_counter: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_display_surface_counter\0";
pub const VK_EXT_display_control: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_display_control\0";
pub const VK_GOOGLE_display_timing: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME: &[u8; 25] = b"VK_GOOGLE_display_timing\0";
pub const VK_NV_sample_mask_override_coverage: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME: &[u8; 36] =
    b"VK_NV_sample_mask_override_coverage\0";
pub const VK_NV_geometry_shader_passthrough: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION: u32 = 1;
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_geometry_shader_passthrough\0";
pub const VK_NV_viewport_array2: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME: &[u8; 22] = b"VK_NV_viewport_array2\0";
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME: &[u8; 22] = b"VK_NV_viewport_array2\0";
pub const VK_NVX_multiview_per_view_attributes: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION: u32 = 1;
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME: &[u8; 37] =
    b"VK_NVX_multiview_per_view_attributes\0";
pub const VK_NV_viewport_swizzle: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME: &[u8; 23] = b"VK_NV_viewport_swizzle\0";
pub const VK_EXT_discard_rectangles: u32 = 1;
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_discard_rectangles\0";
pub const VK_EXT_conservative_rasterization: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_conservative_rasterization\0";
pub const VK_EXT_depth_clip_enable: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_depth_clip_enable\0";
pub const VK_EXT_swapchain_colorspace: u32 = 1;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION: u32 = 5;
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_swapchain_colorspace\0";
pub const VK_EXT_hdr_metadata: u32 = 1;
pub const VK_EXT_HDR_METADATA_SPEC_VERSION: u32 = 3;
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_hdr_metadata\0";
pub const VK_IMG_relaxed_line_rasterization: u32 = 1;
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_IMG_RELAXED_LINE_RASTERIZATION_EXTENSION_NAME: &[u8; 34] =
    b"VK_IMG_relaxed_line_rasterization\0";
pub const VK_EXT_external_memory_dma_buf: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_external_memory_dma_buf\0";
pub const VK_EXT_queue_family_foreign: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION: u32 = 1;
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_queue_family_foreign\0";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT: i32 = -3;
pub const VK_EXT_debug_utils: u32 = 1;
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME: &[u8; 19] = b"VK_EXT_debug_utils\0";
pub const VK_EXT_sampler_filter_minmax: u32 = 1;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_sampler_filter_minmax\0";
pub const VK_AMD_gpu_shader_int16: u32 = 1;
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION: u32 = 2;
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME: &[u8; 24] = b"VK_AMD_gpu_shader_int16\0";
pub const VK_AMD_mixed_attachment_samples: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME: &[u8; 32] =
    b"VK_AMD_mixed_attachment_samples\0";
pub const VK_AMD_shader_fragment_mask: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME: &[u8; 28] = b"VK_AMD_shader_fragment_mask\0";
pub const VK_EXT_inline_uniform_block: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_inline_uniform_block\0";
pub const VK_EXT_shader_stencil_export: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_shader_stencil_export\0";
pub const VK_EXT_sample_locations: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_sample_locations\0";
pub const VK_EXT_blend_operation_advanced: u32 = 1;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_blend_operation_advanced\0";
pub const VK_NV_fragment_coverage_to_color: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_fragment_coverage_to_color\0";
pub const VK_NV_framebuffer_mixed_samples: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME: &[u8; 32] =
    b"VK_NV_framebuffer_mixed_samples\0";
pub const VK_NV_fill_rectangle: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION: u32 = 1;
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME: &[u8; 21] = b"VK_NV_fill_rectangle\0";
pub const VK_NV_shader_sm_builtins: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME: &[u8; 25] = b"VK_NV_shader_sm_builtins\0";
pub const VK_EXT_post_depth_coverage: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_post_depth_coverage\0";
pub const VK_EXT_image_drm_format_modifier: u32 = 1;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION: u32 = 2;
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_image_drm_format_modifier\0";
pub const VK_EXT_validation_cache: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_validation_cache\0";
pub const VK_EXT_descriptor_indexing: u32 = 1;
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_descriptor_indexing\0";
pub const VK_EXT_shader_viewport_index_layer: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME: &[u8; 35] =
    b"VK_EXT_shader_viewport_index_layer\0";
pub const VK_NV_shading_rate_image: u32 = 1;
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION: u32 = 3;
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME: &[u8; 25] = b"VK_NV_shading_rate_image\0";
pub const VK_NV_ray_tracing: u32 = 1;
pub const VK_NV_RAY_TRACING_SPEC_VERSION: u32 = 3;
pub const VK_NV_RAY_TRACING_EXTENSION_NAME: &[u8; 18] = b"VK_NV_ray_tracing\0";
pub const VK_SHADER_UNUSED_KHR: i32 = -1;
pub const VK_SHADER_UNUSED_NV: i32 = -1;
pub const VK_NV_representative_fragment_test: u32 = 1;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION: u32 = 2;
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME: &[u8; 35] =
    b"VK_NV_representative_fragment_test\0";
pub const VK_EXT_filter_cubic: u32 = 1;
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION: u32 = 3;
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_filter_cubic\0";
pub const VK_QCOM_render_pass_shader_resolve: u32 = 1;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION: u32 = 4;
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME: &[u8; 35] =
    b"VK_QCOM_render_pass_shader_resolve\0";
pub const VK_EXT_global_priority: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION: u32 = 2;
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_global_priority\0";
pub const VK_EXT_external_memory_host: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_external_memory_host\0";
pub const VK_AMD_buffer_marker: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION: u32 = 1;
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME: &[u8; 21] = b"VK_AMD_buffer_marker\0";
pub const VK_AMD_pipeline_compiler_control: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME: &[u8; 33] =
    b"VK_AMD_pipeline_compiler_control\0";
pub const VK_EXT_calibrated_timestamps: u32 = 1;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_calibrated_timestamps\0";
pub const VK_AMD_shader_core_properties: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION: u32 = 2;
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &[u8; 30] =
    b"VK_AMD_shader_core_properties\0";
pub const VK_AMD_memory_overallocation_behavior: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME: &[u8; 38] =
    b"VK_AMD_memory_overallocation_behavior\0";
pub const VK_EXT_vertex_attribute_divisor: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION: u32 = 3;
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_vertex_attribute_divisor\0";
pub const VK_EXT_pipeline_creation_feedback: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_pipeline_creation_feedback\0";
pub const VK_NV_shader_subgroup_partitioned: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_shader_subgroup_partitioned\0";
pub const VK_NV_compute_shader_derivatives: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION: u32 = 1;
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_compute_shader_derivatives\0";
pub const VK_NV_mesh_shader: u32 = 1;
pub const VK_NV_MESH_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_NV_MESH_SHADER_EXTENSION_NAME: &[u8; 18] = b"VK_NV_mesh_shader\0";
pub const VK_NV_fragment_shader_barycentric: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_fragment_shader_barycentric\0";
pub const VK_NV_shader_image_footprint: u32 = 1;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION: u32 = 2;
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME: &[u8; 29] =
    b"VK_NV_shader_image_footprint\0";
pub const VK_NV_scissor_exclusive: u32 = 1;
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION: u32 = 2;
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME: &[u8; 24] = b"VK_NV_scissor_exclusive\0";
pub const VK_NV_device_diagnostic_checkpoints: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME: &[u8; 36] =
    b"VK_NV_device_diagnostic_checkpoints\0";
pub const VK_INTEL_shader_integer_functions2: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION: u32 = 1;
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME: &[u8; 35] =
    b"VK_INTEL_shader_integer_functions2\0";
pub const VK_INTEL_performance_query: u32 = 1;
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION: u32 = 2;
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME: &[u8; 27] = b"VK_INTEL_performance_query\0";
pub const VK_EXT_pci_bus_info: u32 = 1;
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION: u32 = 2;
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_pci_bus_info\0";
pub const VK_AMD_display_native_hdr: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME: &[u8; 26] = b"VK_AMD_display_native_hdr\0";
pub const VK_EXT_fragment_density_map: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION: u32 = 2;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_fragment_density_map\0";
pub const VK_EXT_scalar_block_layout: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_scalar_block_layout\0";
pub const VK_GOOGLE_hlsl_functionality1: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME: &[u8; 30] =
    b"VK_GOOGLE_hlsl_functionality1\0";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME: &[u8; 30] =
    b"VK_GOOGLE_hlsl_functionality1\0";
pub const VK_GOOGLE_decorate_string: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME: &[u8; 26] = b"VK_GOOGLE_decorate_string\0";
pub const VK_EXT_subgroup_size_control: u32 = 1;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_subgroup_size_control\0";
pub const VK_AMD_shader_core_properties2: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME: &[u8; 31] =
    b"VK_AMD_shader_core_properties2\0";
pub const VK_AMD_device_coherent_memory: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME: &[u8; 30] =
    b"VK_AMD_device_coherent_memory\0";
pub const VK_EXT_shader_image_atomic_int64: u32 = 1;
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_shader_image_atomic_int64\0";
pub const VK_EXT_memory_budget: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME: &[u8; 21] = b"VK_EXT_memory_budget\0";
pub const VK_EXT_memory_priority: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_memory_priority\0";
pub const VK_NV_dedicated_allocation_image_aliasing: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION: u32 = 1;
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME: &[u8; 42] =
    b"VK_NV_dedicated_allocation_image_aliasing\0";
pub const VK_EXT_buffer_device_address: u32 = 1;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_buffer_device_address\0";
pub const VK_EXT_tooling_info: u32 = 1;
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_tooling_info\0";
pub const VK_EXT_separate_stencil_usage: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_separate_stencil_usage\0";
pub const VK_EXT_validation_features: u32 = 1;
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION: u32 = 6;
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_validation_features\0";
pub const VK_NV_cooperative_matrix: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME: &[u8; 25] = b"VK_NV_cooperative_matrix\0";
pub const VK_NV_coverage_reduction_mode: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION: u32 = 1;
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME: &[u8; 30] =
    b"VK_NV_coverage_reduction_mode\0";
pub const VK_EXT_fragment_shader_interlock: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_fragment_shader_interlock\0";
pub const VK_EXT_ycbcr_image_arrays: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_ycbcr_image_arrays\0";
pub const VK_EXT_provoking_vertex: u32 = 1;
pub const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_provoking_vertex\0";
pub const VK_EXT_headless_surface: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_headless_surface\0";
pub const VK_EXT_line_rasterization: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_line_rasterization\0";
pub const VK_EXT_shader_atomic_float: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_shader_atomic_float\0";
pub const VK_EXT_host_query_reset: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_host_query_reset\0";
pub const VK_EXT_index_type_uint8: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION: u32 = 1;
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_index_type_uint8\0";
pub const VK_EXT_extended_dynamic_state: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_extended_dynamic_state\0";
pub const VK_EXT_host_image_copy: u32 = 1;
pub const VK_EXT_HOST_IMAGE_COPY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_HOST_IMAGE_COPY_EXTENSION_NAME: &[u8; 23] = b"VK_EXT_host_image_copy\0";
pub const VK_EXT_map_memory_placed: u32 = 1;
pub const VK_EXT_MAP_MEMORY_PLACED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MAP_MEMORY_PLACED_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_map_memory_placed\0";
pub const VK_EXT_shader_atomic_float2: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_shader_atomic_float2\0";
pub const VK_EXT_surface_maintenance1: u32 = 1;
pub const VK_EXT_SURFACE_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SURFACE_MAINTENANCE_1_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_surface_maintenance1\0";
pub const VK_EXT_swapchain_maintenance1: u32 = 1;
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SWAPCHAIN_MAINTENANCE_1_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_swapchain_maintenance1\0";
pub const VK_EXT_shader_demote_to_helper_invocation: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME: &[u8; 42] =
    b"VK_EXT_shader_demote_to_helper_invocation\0";
pub const VK_NV_device_generated_commands: u32 = 1;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: u32 = 3;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &[u8; 32] =
    b"VK_NV_device_generated_commands\0";
pub const VK_NV_inherited_viewport_scissor: u32 = 1;
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_inherited_viewport_scissor\0";
pub const VK_EXT_texel_buffer_alignment: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_texel_buffer_alignment\0";
pub const VK_QCOM_render_pass_transform: u32 = 1;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION: u32 = 4;
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME: &[u8; 30] =
    b"VK_QCOM_render_pass_transform\0";
pub const VK_EXT_depth_bias_control: u32 = 1;
pub const VK_EXT_DEPTH_BIAS_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_BIAS_CONTROL_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_depth_bias_control\0";
pub const VK_EXT_device_memory_report: u32 = 1;
pub const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_device_memory_report\0";
pub const VK_EXT_acquire_drm_display: u32 = 1;
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_acquire_drm_display\0";
pub const VK_EXT_robustness2: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME: &[u8; 19] = b"VK_EXT_robustness2\0";
pub const VK_EXT_custom_border_color: u32 = 1;
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION: u32 = 12;
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_custom_border_color\0";
pub const VK_GOOGLE_user_type: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME: &[u8; 20] = b"VK_GOOGLE_user_type\0";
pub const VK_NV_present_barrier: u32 = 1;
pub const VK_NV_PRESENT_BARRIER_SPEC_VERSION: u32 = 1;
pub const VK_NV_PRESENT_BARRIER_EXTENSION_NAME: &[u8; 22] = b"VK_NV_present_barrier\0";
pub const VK_EXT_private_data: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_private_data\0";
pub const VK_EXT_pipeline_creation_cache_control: u32 = 1;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION: u32 = 3;
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME: &[u8; 39] =
    b"VK_EXT_pipeline_creation_cache_control\0";
pub const VK_NV_device_diagnostics_config: u32 = 1;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME: &[u8; 32] =
    b"VK_NV_device_diagnostics_config\0";
pub const VK_QCOM_render_pass_store_ops: u32 = 1;
pub const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION: u32 = 2;
pub const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME: &[u8; 30] =
    b"VK_QCOM_render_pass_store_ops\0";
pub const VK_NV_cuda_kernel_launch: u32 = 1;
pub const VK_NV_CUDA_KERNEL_LAUNCH_SPEC_VERSION: u32 = 2;
pub const VK_NV_CUDA_KERNEL_LAUNCH_EXTENSION_NAME: &[u8; 25] = b"VK_NV_cuda_kernel_launch\0";
pub const VK_NV_low_latency: u32 = 1;
pub const VK_NV_LOW_LATENCY_SPEC_VERSION: u32 = 1;
pub const VK_NV_LOW_LATENCY_EXTENSION_NAME: &[u8; 18] = b"VK_NV_low_latency\0";
pub const VK_EXT_descriptor_buffer: u32 = 1;
pub const VK_EXT_DESCRIPTOR_BUFFER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DESCRIPTOR_BUFFER_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_descriptor_buffer\0";
pub const VK_EXT_graphics_pipeline_library: u32 = 1;
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_graphics_pipeline_library\0";
pub const VK_AMD_shader_early_and_late_fragment_tests: u32 = 1;
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION: u32 = 1;
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME: &[u8; 44] =
    b"VK_AMD_shader_early_and_late_fragment_tests\0";
pub const VK_NV_fragment_shading_rate_enums: u32 = 1;
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION: u32 = 1;
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME: &[u8; 34] =
    b"VK_NV_fragment_shading_rate_enums\0";
pub const VK_NV_ray_tracing_motion_blur: u32 = 1;
pub const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME: &[u8; 30] =
    b"VK_NV_ray_tracing_motion_blur\0";
pub const VK_EXT_ycbcr_2plane_444_formats: u32 = 1;
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_ycbcr_2plane_444_formats\0";
pub const VK_EXT_fragment_density_map2: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_fragment_density_map2\0";
pub const VK_QCOM_rotated_copy_commands: u32 = 1;
pub const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION: u32 = 2;
pub const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME: &[u8; 30] =
    b"VK_QCOM_rotated_copy_commands\0";
pub const VK_EXT_image_robustness: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_image_robustness\0";
pub const VK_EXT_image_compression_control: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_image_compression_control\0";
pub const VK_EXT_attachment_feedback_loop_layout: u32 = 1;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME: &[u8; 39] =
    b"VK_EXT_attachment_feedback_loop_layout\0";
pub const VK_EXT_4444_formats: u32 = 1;
pub const VK_EXT_4444_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_4444_FORMATS_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_4444_formats\0";
pub const VK_EXT_device_fault: u32 = 1;
pub const VK_EXT_DEVICE_FAULT_SPEC_VERSION: u32 = 2;
pub const VK_EXT_DEVICE_FAULT_EXTENSION_NAME: &[u8; 20] = b"VK_EXT_device_fault\0";
pub const VK_ARM_rasterization_order_attachment_access: u32 = 1;
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME: &[u8; 45] =
    b"VK_ARM_rasterization_order_attachment_access\0";
pub const VK_EXT_rgba10x6_formats: u32 = 1;
pub const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_rgba10x6_formats\0";
pub const VK_VALVE_mutable_descriptor_type: u32 = 1;
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME: &[u8; 33] =
    b"VK_VALVE_mutable_descriptor_type\0";
pub const VK_EXT_vertex_input_dynamic_state: u32 = 1;
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION: u32 = 2;
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_vertex_input_dynamic_state\0";
pub const VK_EXT_physical_device_drm: u32 = 1;
pub const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_physical_device_drm\0";
pub const VK_EXT_device_address_binding_report: u32 = 1;
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEVICE_ADDRESS_BINDING_REPORT_EXTENSION_NAME: &[u8; 37] =
    b"VK_EXT_device_address_binding_report\0";
pub const VK_EXT_depth_clip_control: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_depth_clip_control\0";
pub const VK_EXT_primitive_topology_list_restart: u32 = 1;
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME: &[u8; 39] =
    b"VK_EXT_primitive_topology_list_restart\0";
pub const VK_EXT_present_mode_fifo_latest_ready: u32 = 1;
pub const VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRESENT_MODE_FIFO_LATEST_READY_EXTENSION_NAME: &[u8; 38] =
    b"VK_EXT_present_mode_fifo_latest_ready\0";
pub const VK_HUAWEI_subpass_shading: u32 = 1;
pub const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION: u32 = 3;
pub const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME: &[u8; 26] = b"VK_HUAWEI_subpass_shading\0";
pub const VK_HUAWEI_invocation_mask: u32 = 1;
pub const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION: u32 = 1;
pub const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME: &[u8; 26] = b"VK_HUAWEI_invocation_mask\0";
pub const VK_NV_external_memory_rdma: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME: &[u8; 27] = b"VK_NV_external_memory_rdma\0";
pub const VK_EXT_pipeline_properties: u32 = 1;
pub const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_pipeline_properties\0";
pub const VK_EXT_frame_boundary: u32 = 1;
pub const VK_EXT_FRAME_BOUNDARY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_FRAME_BOUNDARY_EXTENSION_NAME: &[u8; 22] = b"VK_EXT_frame_boundary\0";
pub const VK_EXT_multisampled_render_to_single_sampled: u32 = 1;
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME: &[u8; 45] =
    b"VK_EXT_multisampled_render_to_single_sampled\0";
pub const VK_EXT_extended_dynamic_state2: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_extended_dynamic_state2\0";
pub const VK_EXT_color_write_enable: u32 = 1;
pub const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_color_write_enable\0";
pub const VK_EXT_primitives_generated_query: u32 = 1;
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME: &[u8; 34] =
    b"VK_EXT_primitives_generated_query\0";
pub const VK_EXT_global_priority_query: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_global_priority_query\0";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT: u32 = 16;
pub const VK_EXT_image_view_min_lod: u32 = 1;
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_image_view_min_lod\0";
pub const VK_EXT_multi_draw: u32 = 1;
pub const VK_EXT_MULTI_DRAW_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MULTI_DRAW_EXTENSION_NAME: &[u8; 18] = b"VK_EXT_multi_draw\0";
pub const VK_EXT_image_2d_view_of_3d: u32 = 1;
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_image_2d_view_of_3d\0";
pub const VK_EXT_shader_tile_image: u32 = 1;
pub const VK_EXT_SHADER_TILE_IMAGE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_TILE_IMAGE_EXTENSION_NAME: &[u8; 25] = b"VK_EXT_shader_tile_image\0";
pub const VK_EXT_opacity_micromap: u32 = 1;
pub const VK_EXT_OPACITY_MICROMAP_SPEC_VERSION: u32 = 2;
pub const VK_EXT_OPACITY_MICROMAP_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_opacity_micromap\0";
pub const VK_EXT_load_store_op_none: u32 = 1;
pub const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME: &[u8; 26] = b"VK_EXT_load_store_op_none\0";
pub const VK_HUAWEI_cluster_culling_shader: u32 = 1;
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_SPEC_VERSION: u32 = 3;
pub const VK_HUAWEI_CLUSTER_CULLING_SHADER_EXTENSION_NAME: &[u8; 33] =
    b"VK_HUAWEI_cluster_culling_shader\0";
pub const VK_EXT_border_color_swizzle: u32 = 1;
pub const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_border_color_swizzle\0";
pub const VK_EXT_pageable_device_local_memory: u32 = 1;
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME: &[u8; 36] =
    b"VK_EXT_pageable_device_local_memory\0";
pub const VK_ARM_shader_core_properties: u32 = 1;
pub const VK_ARM_SHADER_CORE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_ARM_SHADER_CORE_PROPERTIES_EXTENSION_NAME: &[u8; 30] =
    b"VK_ARM_shader_core_properties\0";
pub const VK_ARM_scheduling_controls: u32 = 1;
pub const VK_ARM_SCHEDULING_CONTROLS_SPEC_VERSION: u32 = 1;
pub const VK_ARM_SCHEDULING_CONTROLS_EXTENSION_NAME: &[u8; 27] = b"VK_ARM_scheduling_controls\0";
pub const VK_EXT_image_sliced_view_of_3d: u32 = 1;
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_SLICED_VIEW_OF_3D_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_image_sliced_view_of_3d\0";
pub const VK_REMAINING_3D_SLICES_EXT: i32 = -1;
pub const VK_VALVE_descriptor_set_host_mapping: u32 = 1;
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION: u32 = 1;
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME: &[u8; 37] =
    b"VK_VALVE_descriptor_set_host_mapping\0";
pub const VK_EXT_depth_clamp_zero_one: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_ZERO_ONE_EXTENSION_NAME: &[u8; 28] = b"VK_EXT_depth_clamp_zero_one\0";
pub const VK_EXT_non_seamless_cube_map: u32 = 1;
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION: u32 = 1;
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_non_seamless_cube_map\0";
pub const VK_ARM_render_pass_striped: u32 = 1;
pub const VK_ARM_RENDER_PASS_STRIPED_SPEC_VERSION: u32 = 1;
pub const VK_ARM_RENDER_PASS_STRIPED_EXTENSION_NAME: &[u8; 27] = b"VK_ARM_render_pass_striped\0";
pub const VK_QCOM_fragment_density_map_offset: u32 = 1;
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION: u32 = 2;
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME: &[u8; 36] =
    b"VK_QCOM_fragment_density_map_offset\0";
pub const VK_NV_copy_memory_indirect: u32 = 1;
pub const VK_NV_COPY_MEMORY_INDIRECT_SPEC_VERSION: u32 = 1;
pub const VK_NV_COPY_MEMORY_INDIRECT_EXTENSION_NAME: &[u8; 27] = b"VK_NV_copy_memory_indirect\0";
pub const VK_NV_memory_decompression: u32 = 1;
pub const VK_NV_MEMORY_DECOMPRESSION_SPEC_VERSION: u32 = 1;
pub const VK_NV_MEMORY_DECOMPRESSION_EXTENSION_NAME: &[u8; 27] = b"VK_NV_memory_decompression\0";
pub const VK_NV_device_generated_commands_compute: u32 = 1;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_SPEC_VERSION: u32 = 2;
pub const VK_NV_DEVICE_GENERATED_COMMANDS_COMPUTE_EXTENSION_NAME: &[u8; 40] =
    b"VK_NV_device_generated_commands_compute\0";
pub const VK_NV_ray_tracing_linear_swept_spheres: u32 = 1;
pub const VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_LINEAR_SWEPT_SPHERES_EXTENSION_NAME: &[u8; 39] =
    b"VK_NV_ray_tracing_linear_swept_spheres\0";
pub const VK_NV_linear_color_attachment: u32 = 1;
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION: u32 = 1;
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME: &[u8; 30] =
    b"VK_NV_linear_color_attachment\0";
pub const VK_GOOGLE_surfaceless_query: u32 = 1;
pub const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION: u32 = 2;
pub const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME: &[u8; 28] = b"VK_GOOGLE_surfaceless_query\0";
pub const VK_EXT_image_compression_control_swapchain: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION: u32 = 1;
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME: &[u8; 43] =
    b"VK_EXT_image_compression_control_swapchain\0";
pub const VK_QCOM_image_processing: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME: &[u8; 25] = b"VK_QCOM_image_processing\0";
pub const VK_EXT_nested_command_buffer: u32 = 1;
pub const VK_EXT_NESTED_COMMAND_BUFFER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_NESTED_COMMAND_BUFFER_EXTENSION_NAME: &[u8; 29] =
    b"VK_EXT_nested_command_buffer\0";
pub const VK_EXT_external_memory_acquire_unmodified: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_SPEC_VERSION: u32 = 1;
pub const VK_EXT_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXTENSION_NAME: &[u8; 42] =
    b"VK_EXT_external_memory_acquire_unmodified\0";
pub const VK_EXT_extended_dynamic_state3: u32 = 1;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_SPEC_VERSION: u32 = 2;
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_3_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_extended_dynamic_state3\0";
pub const VK_EXT_subpass_merge_feedback: u32 = 1;
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION: u32 = 2;
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME: &[u8; 30] =
    b"VK_EXT_subpass_merge_feedback\0";
pub const VK_LUNARG_direct_driver_loading: u32 = 1;
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_SPEC_VERSION: u32 = 1;
pub const VK_LUNARG_DIRECT_DRIVER_LOADING_EXTENSION_NAME: &[u8; 32] =
    b"VK_LUNARG_direct_driver_loading\0";
pub const VK_EXT_shader_module_identifier: u32 = 1;
pub const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT: u32 = 32;
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_shader_module_identifier\0";
pub const VK_EXT_rasterization_order_attachment_access: u32 = 1;
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME: &[u8; 45] =
    b"VK_EXT_rasterization_order_attachment_access\0";
pub const VK_NV_optical_flow: u32 = 1;
pub const VK_NV_OPTICAL_FLOW_SPEC_VERSION: u32 = 1;
pub const VK_NV_OPTICAL_FLOW_EXTENSION_NAME: &[u8; 19] = b"VK_NV_optical_flow\0";
pub const VK_EXT_legacy_dithering: u32 = 1;
pub const VK_EXT_LEGACY_DITHERING_SPEC_VERSION: u32 = 2;
pub const VK_EXT_LEGACY_DITHERING_EXTENSION_NAME: &[u8; 24] = b"VK_EXT_legacy_dithering\0";
pub const VK_EXT_pipeline_protected_access: u32 = 1;
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_PROTECTED_ACCESS_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_pipeline_protected_access\0";
pub const VK_AMD_anti_lag: u32 = 1;
pub const VK_AMD_ANTI_LAG_SPEC_VERSION: u32 = 1;
pub const VK_AMD_ANTI_LAG_EXTENSION_NAME: &[u8; 16] = b"VK_AMD_anti_lag\0";
pub const VK_EXT_shader_object: u32 = 1;
pub const VK_EXT_SHADER_OBJECT_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_OBJECT_EXTENSION_NAME: &[u8; 21] = b"VK_EXT_shader_object\0";
pub const VK_QCOM_tile_properties: u32 = 1;
pub const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME: &[u8; 24] = b"VK_QCOM_tile_properties\0";
pub const VK_SEC_amigo_profiling: u32 = 1;
pub const VK_SEC_AMIGO_PROFILING_SPEC_VERSION: u32 = 1;
pub const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME: &[u8; 23] = b"VK_SEC_amigo_profiling\0";
pub const VK_QCOM_multiview_per_view_viewports: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_VIEWPORTS_EXTENSION_NAME: &[u8; 37] =
    b"VK_QCOM_multiview_per_view_viewports\0";
pub const VK_NV_ray_tracing_invocation_reorder: u32 = 1;
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_INVOCATION_REORDER_EXTENSION_NAME: &[u8; 37] =
    b"VK_NV_ray_tracing_invocation_reorder\0";
pub const VK_NV_cooperative_vector: u32 = 1;
pub const VK_NV_COOPERATIVE_VECTOR_SPEC_VERSION: u32 = 4;
pub const VK_NV_COOPERATIVE_VECTOR_EXTENSION_NAME: &[u8; 25] = b"VK_NV_cooperative_vector\0";
pub const VK_NV_extended_sparse_address_space: u32 = 1;
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_SPEC_VERSION: u32 = 1;
pub const VK_NV_EXTENDED_SPARSE_ADDRESS_SPACE_EXTENSION_NAME: &[u8; 36] =
    b"VK_NV_extended_sparse_address_space\0";
pub const VK_EXT_mutable_descriptor_type: u32 = 1;
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME: &[u8; 31] =
    b"VK_EXT_mutable_descriptor_type\0";
pub const VK_EXT_legacy_vertex_attributes: u32 = 1;
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_LEGACY_VERTEX_ATTRIBUTES_EXTENSION_NAME: &[u8; 32] =
    b"VK_EXT_legacy_vertex_attributes\0";
pub const VK_EXT_layer_settings: u32 = 1;
pub const VK_EXT_LAYER_SETTINGS_SPEC_VERSION: u32 = 2;
pub const VK_EXT_LAYER_SETTINGS_EXTENSION_NAME: &[u8; 22] = b"VK_EXT_layer_settings\0";
pub const VK_ARM_shader_core_builtins: u32 = 1;
pub const VK_ARM_SHADER_CORE_BUILTINS_SPEC_VERSION: u32 = 2;
pub const VK_ARM_SHADER_CORE_BUILTINS_EXTENSION_NAME: &[u8; 28] = b"VK_ARM_shader_core_builtins\0";
pub const VK_EXT_pipeline_library_group_handles: u32 = 1;
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_PIPELINE_LIBRARY_GROUP_HANDLES_EXTENSION_NAME: &[u8; 38] =
    b"VK_EXT_pipeline_library_group_handles\0";
pub const VK_EXT_dynamic_rendering_unused_attachments: u32 = 1;
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_EXTENSION_NAME: &[u8; 44] =
    b"VK_EXT_dynamic_rendering_unused_attachments\0";
pub const VK_NV_low_latency2: u32 = 1;
pub const VK_NV_LOW_LATENCY_2_SPEC_VERSION: u32 = 2;
pub const VK_NV_LOW_LATENCY_2_EXTENSION_NAME: &[u8; 19] = b"VK_NV_low_latency2\0";
pub const VK_QCOM_multiview_per_view_render_areas: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_MULTIVIEW_PER_VIEW_RENDER_AREAS_EXTENSION_NAME: &[u8; 40] =
    b"VK_QCOM_multiview_per_view_render_areas\0";
pub const VK_NV_per_stage_descriptor_set: u32 = 1;
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_SPEC_VERSION: u32 = 1;
pub const VK_NV_PER_STAGE_DESCRIPTOR_SET_EXTENSION_NAME: &[u8; 31] =
    b"VK_NV_per_stage_descriptor_set\0";
pub const VK_QCOM_image_processing2: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_2_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_IMAGE_PROCESSING_2_EXTENSION_NAME: &[u8; 26] = b"VK_QCOM_image_processing2\0";
pub const VK_QCOM_filter_cubic_weights: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_WEIGHTS_EXTENSION_NAME: &[u8; 29] =
    b"VK_QCOM_filter_cubic_weights\0";
pub const VK_QCOM_ycbcr_degamma: u32 = 1;
pub const VK_QCOM_YCBCR_DEGAMMA_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_YCBCR_DEGAMMA_EXTENSION_NAME: &[u8; 22] = b"VK_QCOM_ycbcr_degamma\0";
pub const VK_QCOM_filter_cubic_clamp: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_CLAMP_SPEC_VERSION: u32 = 1;
pub const VK_QCOM_FILTER_CUBIC_CLAMP_EXTENSION_NAME: &[u8; 27] = b"VK_QCOM_filter_cubic_clamp\0";
pub const VK_EXT_attachment_feedback_loop_dynamic_state: u32 = 1;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_SPEC_VERSION: u32 = 1;
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_EXTENSION_NAME: &[u8; 46] =
    b"VK_EXT_attachment_feedback_loop_dynamic_state\0";
pub const VK_MSFT_layered_driver: u32 = 1;
pub const VK_MSFT_LAYERED_DRIVER_SPEC_VERSION: u32 = 1;
pub const VK_MSFT_LAYERED_DRIVER_EXTENSION_NAME: &[u8; 23] = b"VK_MSFT_layered_driver\0";
pub const VK_NV_descriptor_pool_overallocation: u32 = 1;
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_DESCRIPTOR_POOL_OVERALLOCATION_EXTENSION_NAME: &[u8; 37] =
    b"VK_NV_descriptor_pool_overallocation\0";
pub const VK_NV_display_stereo: u32 = 1;
pub const VK_NV_DISPLAY_STEREO_SPEC_VERSION: u32 = 1;
pub const VK_NV_DISPLAY_STEREO_EXTENSION_NAME: &[u8; 21] = b"VK_NV_display_stereo\0";
pub const VK_NV_raw_access_chains: u32 = 1;
pub const VK_NV_RAW_ACCESS_CHAINS_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAW_ACCESS_CHAINS_EXTENSION_NAME: &[u8; 24] = b"VK_NV_raw_access_chains\0";
pub const VK_NV_command_buffer_inheritance: u32 = 1;
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_SPEC_VERSION: u32 = 1;
pub const VK_NV_COMMAND_BUFFER_INHERITANCE_EXTENSION_NAME: &[u8; 33] =
    b"VK_NV_command_buffer_inheritance\0";
pub const VK_NV_shader_atomic_float16_vector: u32 = 1;
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_SPEC_VERSION: u32 = 1;
pub const VK_NV_SHADER_ATOMIC_FLOAT16_VECTOR_EXTENSION_NAME: &[u8; 35] =
    b"VK_NV_shader_atomic_float16_vector\0";
pub const VK_EXT_shader_replicated_composites: u32 = 1;
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_SPEC_VERSION: u32 = 1;
pub const VK_EXT_SHADER_REPLICATED_COMPOSITES_EXTENSION_NAME: &[u8; 36] =
    b"VK_EXT_shader_replicated_composites\0";
pub const VK_NV_ray_tracing_validation: u32 = 1;
pub const VK_NV_RAY_TRACING_VALIDATION_SPEC_VERSION: u32 = 1;
pub const VK_NV_RAY_TRACING_VALIDATION_EXTENSION_NAME: &[u8; 29] =
    b"VK_NV_ray_tracing_validation\0";
pub const VK_NV_cluster_acceleration_structure: u32 = 1;
pub const VK_NV_CLUSTER_ACCELERATION_STRUCTURE_SPEC_VERSION: u32 = 2;
pub const VK_NV_CLUSTER_ACCELERATION_STRUCTURE_EXTENSION_NAME: &[u8; 37] =
    b"VK_NV_cluster_acceleration_structure\0";
pub const VK_NV_partitioned_acceleration_structure: u32 = 1;
pub const VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_SPEC_VERSION: u32 = 1;
pub const VK_NV_PARTITIONED_ACCELERATION_STRUCTURE_EXTENSION_NAME: &[u8; 41] =
    b"VK_NV_partitioned_acceleration_structure\0";
pub const VK_PARTITIONED_ACCELERATION_STRUCTURE_PARTITION_INDEX_GLOBAL_NV: i32 = -1;
pub const VK_EXT_device_generated_commands: u32 = 1;
pub const VK_EXT_DEVICE_GENERATED_COMMANDS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME: &[u8; 33] =
    b"VK_EXT_device_generated_commands\0";
pub const VK_MESA_image_alignment_control: u32 = 1;
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_MESA_IMAGE_ALIGNMENT_CONTROL_EXTENSION_NAME: &[u8; 32] =
    b"VK_MESA_image_alignment_control\0";
pub const VK_EXT_depth_clamp_control: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_CONTROL_SPEC_VERSION: u32 = 1;
pub const VK_EXT_DEPTH_CLAMP_CONTROL_EXTENSION_NAME: &[u8; 27] = b"VK_EXT_depth_clamp_control\0";
pub const VK_HUAWEI_hdr_vivid: u32 = 1;
pub const VK_HUAWEI_HDR_VIVID_SPEC_VERSION: u32 = 1;
pub const VK_HUAWEI_HDR_VIVID_EXTENSION_NAME: &[u8; 20] = b"VK_HUAWEI_hdr_vivid\0";
pub const VK_NV_cooperative_matrix2: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_2_SPEC_VERSION: u32 = 1;
pub const VK_NV_COOPERATIVE_MATRIX_2_EXTENSION_NAME: &[u8; 26] = b"VK_NV_cooperative_matrix2\0";
pub const VK_ARM_pipeline_opacity_micromap: u32 = 1;
pub const VK_ARM_PIPELINE_OPACITY_MICROMAP_SPEC_VERSION: u32 = 1;
pub const VK_ARM_PIPELINE_OPACITY_MICROMAP_EXTENSION_NAME: &[u8; 33] =
    b"VK_ARM_pipeline_opacity_micromap\0";
pub const VK_EXT_vertex_attribute_robustness: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_SPEC_VERSION: u32 = 1;
pub const VK_EXT_VERTEX_ATTRIBUTE_ROBUSTNESS_EXTENSION_NAME: &[u8; 35] =
    b"VK_EXT_vertex_attribute_robustness\0";
pub const VK_NV_present_metering: u32 = 1;
pub const VK_NV_PRESENT_METERING_SPEC_VERSION: u32 = 1;
pub const VK_NV_PRESENT_METERING_EXTENSION_NAME: &[u8; 23] = b"VK_NV_present_metering\0";
pub const VK_KHR_acceleration_structure: u32 = 1;
pub const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION: u32 = 13;
pub const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME: &[u8; 30] =
    b"VK_KHR_acceleration_structure\0";
pub const VK_KHR_ray_tracing_pipeline: u32 = 1;
pub const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME: &[u8; 28] = b"VK_KHR_ray_tracing_pipeline\0";
pub const VK_KHR_ray_query: u32 = 1;
pub const VK_KHR_RAY_QUERY_SPEC_VERSION: u32 = 1;
pub const VK_KHR_RAY_QUERY_EXTENSION_NAME: &[u8; 17] = b"VK_KHR_ray_query\0";
pub const VK_EXT_mesh_shader: u32 = 1;
pub const VK_EXT_MESH_SHADER_SPEC_VERSION: u32 = 1;
pub const VK_EXT_MESH_SHADER_EXTENSION_NAME: &[u8; 19] = b"VK_EXT_mesh_shader\0";
pub const EVENTQUEUE_SUPPORTS_EVENT_CLEANUP: u32 = 1;
pub type std_nullptr_t = *const ::std::os::raw::c_void;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[repr(align(16))]
#[derive(Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct UnityInterfaceGUID {
    pub m_GUIDHigh: ::std::os::raw::c_ulonglong,
    pub m_GUIDLow: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityInterfaceGUID"][::std::mem::size_of::<UnityInterfaceGUID>() - 16usize];
    ["Alignment of UnityInterfaceGUID"][::std::mem::align_of::<UnityInterfaceGUID>() - 8usize];
    ["Offset of field: UnityInterfaceGUID::m_GUIDHigh"]
        [::std::mem::offset_of!(UnityInterfaceGUID, m_GUIDHigh) - 0usize];
    ["Offset of field: UnityInterfaceGUID::m_GUIDLow"]
        [::std::mem::offset_of!(UnityInterfaceGUID, m_GUIDLow) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityInterface {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityInterface"][::std::mem::size_of::<IUnityInterface>() - 1usize];
    ["Alignment of IUnityInterface"][::std::mem::align_of::<IUnityInterface>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityInterfaces {
    pub GetInterface: ::std::option::Option<
        unsafe extern "system" fn(guid: UnityInterfaceGUID) -> *mut IUnityInterface,
    >,
    pub RegisterInterface: ::std::option::Option<
        unsafe extern "system" fn(guid: UnityInterfaceGUID, ptr: *mut IUnityInterface),
    >,
    pub GetInterfaceSplit: ::std::option::Option<
        unsafe extern "system" fn(
            guidHigh: ::std::os::raw::c_ulonglong,
            guidLow: ::std::os::raw::c_ulonglong,
        ) -> *mut IUnityInterface,
    >,
    pub RegisterInterfaceSplit: ::std::option::Option<
        unsafe extern "system" fn(
            guidHigh: ::std::os::raw::c_ulonglong,
            guidLow: ::std::os::raw::c_ulonglong,
            ptr: *mut IUnityInterface,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityInterfaces"][::std::mem::size_of::<IUnityInterfaces>() - 32usize];
    ["Alignment of IUnityInterfaces"][::std::mem::align_of::<IUnityInterfaces>() - 8usize];
    ["Offset of field: IUnityInterfaces::GetInterface"]
        [::std::mem::offset_of!(IUnityInterfaces, GetInterface) - 0usize];
    ["Offset of field: IUnityInterfaces::RegisterInterface"]
        [::std::mem::offset_of!(IUnityInterfaces, RegisterInterface) - 8usize];
    ["Offset of field: IUnityInterfaces::GetInterfaceSplit"]
        [::std::mem::offset_of!(IUnityInterfaces, GetInterfaceSplit) - 16usize];
    ["Offset of field: IUnityInterfaces::RegisterInterfaceSplit"]
        [::std::mem::offset_of!(IUnityInterfaces, RegisterInterfaceSplit) - 24usize];
};
unsafe extern "system" {
    pub fn UnityPluginLoad(unityInterfaces: *mut IUnityInterfaces);
}
unsafe extern "system" {
    pub fn UnityPluginUnload();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RenderSurfaceBase {
    _unused: [u8; 0],
}
pub type UnityRenderBuffer = *mut RenderSurfaceBase;
pub type UnityTextureID = ::std::os::raw::c_uint;
pub const UnityGfxRenderer_kUnityGfxRendererD3D11: UnityGfxRenderer = 2;
pub const UnityGfxRenderer_kUnityGfxRendererNull: UnityGfxRenderer = 4;
pub const UnityGfxRenderer_kUnityGfxRendererOpenGLES30: UnityGfxRenderer = 11;
pub const UnityGfxRenderer_kUnityGfxRendererPS4: UnityGfxRenderer = 13;
pub const UnityGfxRenderer_kUnityGfxRendererXboxOne: UnityGfxRenderer = 14;
pub const UnityGfxRenderer_kUnityGfxRendererMetal: UnityGfxRenderer = 16;
pub const UnityGfxRenderer_kUnityGfxRendererOpenGLCore: UnityGfxRenderer = 17;
pub const UnityGfxRenderer_kUnityGfxRendererD3D12: UnityGfxRenderer = 18;
pub const UnityGfxRenderer_kUnityGfxRendererVulkan: UnityGfxRenderer = 21;
pub const UnityGfxRenderer_kUnityGfxRendererNvn: UnityGfxRenderer = 22;
pub const UnityGfxRenderer_kUnityGfxRendererXboxOneD3D12: UnityGfxRenderer = 23;
pub const UnityGfxRenderer_kUnityGfxRendererGameCoreXboxOne: UnityGfxRenderer = 24;
pub const UnityGfxRenderer_kUnityGfxRendererGameCoreXboxSeries: UnityGfxRenderer = 25;
pub const UnityGfxRenderer_kUnityGfxRendererPS5: UnityGfxRenderer = 26;
pub const UnityGfxRenderer_kUnityGfxRendererPS5NGGC: UnityGfxRenderer = 27;
pub const UnityGfxRenderer_kUnityGfxRendererReservedCFE: UnityGfxRenderer = 29;
pub type UnityGfxRenderer = ::std::os::raw::c_uint;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventInitialize: UnityGfxDeviceEventType = 0;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventShutdown: UnityGfxDeviceEventType = 1;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventBeforeReset: UnityGfxDeviceEventType = 2;
pub const UnityGfxDeviceEventType_kUnityGfxDeviceEventAfterReset: UnityGfxDeviceEventType = 3;
pub type UnityGfxDeviceEventType = ::std::os::raw::c_uint;
pub type IUnityGraphicsDeviceEventCallback =
    ::std::option::Option<unsafe extern "system" fn(eventType: UnityGfxDeviceEventType)>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphics {
    pub GetRenderer: ::std::option::Option<unsafe extern "system" fn() -> UnityGfxRenderer>,
    pub RegisterDeviceEventCallback:
        ::std::option::Option<unsafe extern "system" fn(callback: IUnityGraphicsDeviceEventCallback)>,
    pub UnregisterDeviceEventCallback:
        ::std::option::Option<unsafe extern "system" fn(callback: IUnityGraphicsDeviceEventCallback)>,
    pub ReserveEventIDRange: ::std::option::Option<
        unsafe extern "system" fn(count: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphics"][::std::mem::size_of::<IUnityGraphics>() - 32usize];
    ["Alignment of IUnityGraphics"][::std::mem::align_of::<IUnityGraphics>() - 8usize];
    ["Offset of field: IUnityGraphics::GetRenderer"]
        [::std::mem::offset_of!(IUnityGraphics, GetRenderer) - 0usize];
    ["Offset of field: IUnityGraphics::RegisterDeviceEventCallback"]
        [::std::mem::offset_of!(IUnityGraphics, RegisterDeviceEventCallback) - 8usize];
    ["Offset of field: IUnityGraphics::UnregisterDeviceEventCallback"]
        [::std::mem::offset_of!(IUnityGraphics, UnregisterDeviceEventCallback) - 16usize];
    ["Offset of field: IUnityGraphics::ReserveEventIDRange"]
        [::std::mem::offset_of!(IUnityGraphics, ReserveEventIDRange) - 24usize];
};
pub type UnityRenderingEvent =
    ::std::option::Option<unsafe extern "system" fn(eventId: ::std::os::raw::c_int)>;
pub type UnityRenderingEventAndData = ::std::option::Option<
    unsafe extern "system" fn(eventId: ::std::os::raw::c_int, data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11Device {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D11Device"][::std::mem::size_of::<ID3D11Device>() - 1usize];
    ["Alignment of ID3D11Device"][::std::mem::align_of::<ID3D11Device>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11Resource {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D11Resource"][::std::mem::size_of::<ID3D11Resource>() - 1usize];
    ["Alignment of ID3D11Resource"][::std::mem::align_of::<ID3D11Resource>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11RenderTargetView {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D11RenderTargetView"][::std::mem::size_of::<ID3D11RenderTargetView>() - 1usize];
    ["Alignment of ID3D11RenderTargetView"]
        [::std::mem::align_of::<ID3D11RenderTargetView>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D11ShaderResourceView {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D11ShaderResourceView"]
        [::std::mem::size_of::<ID3D11ShaderResourceView>() - 1usize];
    ["Alignment of ID3D11ShaderResourceView"]
        [::std::mem::align_of::<ID3D11ShaderResourceView>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IDXGISwapChain {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IDXGISwapChain"][::std::mem::size_of::<IDXGISwapChain>() - 1usize];
    ["Alignment of IDXGISwapChain"][::std::mem::align_of::<IDXGISwapChain>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D11 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D11Device>,
    pub TextureFromRenderBuffer: ::std::option::Option<
        unsafe extern "system" fn(buffer: UnityRenderBuffer) -> *mut ID3D11Resource,
    >,
    pub TextureFromNativeTexture:
        ::std::option::Option<unsafe extern "system" fn(texture: UnityTextureID) -> *mut ID3D11Resource>,
    pub RTVFromRenderBuffer: ::std::option::Option<
        unsafe extern "system" fn(surface: UnityRenderBuffer) -> *mut ID3D11RenderTargetView,
    >,
    pub SRVFromNativeTexture: ::std::option::Option<
        unsafe extern "system" fn(texture: UnityTextureID) -> *mut ID3D11ShaderResourceView,
    >,
    pub GetSwapChain: ::std::option::Option<unsafe extern "system" fn() -> *mut IDXGISwapChain>,
    pub GetSyncInterval: ::std::option::Option<unsafe extern "system" fn() -> u32>,
    pub GetPresentFlags: ::std::option::Option<unsafe extern "system" fn() -> u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D11"][::std::mem::size_of::<IUnityGraphicsD3D11>() - 64usize];
    ["Alignment of IUnityGraphicsD3D11"][::std::mem::align_of::<IUnityGraphicsD3D11>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D11::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D11::TextureFromRenderBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, TextureFromRenderBuffer) - 8usize];
    ["Offset of field: IUnityGraphicsD3D11::TextureFromNativeTexture"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, TextureFromNativeTexture) - 16usize];
    ["Offset of field: IUnityGraphicsD3D11::RTVFromRenderBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, RTVFromRenderBuffer) - 24usize];
    ["Offset of field: IUnityGraphicsD3D11::SRVFromNativeTexture"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, SRVFromNativeTexture) - 32usize];
    ["Offset of field: IUnityGraphicsD3D11::GetSwapChain"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, GetSwapChain) - 40usize];
    ["Offset of field: IUnityGraphicsD3D11::GetSyncInterval"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, GetSyncInterval) - 48usize];
    ["Offset of field: IUnityGraphicsD3D11::GetPresentFlags"]
        [::std::mem::offset_of!(IUnityGraphicsD3D11, GetPresentFlags) - 56usize];
};
pub type D3D12_RESOURCE_STATES = ::std::os::raw::c_int;
pub type UINT64 = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12Resource {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D12Resource"][::std::mem::size_of::<ID3D12Resource>() - 1usize];
    ["Alignment of ID3D12Resource"][::std::mem::align_of::<ID3D12Resource>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12Device {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D12Device"][::std::mem::size_of::<ID3D12Device>() - 1usize];
    ["Alignment of ID3D12Device"][::std::mem::align_of::<ID3D12Device>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12Fence {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D12Fence"][::std::mem::size_of::<ID3D12Fence>() - 1usize];
    ["Alignment of ID3D12Fence"][::std::mem::align_of::<ID3D12Fence>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12GraphicsCommandList {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D12GraphicsCommandList"]
        [::std::mem::size_of::<ID3D12GraphicsCommandList>() - 1usize];
    ["Alignment of ID3D12GraphicsCommandList"]
        [::std::mem::align_of::<ID3D12GraphicsCommandList>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct ID3D12CommandQueue {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ID3D12CommandQueue"][::std::mem::size_of::<ID3D12CommandQueue>() - 1usize];
    ["Alignment of ID3D12CommandQueue"][::std::mem::align_of::<ID3D12CommandQueue>() - 1usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityGraphicsD3D12ResourceState {
    pub resource: *mut ID3D12Resource,
    pub expected: D3D12_RESOURCE_STATES,
    pub current: D3D12_RESOURCE_STATES,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityGraphicsD3D12ResourceState"]
        [::std::mem::size_of::<UnityGraphicsD3D12ResourceState>() - 16usize];
    ["Alignment of UnityGraphicsD3D12ResourceState"]
        [::std::mem::align_of::<UnityGraphicsD3D12ResourceState>() - 8usize];
    ["Offset of field: UnityGraphicsD3D12ResourceState::resource"]
        [::std::mem::offset_of!(UnityGraphicsD3D12ResourceState, resource) - 0usize];
    ["Offset of field: UnityGraphicsD3D12ResourceState::expected"]
        [::std::mem::offset_of!(UnityGraphicsD3D12ResourceState, expected) - 8usize];
    ["Offset of field: UnityGraphicsD3D12ResourceState::current"]
        [::std::mem::offset_of!(UnityGraphicsD3D12ResourceState, current) - 12usize];
};
impl Default for UnityGraphicsD3D12ResourceState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityGraphicsD3D12RecordingState {
    pub commandList: *mut ID3D12GraphicsCommandList,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityGraphicsD3D12RecordingState"]
        [::std::mem::size_of::<UnityGraphicsD3D12RecordingState>() - 8usize];
    ["Alignment of UnityGraphicsD3D12RecordingState"]
        [::std::mem::align_of::<UnityGraphicsD3D12RecordingState>() - 8usize];
    ["Offset of field: UnityGraphicsD3D12RecordingState::commandList"]
        [::std::mem::offset_of!(UnityGraphicsD3D12RecordingState, commandList) - 0usize];
};
impl Default for UnityGraphicsD3D12RecordingState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const UnityD3D12GraphicsQueueAccess_kUnityD3D12GraphicsQueueAccess_DontCare:
    UnityD3D12GraphicsQueueAccess = 0;
pub const UnityD3D12GraphicsQueueAccess_kUnityD3D12GraphicsQueueAccess_Allow:
    UnityD3D12GraphicsQueueAccess = 1;
pub type UnityD3D12GraphicsQueueAccess = ::std::os::raw::c_uint;
pub const UnityD3D12EventConfigFlagBits_kUnityD3D12EventConfigFlag_EnsurePreviousFrameSubmission:
    UnityD3D12EventConfigFlagBits = 1;
pub const UnityD3D12EventConfigFlagBits_kUnityD3D12EventConfigFlag_FlushCommandBuffers:
    UnityD3D12EventConfigFlagBits = 2;
pub const UnityD3D12EventConfigFlagBits_kUnityD3D12EventConfigFlag_SyncWorkerThreads:
    UnityD3D12EventConfigFlagBits = 4;
pub const UnityD3D12EventConfigFlagBits_kUnityD3D12EventConfigFlag_ModifiesCommandBuffersState:
    UnityD3D12EventConfigFlagBits = 8;
pub type UnityD3D12EventConfigFlagBits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityD3D12PluginEventConfig {
    pub graphicsQueueAccess: UnityD3D12GraphicsQueueAccess,
    pub flags: u32,
    pub ensureActiveRenderTextureIsBound: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityD3D12PluginEventConfig"]
        [::std::mem::size_of::<UnityD3D12PluginEventConfig>() - 12usize];
    ["Alignment of UnityD3D12PluginEventConfig"]
        [::std::mem::align_of::<UnityD3D12PluginEventConfig>() - 4usize];
    ["Offset of field: UnityD3D12PluginEventConfig::graphicsQueueAccess"]
        [::std::mem::offset_of!(UnityD3D12PluginEventConfig, graphicsQueueAccess) - 0usize];
    ["Offset of field: UnityD3D12PluginEventConfig::flags"]
        [::std::mem::offset_of!(UnityD3D12PluginEventConfig, flags) - 4usize];
    ["Offset of field: UnityD3D12PluginEventConfig::ensureActiveRenderTextureIsBound"][::std::mem::offset_of!(
        UnityD3D12PluginEventConfig,
        ensureActiveRenderTextureIsBound
    ) - 8usize];
};
impl Default for UnityD3D12PluginEventConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct UnityGraphicsD3D12PhysicalVideoMemoryControlValues {
    pub reservation: UINT64,
    pub systemMemoryThreshold: UINT64,
    pub residencyHysteresisThreshold: UINT64,
    pub nonEvictableRelativeThreshold: f32,
}
// Bindgen assertions temporarily disabled due to size mismatch
/*
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityGraphicsD3D12PhysicalVideoMemoryControlValues"]
        [::std::mem::size_of::<UnityGraphicsD3D12PhysicalVideoMemoryControlValues>() - 32usize];
    ["Alignment of UnityGraphicsD3D12PhysicalVideoMemoryControlValues"]
        [::std::mem::align_of::<UnityGraphicsD3D12PhysicalVideoMemoryControlValues>() - 8usize];
    ["Offset of field: UnityGraphicsD3D12PhysicalVideoMemoryControlValues::reservation"][::std::mem::offset_of!(
        UnityGraphicsD3D12PhysicalVideoMemoryControlValues,
        reservation
    )
        - 0usize];
    ["Offset of field: UnityGraphicsD3D12PhysicalVideoMemoryControlValues::systemMemoryThreshold"] [:: std :: mem :: offset_of ! (UnityGraphicsD3D12PhysicalVideoMemoryControlValues , systemMemoryThreshold) - 8usize] ;
    ["Offset of field: UnityGraphicsD3D12PhysicalVideoMemoryControlValues::residencyHysteresisThreshold"] [:: std :: mem :: offset_of ! (UnityGraphicsD3D12PhysicalVideoMemoryControlValues , residencyHysteresisThreshold) - 16usize] ;
    ["Offset of field: UnityGraphicsD3D12PhysicalVideoMemoryControlValues::nonEvictableRelativeThreshold"] [:: std :: mem :: offset_of ! (UnityGraphicsD3D12PhysicalVideoMemoryControlValues , nonEvictableRelativeThreshold) - 24usize] ;
};
*/
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v8 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetSwapChain: ::std::option::Option<unsafe extern "system" fn() -> *mut IDXGISwapChain>,
    pub GetSyncInterval: ::std::option::Option<unsafe extern "system" fn() -> u32>,
    pub GetPresentFlags: ::std::option::Option<unsafe extern "system" fn() -> u32>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
    pub TextureFromRenderBuffer:
        ::std::option::Option<unsafe extern "system" fn(rb: UnityRenderBuffer) -> *mut ID3D12Resource>,
    pub TextureFromNativeTexture:
        ::std::option::Option<unsafe extern "system" fn(texture: UnityTextureID) -> *mut ID3D12Resource>,
    pub ConfigureEvent: ::std::option::Option<
        unsafe extern "system" fn(
            eventID: ::std::os::raw::c_int,
            pluginEventConfig: *const UnityD3D12PluginEventConfig,
        ),
    >,
    pub CommandRecordingState: ::std::option::Option<
        unsafe extern "system" fn(
            outCommandRecordingState: *mut UnityGraphicsD3D12RecordingState,
        ) -> bool,
    >,
    pub RequestResourceState: ::std::option::Option<
        unsafe extern "system" fn(resource: *mut ID3D12Resource, state: D3D12_RESOURCE_STATES),
    >,
    pub NotifyResourceState: ::std::option::Option<
        unsafe extern "system" fn(
            resource: *mut ID3D12Resource,
            state: D3D12_RESOURCE_STATES,
            UAVAccess: bool,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12v8"][::std::mem::size_of::<IUnityGraphicsD3D12v8>() - 120usize];
    ["Alignment of IUnityGraphicsD3D12v8"]
        [::std::mem::align_of::<IUnityGraphicsD3D12v8>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v8::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12v8::GetSwapChain"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, GetSwapChain) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v8::GetSyncInterval"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, GetSyncInterval) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12v8::GetPresentFlags"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, GetPresentFlags) - 24usize];
    ["Offset of field: IUnityGraphicsD3D12v8::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, GetFrameFence) - 32usize];
    ["Offset of field: IUnityGraphicsD3D12v8::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, GetNextFrameFenceValue) - 40usize];
    ["Offset of field: IUnityGraphicsD3D12v8::ExecuteCommandList"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, ExecuteCommandList) - 48usize];
    ["Offset of field: IUnityGraphicsD3D12v8::SetPhysicalVideoMemoryControlValues"][::std::mem::offset_of!(
        IUnityGraphicsD3D12v8,
        SetPhysicalVideoMemoryControlValues
    ) - 56usize];
    ["Offset of field: IUnityGraphicsD3D12v8::GetCommandQueue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, GetCommandQueue) - 64usize];
    ["Offset of field: IUnityGraphicsD3D12v8::TextureFromRenderBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, TextureFromRenderBuffer) - 72usize];
    ["Offset of field: IUnityGraphicsD3D12v8::TextureFromNativeTexture"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, TextureFromNativeTexture) - 80usize];
    ["Offset of field: IUnityGraphicsD3D12v8::ConfigureEvent"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, ConfigureEvent) - 88usize];
    ["Offset of field: IUnityGraphicsD3D12v8::CommandRecordingState"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, CommandRecordingState) - 96usize];
    ["Offset of field: IUnityGraphicsD3D12v8::RequestResourceState"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, RequestResourceState) - 104usize];
    ["Offset of field: IUnityGraphicsD3D12v8::NotifyResourceState"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v8, NotifyResourceState) - 112usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v7 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetSwapChain: ::std::option::Option<unsafe extern "system" fn() -> *mut IDXGISwapChain>,
    pub GetSyncInterval: ::std::option::Option<unsafe extern "system" fn() -> u32>,
    pub GetPresentFlags: ::std::option::Option<unsafe extern "system" fn() -> u32>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
    pub TextureFromRenderBuffer:
        ::std::option::Option<unsafe extern "system" fn(rb: UnityRenderBuffer) -> *mut ID3D12Resource>,
    pub TextureFromNativeTexture:
        ::std::option::Option<unsafe extern "system" fn(texture: UnityTextureID) -> *mut ID3D12Resource>,
    pub ConfigureEvent: ::std::option::Option<
        unsafe extern "system" fn(
            eventID: ::std::os::raw::c_int,
            pluginEventConfig: *const UnityD3D12PluginEventConfig,
        ),
    >,
    pub CommandRecordingState: ::std::option::Option<
        unsafe extern "system" fn(
            outCommandRecordingState: *mut UnityGraphicsD3D12RecordingState,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12v7"][::std::mem::size_of::<IUnityGraphicsD3D12v7>() - 104usize];
    ["Alignment of IUnityGraphicsD3D12v7"]
        [::std::mem::align_of::<IUnityGraphicsD3D12v7>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v7::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12v7::GetSwapChain"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, GetSwapChain) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v7::GetSyncInterval"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, GetSyncInterval) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12v7::GetPresentFlags"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, GetPresentFlags) - 24usize];
    ["Offset of field: IUnityGraphicsD3D12v7::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, GetFrameFence) - 32usize];
    ["Offset of field: IUnityGraphicsD3D12v7::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, GetNextFrameFenceValue) - 40usize];
    ["Offset of field: IUnityGraphicsD3D12v7::ExecuteCommandList"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, ExecuteCommandList) - 48usize];
    ["Offset of field: IUnityGraphicsD3D12v7::SetPhysicalVideoMemoryControlValues"][::std::mem::offset_of!(
        IUnityGraphicsD3D12v7,
        SetPhysicalVideoMemoryControlValues
    ) - 56usize];
    ["Offset of field: IUnityGraphicsD3D12v7::GetCommandQueue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, GetCommandQueue) - 64usize];
    ["Offset of field: IUnityGraphicsD3D12v7::TextureFromRenderBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, TextureFromRenderBuffer) - 72usize];
    ["Offset of field: IUnityGraphicsD3D12v7::TextureFromNativeTexture"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, TextureFromNativeTexture) - 80usize];
    ["Offset of field: IUnityGraphicsD3D12v7::ConfigureEvent"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, ConfigureEvent) - 88usize];
    ["Offset of field: IUnityGraphicsD3D12v7::CommandRecordingState"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v7, CommandRecordingState) - 96usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v6 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
    pub TextureFromRenderBuffer:
        ::std::option::Option<unsafe extern "system" fn(rb: UnityRenderBuffer) -> *mut ID3D12Resource>,
    pub TextureFromNativeTexture:
        ::std::option::Option<unsafe extern "system" fn(texture: UnityTextureID) -> *mut ID3D12Resource>,
    pub ConfigureEvent: ::std::option::Option<
        unsafe extern "system" fn(
            eventID: ::std::os::raw::c_int,
            pluginEventConfig: *const UnityD3D12PluginEventConfig,
        ),
    >,
    pub CommandRecordingState: ::std::option::Option<
        unsafe extern "system" fn(
            outCommandRecordingState: *mut UnityGraphicsD3D12RecordingState,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12v6"][::std::mem::size_of::<IUnityGraphicsD3D12v6>() - 80usize];
    ["Alignment of IUnityGraphicsD3D12v6"]
        [::std::mem::align_of::<IUnityGraphicsD3D12v6>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v6::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12v6::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, GetFrameFence) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v6::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, GetNextFrameFenceValue) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12v6::ExecuteCommandList"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, ExecuteCommandList) - 24usize];
    ["Offset of field: IUnityGraphicsD3D12v6::SetPhysicalVideoMemoryControlValues"][::std::mem::offset_of!(
        IUnityGraphicsD3D12v6,
        SetPhysicalVideoMemoryControlValues
    ) - 32usize];
    ["Offset of field: IUnityGraphicsD3D12v6::GetCommandQueue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, GetCommandQueue) - 40usize];
    ["Offset of field: IUnityGraphicsD3D12v6::TextureFromRenderBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, TextureFromRenderBuffer) - 48usize];
    ["Offset of field: IUnityGraphicsD3D12v6::TextureFromNativeTexture"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, TextureFromNativeTexture) - 56usize];
    ["Offset of field: IUnityGraphicsD3D12v6::ConfigureEvent"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, ConfigureEvent) - 64usize];
    ["Offset of field: IUnityGraphicsD3D12v6::CommandRecordingState"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v6, CommandRecordingState) - 72usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v5 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
    pub TextureFromRenderBuffer:
        ::std::option::Option<unsafe extern "system" fn(rb: UnityRenderBuffer) -> *mut ID3D12Resource>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12v5"][::std::mem::size_of::<IUnityGraphicsD3D12v5>() - 56usize];
    ["Alignment of IUnityGraphicsD3D12v5"]
        [::std::mem::align_of::<IUnityGraphicsD3D12v5>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v5::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v5, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12v5::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v5, GetFrameFence) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v5::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v5, GetNextFrameFenceValue) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12v5::ExecuteCommandList"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v5, ExecuteCommandList) - 24usize];
    ["Offset of field: IUnityGraphicsD3D12v5::SetPhysicalVideoMemoryControlValues"][::std::mem::offset_of!(
        IUnityGraphicsD3D12v5,
        SetPhysicalVideoMemoryControlValues
    ) - 32usize];
    ["Offset of field: IUnityGraphicsD3D12v5::GetCommandQueue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v5, GetCommandQueue) - 40usize];
    ["Offset of field: IUnityGraphicsD3D12v5::TextureFromRenderBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v5, TextureFromRenderBuffer) - 48usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v4 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12v4"][::std::mem::size_of::<IUnityGraphicsD3D12v4>() - 48usize];
    ["Alignment of IUnityGraphicsD3D12v4"]
        [::std::mem::align_of::<IUnityGraphicsD3D12v4>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v4::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v4, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12v4::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v4, GetFrameFence) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v4::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v4, GetNextFrameFenceValue) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12v4::ExecuteCommandList"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v4, ExecuteCommandList) - 24usize];
    ["Offset of field: IUnityGraphicsD3D12v4::SetPhysicalVideoMemoryControlValues"][::std::mem::offset_of!(
        IUnityGraphicsD3D12v4,
        SetPhysicalVideoMemoryControlValues
    ) - 32usize];
    ["Offset of field: IUnityGraphicsD3D12v4::GetCommandQueue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v4, GetCommandQueue) - 40usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v3 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
    pub SetPhysicalVideoMemoryControlValues: ::std::option::Option<
        unsafe extern "system" fn(memInfo: *const UnityGraphicsD3D12PhysicalVideoMemoryControlValues),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12v3"][::std::mem::size_of::<IUnityGraphicsD3D12v3>() - 40usize];
    ["Alignment of IUnityGraphicsD3D12v3"]
        [::std::mem::align_of::<IUnityGraphicsD3D12v3>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v3::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v3, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12v3::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v3, GetFrameFence) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v3::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v3, GetNextFrameFenceValue) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12v3::ExecuteCommandList"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v3, ExecuteCommandList) - 24usize];
    ["Offset of field: IUnityGraphicsD3D12v3::SetPhysicalVideoMemoryControlValues"][::std::mem::offset_of!(
        IUnityGraphicsD3D12v3,
        SetPhysicalVideoMemoryControlValues
    ) - 32usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12v2 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub ExecuteCommandList: ::std::option::Option<
        unsafe extern "system" fn(
            commandList: *mut ID3D12GraphicsCommandList,
            stateCount: ::std::os::raw::c_int,
            states: *mut UnityGraphicsD3D12ResourceState,
        ) -> UINT64,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12v2"][::std::mem::size_of::<IUnityGraphicsD3D12v2>() - 32usize];
    ["Alignment of IUnityGraphicsD3D12v2"]
        [::std::mem::align_of::<IUnityGraphicsD3D12v2>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v2::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v2, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12v2::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v2, GetFrameFence) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12v2::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v2, GetNextFrameFenceValue) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12v2::ExecuteCommandList"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12v2, ExecuteCommandList) - 24usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsD3D12 {
    pub GetDevice: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Device>,
    pub GetCommandQueue: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12CommandQueue>,
    pub GetFrameFence: ::std::option::Option<unsafe extern "system" fn() -> *mut ID3D12Fence>,
    pub GetNextFrameFenceValue: ::std::option::Option<unsafe extern "system" fn() -> UINT64>,
    pub GetResourceState: ::std::option::Option<
        unsafe extern "system" fn(
            resource: *mut ID3D12Resource,
            outState: *mut D3D12_RESOURCE_STATES,
        ) -> bool,
    >,
    pub SetResourceState: ::std::option::Option<
        unsafe extern "system" fn(resource: *mut ID3D12Resource, state: D3D12_RESOURCE_STATES),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsD3D12"][::std::mem::size_of::<IUnityGraphicsD3D12>() - 48usize];
    ["Alignment of IUnityGraphicsD3D12"][::std::mem::align_of::<IUnityGraphicsD3D12>() - 8usize];
    ["Offset of field: IUnityGraphicsD3D12::GetDevice"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12, GetDevice) - 0usize];
    ["Offset of field: IUnityGraphicsD3D12::GetCommandQueue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12, GetCommandQueue) - 8usize];
    ["Offset of field: IUnityGraphicsD3D12::GetFrameFence"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12, GetFrameFence) - 16usize];
    ["Offset of field: IUnityGraphicsD3D12::GetNextFrameFenceValue"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12, GetNextFrameFenceValue) - 24usize];
    ["Offset of field: IUnityGraphicsD3D12::GetResourceState"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12, GetResourceState) - 32usize];
    ["Offset of field: IUnityGraphicsD3D12::SetResourceState"]
        [::std::mem::offset_of!(IUnityGraphicsD3D12, SetResourceState) - 40usize];
};
pub type VkBool32 = u32;
pub type VkDeviceAddress = u64;
pub type VkDeviceSize = u64;
pub type VkFlags = u32;
pub type VkSampleMask = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBuffer_T {
    _unused: [u8; 0],
}
pub type VkBuffer = *mut VkBuffer_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImage_T {
    _unused: [u8; 0],
}
pub type VkImage = *mut VkImage_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInstance_T {
    _unused: [u8; 0],
}
pub type VkInstance = *mut VkInstance_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice_T {
    _unused: [u8; 0],
}
pub type VkPhysicalDevice = *mut VkPhysicalDevice_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDevice_T {
    _unused: [u8; 0],
}
pub type VkDevice = *mut VkDevice_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueue_T {
    _unused: [u8; 0],
}
pub type VkQueue = *mut VkQueue_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphore_T {
    _unused: [u8; 0],
}
pub type VkSemaphore = *mut VkSemaphore_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBuffer_T {
    _unused: [u8; 0],
}
pub type VkCommandBuffer = *mut VkCommandBuffer_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFence_T {
    _unused: [u8; 0],
}
pub type VkFence = *mut VkFence_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemory_T {
    _unused: [u8; 0],
}
pub type VkDeviceMemory = *mut VkDeviceMemory_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkEvent_T {
    _unused: [u8; 0],
}
pub type VkEvent = *mut VkEvent_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPool_T {
    _unused: [u8; 0],
}
pub type VkQueryPool = *mut VkQueryPool_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferView_T {
    _unused: [u8; 0],
}
pub type VkBufferView = *mut VkBufferView_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageView_T {
    _unused: [u8; 0],
}
pub type VkImageView = *mut VkImageView_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModule_T {
    _unused: [u8; 0],
}
pub type VkShaderModule = *mut VkShaderModule_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCache_T {
    _unused: [u8; 0],
}
pub type VkPipelineCache = *mut VkPipelineCache_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLayout_T {
    _unused: [u8; 0],
}
pub type VkPipelineLayout = *mut VkPipelineLayout_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipeline_T {
    _unused: [u8; 0],
}
pub type VkPipeline = *mut VkPipeline_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPass_T {
    _unused: [u8; 0],
}
pub type VkRenderPass = *mut VkRenderPass_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayout_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSetLayout = *mut VkDescriptorSetLayout_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampler_T {
    _unused: [u8; 0],
}
pub type VkSampler = *mut VkSampler_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSet_T {
    _unused: [u8; 0],
}
pub type VkDescriptorSet = *mut VkDescriptorSet_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPool_T {
    _unused: [u8; 0],
}
pub type VkDescriptorPool = *mut VkDescriptorPool_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebuffer_T {
    _unused: [u8; 0],
}
pub type VkFramebuffer = *mut VkFramebuffer_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandPool_T {
    _unused: [u8; 0],
}
pub type VkCommandPool = *mut VkCommandPool_T;
pub const VkResult_VK_SUCCESS: VkResult = 0;
pub const VkResult_VK_NOT_READY: VkResult = 1;
pub const VkResult_VK_TIMEOUT: VkResult = 2;
pub const VkResult_VK_EVENT_SET: VkResult = 3;
pub const VkResult_VK_EVENT_RESET: VkResult = 4;
pub const VkResult_VK_INCOMPLETE: VkResult = 5;
pub const VkResult_VK_ERROR_OUT_OF_HOST_MEMORY: VkResult = -1;
pub const VkResult_VK_ERROR_OUT_OF_DEVICE_MEMORY: VkResult = -2;
pub const VkResult_VK_ERROR_INITIALIZATION_FAILED: VkResult = -3;
pub const VkResult_VK_ERROR_DEVICE_LOST: VkResult = -4;
pub const VkResult_VK_ERROR_MEMORY_MAP_FAILED: VkResult = -5;
pub const VkResult_VK_ERROR_LAYER_NOT_PRESENT: VkResult = -6;
pub const VkResult_VK_ERROR_EXTENSION_NOT_PRESENT: VkResult = -7;
pub const VkResult_VK_ERROR_FEATURE_NOT_PRESENT: VkResult = -8;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DRIVER: VkResult = -9;
pub const VkResult_VK_ERROR_TOO_MANY_OBJECTS: VkResult = -10;
pub const VkResult_VK_ERROR_FORMAT_NOT_SUPPORTED: VkResult = -11;
pub const VkResult_VK_ERROR_FRAGMENTED_POOL: VkResult = -12;
pub const VkResult_VK_ERROR_UNKNOWN: VkResult = -13;
pub const VkResult_VK_ERROR_OUT_OF_POOL_MEMORY: VkResult = -1000069000;
pub const VkResult_VK_ERROR_INVALID_EXTERNAL_HANDLE: VkResult = -1000072003;
pub const VkResult_VK_ERROR_FRAGMENTATION: VkResult = -1000161000;
pub const VkResult_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: VkResult = -1000257000;
pub const VkResult_VK_PIPELINE_COMPILE_REQUIRED: VkResult = 1000297000;
pub const VkResult_VK_ERROR_NOT_PERMITTED: VkResult = -1000174001;
pub const VkResult_VK_ERROR_SURFACE_LOST_KHR: VkResult = -1000000000;
pub const VkResult_VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: VkResult = -1000000001;
pub const VkResult_VK_SUBOPTIMAL_KHR: VkResult = 1000001003;
pub const VkResult_VK_ERROR_OUT_OF_DATE_KHR: VkResult = -1000001004;
pub const VkResult_VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: VkResult = -1000003001;
pub const VkResult_VK_ERROR_VALIDATION_FAILED_EXT: VkResult = -1000011001;
pub const VkResult_VK_ERROR_INVALID_SHADER_NV: VkResult = -1000012000;
pub const VkResult_VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR: VkResult = -1000023000;
pub const VkResult_VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR: VkResult = -1000023001;
pub const VkResult_VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR: VkResult = -1000023002;
pub const VkResult_VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR: VkResult = -1000023003;
pub const VkResult_VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR: VkResult = -1000023004;
pub const VkResult_VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR: VkResult = -1000023005;
pub const VkResult_VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: VkResult = -1000158000;
pub const VkResult_VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: VkResult = -1000255000;
pub const VkResult_VK_THREAD_IDLE_KHR: VkResult = 1000268000;
pub const VkResult_VK_THREAD_DONE_KHR: VkResult = 1000268001;
pub const VkResult_VK_OPERATION_DEFERRED_KHR: VkResult = 1000268002;
pub const VkResult_VK_OPERATION_NOT_DEFERRED_KHR: VkResult = 1000268003;
pub const VkResult_VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR: VkResult = -1000299000;
pub const VkResult_VK_ERROR_COMPRESSION_EXHAUSTED_EXT: VkResult = -1000338000;
pub const VkResult_VK_INCOMPATIBLE_SHADER_BINARY_EXT: VkResult = 1000482000;
pub const VkResult_VK_PIPELINE_BINARY_MISSING_KHR: VkResult = 1000483000;
pub const VkResult_VK_ERROR_NOT_ENOUGH_SPACE_KHR: VkResult = -1000483000;
pub const VkResult_VK_ERROR_OUT_OF_POOL_MEMORY_KHR: VkResult = -1000069000;
pub const VkResult_VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: VkResult = -1000072003;
pub const VkResult_VK_ERROR_FRAGMENTATION_EXT: VkResult = -1000161000;
pub const VkResult_VK_ERROR_NOT_PERMITTED_EXT: VkResult = -1000174001;
pub const VkResult_VK_ERROR_NOT_PERMITTED_KHR: VkResult = -1000174001;
pub const VkResult_VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: VkResult = -1000257000;
pub const VkResult_VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: VkResult = -1000257000;
pub const VkResult_VK_PIPELINE_COMPILE_REQUIRED_EXT: VkResult = 1000297000;
pub const VkResult_VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: VkResult = 1000297000;
pub const VkResult_VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT: VkResult = 1000482000;
pub const VkResult_VK_RESULT_MAX_ENUM: VkResult = 2147483647;
pub type VkResult = ::std::os::raw::c_int;
pub const VkStructureType_VK_STRUCTURE_TYPE_APPLICATION_INFO: VkStructureType = 0;
pub const VkStructureType_VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: VkStructureType = 1;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: VkStructureType = 2;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: VkStructureType = 3;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO: VkStructureType = 4;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: VkStructureType = 5;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: VkStructureType = 6;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: VkStructureType = 7;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: VkStructureType = 8;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: VkStructureType = 9;
pub const VkStructureType_VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: VkStructureType = 10;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: VkStructureType = 11;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: VkStructureType = 12;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: VkStructureType = 13;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: VkStructureType = 14;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: VkStructureType = 15;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: VkStructureType = 16;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: VkStructureType = 17;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: VkStructureType = 18;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO:
    VkStructureType = 19;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO:
    VkStructureType = 20;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO:
    VkStructureType = 21;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: VkStructureType =
    22;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO:
    VkStructureType = 23;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO:
    VkStructureType = 24;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO:
    VkStructureType = 25;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO:
    VkStructureType = 26;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: VkStructureType =
    27;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: VkStructureType = 28;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: VkStructureType = 29;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: VkStructureType = 30;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: VkStructureType = 31;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: VkStructureType = 32;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: VkStructureType = 33;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: VkStructureType = 34;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: VkStructureType = 35;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: VkStructureType = 36;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: VkStructureType = 37;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: VkStructureType = 38;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: VkStructureType = 39;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: VkStructureType = 40;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: VkStructureType = 41;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: VkStructureType = 42;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: VkStructureType = 43;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: VkStructureType = 44;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: VkStructureType = 45;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER: VkStructureType = 46;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: VkStructureType = 47;
pub const VkStructureType_VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: VkStructureType = 48;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: VkStructureType =
    1000094000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: VkStructureType = 1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: VkStructureType = 1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES:
    VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: VkStructureType =
    1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: VkStructureType =
    1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: VkStructureType =
    1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: VkStructureType =
    1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO:
    VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: VkStructureType = 1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: VkStructureType =
    1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: VkStructureType =
    1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: VkStructureType =
    1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: VkStructureType =
    1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: VkStructureType =
    1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2:
    VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: VkStructureType =
    1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: VkStructureType =
    1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: VkStructureType =
    1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType = 1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: VkStructureType =
    1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: VkStructureType = 1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: VkStructureType =
    1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: VkStructureType =
    1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2:
    VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES:
    VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO:
    VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: VkStructureType =
    1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: VkStructureType =
    1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: VkStructureType =
    1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: VkStructureType =
    1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: VkStructureType = 1000145000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES:
    VkStructureType = 1000145001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES:
    VkStructureType = 1000145002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: VkStructureType = 1000145003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: VkStructureType =
    1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: VkStructureType =
    1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: VkStructureType =
    1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: VkStructureType =
    1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES:
    VkStructureType = 1000156004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES:
    VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO:
    VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO:
    VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: VkStructureType =
    1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: VkStructureType =
    1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: VkStructureType =
    1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: VkStructureType =
    1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: VkStructureType =
    1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: VkStructureType =
    1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: VkStructureType =
    1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: VkStructureType =
    1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: VkStructureType = 1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: VkStructureType = 1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: VkStructureType =
    1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO:
    VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: VkStructureType =
    1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES:
    VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: VkStructureType =
    1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES:
    VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: VkStructureType =
    49;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: VkStructureType =
    50;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: VkStructureType =
    51;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: VkStructureType =
    52;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: VkStructureType =
    1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: VkStructureType = 1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: VkStructureType = 1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: VkStructureType = 1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: VkStructureType =
    1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: VkStructureType =
    1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES:
    VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES:
    VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO:
    VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES:
    VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES:
    VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES:
    VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE:
    VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES:
    VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: VkStructureType =
    1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES:
    VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: VkStructureType =
    1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES:
    VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES:
    VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: VkStructureType =
    1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: VkStructureType =
    1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: VkStructureType =
    1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: VkStructureType =
    1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: VkStructureType =
    1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES:
    VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES:
    VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES:
    VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: VkStructureType =
    1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: VkStructureType =
    1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES:
    VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO:
    VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO:
    VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO:
    VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: VkStructureType =
    53;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: VkStructureType =
    54;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO:
    VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES:
    VkStructureType = 1000215000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: VkStructureType =
    1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: VkStructureType =
    1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: VkStructureType =
    1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: VkStructureType =
    1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: VkStructureType = 1000314000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: VkStructureType = 1000314001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: VkStructureType = 1000314002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO: VkStructureType = 1000314003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2: VkStructureType = 1000314004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: VkStructureType = 1000314005;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: VkStructureType =
    1000314006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES:
    VkStructureType = 1000314007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES : VkStructureType = 1000325000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES:
    VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: VkStructureType = 1000337000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: VkStructureType = 1000337001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: VkStructureType =
    1000337002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: VkStructureType =
    1000337003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: VkStructureType = 1000337004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: VkStructureType = 1000337005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2: VkStructureType = 1000337006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2: VkStructureType = 1000337007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2: VkStructureType = 1000337008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: VkStructureType = 1000337009;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: VkStructureType = 1000337010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES:
    VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES:
    VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES:
    VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES:
    VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK:
    VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO:
    VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO: VkStructureType = 1000044000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: VkStructureType = 1000044001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: VkStructureType =
    1000044002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES:
    VkStructureType = 1000044003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO:
    VkStructureType = 1000044004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES:
    VkStructureType = 1000280000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES : VkStructureType = 1000280001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES:
    VkStructureType = 1000281001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: VkStructureType = 1000360000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES:
    VkStructureType = 1000413000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES:
    VkStructureType = 1000413001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: VkStructureType =
    1000413002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: VkStructureType =
    1000413003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES: VkStructureType =
    55;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES: VkStructureType =
    56;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO:
    VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES:
    VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES:
    VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES:
    VkStructureType = 1000416000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES:
    VkStructureType = 1000528000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES:
    VkStructureType = 1000544000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES:
    VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO:
    VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES:
    VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES:
    VkStructureType = 1000525000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO:
    VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES:
    VkStructureType = 1000190002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES:
    VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_INFO: VkStructureType = 1000271000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO: VkStructureType = 1000271001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES:
    VkStructureType = 1000470000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES:
    VkStructureType = 1000470001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_AREA_INFO: VkStructureType = 1000470003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO: VkStructureType =
    1000470004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2: VkStructureType = 1000338002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2: VkStructureType = 1000338003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO: VkStructureType =
    1000470005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO: VkStructureType =
    1000470006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES:
    VkStructureType = 1000080000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES : VkStructureType = 1000232000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO: VkStructureType =
    1000232001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO: VkStructureType =
    1000232002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES:
    VkStructureType = 1000545000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES:
    VkStructureType = 1000545001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS: VkStructureType = 1000545002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO: VkStructureType = 1000545003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO: VkStructureType = 1000545004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO: VkStructureType = 1000545005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO:
    VkStructureType = 1000545006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES:
    VkStructureType = 1000466000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO: VkStructureType =
    1000068000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES:
    VkStructureType = 1000068001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES:
    VkStructureType = 1000068002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES:
    VkStructureType = 1000270000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES:
    VkStructureType = 1000270001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY: VkStructureType = 1000270002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY: VkStructureType = 1000270003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO: VkStructureType = 1000270004;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO: VkStructureType = 1000270005;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO: VkStructureType =
    1000270006;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO: VkStructureType = 1000270007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE: VkStructureType =
    1000270008;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY:
    VkStructureType = 1000270009;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType = 1000001000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: VkStructureType = 1000001001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: VkStructureType =
    1000060007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: VkStructureType =
    1000060008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: VkStructureType =
    1000060009;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: VkStructureType =
    1000060010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: VkStructureType =
    1000060011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR:
    VkStructureType = 1000060012;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: VkStructureType =
    1000002000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000002001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: VkStructureType = 1000003000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000004000;
pub const VkStructureType_VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000005000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000006000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000008000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: VkStructureType =
    1000009000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD:
    VkStructureType = 1000018000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000022000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000022001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: VkStructureType =
    1000022002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PROFILE_INFO_KHR: VkStructureType = 1000023000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_CAPABILITIES_KHR: VkStructureType = 1000023001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_INFO_KHR: VkStructureType =
    1000023002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000023003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_VIDEO_SESSION_MEMORY_INFO_KHR: VkStructureType =
    1000023004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR: VkStructureType =
    1000023005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000023006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR:
    VkStructureType = 1000023007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR: VkStructureType =
    1000023008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR: VkStructureType = 1000023009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR: VkStructureType =
    1000023010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_INFO_KHR: VkStructureType =
    1000023011;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_VIDEO_PROPERTIES_KHR: VkStructureType =
    1000023012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_PROFILE_LIST_INFO_KHR: VkStructureType =
    1000023013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR: VkStructureType =
    1000023014;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_PROPERTIES_KHR: VkStructureType =
    1000023015;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR:
    VkStructureType = 1000023016;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR: VkStructureType = 1000024000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_CAPABILITIES_KHR: VkStructureType =
    1000024001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_USAGE_INFO_KHR: VkStructureType =
    1000024002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV:
    VkStructureType = 1000026000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV:
    VkStructureType = 1000026001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV:
    VkStructureType = 1000026002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT:
    VkStructureType = 1000028000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT:
    VkStructureType = 1000028001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT:
    VkStructureType = 1000028002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: VkStructureType = 1000029000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: VkStructureType =
    1000029001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: VkStructureType = 1000029002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX:
    VkStructureType = 1000029004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: VkStructureType =
    1000030000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: VkStructureType =
    1000030001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_CAPABILITIES_KHR: VkStructureType =
    1000038000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000038001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000038002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PICTURE_INFO_KHR: VkStructureType =
    1000038003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR: VkStructureType =
    1000038004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR: VkStructureType =
    1000038005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR:
    VkStructureType = 1000038006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_PROFILE_INFO_KHR: VkStructureType =
    1000038007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR:
    VkStructureType = 1000038008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000038009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR:
    VkStructureType = 1000038010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000038011;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR:
    VkStructureType = 1000038012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR : VkStructureType = 1000038013 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_CAPABILITIES_KHR: VkStructureType =
    1000039000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000039001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000039002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PICTURE_INFO_KHR: VkStructureType =
    1000039003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR: VkStructureType =
    1000039004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR:
    VkStructureType = 1000039005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR:
    VkStructureType = 1000039006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_PROFILE_INFO_KHR: VkStructureType =
    1000039007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR:
    VkStructureType = 1000039009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000039010;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR:
    VkStructureType = 1000039011;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000039012;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR:
    VkStructureType = 1000039013;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR : VkStructureType = 1000039014 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_CAPABILITIES_KHR: VkStructureType =
    1000040000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PICTURE_INFO_KHR: VkStructureType =
    1000040001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_PROFILE_INFO_KHR: VkStructureType =
    1000040003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000040004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000040005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR: VkStructureType =
    1000040006;
pub const VkStructureType_VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD:
    VkStructureType = 1000041000;
pub const VkStructureType_VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP:
    VkStructureType = 1000049000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV:
    VkStructureType = 1000050000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: VkStructureType =
    1000056000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: VkStructureType =
    1000056001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: VkStructureType =
    1000057001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV:
    VkStructureType = 1000058000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: VkStructureType = 1000061000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: VkStructureType = 1000062000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: VkStructureType =
    1000067000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT:
    VkStructureType = 1000067001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: VkStructureType =
    1000073002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000073003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: VkStructureType = 1000074000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: VkStructureType = 1000074001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: VkStructureType = 1000074002;
pub const VkStructureType_VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR:
    VkStructureType = 1000075000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR:
    VkStructureType = 1000078001;
pub const VkStructureType_VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: VkStructureType =
    1000078002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000078003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: VkStructureType =
    1000079000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: VkStructureType = 1000079001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT : VkStructureType = 1000081000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT:
    VkStructureType = 1000081001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: VkStructureType =
    1000081002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: VkStructureType = 1000084000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV:
    VkStructureType = 1000087000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: VkStructureType =
    1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: VkStructureType = 1000091000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: VkStructureType = 1000091001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: VkStructureType = 1000091002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: VkStructureType =
    1000091003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: VkStructureType = 1000092000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX : VkStructureType = 1000097000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX:
    VkStructureType = 1000044009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV:
    VkStructureType = 1000098000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT:
    VkStructureType = 1000099000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000099001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT : VkStructureType = 1000101000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT : VkStructureType = 1000101001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT:
    VkStructureType = 1000102000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT : VkStructureType = 1000102001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_HDR_METADATA_EXT: VkStructureType = 1000105000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG : VkStructureType = 1000110000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR:
    VkStructureType = 1000111000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: VkStructureType =
    1000114002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: VkStructureType = 1000115000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: VkStructureType = 1000115001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR:
    VkStructureType = 1000116000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR:
    VkStructureType = 1000116001;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR:
    VkStructureType = 1000116002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: VkStructureType =
    1000116003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: VkStructureType =
    1000116004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: VkStructureType = 1000116005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: VkStructureType =
    1000116006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: VkStructureType =
    1000119000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: VkStructureType =
    1000119001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: VkStructureType = 1000119002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: VkStructureType = 1000121000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: VkStructureType =
    1000121001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: VkStructureType =
    1000121002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: VkStructureType = 1000121003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: VkStructureType =
    1000121004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000122000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: VkStructureType =
    1000123000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: VkStructureType =
    1000128000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: VkStructureType =
    1000128001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: VkStructureType = 1000128002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT:
    VkStructureType = 1000128003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: VkStructureType =
    1000128004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: VkStructureType =
    1000129000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID:
    VkStructureType = 1000129001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID:
    VkStructureType = 1000129002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID:
    VkStructureType = 1000129004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: VkStructureType = 1000129005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID:
    VkStructureType = 1000129006;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: VkStructureType =
    1000044008;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: VkStructureType = 1000143000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT:
    VkStructureType = 1000143001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000143002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT:
    VkStructureType = 1000143003;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: VkStructureType =
    1000143004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT : VkStructureType = 1000148000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT : VkStructureType = 1000148001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000148002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV:
    VkStructureType = 1000149000;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR:
    VkStructureType = 1000150007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR:
    VkStructureType = 1000150000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR:
    VkStructureType = 1000150002;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR:
    VkStructureType = 1000150003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR:
    VkStructureType = 1000150004;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR:
    VkStructureType = 1000150005;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: VkStructureType =
    1000150006;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR:
    VkStructureType = 1000150009;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: VkStructureType =
    1000150010;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR:
    VkStructureType = 1000150011;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR:
    VkStructureType = 1000150012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR:
    VkStructureType = 1000150013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR : VkStructureType = 1000150014 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR:
    VkStructureType = 1000150017;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR:
    VkStructureType = 1000150020;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR:
    VkStructureType = 1000347000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR:
    VkStructureType = 1000347001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: VkStructureType =
    1000150015;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR:
    VkStructureType = 1000150016;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR:
    VkStructureType = 1000150018;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR:
    VkStructureType = 1000348013;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000152000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV:
    VkStructureType = 1000154000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV:
    VkStructureType = 1000154001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT:
    VkStructureType = 1000158000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT:
    VkStructureType = 1000158002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT:
    VkStructureType = 1000158003;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT:
    VkStructureType = 1000158004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT:
    VkStructureType = 1000158005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT:
    VkStructureType = 1000158006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: VkStructureType =
    1000160000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT:
    VkStructureType = 1000160001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV : VkStructureType = 1000164000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV:
    VkStructureType = 1000164001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV:
    VkStructureType = 1000164002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV : VkStructureType = 1000164005 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: VkStructureType =
    1000165000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: VkStructureType =
    1000165001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_NV: VkStructureType = 1000165003;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: VkStructureType = 1000165004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: VkStructureType = 1000165005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV:
    VkStructureType = 1000165006;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV:
    VkStructureType = 1000165007;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000165008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV:
    VkStructureType = 1000165009;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV:
    VkStructureType = 1000165011;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: VkStructureType =
    1000165012;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV : VkStructureType = 1000166000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV : VkStructureType = 1000166001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT:
    VkStructureType = 1000170000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT:
    VkStructureType = 1000170001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: VkStructureType =
    1000178000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: VkStructureType =
    1000178001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT:
    VkStructureType = 1000178002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR:
    VkStructureType = 1000181000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD:
    VkStructureType = 1000183000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD:
    VkStructureType = 1000185000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_CAPABILITIES_KHR: VkStructureType =
    1000187000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000187001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR:
    VkStructureType = 1000187002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PROFILE_INFO_KHR: VkStructureType =
    1000187003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_PICTURE_INFO_KHR: VkStructureType =
    1000187004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR: VkStructureType =
    1000187005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD:
    VkStructureType = 1000189000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT : VkStructureType = 1000190000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: VkStructureType = 1000191000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV:
    VkStructureType = 1000202000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV:
    VkStructureType = 1000202001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV:
    VkStructureType = 1000204000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV : VkStructureType = 1000205000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV:
    VkStructureType = 1000205002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: VkStructureType = 1000206000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: VkStructureType =
    1000206001;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV:
    VkStructureType = 1000314008;
pub const VkStructureType_VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: VkStructureType = 1000314009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL : VkStructureType = 1000209000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL:
    VkStructureType = 1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: VkStructureType =
    1000210001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: VkStructureType =
    1000210002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: VkStructureType =
    1000210003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: VkStructureType =
    1000210004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL:
    VkStructureType = 1000210005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT:
    VkStructureType = 1000212000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD:
    VkStructureType = 1000213000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD:
    VkStructureType = 1000213001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: VkStructureType =
    1000214000;
pub const VkStructureType_VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000217000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT:
    VkStructureType = 1000218000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT:
    VkStructureType = 1000218001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT:
    VkStructureType = 1000218002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT:
    VkStructureType = 1000044007;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    VkStructureType = 1000226000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR:
    VkStructureType = 1000226001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR:
    VkStructureType = 1000226002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR:
    VkStructureType = 1000226003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR:
    VkStructureType = 1000226004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR:
    VkStructureType = 1000044006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD:
    VkStructureType = 1000227000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD:
    VkStructureType = 1000229000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT : VkStructureType = 1000234000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR:
    VkStructureType = 1000235000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT:
    VkStructureType = 1000237000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT:
    VkStructureType = 1000238000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: VkStructureType =
    1000238001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: VkStructureType =
    1000239000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV : VkStructureType = 1000240000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: VkStructureType =
    1000244002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: VkStructureType = 1000247000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR:
    VkStructureType = 1000248000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV:
    VkStructureType = 1000249000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: VkStructureType =
    1000249001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV:
    VkStructureType = 1000249002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV:
    VkStructureType = 1000250000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV:
    VkStructureType = 1000250001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV:
    VkStructureType = 1000250002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT : VkStructureType = 1000251000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT:
    VkStructureType = 1000252000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT:
    VkStructureType = 1000254000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT : VkStructureType = 1000254001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT:
    VkStructureType = 1000254002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT:
    VkStructureType = 1000255000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT:
    VkStructureType = 1000255002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT:
    VkStructureType = 1000255001;
pub const VkStructureType_VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000256000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT:
    VkStructureType = 1000260000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT:
    VkStructureType = 1000267000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR : VkStructureType = 1000269000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: VkStructureType =
    1000269002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: VkStructureType =
    1000269003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: VkStructureType =
    1000269004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR:
    VkStructureType = 1000269005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT:
    VkStructureType = 1000272000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT:
    VkStructureType = 1000272001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_PLACED_INFO_EXT: VkStructureType =
    1000272002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT:
    VkStructureType = 1000273000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_EXT: VkStructureType = 1000274000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_SCALING_CAPABILITIES_EXT:
    VkStructureType = 1000274001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_PRESENT_MODE_COMPATIBILITY_EXT:
    VkStructureType = 1000274002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT:
    VkStructureType = 1000275000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_FENCE_INFO_EXT: VkStructureType =
    1000275001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODES_CREATE_INFO_EXT:
    VkStructureType = 1000275002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_MODE_INFO_EXT: VkStructureType =
    1000275003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_EXT:
    VkStructureType = 1000275004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RELEASE_SWAPCHAIN_IMAGES_INFO_EXT: VkStructureType =
    1000275005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV : VkStructureType = 1000277000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: VkStructureType =
    1000277001;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV:
    VkStructureType = 1000277002;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: VkStructureType =
    1000277003;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV:
    VkStructureType = 1000277004;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: VkStructureType =
    1000277005;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV:
    VkStructureType = 1000277006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV : VkStructureType = 1000277007 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV : VkStructureType = 1000278000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV:
    VkStructureType = 1000278001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT:
    VkStructureType = 1000281000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM : VkStructureType = 1000282000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: VkStructureType =
    1000282001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT:
    VkStructureType = 1000283000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPTH_BIAS_INFO_EXT: VkStructureType = 1000283001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPTH_BIAS_REPRESENTATION_INFO_EXT: VkStructureType =
    1000283002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT:
    VkStructureType = 1000284000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT:
    VkStructureType = 1000284001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT:
    VkStructureType = 1000284002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT:
    VkStructureType = 1000286000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT:
    VkStructureType = 1000286001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT:
    VkStructureType = 1000287000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT:
    VkStructureType = 1000287001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT:
    VkStructureType = 1000287002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: VkStructureType =
    1000290000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV:
    VkStructureType = 1000292000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_PRESENT_BARRIER_NV:
    VkStructureType = 1000292001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV:
    VkStructureType = 1000292002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRESENT_ID_KHR: VkStructureType = 1000294000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR:
    VkStructureType = 1000294001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR: VkStructureType = 1000299000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR: VkStructureType =
    1000299001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000299002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_CAPABILITIES_KHR: VkStructureType =
    1000299003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_USAGE_INFO_KHR: VkStructureType =
    1000299004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR:
    VkStructureType = 1000299005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR:
    VkStructureType = 1000299006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000299007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR: VkStructureType =
    1000299008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR:
    VkStructureType = 1000299009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR:
    VkStructureType = 1000299010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV:
    VkStructureType = 1000300000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV:
    VkStructureType = 1000300001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CUDA_MODULE_CREATE_INFO_NV: VkStructureType =
    1000307000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CUDA_FUNCTION_CREATE_INFO_NV: VkStructureType =
    1000307001;
pub const VkStructureType_VK_STRUCTURE_TYPE_CUDA_LAUNCH_INFO_NV: VkStructureType = 1000307002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV:
    VkStructureType = 1000307003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV:
    VkStructureType = 1000307004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_LOW_LATENCY_SUPPORT_NV: VkStructureType =
    1000310000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: VkStructureType =
    1000311000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: VkStructureType =
    1000311001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: VkStructureType =
    1000311002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: VkStructureType =
    1000311003;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
    1000311004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: VkStructureType =
    1000311005;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
    1000311006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: VkStructureType =
    1000311007;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
    1000311008;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: VkStructureType =
    1000311009;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
    1000311010;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: VkStructureType =
    1000311011;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT:
    VkStructureType = 1000316000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT : VkStructureType = 1000316001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT:
    VkStructureType = 1000316002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_ADDRESS_INFO_EXT: VkStructureType =
    1000316003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_GET_INFO_EXT: VkStructureType = 1000316004;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316005;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT:
    VkStructureType = 1000316008;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT:
    VkStructureType = 1000316010;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_INFO_EXT: VkStructureType =
    1000316011;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT : VkStructureType = 1000316012 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT : VkStructureType = 1000316009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT : VkStructureType = 1000320000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT : VkStructureType = 1000320001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT:
    VkStructureType = 1000320002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD : VkStructureType = 1000321000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR : VkStructureType = 1000322000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR : VkStructureType = 1000323000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV : VkStructureType = 1000326000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV : VkStructureType = 1000326001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV : VkStructureType = 1000326002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV : VkStructureType = 1000327000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV:
    VkStructureType = 1000327001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: VkStructureType =
    1000327002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT:
    VkStructureType = 1000328000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT:
    VkStructureType = 1000328001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT : VkStructureType = 1000330000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT:
    VkStructureType = 1000332000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT : VkStructureType = 1000332001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: VkStructureType =
    1000333000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR : VkStructureType = 1000336000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT : VkStructureType = 1000338000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: VkStructureType =
    1000338001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: VkStructureType =
    1000338004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT : VkStructureType = 1000339000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT:
    VkStructureType = 1000340000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT: VkStructureType =
    1000341000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_COUNTS_EXT: VkStructureType = 1000341001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_FAULT_INFO_EXT: VkStructureType = 1000341002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT:
    VkStructureType = 1000344000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: VkStructureType =
    1000346000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT : VkStructureType = 1000352000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT:
    VkStructureType = 1000352001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT:
    VkStructureType = 1000352002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: VkStructureType =
    1000353000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT:
    VkStructureType = 1000354000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT:
    VkStructureType = 1000354001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT:
    VkStructureType = 1000355000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT:
    VkStructureType = 1000355001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT : VkStructureType = 1000356000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT : VkStructureType = 1000361000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000364000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA:
    VkStructureType = 1000364001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: VkStructureType =
    1000364002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000365000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA:
    VkStructureType = 1000365001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: VkStructureType =
    1000366000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA:
    VkStructureType = 1000366001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA:
    VkStructureType = 1000366002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: VkStructureType =
    1000366003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366004;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA:
    VkStructureType = 1000366005;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: VkStructureType =
    1000366007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: VkStructureType =
    1000366008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA:
    VkStructureType = 1000366009;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI:
    VkStructureType = 1000369000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI:
    VkStructureType = 1000369001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI:
    VkStructureType = 1000369002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI:
    VkStructureType = 1000370000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: VkStructureType =
    1000371000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV:
    VkStructureType = 1000371001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: VkStructureType =
    1000372000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT:
    VkStructureType = 1000372001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT:
    VkStructureType = 1000375000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAME_BOUNDARY_EXT: VkStructureType = 1000375001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT : VkStructureType = 1000376000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: VkStructureType =
    1000376001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT:
    VkStructureType = 1000376002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT : VkStructureType = 1000377000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: VkStructureType =
    1000378000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT:
    VkStructureType = 1000381000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: VkStructureType =
    1000381001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT : VkStructureType = 1000382000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR : VkStructureType = 1000386000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT:
    VkStructureType = 1000391000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: VkStructureType =
    1000391001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT:
    VkStructureType = 1000392000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT:
    VkStructureType = 1000392001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT:
    VkStructureType = 1000393000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT:
    VkStructureType = 1000395000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT:
    VkStructureType = 1000395001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_INFO_EXT: VkStructureType = 1000396000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_VERSION_INFO_EXT: VkStructureType = 1000396001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_INFO_EXT: VkStructureType = 1000396002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MICROMAP_TO_MEMORY_INFO_EXT: VkStructureType =
    1000396003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_MICROMAP_INFO_EXT: VkStructureType =
    1000396004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT:
    VkStructureType = 1000396005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT:
    VkStructureType = 1000396006;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_CREATE_INFO_EXT: VkStructureType = 1000396007;
pub const VkStructureType_VK_STRUCTURE_TYPE_MICROMAP_BUILD_SIZES_INFO_EXT: VkStructureType =
    1000396008;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT : VkStructureType = 1000396009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI : VkStructureType = 1000404000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI : VkStructureType = 1000404001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI : VkStructureType = 1000404002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT:
    VkStructureType = 1000411000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT : VkStructureType = 1000411001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT : VkStructureType = 1000412000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM:
    VkStructureType = 1000415000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM:
    VkStructureType = 1000417000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM:
    VkStructureType = 1000417001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM:
    VkStructureType = 1000417002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT:
    VkStructureType = 1000418000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_SLICED_CREATE_INFO_EXT: VkStructureType =
    1000418001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE : VkStructureType = 1000420000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE:
    VkStructureType = 1000420001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE:
    VkStructureType = 1000420002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT:
    VkStructureType = 1000422000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM:
    VkStructureType = 1000424000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM:
    VkStructureType = 1000424001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_BEGIN_INFO_ARM: VkStructureType =
    1000424002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_INFO_ARM: VkStructureType =
    1000424003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_STRIPE_SUBMIT_INFO_ARM: VkStructureType =
    1000424004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM : VkStructureType = 1000425000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM : VkStructureType = 1000425001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM:
    VkStructureType = 1000425002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV:
    VkStructureType = 1000426000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV:
    VkStructureType = 1000426001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV:
    VkStructureType = 1000427000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV:
    VkStructureType = 1000427001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV : VkStructureType = 1000428000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV:
    VkStructureType = 1000428001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV:
    VkStructureType = 1000428002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV : VkStructureType = 1000429008 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV : VkStructureType = 1000429009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV:
    VkStructureType = 1000429010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV:
    VkStructureType = 1000430000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR : VkStructureType = 1000434000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT : VkStructureType = 1000437000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM:
    VkStructureType = 1000440000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM:
    VkStructureType = 1000440001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM:
    VkStructureType = 1000440002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT:
    VkStructureType = 1000451000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT:
    VkStructureType = 1000451001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT:
    VkStructureType = 1000453000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT : VkStructureType = 1000455000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT : VkStructureType = 1000455001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT:
    VkStructureType = 1000458000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: VkStructureType =
    1000458001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000458002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000458003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_INFO_LUNARG: VkStructureType =
    1000459000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DIRECT_DRIVER_LOADING_LIST_LUNARG: VkStructureType =
    1000459001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT : VkStructureType = 1000462000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT : VkStructureType = 1000462001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT : VkStructureType = 1000462002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: VkStructureType =
    1000462003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT : VkStructureType = 1000342000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV:
    VkStructureType = 1000464000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV:
    VkStructureType = 1000464001;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV: VkStructureType =
    1000464002;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV:
    VkStructureType = 1000464003;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_INFO_NV: VkStructureType =
    1000464004;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_EXECUTE_INFO_NV: VkStructureType =
    1000464005;
pub const VkStructureType_VK_STRUCTURE_TYPE_OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV:
    VkStructureType = 1000464010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT:
    VkStructureType = 1000465000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID : VkStructureType = 1000468000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID : VkStructureType = 1000468001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID : VkStructureType = 1000468002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD: VkStructureType =
    1000476000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANTI_LAG_DATA_AMD: VkStructureType = 1000476001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ANTI_LAG_PRESENTATION_INFO_AMD: VkStructureType =
    1000476002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR : VkStructureType = 1000481000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT:
    VkStructureType = 1000482000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT:
    VkStructureType = 1000482001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT: VkStructureType = 1000482002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR:
    VkStructureType = 1000483000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_CREATE_INFO_KHR: VkStructureType =
    1000483001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_INFO_KHR: VkStructureType = 1000483002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_KEY_KHR: VkStructureType = 1000483003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR:
    VkStructureType = 1000483004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR:
    VkStructureType = 1000483005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_DATA_INFO_KHR: VkStructureType =
    1000483006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATE_INFO_KHR: VkStructureType = 1000483007;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR:
    VkStructureType = 1000483008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_BINARY_HANDLES_INFO_KHR: VkStructureType =
    1000483009;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM:
    VkStructureType = 1000484000;
pub const VkStructureType_VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: VkStructureType = 1000484001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC:
    VkStructureType = 1000485000;
pub const VkStructureType_VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: VkStructureType =
    1000485001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM : VkStructureType = 1000488000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV : VkStructureType = 1000490000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV : VkStructureType = 1000490001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV:
    VkStructureType = 1000491000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV:
    VkStructureType = 1000491001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_VECTOR_PROPERTIES_NV: VkStructureType =
    1000491002;
pub const VkStructureType_VK_STRUCTURE_TYPE_CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV:
    VkStructureType = 1000491004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV : VkStructureType = 1000492000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV : VkStructureType = 1000492001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT:
    VkStructureType = 1000351000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT:
    VkStructureType = 1000351002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT : VkStructureType = 1000495000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT : VkStructureType = 1000495001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_LAYER_SETTINGS_CREATE_INFO_EXT: VkStructureType =
    1000496000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM:
    VkStructureType = 1000497000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM:
    VkStructureType = 1000497001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT : VkStructureType = 1000498000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT : VkStructureType = 1000499000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SLEEP_MODE_INFO_NV: VkStructureType =
    1000505000;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SLEEP_INFO_NV: VkStructureType = 1000505001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SET_LATENCY_MARKER_INFO_NV: VkStructureType =
    1000505002;
pub const VkStructureType_VK_STRUCTURE_TYPE_GET_LATENCY_MARKER_INFO_NV: VkStructureType =
    1000505003;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_TIMINGS_FRAME_REPORT_NV: VkStructureType =
    1000505004;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SUBMISSION_PRESENT_ID_NV: VkStructureType =
    1000505005;
pub const VkStructureType_VK_STRUCTURE_TYPE_OUT_OF_BAND_QUEUE_TYPE_INFO_NV: VkStructureType =
    1000505006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SWAPCHAIN_LATENCY_CREATE_INFO_NV: VkStructureType =
    1000505007;
pub const VkStructureType_VK_STRUCTURE_TYPE_LATENCY_SURFACE_CAPABILITIES_NV: VkStructureType =
    1000505008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR:
    VkStructureType = 1000506000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_KHR: VkStructureType =
    1000506001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR:
    VkStructureType = 1000506002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM : VkStructureType = 1000510000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM : VkStructureType = 1000510001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR : VkStructureType = 1000201000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR : VkStructureType = 1000511000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_CAPABILITIES_KHR: VkStructureType =
    1000512000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PICTURE_INFO_KHR: VkStructureType =
    1000512001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_PROFILE_INFO_KHR: VkStructureType =
    1000512003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000512004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR: VkStructureType =
    1000512005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_CAPABILITIES_KHR: VkStructureType =
    1000513000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR:
    VkStructureType = 1000513001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PICTURE_INFO_KHR: VkStructureType =
    1000513002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR: VkStructureType =
    1000513003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR:
    VkStructureType = 1000513004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_PROFILE_INFO_KHR: VkStructureType =
    1000513005;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR:
    VkStructureType = 1000513006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR:
    VkStructureType = 1000513007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR:
    VkStructureType = 1000513008;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR:
    VkStructureType = 1000513009;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR:
    VkStructureType = 1000513010;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR:
    VkStructureType = 1000515000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_INLINE_QUERY_INFO_KHR: VkStructureType =
    1000515001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV:
    VkStructureType = 1000516000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM:
    VkStructureType = 1000518000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM:
    VkStructureType = 1000518001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM:
    VkStructureType = 1000518002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM:
    VkStructureType = 1000519000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM:
    VkStructureType = 1000519001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM: VkStructureType =
    1000519002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM:
    VkStructureType = 1000520000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM : VkStructureType = 1000520001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM:
    VkStructureType = 1000521000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT : VkStructureType = 1000524000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_BUFFER_PROPERTIES_QNX: VkStructureType =
    1000529000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SCREEN_BUFFER_FORMAT_PROPERTIES_QNX: VkStructureType =
    1000529001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_SCREEN_BUFFER_INFO_QNX: VkStructureType =
    1000529002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_QNX: VkStructureType = 1000529003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX : VkStructureType = 1000529004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT:
    VkStructureType = 1000530000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_KHR: VkStructureType =
    1000184000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT:
    VkStructureType = 1000545007;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT:
    VkStructureType = 1000545008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV : VkStructureType = 1000546000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_SURFACE_STEREO_CREATE_INFO_NV: VkStructureType =
    1000551000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DISPLAY_MODE_STEREO_PROPERTIES_NV: VkStructureType =
    1000551001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR:
    VkStructureType = 1000553001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR:
    VkStructureType = 1000553002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR : VkStructureType = 1000553005 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR : VkStructureType = 1000553009 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553003;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553004;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR:
    VkStructureType = 1000553006;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR:
    VkStructureType = 1000553007;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR:
    VkStructureType = 1000553008;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV:
    VkStructureType = 1000555000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR : VkStructureType = 1000558000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV : VkStructureType = 1000559000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR:
    VkStructureType = 1000562000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR:
    VkStructureType = 1000562001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR:
    VkStructureType = 1000562002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR:
    VkStructureType = 1000562003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR:
    VkStructureType = 1000562004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV : VkStructureType = 1000563000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT : VkStructureType = 1000564000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV:
    VkStructureType = 1000568000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV : VkStructureType = 1000569000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV : VkStructureType = 1000569001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV : VkStructureType = 1000569002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV : VkStructureType = 1000569003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV:
    VkStructureType = 1000569004;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV:
    VkStructureType = 1000569005;
pub const VkStructureType_VK_STRUCTURE_TYPE_CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV:
    VkStructureType = 1000569006;
pub const VkStructureType_VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV : VkStructureType = 1000569007 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV : VkStructureType = 1000570000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV : VkStructureType = 1000570001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV : VkStructureType = 1000570002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV : VkStructureType = 1000570003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV:
    VkStructureType = 1000570004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV:
    VkStructureType = 1000570005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT : VkStructureType = 1000572000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT : VkStructureType = 1000572001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT:
    VkStructureType = 1000572002;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_CREATE_INFO_EXT:
    VkStructureType = 1000572003;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_EXT: VkStructureType =
    1000572004;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT:
    VkStructureType = 1000572006;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT: VkStructureType =
    1000572007;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT:
    VkStructureType = 1000572008;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT:
    VkStructureType = 1000572009;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT:
    VkStructureType = 1000572010;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_INFO_EXT:
    VkStructureType = 1000572011;
pub const VkStructureType_VK_STRUCTURE_TYPE_INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT:
    VkStructureType = 1000572012;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_PIPELINE_INFO_EXT: VkStructureType =
    1000572013;
pub const VkStructureType_VK_STRUCTURE_TYPE_GENERATED_COMMANDS_SHADER_INFO_EXT: VkStructureType =
    1000572014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR:
    VkStructureType = 1000574000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_ACCESS_FLAGS_3_KHR: VkStructureType =
    1000574002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA : VkStructureType = 1000575000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA : VkStructureType = 1000575001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA:
    VkStructureType = 1000575002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT:
    VkStructureType = 1000582000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT : VkStructureType = 1000582001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR:
    VkStructureType = 1000586000;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR:
    VkStructureType = 1000586001;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR:
    VkStructureType = 1000586002;
pub const VkStructureType_VK_STRUCTURE_TYPE_VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR:
    VkStructureType = 1000586003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI:
    VkStructureType = 1000590000;
pub const VkStructureType_VK_STRUCTURE_TYPE_HDR_VIVID_DYNAMIC_METADATA_HUAWEI: VkStructureType =
    1000590001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV:
    VkStructureType = 1000593000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV:
    VkStructureType = 1000593001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV:
    VkStructureType = 1000593002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM : VkStructureType = 1000596000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMPORT_MEMORY_METAL_HANDLE_INFO_EXT: VkStructureType =
    1000602000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_METAL_HANDLE_PROPERTIES_EXT: VkStructureType =
    1000602001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_GET_METAL_HANDLE_INFO_EXT: VkStructureType =
    1000602002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR:
    VkStructureType = 1000421000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT : VkStructureType = 1000608000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES:
    VkStructureType = 1000063000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: VkStructureType =
    1000011000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: VkStructureType = 1000044000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: VkStructureType =
    1000044001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: VkStructureType =
    1000044002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR:
    VkStructureType = 1000044003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR:
    VkStructureType = 1000044004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: VkStructureType =
    1000053000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR:
    VkStructureType = 1000053001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR:
    VkStructureType = 1000053002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: VkStructureType =
    1000059000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: VkStructureType =
    1000059001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: VkStructureType = 1000059002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059004;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: VkStructureType =
    1000059005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR:
    VkStructureType = 1000059006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: VkStructureType =
    1000059007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR:
    VkStructureType = 1000059008;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: VkStructureType =
    1000060000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR:
    VkStructureType = 1000060003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR:
    VkStructureType = 1000060004;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: VkStructureType =
    1000060005;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: VkStructureType =
    1000060006;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060013;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR:
    VkStructureType = 1000060014;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT : VkStructureType = 1000066000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: VkStructureType =
    1000068000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT:
    VkStructureType = 1000068001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT:
    VkStructureType = 1000068002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: VkStructureType =
    1000070000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: VkStructureType =
    1000070001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR:
    VkStructureType = 1000071000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: VkStructureType =
    1000071001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR:
    VkStructureType = 1000071002;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: VkStructureType =
    1000071003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: VkStructureType =
    1000071004;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR:
    VkStructureType = 1000072000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: VkStructureType =
    1000072001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: VkStructureType =
    1000072002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR:
    VkStructureType = 1000076000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: VkStructureType =
    1000076001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: VkStructureType =
    1000077000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR:
    VkStructureType = 1000080000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR:
    VkStructureType = 1000082000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000083000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR:
    VkStructureType = 1000085000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: VkStructureType = 1000090000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR:
    VkStructureType = 1000108000;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR:
    VkStructureType = 1000108001;
pub const VkStructureType_VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: VkStructureType =
    1000108002;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: VkStructureType =
    1000108003;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: VkStructureType =
    1000109000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: VkStructureType =
    1000109001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: VkStructureType = 1000109002;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: VkStructureType = 1000109003;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: VkStructureType =
    1000109004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: VkStructureType = 1000109005;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: VkStructureType = 1000109006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR:
    VkStructureType = 1000112000;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: VkStructureType =
    1000112001;
pub const VkStructureType_VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: VkStructureType =
    1000113000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR:
    VkStructureType = 1000117000;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR:
    VkStructureType = 1000117001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: VkStructureType =
    1000117002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR : VkStructureType = 1000117003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR:
    VkStructureType = 1000120000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: VkStructureType =
    1000127000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: VkStructureType =
    1000127001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT:
    VkStructureType = 1000130000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT:
    VkStructureType = 1000130001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT:
    VkStructureType = 1000138000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT:
    VkStructureType = 1000138001;
pub const VkStructureType_VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT:
    VkStructureType = 1000138002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT:
    VkStructureType = 1000138003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: VkStructureType =
    1000146001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR:
    VkStructureType = 1000146002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: VkStructureType = 1000146003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR:
    VkStructureType = 1000146004;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: VkStructureType =
    1000147000;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: VkStructureType =
    1000044008;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR:
    VkStructureType = 1000156000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: VkStructureType =
    1000156001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: VkStructureType =
    1000156002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR:
    VkStructureType = 1000156003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR : VkStructureType = 1000156004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR:
    VkStructureType = 1000156005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: VkStructureType =
    1000157000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: VkStructureType =
    1000157001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT:
    VkStructureType = 1000161000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT:
    VkStructureType = 1000161001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT:
    VkStructureType = 1000161002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT : VkStructureType = 1000161003 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT : VkStructureType = 1000161004 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR:
    VkStructureType = 1000168000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: VkStructureType =
    1000168001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT:
    VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR : VkStructureType = 1000175000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR:
    VkStructureType = 1000177000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR:
    VkStructureType = 1000180000;
pub const VkStructureType_VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: VkStructureType =
    1000184000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR:
    VkStructureType = 1000174000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR:
    VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR:
    VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT : VkStructureType = 1000190002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT:
    VkStructureType = 1000192000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: VkStructureType =
    1000196000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR:
    VkStructureType = 1000197000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR:
    VkStructureType = 1000199000;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR:
    VkStructureType = 1000199001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV : VkStructureType = 1000201000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV : VkStructureType = 1000203000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR:
    VkStructureType = 1000207000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR:
    VkStructureType = 1000207001;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: VkStructureType =
    1000207002;
pub const VkStructureType_VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType =
    1000207003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: VkStructureType = 1000207004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: VkStructureType = 1000207005;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: VkStructureType =
    1000210000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR:
    VkStructureType = 1000211000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR : VkStructureType = 1000215000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT:
    VkStructureType = 1000221000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT:
    VkStructureType = 1000225000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT : VkStructureType = 1000225001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT:
    VkStructureType = 1000225002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR : VkStructureType = 1000232000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_LOCATION_INFO_KHR:
    VkStructureType = 1000232001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_INPUT_ATTACHMENT_INDEX_INFO_KHR:
    VkStructureType = 1000232002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR : VkStructureType = 1000241000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241001;
pub const VkStructureType_VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR:
    VkStructureType = 1000241002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT:
    VkStructureType = 1000244000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: VkStructureType =
    1000245000;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: VkStructureType =
    1000246000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR : VkStructureType = 1000253000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR:
    VkStructureType = 1000257000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: VkStructureType =
    1000244001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR:
    VkStructureType = 1000257002;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR:
    VkStructureType = 1000257003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR:
    VkStructureType = 1000257004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT:
    VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT:
    VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT:
    VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT:
    VkStructureType = 1000261000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT:
    VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT:
    VkStructureType = 1000270000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES_EXT:
    VkStructureType = 1000270001;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_TO_IMAGE_COPY_EXT: VkStructureType = 1000270002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_TO_MEMORY_COPY_EXT: VkStructureType = 1000270003;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_MEMORY_INFO_EXT: VkStructureType =
    1000270004;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_MEMORY_TO_IMAGE_INFO_EXT: VkStructureType =
    1000270005;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_LAYOUT_TRANSITION_INFO_EXT: VkStructureType =
    1000270006;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_IMAGE_INFO_EXT: VkStructureType =
    1000270007;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_HOST_MEMCPY_SIZE_EXT: VkStructureType =
    1000270008;
pub const VkStructureType_VK_STRUCTURE_TYPE_HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY_EXT:
    VkStructureType = 1000270009;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_MAP_INFO_KHR: VkStructureType = 1000271000;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_UNMAP_INFO_KHR: VkStructureType = 1000271001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT : VkStructureType = 1000276000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR : VkStructureType = 1000280000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR : VkStructureType = 1000280001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT : VkStructureType = 1000281001 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT:
    VkStructureType = 1000295000;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: VkStructureType =
    1000295001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: VkStructureType =
    1000295002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT : VkStructureType = 1000297000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: VkStructureType = 1000314000;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: VkStructureType =
    1000314001;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: VkStructureType =
    1000314002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: VkStructureType = 1000314003;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: VkStructureType = 1000314004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: VkStructureType = 1000314005;
pub const VkStructureType_VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: VkStructureType =
    1000314006;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR:
    VkStructureType = 1000314007;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR : VkStructureType = 1000325000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT:
    VkStructureType = 1000335000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: VkStructureType = 1000337000;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: VkStructureType = 1000337001;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: VkStructureType =
    1000337002;
pub const VkStructureType_VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: VkStructureType =
    1000337003;
pub const VkStructureType_VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: VkStructureType = 1000337004;
pub const VkStructureType_VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: VkStructureType = 1000337005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: VkStructureType = 1000337006;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: VkStructureType = 1000337007;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: VkStructureType = 1000337008;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: VkStructureType = 1000337009;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: VkStructureType = 1000337010;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: VkStructureType = 1000338002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: VkStructureType = 1000338003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM : VkStructureType = 1000342000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE : VkStructureType = 1000351000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE:
    VkStructureType = 1000351002;
pub const VkStructureType_VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: VkStructureType = 1000360000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: VkStructureType = 1000269001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT:
    VkStructureType = 1000388000;
pub const VkStructureType_VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT:
    VkStructureType = 1000388001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR:
    VkStructureType = 1000413000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR:
    VkStructureType = 1000413001;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000413002;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: VkStructureType =
    1000413003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR:
    VkStructureType = 1000416000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT:
    VkStructureType = 1000421000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT : VkStructureType = 1000466000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR:
    VkStructureType = 1000470000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES_KHR:
    VkStructureType = 1000470001;
pub const VkStructureType_VK_STRUCTURE_TYPE_RENDERING_AREA_INFO_KHR: VkStructureType = 1000470003;
pub const VkStructureType_VK_STRUCTURE_TYPE_DEVICE_IMAGE_SUBRESOURCE_INFO_KHR: VkStructureType =
    1000470004;
pub const VkStructureType_VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_KHR: VkStructureType = 1000338002;
pub const VkStructureType_VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_KHR: VkStructureType = 1000338003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_CREATE_FLAGS_2_CREATE_INFO_KHR:
    VkStructureType = 1000470005;
pub const VkStructureType_VK_STRUCTURE_TYPE_BUFFER_USAGE_FLAGS_2_CREATE_INFO_KHR: VkStructureType =
    1000470006;
pub const VkStructureType_VK_STRUCTURE_TYPE_SHADER_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT:
    VkStructureType = 1000225001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_KHR : VkStructureType = 1000525000 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_KHR:
    VkStructureType = 1000190001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR : VkStructureType = 1000190002 ;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR:
    VkStructureType = 1000528000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR:
    VkStructureType = 1000265000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR:
    VkStructureType = 1000259000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_KHR:
    VkStructureType = 1000259001;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_KHR:
    VkStructureType = 1000259002;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR:
    VkStructureType = 1000544000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR:
    VkStructureType = 1000545000;
pub const VkStructureType_VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES_KHR:
    VkStructureType = 1000545001;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_MEMORY_STATUS_KHR: VkStructureType = 1000545002;
pub const VkStructureType_VK_STRUCTURE_TYPE_BIND_DESCRIPTOR_SETS_INFO_KHR: VkStructureType =
    1000545003;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_CONSTANTS_INFO_KHR: VkStructureType = 1000545004;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_INFO_KHR: VkStructureType =
    1000545005;
pub const VkStructureType_VK_STRUCTURE_TYPE_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO_KHR:
    VkStructureType = 1000545006;
pub const VkStructureType_VK_STRUCTURE_TYPE_MAX_ENUM: VkStructureType = 2147483647;
pub type VkStructureType = ::std::os::raw::c_uint;
pub const VkPipelineCacheHeaderVersion_VK_PIPELINE_CACHE_HEADER_VERSION_ONE:
    VkPipelineCacheHeaderVersion = 1;
pub const VkPipelineCacheHeaderVersion_VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM:
    VkPipelineCacheHeaderVersion = 2147483647;
pub type VkPipelineCacheHeaderVersion = ::std::os::raw::c_uint;
pub const VkImageLayout_VK_IMAGE_LAYOUT_UNDEFINED: VkImageLayout = 0;
pub const VkImageLayout_VK_IMAGE_LAYOUT_GENERAL: VkImageLayout = 1;
pub const VkImageLayout_VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: VkImageLayout = 2;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout = 3;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout = 4;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: VkImageLayout = 5;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: VkImageLayout = 6;
pub const VkImageLayout_VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: VkImageLayout = 7;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PREINITIALIZED: VkImageLayout = 8;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout =
    1000117000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout =
    1000117001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: VkImageLayout = 1000241000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: VkImageLayout = 1000241001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: VkImageLayout = 1000241002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: VkImageLayout = 1000241003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: VkImageLayout = 1000314000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: VkImageLayout = 1000314001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ: VkImageLayout = 1000232000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: VkImageLayout = 1000001002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR: VkImageLayout = 1000024000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR: VkImageLayout = 1000024001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR: VkImageLayout = 1000024002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: VkImageLayout = 1000111000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: VkImageLayout =
    1000218000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR:
    VkImageLayout = 1000164003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_DST_KHR: VkImageLayout = 1000299000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_SRC_KHR: VkImageLayout = 1000299001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_DPB_KHR: VkImageLayout = 1000299002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: VkImageLayout =
    1000339000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_VIDEO_ENCODE_QUANTIZATION_MAP_KHR: VkImageLayout =
    1000553000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR:
    VkImageLayout = 1000117000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR:
    VkImageLayout = 1000117001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: VkImageLayout = 1000164003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR: VkImageLayout = 1000232000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000241000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000241001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000241002;
pub const VkImageLayout_VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000241003;
pub const VkImageLayout_VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: VkImageLayout = 1000314000;
pub const VkImageLayout_VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: VkImageLayout = 1000314001;
pub const VkImageLayout_VK_IMAGE_LAYOUT_MAX_ENUM: VkImageLayout = 2147483647;
pub type VkImageLayout = ::std::os::raw::c_uint;
pub const VkObjectType_VK_OBJECT_TYPE_UNKNOWN: VkObjectType = 0;
pub const VkObjectType_VK_OBJECT_TYPE_INSTANCE: VkObjectType = 1;
pub const VkObjectType_VK_OBJECT_TYPE_PHYSICAL_DEVICE: VkObjectType = 2;
pub const VkObjectType_VK_OBJECT_TYPE_DEVICE: VkObjectType = 3;
pub const VkObjectType_VK_OBJECT_TYPE_QUEUE: VkObjectType = 4;
pub const VkObjectType_VK_OBJECT_TYPE_SEMAPHORE: VkObjectType = 5;
pub const VkObjectType_VK_OBJECT_TYPE_COMMAND_BUFFER: VkObjectType = 6;
pub const VkObjectType_VK_OBJECT_TYPE_FENCE: VkObjectType = 7;
pub const VkObjectType_VK_OBJECT_TYPE_DEVICE_MEMORY: VkObjectType = 8;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER: VkObjectType = 9;
pub const VkObjectType_VK_OBJECT_TYPE_IMAGE: VkObjectType = 10;
pub const VkObjectType_VK_OBJECT_TYPE_EVENT: VkObjectType = 11;
pub const VkObjectType_VK_OBJECT_TYPE_QUERY_POOL: VkObjectType = 12;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER_VIEW: VkObjectType = 13;
pub const VkObjectType_VK_OBJECT_TYPE_IMAGE_VIEW: VkObjectType = 14;
pub const VkObjectType_VK_OBJECT_TYPE_SHADER_MODULE: VkObjectType = 15;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_CACHE: VkObjectType = 16;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_LAYOUT: VkObjectType = 17;
pub const VkObjectType_VK_OBJECT_TYPE_RENDER_PASS: VkObjectType = 18;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE: VkObjectType = 19;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: VkObjectType = 20;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER: VkObjectType = 21;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_POOL: VkObjectType = 22;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_SET: VkObjectType = 23;
pub const VkObjectType_VK_OBJECT_TYPE_FRAMEBUFFER: VkObjectType = 24;
pub const VkObjectType_VK_OBJECT_TYPE_COMMAND_POOL: VkObjectType = 25;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: VkObjectType = 1000156000;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: VkObjectType = 1000085000;
pub const VkObjectType_VK_OBJECT_TYPE_PRIVATE_DATA_SLOT: VkObjectType = 1000295000;
pub const VkObjectType_VK_OBJECT_TYPE_SURFACE_KHR: VkObjectType = 1000000000;
pub const VkObjectType_VK_OBJECT_TYPE_SWAPCHAIN_KHR: VkObjectType = 1000001000;
pub const VkObjectType_VK_OBJECT_TYPE_DISPLAY_KHR: VkObjectType = 1000002000;
pub const VkObjectType_VK_OBJECT_TYPE_DISPLAY_MODE_KHR: VkObjectType = 1000002001;
pub const VkObjectType_VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: VkObjectType = 1000011000;
pub const VkObjectType_VK_OBJECT_TYPE_VIDEO_SESSION_KHR: VkObjectType = 1000023000;
pub const VkObjectType_VK_OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR: VkObjectType = 1000023001;
pub const VkObjectType_VK_OBJECT_TYPE_CU_MODULE_NVX: VkObjectType = 1000029000;
pub const VkObjectType_VK_OBJECT_TYPE_CU_FUNCTION_NVX: VkObjectType = 1000029001;
pub const VkObjectType_VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: VkObjectType = 1000128000;
pub const VkObjectType_VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: VkObjectType = 1000150000;
pub const VkObjectType_VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: VkObjectType = 1000160000;
pub const VkObjectType_VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: VkObjectType = 1000165000;
pub const VkObjectType_VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: VkObjectType = 1000210000;
pub const VkObjectType_VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: VkObjectType = 1000268000;
pub const VkObjectType_VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: VkObjectType = 1000277000;
pub const VkObjectType_VK_OBJECT_TYPE_CUDA_MODULE_NV: VkObjectType = 1000307000;
pub const VkObjectType_VK_OBJECT_TYPE_CUDA_FUNCTION_NV: VkObjectType = 1000307001;
pub const VkObjectType_VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: VkObjectType = 1000366000;
pub const VkObjectType_VK_OBJECT_TYPE_MICROMAP_EXT: VkObjectType = 1000396000;
pub const VkObjectType_VK_OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV: VkObjectType = 1000464000;
pub const VkObjectType_VK_OBJECT_TYPE_SHADER_EXT: VkObjectType = 1000482000;
pub const VkObjectType_VK_OBJECT_TYPE_PIPELINE_BINARY_KHR: VkObjectType = 1000483000;
pub const VkObjectType_VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_EXT: VkObjectType = 1000572000;
pub const VkObjectType_VK_OBJECT_TYPE_INDIRECT_EXECUTION_SET_EXT: VkObjectType = 1000572001;
pub const VkObjectType_VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: VkObjectType = 1000085000;
pub const VkObjectType_VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: VkObjectType = 1000156000;
pub const VkObjectType_VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: VkObjectType = 1000295000;
pub const VkObjectType_VK_OBJECT_TYPE_MAX_ENUM: VkObjectType = 2147483647;
pub type VkObjectType = ::std::os::raw::c_uint;
pub const VkVendorId_VK_VENDOR_ID_KHRONOS: VkVendorId = 65536;
pub const VkVendorId_VK_VENDOR_ID_VIV: VkVendorId = 65537;
pub const VkVendorId_VK_VENDOR_ID_VSI: VkVendorId = 65538;
pub const VkVendorId_VK_VENDOR_ID_KAZAN: VkVendorId = 65539;
pub const VkVendorId_VK_VENDOR_ID_CODEPLAY: VkVendorId = 65540;
pub const VkVendorId_VK_VENDOR_ID_MESA: VkVendorId = 65541;
pub const VkVendorId_VK_VENDOR_ID_POCL: VkVendorId = 65542;
pub const VkVendorId_VK_VENDOR_ID_MOBILEYE: VkVendorId = 65543;
pub const VkVendorId_VK_VENDOR_ID_MAX_ENUM: VkVendorId = 2147483647;
pub type VkVendorId = ::std::os::raw::c_uint;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: VkSystemAllocationScope = 0;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: VkSystemAllocationScope = 1;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_CACHE: VkSystemAllocationScope = 2;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: VkSystemAllocationScope = 3;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: VkSystemAllocationScope = 4;
pub const VkSystemAllocationScope_VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: VkSystemAllocationScope =
    2147483647;
pub type VkSystemAllocationScope = ::std::os::raw::c_uint;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE:
    VkInternalAllocationType = 0;
pub const VkInternalAllocationType_VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: VkInternalAllocationType =
    2147483647;
pub type VkInternalAllocationType = ::std::os::raw::c_uint;
pub const VkFormat_VK_FORMAT_UNDEFINED: VkFormat = 0;
pub const VkFormat_VK_FORMAT_R4G4_UNORM_PACK8: VkFormat = 1;
pub const VkFormat_VK_FORMAT_R4G4B4A4_UNORM_PACK16: VkFormat = 2;
pub const VkFormat_VK_FORMAT_B4G4R4A4_UNORM_PACK16: VkFormat = 3;
pub const VkFormat_VK_FORMAT_R5G6B5_UNORM_PACK16: VkFormat = 4;
pub const VkFormat_VK_FORMAT_B5G6R5_UNORM_PACK16: VkFormat = 5;
pub const VkFormat_VK_FORMAT_R5G5B5A1_UNORM_PACK16: VkFormat = 6;
pub const VkFormat_VK_FORMAT_B5G5R5A1_UNORM_PACK16: VkFormat = 7;
pub const VkFormat_VK_FORMAT_A1R5G5B5_UNORM_PACK16: VkFormat = 8;
pub const VkFormat_VK_FORMAT_R8_UNORM: VkFormat = 9;
pub const VkFormat_VK_FORMAT_R8_SNORM: VkFormat = 10;
pub const VkFormat_VK_FORMAT_R8_USCALED: VkFormat = 11;
pub const VkFormat_VK_FORMAT_R8_SSCALED: VkFormat = 12;
pub const VkFormat_VK_FORMAT_R8_UINT: VkFormat = 13;
pub const VkFormat_VK_FORMAT_R8_SINT: VkFormat = 14;
pub const VkFormat_VK_FORMAT_R8_SRGB: VkFormat = 15;
pub const VkFormat_VK_FORMAT_R8G8_UNORM: VkFormat = 16;
pub const VkFormat_VK_FORMAT_R8G8_SNORM: VkFormat = 17;
pub const VkFormat_VK_FORMAT_R8G8_USCALED: VkFormat = 18;
pub const VkFormat_VK_FORMAT_R8G8_SSCALED: VkFormat = 19;
pub const VkFormat_VK_FORMAT_R8G8_UINT: VkFormat = 20;
pub const VkFormat_VK_FORMAT_R8G8_SINT: VkFormat = 21;
pub const VkFormat_VK_FORMAT_R8G8_SRGB: VkFormat = 22;
pub const VkFormat_VK_FORMAT_R8G8B8_UNORM: VkFormat = 23;
pub const VkFormat_VK_FORMAT_R8G8B8_SNORM: VkFormat = 24;
pub const VkFormat_VK_FORMAT_R8G8B8_USCALED: VkFormat = 25;
pub const VkFormat_VK_FORMAT_R8G8B8_SSCALED: VkFormat = 26;
pub const VkFormat_VK_FORMAT_R8G8B8_UINT: VkFormat = 27;
pub const VkFormat_VK_FORMAT_R8G8B8_SINT: VkFormat = 28;
pub const VkFormat_VK_FORMAT_R8G8B8_SRGB: VkFormat = 29;
pub const VkFormat_VK_FORMAT_B8G8R8_UNORM: VkFormat = 30;
pub const VkFormat_VK_FORMAT_B8G8R8_SNORM: VkFormat = 31;
pub const VkFormat_VK_FORMAT_B8G8R8_USCALED: VkFormat = 32;
pub const VkFormat_VK_FORMAT_B8G8R8_SSCALED: VkFormat = 33;
pub const VkFormat_VK_FORMAT_B8G8R8_UINT: VkFormat = 34;
pub const VkFormat_VK_FORMAT_B8G8R8_SINT: VkFormat = 35;
pub const VkFormat_VK_FORMAT_B8G8R8_SRGB: VkFormat = 36;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UNORM: VkFormat = 37;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SNORM: VkFormat = 38;
pub const VkFormat_VK_FORMAT_R8G8B8A8_USCALED: VkFormat = 39;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SSCALED: VkFormat = 40;
pub const VkFormat_VK_FORMAT_R8G8B8A8_UINT: VkFormat = 41;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SINT: VkFormat = 42;
pub const VkFormat_VK_FORMAT_R8G8B8A8_SRGB: VkFormat = 43;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UNORM: VkFormat = 44;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SNORM: VkFormat = 45;
pub const VkFormat_VK_FORMAT_B8G8R8A8_USCALED: VkFormat = 46;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SSCALED: VkFormat = 47;
pub const VkFormat_VK_FORMAT_B8G8R8A8_UINT: VkFormat = 48;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SINT: VkFormat = 49;
pub const VkFormat_VK_FORMAT_B8G8R8A8_SRGB: VkFormat = 50;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UNORM_PACK32: VkFormat = 51;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SNORM_PACK32: VkFormat = 52;
pub const VkFormat_VK_FORMAT_A8B8G8R8_USCALED_PACK32: VkFormat = 53;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SSCALED_PACK32: VkFormat = 54;
pub const VkFormat_VK_FORMAT_A8B8G8R8_UINT_PACK32: VkFormat = 55;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SINT_PACK32: VkFormat = 56;
pub const VkFormat_VK_FORMAT_A8B8G8R8_SRGB_PACK32: VkFormat = 57;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UNORM_PACK32: VkFormat = 58;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SNORM_PACK32: VkFormat = 59;
pub const VkFormat_VK_FORMAT_A2R10G10B10_USCALED_PACK32: VkFormat = 60;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SSCALED_PACK32: VkFormat = 61;
pub const VkFormat_VK_FORMAT_A2R10G10B10_UINT_PACK32: VkFormat = 62;
pub const VkFormat_VK_FORMAT_A2R10G10B10_SINT_PACK32: VkFormat = 63;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UNORM_PACK32: VkFormat = 64;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SNORM_PACK32: VkFormat = 65;
pub const VkFormat_VK_FORMAT_A2B10G10R10_USCALED_PACK32: VkFormat = 66;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SSCALED_PACK32: VkFormat = 67;
pub const VkFormat_VK_FORMAT_A2B10G10R10_UINT_PACK32: VkFormat = 68;
pub const VkFormat_VK_FORMAT_A2B10G10R10_SINT_PACK32: VkFormat = 69;
pub const VkFormat_VK_FORMAT_R16_UNORM: VkFormat = 70;
pub const VkFormat_VK_FORMAT_R16_SNORM: VkFormat = 71;
pub const VkFormat_VK_FORMAT_R16_USCALED: VkFormat = 72;
pub const VkFormat_VK_FORMAT_R16_SSCALED: VkFormat = 73;
pub const VkFormat_VK_FORMAT_R16_UINT: VkFormat = 74;
pub const VkFormat_VK_FORMAT_R16_SINT: VkFormat = 75;
pub const VkFormat_VK_FORMAT_R16_SFLOAT: VkFormat = 76;
pub const VkFormat_VK_FORMAT_R16G16_UNORM: VkFormat = 77;
pub const VkFormat_VK_FORMAT_R16G16_SNORM: VkFormat = 78;
pub const VkFormat_VK_FORMAT_R16G16_USCALED: VkFormat = 79;
pub const VkFormat_VK_FORMAT_R16G16_SSCALED: VkFormat = 80;
pub const VkFormat_VK_FORMAT_R16G16_UINT: VkFormat = 81;
pub const VkFormat_VK_FORMAT_R16G16_SINT: VkFormat = 82;
pub const VkFormat_VK_FORMAT_R16G16_SFLOAT: VkFormat = 83;
pub const VkFormat_VK_FORMAT_R16G16B16_UNORM: VkFormat = 84;
pub const VkFormat_VK_FORMAT_R16G16B16_SNORM: VkFormat = 85;
pub const VkFormat_VK_FORMAT_R16G16B16_USCALED: VkFormat = 86;
pub const VkFormat_VK_FORMAT_R16G16B16_SSCALED: VkFormat = 87;
pub const VkFormat_VK_FORMAT_R16G16B16_UINT: VkFormat = 88;
pub const VkFormat_VK_FORMAT_R16G16B16_SINT: VkFormat = 89;
pub const VkFormat_VK_FORMAT_R16G16B16_SFLOAT: VkFormat = 90;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UNORM: VkFormat = 91;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SNORM: VkFormat = 92;
pub const VkFormat_VK_FORMAT_R16G16B16A16_USCALED: VkFormat = 93;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SSCALED: VkFormat = 94;
pub const VkFormat_VK_FORMAT_R16G16B16A16_UINT: VkFormat = 95;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SINT: VkFormat = 96;
pub const VkFormat_VK_FORMAT_R16G16B16A16_SFLOAT: VkFormat = 97;
pub const VkFormat_VK_FORMAT_R32_UINT: VkFormat = 98;
pub const VkFormat_VK_FORMAT_R32_SINT: VkFormat = 99;
pub const VkFormat_VK_FORMAT_R32_SFLOAT: VkFormat = 100;
pub const VkFormat_VK_FORMAT_R32G32_UINT: VkFormat = 101;
pub const VkFormat_VK_FORMAT_R32G32_SINT: VkFormat = 102;
pub const VkFormat_VK_FORMAT_R32G32_SFLOAT: VkFormat = 103;
pub const VkFormat_VK_FORMAT_R32G32B32_UINT: VkFormat = 104;
pub const VkFormat_VK_FORMAT_R32G32B32_SINT: VkFormat = 105;
pub const VkFormat_VK_FORMAT_R32G32B32_SFLOAT: VkFormat = 106;
pub const VkFormat_VK_FORMAT_R32G32B32A32_UINT: VkFormat = 107;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SINT: VkFormat = 108;
pub const VkFormat_VK_FORMAT_R32G32B32A32_SFLOAT: VkFormat = 109;
pub const VkFormat_VK_FORMAT_R64_UINT: VkFormat = 110;
pub const VkFormat_VK_FORMAT_R64_SINT: VkFormat = 111;
pub const VkFormat_VK_FORMAT_R64_SFLOAT: VkFormat = 112;
pub const VkFormat_VK_FORMAT_R64G64_UINT: VkFormat = 113;
pub const VkFormat_VK_FORMAT_R64G64_SINT: VkFormat = 114;
pub const VkFormat_VK_FORMAT_R64G64_SFLOAT: VkFormat = 115;
pub const VkFormat_VK_FORMAT_R64G64B64_UINT: VkFormat = 116;
pub const VkFormat_VK_FORMAT_R64G64B64_SINT: VkFormat = 117;
pub const VkFormat_VK_FORMAT_R64G64B64_SFLOAT: VkFormat = 118;
pub const VkFormat_VK_FORMAT_R64G64B64A64_UINT: VkFormat = 119;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SINT: VkFormat = 120;
pub const VkFormat_VK_FORMAT_R64G64B64A64_SFLOAT: VkFormat = 121;
pub const VkFormat_VK_FORMAT_B10G11R11_UFLOAT_PACK32: VkFormat = 122;
pub const VkFormat_VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: VkFormat = 123;
pub const VkFormat_VK_FORMAT_D16_UNORM: VkFormat = 124;
pub const VkFormat_VK_FORMAT_X8_D24_UNORM_PACK32: VkFormat = 125;
pub const VkFormat_VK_FORMAT_D32_SFLOAT: VkFormat = 126;
pub const VkFormat_VK_FORMAT_S8_UINT: VkFormat = 127;
pub const VkFormat_VK_FORMAT_D16_UNORM_S8_UINT: VkFormat = 128;
pub const VkFormat_VK_FORMAT_D24_UNORM_S8_UINT: VkFormat = 129;
pub const VkFormat_VK_FORMAT_D32_SFLOAT_S8_UINT: VkFormat = 130;
pub const VkFormat_VK_FORMAT_BC1_RGB_UNORM_BLOCK: VkFormat = 131;
pub const VkFormat_VK_FORMAT_BC1_RGB_SRGB_BLOCK: VkFormat = 132;
pub const VkFormat_VK_FORMAT_BC1_RGBA_UNORM_BLOCK: VkFormat = 133;
pub const VkFormat_VK_FORMAT_BC1_RGBA_SRGB_BLOCK: VkFormat = 134;
pub const VkFormat_VK_FORMAT_BC2_UNORM_BLOCK: VkFormat = 135;
pub const VkFormat_VK_FORMAT_BC2_SRGB_BLOCK: VkFormat = 136;
pub const VkFormat_VK_FORMAT_BC3_UNORM_BLOCK: VkFormat = 137;
pub const VkFormat_VK_FORMAT_BC3_SRGB_BLOCK: VkFormat = 138;
pub const VkFormat_VK_FORMAT_BC4_UNORM_BLOCK: VkFormat = 139;
pub const VkFormat_VK_FORMAT_BC4_SNORM_BLOCK: VkFormat = 140;
pub const VkFormat_VK_FORMAT_BC5_UNORM_BLOCK: VkFormat = 141;
pub const VkFormat_VK_FORMAT_BC5_SNORM_BLOCK: VkFormat = 142;
pub const VkFormat_VK_FORMAT_BC6H_UFLOAT_BLOCK: VkFormat = 143;
pub const VkFormat_VK_FORMAT_BC6H_SFLOAT_BLOCK: VkFormat = 144;
pub const VkFormat_VK_FORMAT_BC7_UNORM_BLOCK: VkFormat = 145;
pub const VkFormat_VK_FORMAT_BC7_SRGB_BLOCK: VkFormat = 146;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: VkFormat = 147;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: VkFormat = 148;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: VkFormat = 149;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: VkFormat = 150;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: VkFormat = 151;
pub const VkFormat_VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: VkFormat = 152;
pub const VkFormat_VK_FORMAT_EAC_R11_UNORM_BLOCK: VkFormat = 153;
pub const VkFormat_VK_FORMAT_EAC_R11_SNORM_BLOCK: VkFormat = 154;
pub const VkFormat_VK_FORMAT_EAC_R11G11_UNORM_BLOCK: VkFormat = 155;
pub const VkFormat_VK_FORMAT_EAC_R11G11_SNORM_BLOCK: VkFormat = 156;
pub const VkFormat_VK_FORMAT_ASTC_4x4_UNORM_BLOCK: VkFormat = 157;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SRGB_BLOCK: VkFormat = 158;
pub const VkFormat_VK_FORMAT_ASTC_5x4_UNORM_BLOCK: VkFormat = 159;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SRGB_BLOCK: VkFormat = 160;
pub const VkFormat_VK_FORMAT_ASTC_5x5_UNORM_BLOCK: VkFormat = 161;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SRGB_BLOCK: VkFormat = 162;
pub const VkFormat_VK_FORMAT_ASTC_6x5_UNORM_BLOCK: VkFormat = 163;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SRGB_BLOCK: VkFormat = 164;
pub const VkFormat_VK_FORMAT_ASTC_6x6_UNORM_BLOCK: VkFormat = 165;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SRGB_BLOCK: VkFormat = 166;
pub const VkFormat_VK_FORMAT_ASTC_8x5_UNORM_BLOCK: VkFormat = 167;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SRGB_BLOCK: VkFormat = 168;
pub const VkFormat_VK_FORMAT_ASTC_8x6_UNORM_BLOCK: VkFormat = 169;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SRGB_BLOCK: VkFormat = 170;
pub const VkFormat_VK_FORMAT_ASTC_8x8_UNORM_BLOCK: VkFormat = 171;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SRGB_BLOCK: VkFormat = 172;
pub const VkFormat_VK_FORMAT_ASTC_10x5_UNORM_BLOCK: VkFormat = 173;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SRGB_BLOCK: VkFormat = 174;
pub const VkFormat_VK_FORMAT_ASTC_10x6_UNORM_BLOCK: VkFormat = 175;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SRGB_BLOCK: VkFormat = 176;
pub const VkFormat_VK_FORMAT_ASTC_10x8_UNORM_BLOCK: VkFormat = 177;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SRGB_BLOCK: VkFormat = 178;
pub const VkFormat_VK_FORMAT_ASTC_10x10_UNORM_BLOCK: VkFormat = 179;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SRGB_BLOCK: VkFormat = 180;
pub const VkFormat_VK_FORMAT_ASTC_12x10_UNORM_BLOCK: VkFormat = 181;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SRGB_BLOCK: VkFormat = 182;
pub const VkFormat_VK_FORMAT_ASTC_12x12_UNORM_BLOCK: VkFormat = 183;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SRGB_BLOCK: VkFormat = 184;
pub const VkFormat_VK_FORMAT_G8B8G8R8_422_UNORM: VkFormat = 1000156000;
pub const VkFormat_VK_FORMAT_B8G8R8G8_422_UNORM: VkFormat = 1000156001;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: VkFormat = 1000156002;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: VkFormat = 1000156003;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: VkFormat = 1000156004;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: VkFormat = 1000156005;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: VkFormat = 1000156006;
pub const VkFormat_VK_FORMAT_R10X6_UNORM_PACK16: VkFormat = 1000156007;
pub const VkFormat_VK_FORMAT_R10X6G10X6_UNORM_2PACK16: VkFormat = 1000156008;
pub const VkFormat_VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: VkFormat = 1000156009;
pub const VkFormat_VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: VkFormat = 1000156010;
pub const VkFormat_VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: VkFormat = 1000156011;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: VkFormat = 1000156012;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: VkFormat = 1000156013;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: VkFormat = 1000156014;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: VkFormat = 1000156015;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: VkFormat = 1000156016;
pub const VkFormat_VK_FORMAT_R12X4_UNORM_PACK16: VkFormat = 1000156017;
pub const VkFormat_VK_FORMAT_R12X4G12X4_UNORM_2PACK16: VkFormat = 1000156018;
pub const VkFormat_VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: VkFormat = 1000156019;
pub const VkFormat_VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: VkFormat = 1000156020;
pub const VkFormat_VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: VkFormat = 1000156021;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: VkFormat = 1000156022;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: VkFormat = 1000156023;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: VkFormat = 1000156024;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: VkFormat = 1000156025;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: VkFormat = 1000156026;
pub const VkFormat_VK_FORMAT_G16B16G16R16_422_UNORM: VkFormat = 1000156027;
pub const VkFormat_VK_FORMAT_B16G16R16G16_422_UNORM: VkFormat = 1000156028;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: VkFormat = 1000156029;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: VkFormat = 1000156030;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: VkFormat = 1000156031;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: VkFormat = 1000156032;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: VkFormat = 1000156033;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: VkFormat = 1000330000;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: VkFormat = 1000330001;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: VkFormat = 1000330002;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: VkFormat = 1000330003;
pub const VkFormat_VK_FORMAT_A4R4G4B4_UNORM_PACK16: VkFormat = 1000340000;
pub const VkFormat_VK_FORMAT_A4B4G4R4_UNORM_PACK16: VkFormat = 1000340001;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: VkFormat = 1000066000;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: VkFormat = 1000066001;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: VkFormat = 1000066002;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: VkFormat = 1000066003;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: VkFormat = 1000066004;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: VkFormat = 1000066005;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: VkFormat = 1000066006;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: VkFormat = 1000066007;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: VkFormat = 1000066008;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: VkFormat = 1000066009;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: VkFormat = 1000066010;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: VkFormat = 1000066011;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: VkFormat = 1000066012;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: VkFormat = 1000066013;
pub const VkFormat_VK_FORMAT_A1B5G5R5_UNORM_PACK16: VkFormat = 1000470000;
pub const VkFormat_VK_FORMAT_A8_UNORM: VkFormat = 1000470001;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054000;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054001;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: VkFormat = 1000054002;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: VkFormat = 1000054003;
pub const VkFormat_VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054004;
pub const VkFormat_VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054005;
pub const VkFormat_VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: VkFormat = 1000054006;
pub const VkFormat_VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: VkFormat = 1000054007;
pub const VkFormat_VK_FORMAT_R16G16_SFIXED5_NV: VkFormat = 1000464000;
pub const VkFormat_VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: VkFormat = 1000066000;
pub const VkFormat_VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: VkFormat = 1000066001;
pub const VkFormat_VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066002;
pub const VkFormat_VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066003;
pub const VkFormat_VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066004;
pub const VkFormat_VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066005;
pub const VkFormat_VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066006;
pub const VkFormat_VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: VkFormat = 1000066007;
pub const VkFormat_VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: VkFormat = 1000066008;
pub const VkFormat_VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: VkFormat = 1000066009;
pub const VkFormat_VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: VkFormat = 1000066010;
pub const VkFormat_VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: VkFormat = 1000066011;
pub const VkFormat_VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: VkFormat = 1000066012;
pub const VkFormat_VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: VkFormat = 1000066013;
pub const VkFormat_VK_FORMAT_G8B8G8R8_422_UNORM_KHR: VkFormat = 1000156000;
pub const VkFormat_VK_FORMAT_B8G8R8G8_422_UNORM_KHR: VkFormat = 1000156001;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: VkFormat = 1000156002;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: VkFormat = 1000156003;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: VkFormat = 1000156004;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: VkFormat = 1000156005;
pub const VkFormat_VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: VkFormat = 1000156006;
pub const VkFormat_VK_FORMAT_R10X6_UNORM_PACK16_KHR: VkFormat = 1000156007;
pub const VkFormat_VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: VkFormat = 1000156008;
pub const VkFormat_VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: VkFormat = 1000156009;
pub const VkFormat_VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156010;
pub const VkFormat_VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: VkFormat = 1000156011;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156012;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156013;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156014;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156015;
pub const VkFormat_VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156016;
pub const VkFormat_VK_FORMAT_R12X4_UNORM_PACK16_KHR: VkFormat = 1000156017;
pub const VkFormat_VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: VkFormat = 1000156018;
pub const VkFormat_VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: VkFormat = 1000156019;
pub const VkFormat_VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156020;
pub const VkFormat_VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: VkFormat = 1000156021;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156022;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: VkFormat = 1000156023;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156024;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: VkFormat = 1000156025;
pub const VkFormat_VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: VkFormat = 1000156026;
pub const VkFormat_VK_FORMAT_G16B16G16R16_422_UNORM_KHR: VkFormat = 1000156027;
pub const VkFormat_VK_FORMAT_B16G16R16G16_422_UNORM_KHR: VkFormat = 1000156028;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: VkFormat = 1000156029;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: VkFormat = 1000156030;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: VkFormat = 1000156031;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: VkFormat = 1000156032;
pub const VkFormat_VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: VkFormat = 1000156033;
pub const VkFormat_VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: VkFormat = 1000330000;
pub const VkFormat_VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: VkFormat = 1000330001;
pub const VkFormat_VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: VkFormat = 1000330002;
pub const VkFormat_VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: VkFormat = 1000330003;
pub const VkFormat_VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: VkFormat = 1000340000;
pub const VkFormat_VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: VkFormat = 1000340001;
pub const VkFormat_VK_FORMAT_R16G16_S10_5_NV: VkFormat = 1000464000;
pub const VkFormat_VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR: VkFormat = 1000470000;
pub const VkFormat_VK_FORMAT_A8_UNORM_KHR: VkFormat = 1000470001;
pub const VkFormat_VK_FORMAT_MAX_ENUM: VkFormat = 2147483647;
pub type VkFormat = ::std::os::raw::c_uint;
pub const VkImageTiling_VK_IMAGE_TILING_OPTIMAL: VkImageTiling = 0;
pub const VkImageTiling_VK_IMAGE_TILING_LINEAR: VkImageTiling = 1;
pub const VkImageTiling_VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: VkImageTiling = 1000158000;
pub const VkImageTiling_VK_IMAGE_TILING_MAX_ENUM: VkImageTiling = 2147483647;
pub type VkImageTiling = ::std::os::raw::c_uint;
pub const VkImageType_VK_IMAGE_TYPE_1D: VkImageType = 0;
pub const VkImageType_VK_IMAGE_TYPE_2D: VkImageType = 1;
pub const VkImageType_VK_IMAGE_TYPE_3D: VkImageType = 2;
pub const VkImageType_VK_IMAGE_TYPE_MAX_ENUM: VkImageType = 2147483647;
pub type VkImageType = ::std::os::raw::c_uint;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_OTHER: VkPhysicalDeviceType = 0;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: VkPhysicalDeviceType = 1;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: VkPhysicalDeviceType = 2;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: VkPhysicalDeviceType = 3;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_CPU: VkPhysicalDeviceType = 4;
pub const VkPhysicalDeviceType_VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: VkPhysicalDeviceType = 2147483647;
pub type VkPhysicalDeviceType = ::std::os::raw::c_uint;
pub const VkQueryType_VK_QUERY_TYPE_OCCLUSION: VkQueryType = 0;
pub const VkQueryType_VK_QUERY_TYPE_PIPELINE_STATISTICS: VkQueryType = 1;
pub const VkQueryType_VK_QUERY_TYPE_TIMESTAMP: VkQueryType = 2;
pub const VkQueryType_VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR: VkQueryType = 1000023000;
pub const VkQueryType_VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: VkQueryType = 1000028004;
pub const VkQueryType_VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: VkQueryType = 1000116000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: VkQueryType =
    1000150000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: VkQueryType =
    1000150001;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: VkQueryType =
    1000165000;
pub const VkQueryType_VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: VkQueryType = 1000210000;
pub const VkQueryType_VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR: VkQueryType = 1000299000;
pub const VkQueryType_VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT: VkQueryType = 1000328000;
pub const VkQueryType_VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: VkQueryType = 1000382000;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR : VkQueryType = 1000386000 ;
pub const VkQueryType_VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: VkQueryType = 1000386001;
pub const VkQueryType_VK_QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT: VkQueryType = 1000396000;
pub const VkQueryType_VK_QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT: VkQueryType = 1000396001;
pub const VkQueryType_VK_QUERY_TYPE_MAX_ENUM: VkQueryType = 2147483647;
pub type VkQueryType = ::std::os::raw::c_uint;
pub const VkSharingMode_VK_SHARING_MODE_EXCLUSIVE: VkSharingMode = 0;
pub const VkSharingMode_VK_SHARING_MODE_CONCURRENT: VkSharingMode = 1;
pub const VkSharingMode_VK_SHARING_MODE_MAX_ENUM: VkSharingMode = 2147483647;
pub type VkSharingMode = ::std::os::raw::c_uint;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_IDENTITY: VkComponentSwizzle = 0;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ZERO: VkComponentSwizzle = 1;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_ONE: VkComponentSwizzle = 2;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_R: VkComponentSwizzle = 3;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_G: VkComponentSwizzle = 4;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_B: VkComponentSwizzle = 5;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_A: VkComponentSwizzle = 6;
pub const VkComponentSwizzle_VK_COMPONENT_SWIZZLE_MAX_ENUM: VkComponentSwizzle = 2147483647;
pub type VkComponentSwizzle = ::std::os::raw::c_uint;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_1D: VkImageViewType = 0;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_2D: VkImageViewType = 1;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_3D: VkImageViewType = 2;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_CUBE: VkImageViewType = 3;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_1D_ARRAY: VkImageViewType = 4;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_2D_ARRAY: VkImageViewType = 5;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: VkImageViewType = 6;
pub const VkImageViewType_VK_IMAGE_VIEW_TYPE_MAX_ENUM: VkImageViewType = 2147483647;
pub type VkImageViewType = ::std::os::raw::c_uint;
pub const VkBlendFactor_VK_BLEND_FACTOR_ZERO: VkBlendFactor = 0;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE: VkBlendFactor = 1;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_COLOR: VkBlendFactor = 2;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: VkBlendFactor = 3;
pub const VkBlendFactor_VK_BLEND_FACTOR_DST_COLOR: VkBlendFactor = 4;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: VkBlendFactor = 5;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_ALPHA: VkBlendFactor = 6;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: VkBlendFactor = 7;
pub const VkBlendFactor_VK_BLEND_FACTOR_DST_ALPHA: VkBlendFactor = 8;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: VkBlendFactor = 9;
pub const VkBlendFactor_VK_BLEND_FACTOR_CONSTANT_COLOR: VkBlendFactor = 10;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: VkBlendFactor = 11;
pub const VkBlendFactor_VK_BLEND_FACTOR_CONSTANT_ALPHA: VkBlendFactor = 12;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: VkBlendFactor = 13;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: VkBlendFactor = 14;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC1_COLOR: VkBlendFactor = 15;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: VkBlendFactor = 16;
pub const VkBlendFactor_VK_BLEND_FACTOR_SRC1_ALPHA: VkBlendFactor = 17;
pub const VkBlendFactor_VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: VkBlendFactor = 18;
pub const VkBlendFactor_VK_BLEND_FACTOR_MAX_ENUM: VkBlendFactor = 2147483647;
pub type VkBlendFactor = ::std::os::raw::c_uint;
pub const VkBlendOp_VK_BLEND_OP_ADD: VkBlendOp = 0;
pub const VkBlendOp_VK_BLEND_OP_SUBTRACT: VkBlendOp = 1;
pub const VkBlendOp_VK_BLEND_OP_REVERSE_SUBTRACT: VkBlendOp = 2;
pub const VkBlendOp_VK_BLEND_OP_MIN: VkBlendOp = 3;
pub const VkBlendOp_VK_BLEND_OP_MAX: VkBlendOp = 4;
pub const VkBlendOp_VK_BLEND_OP_ZERO_EXT: VkBlendOp = 1000148000;
pub const VkBlendOp_VK_BLEND_OP_SRC_EXT: VkBlendOp = 1000148001;
pub const VkBlendOp_VK_BLEND_OP_DST_EXT: VkBlendOp = 1000148002;
pub const VkBlendOp_VK_BLEND_OP_SRC_OVER_EXT: VkBlendOp = 1000148003;
pub const VkBlendOp_VK_BLEND_OP_DST_OVER_EXT: VkBlendOp = 1000148004;
pub const VkBlendOp_VK_BLEND_OP_SRC_IN_EXT: VkBlendOp = 1000148005;
pub const VkBlendOp_VK_BLEND_OP_DST_IN_EXT: VkBlendOp = 1000148006;
pub const VkBlendOp_VK_BLEND_OP_SRC_OUT_EXT: VkBlendOp = 1000148007;
pub const VkBlendOp_VK_BLEND_OP_DST_OUT_EXT: VkBlendOp = 1000148008;
pub const VkBlendOp_VK_BLEND_OP_SRC_ATOP_EXT: VkBlendOp = 1000148009;
pub const VkBlendOp_VK_BLEND_OP_DST_ATOP_EXT: VkBlendOp = 1000148010;
pub const VkBlendOp_VK_BLEND_OP_XOR_EXT: VkBlendOp = 1000148011;
pub const VkBlendOp_VK_BLEND_OP_MULTIPLY_EXT: VkBlendOp = 1000148012;
pub const VkBlendOp_VK_BLEND_OP_SCREEN_EXT: VkBlendOp = 1000148013;
pub const VkBlendOp_VK_BLEND_OP_OVERLAY_EXT: VkBlendOp = 1000148014;
pub const VkBlendOp_VK_BLEND_OP_DARKEN_EXT: VkBlendOp = 1000148015;
pub const VkBlendOp_VK_BLEND_OP_LIGHTEN_EXT: VkBlendOp = 1000148016;
pub const VkBlendOp_VK_BLEND_OP_COLORDODGE_EXT: VkBlendOp = 1000148017;
pub const VkBlendOp_VK_BLEND_OP_COLORBURN_EXT: VkBlendOp = 1000148018;
pub const VkBlendOp_VK_BLEND_OP_HARDLIGHT_EXT: VkBlendOp = 1000148019;
pub const VkBlendOp_VK_BLEND_OP_SOFTLIGHT_EXT: VkBlendOp = 1000148020;
pub const VkBlendOp_VK_BLEND_OP_DIFFERENCE_EXT: VkBlendOp = 1000148021;
pub const VkBlendOp_VK_BLEND_OP_EXCLUSION_EXT: VkBlendOp = 1000148022;
pub const VkBlendOp_VK_BLEND_OP_INVERT_EXT: VkBlendOp = 1000148023;
pub const VkBlendOp_VK_BLEND_OP_INVERT_RGB_EXT: VkBlendOp = 1000148024;
pub const VkBlendOp_VK_BLEND_OP_LINEARDODGE_EXT: VkBlendOp = 1000148025;
pub const VkBlendOp_VK_BLEND_OP_LINEARBURN_EXT: VkBlendOp = 1000148026;
pub const VkBlendOp_VK_BLEND_OP_VIVIDLIGHT_EXT: VkBlendOp = 1000148027;
pub const VkBlendOp_VK_BLEND_OP_LINEARLIGHT_EXT: VkBlendOp = 1000148028;
pub const VkBlendOp_VK_BLEND_OP_PINLIGHT_EXT: VkBlendOp = 1000148029;
pub const VkBlendOp_VK_BLEND_OP_HARDMIX_EXT: VkBlendOp = 1000148030;
pub const VkBlendOp_VK_BLEND_OP_HSL_HUE_EXT: VkBlendOp = 1000148031;
pub const VkBlendOp_VK_BLEND_OP_HSL_SATURATION_EXT: VkBlendOp = 1000148032;
pub const VkBlendOp_VK_BLEND_OP_HSL_COLOR_EXT: VkBlendOp = 1000148033;
pub const VkBlendOp_VK_BLEND_OP_HSL_LUMINOSITY_EXT: VkBlendOp = 1000148034;
pub const VkBlendOp_VK_BLEND_OP_PLUS_EXT: VkBlendOp = 1000148035;
pub const VkBlendOp_VK_BLEND_OP_PLUS_CLAMPED_EXT: VkBlendOp = 1000148036;
pub const VkBlendOp_VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: VkBlendOp = 1000148037;
pub const VkBlendOp_VK_BLEND_OP_PLUS_DARKER_EXT: VkBlendOp = 1000148038;
pub const VkBlendOp_VK_BLEND_OP_MINUS_EXT: VkBlendOp = 1000148039;
pub const VkBlendOp_VK_BLEND_OP_MINUS_CLAMPED_EXT: VkBlendOp = 1000148040;
pub const VkBlendOp_VK_BLEND_OP_CONTRAST_EXT: VkBlendOp = 1000148041;
pub const VkBlendOp_VK_BLEND_OP_INVERT_OVG_EXT: VkBlendOp = 1000148042;
pub const VkBlendOp_VK_BLEND_OP_RED_EXT: VkBlendOp = 1000148043;
pub const VkBlendOp_VK_BLEND_OP_GREEN_EXT: VkBlendOp = 1000148044;
pub const VkBlendOp_VK_BLEND_OP_BLUE_EXT: VkBlendOp = 1000148045;
pub const VkBlendOp_VK_BLEND_OP_MAX_ENUM: VkBlendOp = 2147483647;
pub type VkBlendOp = ::std::os::raw::c_uint;
pub const VkCompareOp_VK_COMPARE_OP_NEVER: VkCompareOp = 0;
pub const VkCompareOp_VK_COMPARE_OP_LESS: VkCompareOp = 1;
pub const VkCompareOp_VK_COMPARE_OP_EQUAL: VkCompareOp = 2;
pub const VkCompareOp_VK_COMPARE_OP_LESS_OR_EQUAL: VkCompareOp = 3;
pub const VkCompareOp_VK_COMPARE_OP_GREATER: VkCompareOp = 4;
pub const VkCompareOp_VK_COMPARE_OP_NOT_EQUAL: VkCompareOp = 5;
pub const VkCompareOp_VK_COMPARE_OP_GREATER_OR_EQUAL: VkCompareOp = 6;
pub const VkCompareOp_VK_COMPARE_OP_ALWAYS: VkCompareOp = 7;
pub const VkCompareOp_VK_COMPARE_OP_MAX_ENUM: VkCompareOp = 2147483647;
pub type VkCompareOp = ::std::os::raw::c_uint;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT: VkDynamicState = 0;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR: VkDynamicState = 1;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_WIDTH: VkDynamicState = 2;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BIAS: VkDynamicState = 3;
pub const VkDynamicState_VK_DYNAMIC_STATE_BLEND_CONSTANTS: VkDynamicState = 4;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS: VkDynamicState = 5;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: VkDynamicState = 6;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: VkDynamicState = 7;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_REFERENCE: VkDynamicState = 8;
pub const VkDynamicState_VK_DYNAMIC_STATE_CULL_MODE: VkDynamicState = 1000267000;
pub const VkDynamicState_VK_DYNAMIC_STATE_FRONT_FACE: VkDynamicState = 1000267001;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: VkDynamicState = 1000267002;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT: VkDynamicState = 1000267003;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT: VkDynamicState = 1000267004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: VkDynamicState = 1000267005;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE: VkDynamicState = 1000267006;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE: VkDynamicState = 1000267007;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_COMPARE_OP: VkDynamicState = 1000267008;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: VkDynamicState = 1000267009;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE: VkDynamicState = 1000267010;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_OP: VkDynamicState = 1000267011;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: VkDynamicState = 1000377001;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE: VkDynamicState = 1000377002;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: VkDynamicState = 1000377004;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE: VkDynamicState = 1000259000;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: VkDynamicState = 1000087000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: VkDynamicState = 1000099000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT: VkDynamicState = 1000099001;
pub const VkDynamicState_VK_DYNAMIC_STATE_DISCARD_RECTANGLE_MODE_EXT: VkDynamicState = 1000099002;
pub const VkDynamicState_VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: VkDynamicState = 1000143000;
pub const VkDynamicState_VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: VkDynamicState =
    1000347000;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: VkDynamicState =
    1000164004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: VkDynamicState =
    1000164006;
pub const VkDynamicState_VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_ENABLE_NV: VkDynamicState = 1000205000;
pub const VkDynamicState_VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: VkDynamicState = 1000205001;
pub const VkDynamicState_VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: VkDynamicState = 1000226000;
pub const VkDynamicState_VK_DYNAMIC_STATE_VERTEX_INPUT_EXT: VkDynamicState = 1000352000;
pub const VkDynamicState_VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: VkDynamicState = 1000377000;
pub const VkDynamicState_VK_DYNAMIC_STATE_LOGIC_OP_EXT: VkDynamicState = 1000377003;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: VkDynamicState = 1000381000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT: VkDynamicState = 1000455003;
pub const VkDynamicState_VK_DYNAMIC_STATE_POLYGON_MODE_EXT: VkDynamicState = 1000455004;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT: VkDynamicState = 1000455005;
pub const VkDynamicState_VK_DYNAMIC_STATE_SAMPLE_MASK_EXT: VkDynamicState = 1000455006;
pub const VkDynamicState_VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT: VkDynamicState = 1000455007;
pub const VkDynamicState_VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT: VkDynamicState = 1000455008;
pub const VkDynamicState_VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT: VkDynamicState = 1000455009;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT: VkDynamicState = 1000455010;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT: VkDynamicState = 1000455011;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT: VkDynamicState = 1000455012;
pub const VkDynamicState_VK_DYNAMIC_STATE_TESSELLATION_DOMAIN_ORIGIN_EXT: VkDynamicState =
    1000455002;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZATION_STREAM_EXT: VkDynamicState = 1000455013;
pub const VkDynamicState_VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT: VkDynamicState =
    1000455014;
pub const VkDynamicState_VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT: VkDynamicState =
    1000455015;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT: VkDynamicState = 1000455016;
pub const VkDynamicState_VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT: VkDynamicState = 1000455017;
pub const VkDynamicState_VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT: VkDynamicState = 1000455018;
pub const VkDynamicState_VK_DYNAMIC_STATE_PROVOKING_VERTEX_MODE_EXT: VkDynamicState = 1000455019;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_RASTERIZATION_MODE_EXT: VkDynamicState = 1000455020;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT: VkDynamicState = 1000455021;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT: VkDynamicState =
    1000455022;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_ENABLE_NV: VkDynamicState = 1000455023;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_SWIZZLE_NV: VkDynamicState = 1000455024;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_ENABLE_NV: VkDynamicState = 1000455025;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV: VkDynamicState =
    1000455026;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_MODULATION_MODE_NV: VkDynamicState = 1000455027;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_ENABLE_NV: VkDynamicState =
    1000455028;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_MODULATION_TABLE_NV: VkDynamicState = 1000455029;
pub const VkDynamicState_VK_DYNAMIC_STATE_SHADING_RATE_IMAGE_ENABLE_NV: VkDynamicState = 1000455030;
pub const VkDynamicState_VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV: VkDynamicState =
    1000455031;
pub const VkDynamicState_VK_DYNAMIC_STATE_COVERAGE_REDUCTION_MODE_NV: VkDynamicState = 1000455032;
pub const VkDynamicState_VK_DYNAMIC_STATE_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT: VkDynamicState =
    1000524000;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_CLAMP_RANGE_EXT: VkDynamicState = 1000582000;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: VkDynamicState = 1000259000;
pub const VkDynamicState_VK_DYNAMIC_STATE_CULL_MODE_EXT: VkDynamicState = 1000267000;
pub const VkDynamicState_VK_DYNAMIC_STATE_FRONT_FACE_EXT: VkDynamicState = 1000267001;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: VkDynamicState = 1000267002;
pub const VkDynamicState_VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: VkDynamicState = 1000267003;
pub const VkDynamicState_VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: VkDynamicState = 1000267004;
pub const VkDynamicState_VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: VkDynamicState =
    1000267005;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: VkDynamicState = 1000267006;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: VkDynamicState = 1000267007;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: VkDynamicState = 1000267008;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: VkDynamicState = 1000267009;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: VkDynamicState = 1000267010;
pub const VkDynamicState_VK_DYNAMIC_STATE_STENCIL_OP_EXT: VkDynamicState = 1000267011;
pub const VkDynamicState_VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: VkDynamicState =
    1000377001;
pub const VkDynamicState_VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: VkDynamicState = 1000377002;
pub const VkDynamicState_VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: VkDynamicState = 1000377004;
pub const VkDynamicState_VK_DYNAMIC_STATE_LINE_STIPPLE_KHR: VkDynamicState = 1000259000;
pub const VkDynamicState_VK_DYNAMIC_STATE_MAX_ENUM: VkDynamicState = 2147483647;
pub type VkDynamicState = ::std::os::raw::c_uint;
pub const VkFrontFace_VK_FRONT_FACE_COUNTER_CLOCKWISE: VkFrontFace = 0;
pub const VkFrontFace_VK_FRONT_FACE_CLOCKWISE: VkFrontFace = 1;
pub const VkFrontFace_VK_FRONT_FACE_MAX_ENUM: VkFrontFace = 2147483647;
pub type VkFrontFace = ::std::os::raw::c_uint;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_VERTEX: VkVertexInputRate = 0;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_INSTANCE: VkVertexInputRate = 1;
pub const VkVertexInputRate_VK_VERTEX_INPUT_RATE_MAX_ENUM: VkVertexInputRate = 2147483647;
pub type VkVertexInputRate = ::std::os::raw::c_uint;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_POINT_LIST: VkPrimitiveTopology = 0;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_LIST: VkPrimitiveTopology = 1;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: VkPrimitiveTopology = 2;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: VkPrimitiveTopology = 3;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: VkPrimitiveTopology = 4;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: VkPrimitiveTopology = 5;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: VkPrimitiveTopology =
    6;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: VkPrimitiveTopology =
    7;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY:
    VkPrimitiveTopology = 8;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY:
    VkPrimitiveTopology = 9;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: VkPrimitiveTopology = 10;
pub const VkPrimitiveTopology_VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: VkPrimitiveTopology = 2147483647;
pub type VkPrimitiveTopology = ::std::os::raw::c_uint;
pub const VkPolygonMode_VK_POLYGON_MODE_FILL: VkPolygonMode = 0;
pub const VkPolygonMode_VK_POLYGON_MODE_LINE: VkPolygonMode = 1;
pub const VkPolygonMode_VK_POLYGON_MODE_POINT: VkPolygonMode = 2;
pub const VkPolygonMode_VK_POLYGON_MODE_FILL_RECTANGLE_NV: VkPolygonMode = 1000153000;
pub const VkPolygonMode_VK_POLYGON_MODE_MAX_ENUM: VkPolygonMode = 2147483647;
pub type VkPolygonMode = ::std::os::raw::c_uint;
pub const VkStencilOp_VK_STENCIL_OP_KEEP: VkStencilOp = 0;
pub const VkStencilOp_VK_STENCIL_OP_ZERO: VkStencilOp = 1;
pub const VkStencilOp_VK_STENCIL_OP_REPLACE: VkStencilOp = 2;
pub const VkStencilOp_VK_STENCIL_OP_INCREMENT_AND_CLAMP: VkStencilOp = 3;
pub const VkStencilOp_VK_STENCIL_OP_DECREMENT_AND_CLAMP: VkStencilOp = 4;
pub const VkStencilOp_VK_STENCIL_OP_INVERT: VkStencilOp = 5;
pub const VkStencilOp_VK_STENCIL_OP_INCREMENT_AND_WRAP: VkStencilOp = 6;
pub const VkStencilOp_VK_STENCIL_OP_DECREMENT_AND_WRAP: VkStencilOp = 7;
pub const VkStencilOp_VK_STENCIL_OP_MAX_ENUM: VkStencilOp = 2147483647;
pub type VkStencilOp = ::std::os::raw::c_uint;
pub const VkLogicOp_VK_LOGIC_OP_CLEAR: VkLogicOp = 0;
pub const VkLogicOp_VK_LOGIC_OP_AND: VkLogicOp = 1;
pub const VkLogicOp_VK_LOGIC_OP_AND_REVERSE: VkLogicOp = 2;
pub const VkLogicOp_VK_LOGIC_OP_COPY: VkLogicOp = 3;
pub const VkLogicOp_VK_LOGIC_OP_AND_INVERTED: VkLogicOp = 4;
pub const VkLogicOp_VK_LOGIC_OP_NO_OP: VkLogicOp = 5;
pub const VkLogicOp_VK_LOGIC_OP_XOR: VkLogicOp = 6;
pub const VkLogicOp_VK_LOGIC_OP_OR: VkLogicOp = 7;
pub const VkLogicOp_VK_LOGIC_OP_NOR: VkLogicOp = 8;
pub const VkLogicOp_VK_LOGIC_OP_EQUIVALENT: VkLogicOp = 9;
pub const VkLogicOp_VK_LOGIC_OP_INVERT: VkLogicOp = 10;
pub const VkLogicOp_VK_LOGIC_OP_OR_REVERSE: VkLogicOp = 11;
pub const VkLogicOp_VK_LOGIC_OP_COPY_INVERTED: VkLogicOp = 12;
pub const VkLogicOp_VK_LOGIC_OP_OR_INVERTED: VkLogicOp = 13;
pub const VkLogicOp_VK_LOGIC_OP_NAND: VkLogicOp = 14;
pub const VkLogicOp_VK_LOGIC_OP_SET: VkLogicOp = 15;
pub const VkLogicOp_VK_LOGIC_OP_MAX_ENUM: VkLogicOp = 2147483647;
pub type VkLogicOp = ::std::os::raw::c_uint;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: VkBorderColor = 0;
pub const VkBorderColor_VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: VkBorderColor = 1;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: VkBorderColor = 2;
pub const VkBorderColor_VK_BORDER_COLOR_INT_OPAQUE_BLACK: VkBorderColor = 3;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: VkBorderColor = 4;
pub const VkBorderColor_VK_BORDER_COLOR_INT_OPAQUE_WHITE: VkBorderColor = 5;
pub const VkBorderColor_VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: VkBorderColor = 1000287003;
pub const VkBorderColor_VK_BORDER_COLOR_INT_CUSTOM_EXT: VkBorderColor = 1000287004;
pub const VkBorderColor_VK_BORDER_COLOR_MAX_ENUM: VkBorderColor = 2147483647;
pub type VkBorderColor = ::std::os::raw::c_uint;
pub const VkFilter_VK_FILTER_NEAREST: VkFilter = 0;
pub const VkFilter_VK_FILTER_LINEAR: VkFilter = 1;
pub const VkFilter_VK_FILTER_CUBIC_EXT: VkFilter = 1000015000;
pub const VkFilter_VK_FILTER_CUBIC_IMG: VkFilter = 1000015000;
pub const VkFilter_VK_FILTER_MAX_ENUM: VkFilter = 2147483647;
pub type VkFilter = ::std::os::raw::c_uint;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_REPEAT: VkSamplerAddressMode = 0;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: VkSamplerAddressMode = 1;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: VkSamplerAddressMode = 2;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: VkSamplerAddressMode = 3;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: VkSamplerAddressMode =
    4;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR:
    VkSamplerAddressMode = 4;
pub const VkSamplerAddressMode_VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: VkSamplerAddressMode = 2147483647;
pub type VkSamplerAddressMode = ::std::os::raw::c_uint;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_NEAREST: VkSamplerMipmapMode = 0;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_LINEAR: VkSamplerMipmapMode = 1;
pub const VkSamplerMipmapMode_VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: VkSamplerMipmapMode = 2147483647;
pub type VkSamplerMipmapMode = ::std::os::raw::c_uint;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLER: VkDescriptorType = 0;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: VkDescriptorType = 1;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: VkDescriptorType = 2;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: VkDescriptorType = 3;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: VkDescriptorType = 4;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: VkDescriptorType = 5;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: VkDescriptorType = 6;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: VkDescriptorType = 7;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: VkDescriptorType = 8;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: VkDescriptorType = 9;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: VkDescriptorType = 10;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: VkDescriptorType = 1000138000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: VkDescriptorType =
    1000150000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: VkDescriptorType =
    1000165000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM: VkDescriptorType =
    1000440000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM: VkDescriptorType = 1000440001;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MUTABLE_EXT: VkDescriptorType = 1000351000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_PARTITIONED_ACCELERATION_STRUCTURE_NV:
    VkDescriptorType = 1000570000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: VkDescriptorType =
    1000138000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: VkDescriptorType = 1000351000;
pub const VkDescriptorType_VK_DESCRIPTOR_TYPE_MAX_ENUM: VkDescriptorType = 2147483647;
pub type VkDescriptorType = ::std::os::raw::c_uint;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_LOAD: VkAttachmentLoadOp = 0;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_CLEAR: VkAttachmentLoadOp = 1;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_DONT_CARE: VkAttachmentLoadOp = 2;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_NONE: VkAttachmentLoadOp = 1000400000;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_NONE_EXT: VkAttachmentLoadOp = 1000400000;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_NONE_KHR: VkAttachmentLoadOp = 1000400000;
pub const VkAttachmentLoadOp_VK_ATTACHMENT_LOAD_OP_MAX_ENUM: VkAttachmentLoadOp = 2147483647;
pub type VkAttachmentLoadOp = ::std::os::raw::c_uint;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_STORE: VkAttachmentStoreOp = 0;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_DONT_CARE: VkAttachmentStoreOp = 1;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE_KHR: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE_QCOM: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_NONE_EXT: VkAttachmentStoreOp = 1000301000;
pub const VkAttachmentStoreOp_VK_ATTACHMENT_STORE_OP_MAX_ENUM: VkAttachmentStoreOp = 2147483647;
pub type VkAttachmentStoreOp = ::std::os::raw::c_uint;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_GRAPHICS: VkPipelineBindPoint = 0;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_COMPUTE: VkPipelineBindPoint = 1;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: VkPipelineBindPoint =
    1000165000;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: VkPipelineBindPoint =
    1000369003;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: VkPipelineBindPoint =
    1000165000;
pub const VkPipelineBindPoint_VK_PIPELINE_BIND_POINT_MAX_ENUM: VkPipelineBindPoint = 2147483647;
pub type VkPipelineBindPoint = ::std::os::raw::c_uint;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_PRIMARY: VkCommandBufferLevel = 0;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_SECONDARY: VkCommandBufferLevel = 1;
pub const VkCommandBufferLevel_VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: VkCommandBufferLevel = 2147483647;
pub type VkCommandBufferLevel = ::std::os::raw::c_uint;
pub const VkIndexType_VK_INDEX_TYPE_UINT16: VkIndexType = 0;
pub const VkIndexType_VK_INDEX_TYPE_UINT32: VkIndexType = 1;
pub const VkIndexType_VK_INDEX_TYPE_UINT8: VkIndexType = 1000265000;
pub const VkIndexType_VK_INDEX_TYPE_NONE_KHR: VkIndexType = 1000165000;
pub const VkIndexType_VK_INDEX_TYPE_NONE_NV: VkIndexType = 1000165000;
pub const VkIndexType_VK_INDEX_TYPE_UINT8_EXT: VkIndexType = 1000265000;
pub const VkIndexType_VK_INDEX_TYPE_UINT8_KHR: VkIndexType = 1000265000;
pub const VkIndexType_VK_INDEX_TYPE_MAX_ENUM: VkIndexType = 2147483647;
pub type VkIndexType = ::std::os::raw::c_uint;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_INLINE: VkSubpassContents = 0;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: VkSubpassContents = 1;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR:
    VkSubpassContents = 1000451000;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_EXT:
    VkSubpassContents = 1000451000;
pub const VkSubpassContents_VK_SUBPASS_CONTENTS_MAX_ENUM: VkSubpassContents = 2147483647;
pub type VkSubpassContents = ::std::os::raw::c_uint;
pub const VkAccessFlagBits_VK_ACCESS_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits = 1;
pub const VkAccessFlagBits_VK_ACCESS_INDEX_READ_BIT: VkAccessFlagBits = 2;
pub const VkAccessFlagBits_VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits = 4;
pub const VkAccessFlagBits_VK_ACCESS_UNIFORM_READ_BIT: VkAccessFlagBits = 8;
pub const VkAccessFlagBits_VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits = 16;
pub const VkAccessFlagBits_VK_ACCESS_SHADER_READ_BIT: VkAccessFlagBits = 32;
pub const VkAccessFlagBits_VK_ACCESS_SHADER_WRITE_BIT: VkAccessFlagBits = 64;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits = 128;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits = 256;
pub const VkAccessFlagBits_VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits = 512;
pub const VkAccessFlagBits_VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits = 1024;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFER_READ_BIT: VkAccessFlagBits = 2048;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFER_WRITE_BIT: VkAccessFlagBits = 4096;
pub const VkAccessFlagBits_VK_ACCESS_HOST_READ_BIT: VkAccessFlagBits = 8192;
pub const VkAccessFlagBits_VK_ACCESS_HOST_WRITE_BIT: VkAccessFlagBits = 16384;
pub const VkAccessFlagBits_VK_ACCESS_MEMORY_READ_BIT: VkAccessFlagBits = 32768;
pub const VkAccessFlagBits_VK_ACCESS_MEMORY_WRITE_BIT: VkAccessFlagBits = 65536;
pub const VkAccessFlagBits_VK_ACCESS_NONE: VkAccessFlagBits = 0;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits = 33554432;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits =
    67108864;
pub const VkAccessFlagBits_VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits =
    134217728;
pub const VkAccessFlagBits_VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits = 1048576;
pub const VkAccessFlagBits_VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits =
    524288;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits =
    2097152;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits =
    4194304;
pub const VkAccessFlagBits_VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits = 16777216;
pub const VkAccessFlagBits_VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR:
    VkAccessFlagBits = 8388608;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits = 131072;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits = 262144;
pub const VkAccessFlagBits_VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits = 8388608;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits = 2097152;
pub const VkAccessFlagBits_VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits =
    4194304;
pub const VkAccessFlagBits_VK_ACCESS_NONE_KHR: VkAccessFlagBits = 0;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_EXT: VkAccessFlagBits = 131072;
pub const VkAccessFlagBits_VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_EXT: VkAccessFlagBits = 262144;
pub const VkAccessFlagBits_VK_ACCESS_FLAG_BITS_MAX_ENUM: VkAccessFlagBits = 2147483647;
pub type VkAccessFlagBits = ::std::os::raw::c_uint;
pub type VkAccessFlags = VkFlags;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_COLOR_BIT: VkImageAspectFlagBits = 1;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_DEPTH_BIT: VkImageAspectFlagBits = 2;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_STENCIL_BIT: VkImageAspectFlagBits = 4;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_METADATA_BIT: VkImageAspectFlagBits = 8;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_0_BIT: VkImageAspectFlagBits = 16;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_1_BIT: VkImageAspectFlagBits = 32;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_2_BIT: VkImageAspectFlagBits = 64;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_NONE: VkImageAspectFlagBits = 0;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: VkImageAspectFlagBits = 128;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: VkImageAspectFlagBits = 256;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: VkImageAspectFlagBits = 512;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: VkImageAspectFlagBits =
    1024;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: VkImageAspectFlagBits = 16;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: VkImageAspectFlagBits = 32;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: VkImageAspectFlagBits = 64;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_NONE_KHR: VkImageAspectFlagBits = 0;
pub const VkImageAspectFlagBits_VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: VkImageAspectFlagBits =
    2147483647;
pub type VkImageAspectFlagBits = ::std::os::raw::c_uint;
pub type VkImageAspectFlags = VkFlags;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits = 1;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits = 2;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT:
    VkFormatFeatureFlagBits = 4;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT:
    VkFormatFeatureFlagBits = 8;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT:
    VkFormatFeatureFlagBits = 16;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT:
    VkFormatFeatureFlagBits = 32;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits = 64;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits =
    128;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT:
    VkFormatFeatureFlagBits = 256;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT:
    VkFormatFeatureFlagBits = 512;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_BLIT_SRC_BIT: VkFormatFeatureFlagBits = 1024;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_BLIT_DST_BIT: VkFormatFeatureFlagBits = 2048;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT:
    VkFormatFeatureFlagBits = 4096;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits =
    16384;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_DST_BIT: VkFormatFeatureFlagBits =
    32768;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT:
    VkFormatFeatureFlagBits = 131072;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT : VkFormatFeatureFlagBits = 262144 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT : VkFormatFeatureFlagBits = 524288 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT : VkFormatFeatureFlagBits = 1048576 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : VkFormatFeatureFlagBits = 2097152 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DISJOINT_BIT: VkFormatFeatureFlagBits = 4194304;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT:
    VkFormatFeatureFlagBits = 8388608;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT:
    VkFormatFeatureFlagBits = 65536;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR:
    VkFormatFeatureFlagBits = 33554432;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_DECODE_DPB_BIT_KHR:
    VkFormatFeatureFlagBits = 67108864;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR:
    VkFormatFeatureFlagBits = 536870912;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT:
    VkFormatFeatureFlagBits = 8192;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT:
    VkFormatFeatureFlagBits = 16777216;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkFormatFeatureFlagBits = 1073741824;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_ENCODE_INPUT_BIT_KHR:
    VkFormatFeatureFlagBits = 134217728;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_VIDEO_ENCODE_DPB_BIT_KHR:
    VkFormatFeatureFlagBits = 268435456;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG:
    VkFormatFeatureFlagBits = 8192;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits =
    16384;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits =
    32768;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT:
    VkFormatFeatureFlagBits = 65536;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR:
    VkFormatFeatureFlagBits = 131072;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR : VkFormatFeatureFlagBits = 262144 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits = 524288 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits = 1048576 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits = 2097152 ;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits =
    4194304;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR:
    VkFormatFeatureFlagBits = 8388608;
pub const VkFormatFeatureFlagBits_VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: VkFormatFeatureFlagBits =
    2147483647;
pub type VkFormatFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkFormatFeatureFlags = VkFlags;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_BINDING_BIT: VkImageCreateFlagBits = 1;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: VkImageCreateFlagBits = 2;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: VkImageCreateFlagBits = 4;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: VkImageCreateFlagBits = 8;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: VkImageCreateFlagBits = 16;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_ALIAS_BIT: VkImageCreateFlagBits = 1024;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT:
    VkImageCreateFlagBits = 64;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: VkImageCreateFlagBits = 32;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT:
    VkImageCreateFlagBits = 128;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: VkImageCreateFlagBits = 256;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_PROTECTED_BIT: VkImageCreateFlagBits = 2048;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DISJOINT_BIT: VkImageCreateFlagBits = 512;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: VkImageCreateFlagBits = 8192;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT:
    VkImageCreateFlagBits = 4096;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: VkImageCreateFlagBits = 16384;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT:
    VkImageCreateFlagBits = 65536;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT:
    VkImageCreateFlagBits = 262144;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT: VkImageCreateFlagBits =
    131072;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM:
    VkImageCreateFlagBits = 32768;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR:
    VkImageCreateFlagBits = 1048576;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR:
    VkImageCreateFlagBits = 64;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: VkImageCreateFlagBits =
    32;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR:
    VkImageCreateFlagBits = 128;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: VkImageCreateFlagBits = 256;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_DISJOINT_BIT_KHR: VkImageCreateFlagBits = 512;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_ALIAS_BIT_KHR: VkImageCreateFlagBits = 1024;
pub const VkImageCreateFlagBits_VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: VkImageCreateFlagBits =
    2147483647;
pub type VkImageCreateFlagBits = ::std::os::raw::c_uint;
pub type VkImageCreateFlags = VkFlags;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_1_BIT: VkSampleCountFlagBits = 1;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_2_BIT: VkSampleCountFlagBits = 2;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_4_BIT: VkSampleCountFlagBits = 4;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_8_BIT: VkSampleCountFlagBits = 8;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_16_BIT: VkSampleCountFlagBits = 16;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_32_BIT: VkSampleCountFlagBits = 32;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_64_BIT: VkSampleCountFlagBits = 64;
pub const VkSampleCountFlagBits_VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: VkSampleCountFlagBits =
    2147483647;
pub type VkSampleCountFlagBits = ::std::os::raw::c_uint;
pub type VkSampleCountFlags = VkFlags;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSFER_SRC_BIT: VkImageUsageFlagBits = 1;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSFER_DST_BIT: VkImageUsageFlagBits = 2;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SAMPLED_BIT: VkImageUsageFlagBits = 4;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_STORAGE_BIT: VkImageUsageFlagBits = 8;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: VkImageUsageFlagBits = 16;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: VkImageUsageFlagBits =
    32;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: VkImageUsageFlagBits = 64;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: VkImageUsageFlagBits = 128;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_HOST_TRANSFER_BIT: VkImageUsageFlagBits = 4194304;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR: VkImageUsageFlagBits = 1024;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR: VkImageUsageFlagBits = 2048;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR: VkImageUsageFlagBits = 4096;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: VkImageUsageFlagBits =
    512;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkImageUsageFlagBits = 256;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR: VkImageUsageFlagBits = 8192;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: VkImageUsageFlagBits =
    16384;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR: VkImageUsageFlagBits =
    32768;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT:
    VkImageUsageFlagBits = 524288;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI: VkImageUsageFlagBits =
    262144;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM: VkImageUsageFlagBits =
    1048576;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM: VkImageUsageFlagBits =
    2097152;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR:
    VkImageUsageFlagBits = 33554432;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR:
    VkImageUsageFlagBits = 67108864;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: VkImageUsageFlagBits = 256;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT: VkImageUsageFlagBits = 4194304;
pub const VkImageUsageFlagBits_VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: VkImageUsageFlagBits = 2147483647;
pub type VkImageUsageFlagBits = ::std::os::raw::c_uint;
pub type VkImageUsageFlags = VkFlags;
pub const VkInstanceCreateFlagBits_VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR:
    VkInstanceCreateFlagBits = 1;
pub const VkInstanceCreateFlagBits_VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM: VkInstanceCreateFlagBits =
    2147483647;
pub type VkInstanceCreateFlagBits = ::std::os::raw::c_uint;
pub type VkInstanceCreateFlags = VkFlags;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: VkMemoryHeapFlagBits = 1;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: VkMemoryHeapFlagBits = 2;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: VkMemoryHeapFlagBits = 2;
pub const VkMemoryHeapFlagBits_VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: VkMemoryHeapFlagBits = 2147483647;
pub type VkMemoryHeapFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryHeapFlags = VkFlags;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: VkMemoryPropertyFlagBits =
    1;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: VkMemoryPropertyFlagBits =
    2;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: VkMemoryPropertyFlagBits =
    4;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_HOST_CACHED_BIT: VkMemoryPropertyFlagBits = 8;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT:
    VkMemoryPropertyFlagBits = 16;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_PROTECTED_BIT: VkMemoryPropertyFlagBits = 32;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD:
    VkMemoryPropertyFlagBits = 64;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD:
    VkMemoryPropertyFlagBits = 128;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV:
    VkMemoryPropertyFlagBits = 256;
pub const VkMemoryPropertyFlagBits_VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: VkMemoryPropertyFlagBits =
    2147483647;
pub type VkMemoryPropertyFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryPropertyFlags = VkFlags;
pub const VkQueueFlagBits_VK_QUEUE_GRAPHICS_BIT: VkQueueFlagBits = 1;
pub const VkQueueFlagBits_VK_QUEUE_COMPUTE_BIT: VkQueueFlagBits = 2;
pub const VkQueueFlagBits_VK_QUEUE_TRANSFER_BIT: VkQueueFlagBits = 4;
pub const VkQueueFlagBits_VK_QUEUE_SPARSE_BINDING_BIT: VkQueueFlagBits = 8;
pub const VkQueueFlagBits_VK_QUEUE_PROTECTED_BIT: VkQueueFlagBits = 16;
pub const VkQueueFlagBits_VK_QUEUE_VIDEO_DECODE_BIT_KHR: VkQueueFlagBits = 32;
pub const VkQueueFlagBits_VK_QUEUE_VIDEO_ENCODE_BIT_KHR: VkQueueFlagBits = 64;
pub const VkQueueFlagBits_VK_QUEUE_OPTICAL_FLOW_BIT_NV: VkQueueFlagBits = 256;
pub const VkQueueFlagBits_VK_QUEUE_FLAG_BITS_MAX_ENUM: VkQueueFlagBits = 2147483647;
pub type VkQueueFlagBits = ::std::os::raw::c_uint;
pub type VkQueueFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
pub const VkDeviceQueueCreateFlagBits_VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT:
    VkDeviceQueueCreateFlagBits = 1;
pub const VkDeviceQueueCreateFlagBits_VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM:
    VkDeviceQueueCreateFlagBits = 2147483647;
pub type VkDeviceQueueCreateFlagBits = ::std::os::raw::c_uint;
pub type VkDeviceQueueCreateFlags = VkFlags;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits = 1;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits = 2;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: VkPipelineStageFlagBits = 4;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: VkPipelineStageFlagBits = 8;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT:
    VkPipelineStageFlagBits = 16;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT:
    VkPipelineStageFlagBits = 32;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits =
    64;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits =
    128;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT:
    VkPipelineStageFlagBits = 256;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT:
    VkPipelineStageFlagBits = 512;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT:
    VkPipelineStageFlagBits = 1024;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits =
    2048;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TRANSFER_BIT: VkPipelineStageFlagBits = 4096;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits =
    8192;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_HOST_BIT: VkPipelineStageFlagBits = 16384;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits =
    32768;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: VkPipelineStageFlagBits =
    65536;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_NONE: VkPipelineStageFlagBits = 0;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT:
    VkPipelineStageFlagBits = 16777216;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT:
    VkPipelineStageFlagBits = 262144;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR:
    VkPipelineStageFlagBits = 33554432;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR:
    VkPipelineStageFlagBits = 2097152;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT:
    VkPipelineStageFlagBits = 8388608;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkPipelineStageFlagBits = 4194304;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV:
    VkPipelineStageFlagBits = 131072;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits =
    524288;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits =
    1048576;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV:
    VkPipelineStageFlagBits = 4194304;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV:
    VkPipelineStageFlagBits = 2097152;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV:
    VkPipelineStageFlagBits = 33554432;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits =
    524288;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits =
    1048576;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_NONE_KHR: VkPipelineStageFlagBits = 0;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_EXT:
    VkPipelineStageFlagBits = 131072;
pub const VkPipelineStageFlagBits_VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: VkPipelineStageFlagBits =
    2147483647;
pub type VkPipelineStageFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineStageFlags = VkFlags;
pub const VkMemoryMapFlagBits_VK_MEMORY_MAP_PLACED_BIT_EXT: VkMemoryMapFlagBits = 1;
pub const VkMemoryMapFlagBits_VK_MEMORY_MAP_FLAG_BITS_MAX_ENUM: VkMemoryMapFlagBits = 2147483647;
pub type VkMemoryMapFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryMapFlags = VkFlags;
pub const VkSparseMemoryBindFlagBits_VK_SPARSE_MEMORY_BIND_METADATA_BIT:
    VkSparseMemoryBindFlagBits = 1;
pub const VkSparseMemoryBindFlagBits_VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM:
    VkSparseMemoryBindFlagBits = 2147483647;
pub type VkSparseMemoryBindFlagBits = ::std::os::raw::c_uint;
pub type VkSparseMemoryBindFlags = VkFlags;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT:
    VkSparseImageFormatFlagBits = 1;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT:
    VkSparseImageFormatFlagBits = 2;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT:
    VkSparseImageFormatFlagBits = 4;
pub const VkSparseImageFormatFlagBits_VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM:
    VkSparseImageFormatFlagBits = 2147483647;
pub type VkSparseImageFormatFlagBits = ::std::os::raw::c_uint;
pub type VkSparseImageFormatFlags = VkFlags;
pub const VkFenceCreateFlagBits_VK_FENCE_CREATE_SIGNALED_BIT: VkFenceCreateFlagBits = 1;
pub const VkFenceCreateFlagBits_VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: VkFenceCreateFlagBits =
    2147483647;
pub type VkFenceCreateFlagBits = ::std::os::raw::c_uint;
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
pub const VkEventCreateFlagBits_VK_EVENT_CREATE_DEVICE_ONLY_BIT: VkEventCreateFlagBits = 1;
pub const VkEventCreateFlagBits_VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: VkEventCreateFlagBits = 1;
pub const VkEventCreateFlagBits_VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM: VkEventCreateFlagBits =
    2147483647;
pub type VkEventCreateFlagBits = ::std::os::raw::c_uint;
pub type VkEventCreateFlags = VkFlags;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT : VkQueryPipelineStatisticFlagBits = 1 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT : VkQueryPipelineStatisticFlagBits = 2 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 4 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 8 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT : VkQueryPipelineStatisticFlagBits = 16 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT:
    VkQueryPipelineStatisticFlagBits = 32;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT:
    VkQueryPipelineStatisticFlagBits = 64;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 128 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT : VkQueryPipelineStatisticFlagBits = 256 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 512 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT : VkQueryPipelineStatisticFlagBits = 1024 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT : VkQueryPipelineStatisticFlagBits = 2048 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT : VkQueryPipelineStatisticFlagBits = 4096 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI : VkQueryPipelineStatisticFlagBits = 8192 ;
pub const VkQueryPipelineStatisticFlagBits_VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM:
    VkQueryPipelineStatisticFlagBits = 2147483647;
pub type VkQueryPipelineStatisticFlagBits = ::std::os::raw::c_uint;
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_64_BIT: VkQueryResultFlagBits = 1;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WAIT_BIT: VkQueryResultFlagBits = 2;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: VkQueryResultFlagBits = 4;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_PARTIAL_BIT: VkQueryResultFlagBits = 8;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_WITH_STATUS_BIT_KHR: VkQueryResultFlagBits = 16;
pub const VkQueryResultFlagBits_VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: VkQueryResultFlagBits =
    2147483647;
pub type VkQueryResultFlagBits = ::std::os::raw::c_uint;
pub type VkQueryResultFlags = VkFlags;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_BINDING_BIT: VkBufferCreateFlagBits = 1;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: VkBufferCreateFlagBits = 2;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: VkBufferCreateFlagBits = 4;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_PROTECTED_BIT: VkBufferCreateFlagBits = 8;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT:
    VkBufferCreateFlagBits = 32;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR:
    VkBufferCreateFlagBits = 64;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR:
    VkBufferCreateFlagBits = 16;
pub const VkBufferCreateFlagBits_VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: VkBufferCreateFlagBits =
    2147483647;
pub type VkBufferCreateFlagBits = ::std::os::raw::c_uint;
pub type VkBufferCreateFlags = VkFlags;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFER_SRC_BIT: VkBufferUsageFlagBits = 1;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFER_DST_BIT: VkBufferUsageFlagBits = 2;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits = 4;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits = 8;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits = 16;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits = 32;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_INDEX_BUFFER_BIT: VkBufferUsageFlagBits = 64;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits = 128;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits = 256;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: VkBufferUsageFlagBits =
    131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR: VkBufferUsageFlagBits =
    8192;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR: VkBufferUsageFlagBits =
    16384;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 2048;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 4096;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT:
    VkBufferUsageFlagBits = 512;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR : VkBufferUsageFlagBits = 524288 ;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR:
    VkBufferUsageFlagBits = 1048576;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR:
    VkBufferUsageFlagBits = 1024;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR: VkBufferUsageFlagBits =
    32768;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR: VkBufferUsageFlagBits =
    65536;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 2097152;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 4194304;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT:
    VkBufferUsageFlagBits = 67108864;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT:
    VkBufferUsageFlagBits = 8388608;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT: VkBufferUsageFlagBits =
    16777216;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits = 1024;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT:
    VkBufferUsageFlagBits = 131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR:
    VkBufferUsageFlagBits = 131072;
pub const VkBufferUsageFlagBits_VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: VkBufferUsageFlagBits =
    2147483647;
pub type VkBufferUsageFlagBits = ::std::os::raw::c_uint;
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT:
    VkImageViewCreateFlagBits = 1;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT : VkImageViewCreateFlagBits = 4 ;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT:
    VkImageViewCreateFlagBits = 2;
pub const VkImageViewCreateFlagBits_VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM:
    VkImageViewCreateFlagBits = 2147483647;
pub type VkImageViewCreateFlagBits = ::std::os::raw::c_uint;
pub type VkImageViewCreateFlags = VkFlags;
pub type VkShaderModuleCreateFlags = VkFlags;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT:
    VkPipelineCacheCreateFlagBits = 1;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_INTERNALLY_SYNCHRONIZED_MERGE_BIT_KHR : VkPipelineCacheCreateFlagBits = 8 ;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT:
    VkPipelineCacheCreateFlagBits = 1;
pub const VkPipelineCacheCreateFlagBits_VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineCacheCreateFlagBits = 2147483647;
pub type VkPipelineCacheCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineCacheCreateFlags = VkFlags;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_R_BIT: VkColorComponentFlagBits = 1;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_G_BIT: VkColorComponentFlagBits = 2;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_B_BIT: VkColorComponentFlagBits = 4;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_A_BIT: VkColorComponentFlagBits = 8;
pub const VkColorComponentFlagBits_VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: VkColorComponentFlagBits =
    2147483647;
pub type VkColorComponentFlagBits = ::std::os::raw::c_uint;
pub type VkColorComponentFlags = VkFlags;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT:
    VkPipelineCreateFlagBits = 1;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT:
    VkPipelineCreateFlagBits = 2;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DERIVATIVE_BIT: VkPipelineCreateFlagBits = 4;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT:
    VkPipelineCreateFlagBits = 8;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: VkPipelineCreateFlagBits =
    16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT:
    VkPipelineCreateFlagBits = 256;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT:
    VkPipelineCreateFlagBits = 512;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT:
    VkPipelineCreateFlagBits = 134217728;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT:
    VkPipelineCreateFlagBits = 1073741824;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 16384 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 32768 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits = 65536;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR : VkPipelineCreateFlagBits = 131072 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR:
    VkPipelineCreateFlagBits = 4096;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR:
    VkPipelineCreateFlagBits = 8192;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR : VkPipelineCreateFlagBits = 524288 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV:
    VkPipelineCreateFlagBits = 32;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT : VkPipelineCreateFlagBits = 4194304 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR : VkPipelineCreateFlagBits = 2097152 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR:
    VkPipelineCreateFlagBits = 64;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR:
    VkPipelineCreateFlagBits = 128;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV:
    VkPipelineCreateFlagBits = 262144;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits =
    2048;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT:
    VkPipelineCreateFlagBits = 536870912;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT:
    VkPipelineCreateFlagBits = 8388608;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT:
    VkPipelineCreateFlagBits = 1024;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV:
    VkPipelineCreateFlagBits = 1048576;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT:
    VkPipelineCreateFlagBits = 33554432;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT : VkPipelineCreateFlagBits = 67108864 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT:
    VkPipelineCreateFlagBits = 16777216;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE: VkPipelineCreateFlagBits = 16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR:
    VkPipelineCreateFlagBits = 8;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: VkPipelineCreateFlagBits =
    16;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT : VkPipelineCreateFlagBits = 4194304 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR : VkPipelineCreateFlagBits = 2097152 ;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT:
    VkPipelineCreateFlagBits = 256;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT:
    VkPipelineCreateFlagBits = 512;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT:
    VkPipelineCreateFlagBits = 134217728;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT:
    VkPipelineCreateFlagBits = 1073741824;
pub const VkPipelineCreateFlagBits_VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: VkPipelineCreateFlagBits =
    2147483647;
pub type VkPipelineCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineCreateFlags = VkFlags;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT : VkPipelineShaderStageCreateFlagBits = 1 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT : VkPipelineShaderStageCreateFlagBits = 2 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT : VkPipelineShaderStageCreateFlagBits = 1 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT : VkPipelineShaderStageCreateFlagBits = 2 ;
pub const VkPipelineShaderStageCreateFlagBits_VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineShaderStageCreateFlagBits = 2147483647;
pub type VkPipelineShaderStageCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineShaderStageCreateFlags = VkFlags;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_VERTEX_BIT: VkShaderStageFlagBits = 1;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: VkShaderStageFlagBits = 2;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: VkShaderStageFlagBits =
    4;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_GEOMETRY_BIT: VkShaderStageFlagBits = 8;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_FRAGMENT_BIT: VkShaderStageFlagBits = 16;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_COMPUTE_BIT: VkShaderStageFlagBits = 32;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ALL_GRAPHICS: VkShaderStageFlagBits = 31;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ALL: VkShaderStageFlagBits = 2147483647;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_RAYGEN_BIT_KHR: VkShaderStageFlagBits = 256;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ANY_HIT_BIT_KHR: VkShaderStageFlagBits = 512;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: VkShaderStageFlagBits = 1024;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MISS_BIT_KHR: VkShaderStageFlagBits = 2048;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_INTERSECTION_BIT_KHR: VkShaderStageFlagBits = 4096;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CALLABLE_BIT_KHR: VkShaderStageFlagBits = 8192;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TASK_BIT_EXT: VkShaderStageFlagBits = 64;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MESH_BIT_EXT: VkShaderStageFlagBits = 128;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI: VkShaderStageFlagBits =
    16384;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI: VkShaderStageFlagBits =
    524288;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_RAYGEN_BIT_NV: VkShaderStageFlagBits = 256;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_ANY_HIT_BIT_NV: VkShaderStageFlagBits = 512;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: VkShaderStageFlagBits = 1024;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MISS_BIT_NV: VkShaderStageFlagBits = 2048;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_INTERSECTION_BIT_NV: VkShaderStageFlagBits = 4096;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_CALLABLE_BIT_NV: VkShaderStageFlagBits = 8192;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_TASK_BIT_NV: VkShaderStageFlagBits = 64;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_MESH_BIT_NV: VkShaderStageFlagBits = 128;
pub const VkShaderStageFlagBits_VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: VkShaderStageFlagBits =
    2147483647;
pub type VkShaderStageFlagBits = ::std::os::raw::c_uint;
pub const VkCullModeFlagBits_VK_CULL_MODE_NONE: VkCullModeFlagBits = 0;
pub const VkCullModeFlagBits_VK_CULL_MODE_FRONT_BIT: VkCullModeFlagBits = 1;
pub const VkCullModeFlagBits_VK_CULL_MODE_BACK_BIT: VkCullModeFlagBits = 2;
pub const VkCullModeFlagBits_VK_CULL_MODE_FRONT_AND_BACK: VkCullModeFlagBits = 3;
pub const VkCullModeFlagBits_VK_CULL_MODE_FLAG_BITS_MAX_ENUM: VkCullModeFlagBits = 2147483647;
pub type VkCullModeFlagBits = ::std::os::raw::c_uint;
pub type VkCullModeFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT : VkPipelineDepthStencilStateCreateFlagBits = 1 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT : VkPipelineDepthStencilStateCreateFlagBits = 2 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM : VkPipelineDepthStencilStateCreateFlagBits = 1 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM : VkPipelineDepthStencilStateCreateFlagBits = 2 ;
pub const VkPipelineDepthStencilStateCreateFlagBits_VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM : VkPipelineDepthStencilStateCreateFlagBits = 2147483647 ;
pub type VkPipelineDepthStencilStateCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub const VkPipelineColorBlendStateCreateFlagBits_VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT : VkPipelineColorBlendStateCreateFlagBits = 1 ;
pub const VkPipelineColorBlendStateCreateFlagBits_VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM : VkPipelineColorBlendStateCreateFlagBits = 1 ;
pub const VkPipelineColorBlendStateCreateFlagBits_VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM : VkPipelineColorBlendStateCreateFlagBits = 2147483647 ;
pub type VkPipelineColorBlendStateCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
pub const VkPipelineLayoutCreateFlagBits_VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT:
    VkPipelineLayoutCreateFlagBits = 2;
pub const VkPipelineLayoutCreateFlagBits_VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM:
    VkPipelineLayoutCreateFlagBits = 2147483647;
pub type VkPipelineLayoutCreateFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: VkSamplerCreateFlagBits = 1;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT:
    VkSamplerCreateFlagBits = 2;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT:
    VkSamplerCreateFlagBits = 8;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT:
    VkSamplerCreateFlagBits = 4;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM:
    VkSamplerCreateFlagBits = 16;
pub const VkSamplerCreateFlagBits_VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: VkSamplerCreateFlagBits =
    2147483647;
pub type VkSamplerCreateFlagBits = ::std::os::raw::c_uint;
pub type VkSamplerCreateFlags = VkFlags;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT:
    VkDescriptorPoolCreateFlagBits = 1;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT:
    VkDescriptorPoolCreateFlagBits = 2;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT:
    VkDescriptorPoolCreateFlagBits = 4;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV : VkDescriptorPoolCreateFlagBits = 8 ;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV : VkDescriptorPoolCreateFlagBits = 16 ;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT:
    VkDescriptorPoolCreateFlagBits = 2;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE:
    VkDescriptorPoolCreateFlagBits = 4;
pub const VkDescriptorPoolCreateFlagBits_VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM:
    VkDescriptorPoolCreateFlagBits = 2147483647;
pub type VkDescriptorPoolCreateFlagBits = ::std::os::raw::c_uint;
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT : VkDescriptorSetLayoutCreateFlagBits = 2 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT : VkDescriptorSetLayoutCreateFlagBits = 1 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 16 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 32 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV : VkDescriptorSetLayoutCreateFlagBits = 128 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 4 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV:
    VkDescriptorSetLayoutCreateFlagBits = 64;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR : VkDescriptorSetLayoutCreateFlagBits = 1 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT : VkDescriptorSetLayoutCreateFlagBits = 2 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE : VkDescriptorSetLayoutCreateFlagBits = 4 ;
pub const VkDescriptorSetLayoutCreateFlagBits_VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM:
    VkDescriptorSetLayoutCreateFlagBits = 2147483647;
pub type VkDescriptorSetLayoutCreateFlagBits = ::std::os::raw::c_uint;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub const VkAttachmentDescriptionFlagBits_VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT:
    VkAttachmentDescriptionFlagBits = 1;
pub const VkAttachmentDescriptionFlagBits_VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM:
    VkAttachmentDescriptionFlagBits = 2147483647;
pub type VkAttachmentDescriptionFlagBits = ::std::os::raw::c_uint;
pub type VkAttachmentDescriptionFlags = VkFlags;
pub const VkDependencyFlagBits_VK_DEPENDENCY_BY_REGION_BIT: VkDependencyFlagBits = 1;
pub const VkDependencyFlagBits_VK_DEPENDENCY_DEVICE_GROUP_BIT: VkDependencyFlagBits = 4;
pub const VkDependencyFlagBits_VK_DEPENDENCY_VIEW_LOCAL_BIT: VkDependencyFlagBits = 2;
pub const VkDependencyFlagBits_VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: VkDependencyFlagBits = 8;
pub const VkDependencyFlagBits_VK_DEPENDENCY_QUEUE_FAMILY_OWNERSHIP_TRANSFER_USE_ALL_STAGES_BIT_KHR : VkDependencyFlagBits = 32 ;
pub const VkDependencyFlagBits_VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: VkDependencyFlagBits = 2;
pub const VkDependencyFlagBits_VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: VkDependencyFlagBits = 4;
pub const VkDependencyFlagBits_VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: VkDependencyFlagBits = 2147483647;
pub type VkDependencyFlagBits = ::std::os::raw::c_uint;
pub type VkDependencyFlags = VkFlags;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT:
    VkFramebufferCreateFlagBits = 1;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR:
    VkFramebufferCreateFlagBits = 1;
pub const VkFramebufferCreateFlagBits_VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM:
    VkFramebufferCreateFlagBits = 2147483647;
pub type VkFramebufferCreateFlagBits = ::std::os::raw::c_uint;
pub type VkFramebufferCreateFlags = VkFlags;
pub const VkRenderPassCreateFlagBits_VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM:
    VkRenderPassCreateFlagBits = 2;
pub const VkRenderPassCreateFlagBits_VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM:
    VkRenderPassCreateFlagBits = 2147483647;
pub type VkRenderPassCreateFlagBits = ::std::os::raw::c_uint;
pub type VkRenderPassCreateFlags = VkFlags;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX:
    VkSubpassDescriptionFlagBits = 1;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX:
    VkSubpassDescriptionFlagBits = 2;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM:
    VkSubpassDescriptionFlagBits = 4;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM:
    VkSubpassDescriptionFlagBits = 8;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT : VkSubpassDescriptionFlagBits = 16 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT : VkSubpassDescriptionFlagBits = 32 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT : VkSubpassDescriptionFlagBits = 64 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT:
    VkSubpassDescriptionFlagBits = 128;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = 16 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = 32 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM : VkSubpassDescriptionFlagBits = 64 ;
pub const VkSubpassDescriptionFlagBits_VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM:
    VkSubpassDescriptionFlagBits = 2147483647;
pub type VkSubpassDescriptionFlagBits = ::std::os::raw::c_uint;
pub type VkSubpassDescriptionFlags = VkFlags;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_TRANSIENT_BIT:
    VkCommandPoolCreateFlagBits = 1;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT:
    VkCommandPoolCreateFlagBits = 2;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_PROTECTED_BIT:
    VkCommandPoolCreateFlagBits = 4;
pub const VkCommandPoolCreateFlagBits_VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM:
    VkCommandPoolCreateFlagBits = 2147483647;
pub type VkCommandPoolCreateFlagBits = ::std::os::raw::c_uint;
pub type VkCommandPoolCreateFlags = VkFlags;
pub const VkCommandPoolResetFlagBits_VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT:
    VkCommandPoolResetFlagBits = 1;
pub const VkCommandPoolResetFlagBits_VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM:
    VkCommandPoolResetFlagBits = 2147483647;
pub type VkCommandPoolResetFlagBits = ::std::os::raw::c_uint;
pub type VkCommandPoolResetFlags = VkFlags;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT:
    VkCommandBufferUsageFlagBits = 1;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT:
    VkCommandBufferUsageFlagBits = 2;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT:
    VkCommandBufferUsageFlagBits = 4;
pub const VkCommandBufferUsageFlagBits_VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM:
    VkCommandBufferUsageFlagBits = 2147483647;
pub type VkCommandBufferUsageFlagBits = ::std::os::raw::c_uint;
pub type VkCommandBufferUsageFlags = VkFlags;
pub const VkQueryControlFlagBits_VK_QUERY_CONTROL_PRECISE_BIT: VkQueryControlFlagBits = 1;
pub const VkQueryControlFlagBits_VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: VkQueryControlFlagBits =
    2147483647;
pub type VkQueryControlFlagBits = ::std::os::raw::c_uint;
pub type VkQueryControlFlags = VkFlags;
pub const VkCommandBufferResetFlagBits_VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT:
    VkCommandBufferResetFlagBits = 1;
pub const VkCommandBufferResetFlagBits_VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM:
    VkCommandBufferResetFlagBits = 2147483647;
pub type VkCommandBufferResetFlagBits = ::std::os::raw::c_uint;
pub type VkCommandBufferResetFlags = VkFlags;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FRONT_BIT: VkStencilFaceFlagBits = 1;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_BACK_BIT: VkStencilFaceFlagBits = 2;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FRONT_AND_BACK: VkStencilFaceFlagBits = 3;
pub const VkStencilFaceFlagBits_VK_STENCIL_FRONT_AND_BACK: VkStencilFaceFlagBits = 3;
pub const VkStencilFaceFlagBits_VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: VkStencilFaceFlagBits =
    2147483647;
pub type VkStencilFaceFlagBits = ::std::os::raw::c_uint;
pub type VkStencilFaceFlags = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExtent2D {
    pub width: u32,
    pub height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExtent2D"][::std::mem::size_of::<VkExtent2D>() - 8usize];
    ["Alignment of VkExtent2D"][::std::mem::align_of::<VkExtent2D>() - 4usize];
    ["Offset of field: VkExtent2D::width"][::std::mem::offset_of!(VkExtent2D, width) - 0usize];
    ["Offset of field: VkExtent2D::height"][::std::mem::offset_of!(VkExtent2D, height) - 4usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExtent3D {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExtent3D"][::std::mem::size_of::<VkExtent3D>() - 12usize];
    ["Alignment of VkExtent3D"][::std::mem::align_of::<VkExtent3D>() - 4usize];
    ["Offset of field: VkExtent3D::width"][::std::mem::offset_of!(VkExtent3D, width) - 0usize];
    ["Offset of field: VkExtent3D::height"][::std::mem::offset_of!(VkExtent3D, height) - 4usize];
    ["Offset of field: VkExtent3D::depth"][::std::mem::offset_of!(VkExtent3D, depth) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkOffset2D {
    pub x: i32,
    pub y: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOffset2D"][::std::mem::size_of::<VkOffset2D>() - 8usize];
    ["Alignment of VkOffset2D"][::std::mem::align_of::<VkOffset2D>() - 4usize];
    ["Offset of field: VkOffset2D::x"][::std::mem::offset_of!(VkOffset2D, x) - 0usize];
    ["Offset of field: VkOffset2D::y"][::std::mem::offset_of!(VkOffset2D, y) - 4usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkOffset3D {
    pub x: i32,
    pub y: i32,
    pub z: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOffset3D"][::std::mem::size_of::<VkOffset3D>() - 12usize];
    ["Alignment of VkOffset3D"][::std::mem::align_of::<VkOffset3D>() - 4usize];
    ["Offset of field: VkOffset3D::x"][::std::mem::offset_of!(VkOffset3D, x) - 0usize];
    ["Offset of field: VkOffset3D::y"][::std::mem::offset_of!(VkOffset3D, y) - 4usize];
    ["Offset of field: VkOffset3D::z"][::std::mem::offset_of!(VkOffset3D, z) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkRect2D {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRect2D"][::std::mem::size_of::<VkRect2D>() - 16usize];
    ["Alignment of VkRect2D"][::std::mem::align_of::<VkRect2D>() - 4usize];
    ["Offset of field: VkRect2D::offset"][::std::mem::offset_of!(VkRect2D, offset) - 0usize];
    ["Offset of field: VkRect2D::extent"][::std::mem::offset_of!(VkRect2D, extent) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseInStructure {
    pub sType: VkStructureType,
    pub pNext: *const VkBaseInStructure,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBaseInStructure"][::std::mem::size_of::<VkBaseInStructure>() - 16usize];
    ["Alignment of VkBaseInStructure"][::std::mem::align_of::<VkBaseInStructure>() - 8usize];
    ["Offset of field: VkBaseInStructure::sType"]
        [::std::mem::offset_of!(VkBaseInStructure, sType) - 0usize];
    ["Offset of field: VkBaseInStructure::pNext"]
        [::std::mem::offset_of!(VkBaseInStructure, pNext) - 8usize];
};
impl Default for VkBaseInStructure {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBaseOutStructure {
    pub sType: VkStructureType,
    pub pNext: *mut VkBaseOutStructure,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBaseOutStructure"][::std::mem::size_of::<VkBaseOutStructure>() - 16usize];
    ["Alignment of VkBaseOutStructure"][::std::mem::align_of::<VkBaseOutStructure>() - 8usize];
    ["Offset of field: VkBaseOutStructure::sType"]
        [::std::mem::offset_of!(VkBaseOutStructure, sType) - 0usize];
    ["Offset of field: VkBaseOutStructure::pNext"]
        [::std::mem::offset_of!(VkBaseOutStructure, pNext) - 8usize];
};
impl Default for VkBaseOutStructure {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferMemoryBarrier"][::std::mem::size_of::<VkBufferMemoryBarrier>() - 56usize];
    ["Alignment of VkBufferMemoryBarrier"]
        [::std::mem::align_of::<VkBufferMemoryBarrier>() - 8usize];
    ["Offset of field: VkBufferMemoryBarrier::sType"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, sType) - 0usize];
    ["Offset of field: VkBufferMemoryBarrier::pNext"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, pNext) - 8usize];
    ["Offset of field: VkBufferMemoryBarrier::srcAccessMask"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, srcAccessMask) - 16usize];
    ["Offset of field: VkBufferMemoryBarrier::dstAccessMask"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, dstAccessMask) - 20usize];
    ["Offset of field: VkBufferMemoryBarrier::srcQueueFamilyIndex"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, srcQueueFamilyIndex) - 24usize];
    ["Offset of field: VkBufferMemoryBarrier::dstQueueFamilyIndex"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, dstQueueFamilyIndex) - 28usize];
    ["Offset of field: VkBufferMemoryBarrier::buffer"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, buffer) - 32usize];
    ["Offset of field: VkBufferMemoryBarrier::offset"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, offset) - 40usize];
    ["Offset of field: VkBufferMemoryBarrier::size"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier, size) - 48usize];
};
impl Default for VkBufferMemoryBarrier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDispatchIndirectCommand {
    pub x: u32,
    pub y: u32,
    pub z: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDispatchIndirectCommand"]
        [::std::mem::size_of::<VkDispatchIndirectCommand>() - 12usize];
    ["Alignment of VkDispatchIndirectCommand"]
        [::std::mem::align_of::<VkDispatchIndirectCommand>() - 4usize];
    ["Offset of field: VkDispatchIndirectCommand::x"]
        [::std::mem::offset_of!(VkDispatchIndirectCommand, x) - 0usize];
    ["Offset of field: VkDispatchIndirectCommand::y"]
        [::std::mem::offset_of!(VkDispatchIndirectCommand, y) - 4usize];
    ["Offset of field: VkDispatchIndirectCommand::z"]
        [::std::mem::offset_of!(VkDispatchIndirectCommand, z) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawIndexedIndirectCommand {
    pub indexCount: u32,
    pub instanceCount: u32,
    pub firstIndex: u32,
    pub vertexOffset: i32,
    pub firstInstance: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawIndexedIndirectCommand"]
        [::std::mem::size_of::<VkDrawIndexedIndirectCommand>() - 20usize];
    ["Alignment of VkDrawIndexedIndirectCommand"]
        [::std::mem::align_of::<VkDrawIndexedIndirectCommand>() - 4usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::indexCount"]
        [::std::mem::offset_of!(VkDrawIndexedIndirectCommand, indexCount) - 0usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::instanceCount"]
        [::std::mem::offset_of!(VkDrawIndexedIndirectCommand, instanceCount) - 4usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::firstIndex"]
        [::std::mem::offset_of!(VkDrawIndexedIndirectCommand, firstIndex) - 8usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::vertexOffset"]
        [::std::mem::offset_of!(VkDrawIndexedIndirectCommand, vertexOffset) - 12usize];
    ["Offset of field: VkDrawIndexedIndirectCommand::firstInstance"]
        [::std::mem::offset_of!(VkDrawIndexedIndirectCommand, firstInstance) - 16usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawIndirectCommand {
    pub vertexCount: u32,
    pub instanceCount: u32,
    pub firstVertex: u32,
    pub firstInstance: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawIndirectCommand"][::std::mem::size_of::<VkDrawIndirectCommand>() - 16usize];
    ["Alignment of VkDrawIndirectCommand"]
        [::std::mem::align_of::<VkDrawIndirectCommand>() - 4usize];
    ["Offset of field: VkDrawIndirectCommand::vertexCount"]
        [::std::mem::offset_of!(VkDrawIndirectCommand, vertexCount) - 0usize];
    ["Offset of field: VkDrawIndirectCommand::instanceCount"]
        [::std::mem::offset_of!(VkDrawIndirectCommand, instanceCount) - 4usize];
    ["Offset of field: VkDrawIndirectCommand::firstVertex"]
        [::std::mem::offset_of!(VkDrawIndirectCommand, firstVertex) - 8usize];
    ["Offset of field: VkDrawIndirectCommand::firstInstance"]
        [::std::mem::offset_of!(VkDrawIndirectCommand, firstInstance) - 12usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageSubresourceRange {
    pub aspectMask: VkImageAspectFlags,
    pub baseMipLevel: u32,
    pub levelCount: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresourceRange"][::std::mem::size_of::<VkImageSubresourceRange>() - 20usize];
    ["Alignment of VkImageSubresourceRange"]
        [::std::mem::align_of::<VkImageSubresourceRange>() - 4usize];
    ["Offset of field: VkImageSubresourceRange::aspectMask"]
        [::std::mem::offset_of!(VkImageSubresourceRange, aspectMask) - 0usize];
    ["Offset of field: VkImageSubresourceRange::baseMipLevel"]
        [::std::mem::offset_of!(VkImageSubresourceRange, baseMipLevel) - 4usize];
    ["Offset of field: VkImageSubresourceRange::levelCount"]
        [::std::mem::offset_of!(VkImageSubresourceRange, levelCount) - 8usize];
    ["Offset of field: VkImageSubresourceRange::baseArrayLayer"]
        [::std::mem::offset_of!(VkImageSubresourceRange, baseArrayLayer) - 12usize];
    ["Offset of field: VkImageSubresourceRange::layerCount"]
        [::std::mem::offset_of!(VkImageSubresourceRange, layerCount) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub image: VkImage,
    pub subresourceRange: VkImageSubresourceRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageMemoryBarrier"][::std::mem::size_of::<VkImageMemoryBarrier>() - 72usize];
    ["Alignment of VkImageMemoryBarrier"][::std::mem::align_of::<VkImageMemoryBarrier>() - 8usize];
    ["Offset of field: VkImageMemoryBarrier::sType"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, sType) - 0usize];
    ["Offset of field: VkImageMemoryBarrier::pNext"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, pNext) - 8usize];
    ["Offset of field: VkImageMemoryBarrier::srcAccessMask"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, srcAccessMask) - 16usize];
    ["Offset of field: VkImageMemoryBarrier::dstAccessMask"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, dstAccessMask) - 20usize];
    ["Offset of field: VkImageMemoryBarrier::oldLayout"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, oldLayout) - 24usize];
    ["Offset of field: VkImageMemoryBarrier::newLayout"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, newLayout) - 28usize];
    ["Offset of field: VkImageMemoryBarrier::srcQueueFamilyIndex"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, srcQueueFamilyIndex) - 32usize];
    ["Offset of field: VkImageMemoryBarrier::dstQueueFamilyIndex"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, dstQueueFamilyIndex) - 36usize];
    ["Offset of field: VkImageMemoryBarrier::image"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, image) - 40usize];
    ["Offset of field: VkImageMemoryBarrier::subresourceRange"]
        [::std::mem::offset_of!(VkImageMemoryBarrier, subresourceRange) - 48usize];
};
impl Default for VkImageMemoryBarrier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryBarrier {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryBarrier"][::std::mem::size_of::<VkMemoryBarrier>() - 24usize];
    ["Alignment of VkMemoryBarrier"][::std::mem::align_of::<VkMemoryBarrier>() - 8usize];
    ["Offset of field: VkMemoryBarrier::sType"]
        [::std::mem::offset_of!(VkMemoryBarrier, sType) - 0usize];
    ["Offset of field: VkMemoryBarrier::pNext"]
        [::std::mem::offset_of!(VkMemoryBarrier, pNext) - 8usize];
    ["Offset of field: VkMemoryBarrier::srcAccessMask"]
        [::std::mem::offset_of!(VkMemoryBarrier, srcAccessMask) - 16usize];
    ["Offset of field: VkMemoryBarrier::dstAccessMask"]
        [::std::mem::offset_of!(VkMemoryBarrier, dstAccessMask) - 20usize];
};
impl Default for VkMemoryBarrier {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCacheHeaderVersionOne {
    pub headerSize: u32,
    pub headerVersion: VkPipelineCacheHeaderVersion,
    pub vendorID: u32,
    pub deviceID: u32,
    pub pipelineCacheUUID: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCacheHeaderVersionOne"]
        [::std::mem::size_of::<VkPipelineCacheHeaderVersionOne>() - 32usize];
    ["Alignment of VkPipelineCacheHeaderVersionOne"]
        [::std::mem::align_of::<VkPipelineCacheHeaderVersionOne>() - 4usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::headerSize"]
        [::std::mem::offset_of!(VkPipelineCacheHeaderVersionOne, headerSize) - 0usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::headerVersion"]
        [::std::mem::offset_of!(VkPipelineCacheHeaderVersionOne, headerVersion) - 4usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::vendorID"]
        [::std::mem::offset_of!(VkPipelineCacheHeaderVersionOne, vendorID) - 8usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::deviceID"]
        [::std::mem::offset_of!(VkPipelineCacheHeaderVersionOne, deviceID) - 12usize];
    ["Offset of field: VkPipelineCacheHeaderVersionOne::pipelineCacheUUID"]
        [::std::mem::offset_of!(VkPipelineCacheHeaderVersionOne, pipelineCacheUUID) - 16usize];
};
impl Default for VkPipelineCacheHeaderVersionOne {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkAllocationFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkFreeFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pMemory: *mut ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkInternalAllocationNotification = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkInternalFreeNotification = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        size: usize,
        allocationType: VkInternalAllocationType,
        allocationScope: VkSystemAllocationScope,
    ),
>;
pub type PFN_vkReallocationFunction = ::std::option::Option<
    unsafe extern "system" fn(
        pUserData: *mut ::std::os::raw::c_void,
        pOriginal: *mut ::std::os::raw::c_void,
        size: usize,
        alignment: usize,
        allocationScope: VkSystemAllocationScope,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type PFN_vkVoidFunction = ::std::option::Option<unsafe extern "system" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAllocationCallbacks {
    pub pUserData: *mut ::std::os::raw::c_void,
    pub pfnAllocation: PFN_vkAllocationFunction,
    pub pfnReallocation: PFN_vkReallocationFunction,
    pub pfnFree: PFN_vkFreeFunction,
    pub pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pub pfnInternalFree: PFN_vkInternalFreeNotification,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAllocationCallbacks"][::std::mem::size_of::<VkAllocationCallbacks>() - 48usize];
    ["Alignment of VkAllocationCallbacks"]
        [::std::mem::align_of::<VkAllocationCallbacks>() - 8usize];
    ["Offset of field: VkAllocationCallbacks::pUserData"]
        [::std::mem::offset_of!(VkAllocationCallbacks, pUserData) - 0usize];
    ["Offset of field: VkAllocationCallbacks::pfnAllocation"]
        [::std::mem::offset_of!(VkAllocationCallbacks, pfnAllocation) - 8usize];
    ["Offset of field: VkAllocationCallbacks::pfnReallocation"]
        [::std::mem::offset_of!(VkAllocationCallbacks, pfnReallocation) - 16usize];
    ["Offset of field: VkAllocationCallbacks::pfnFree"]
        [::std::mem::offset_of!(VkAllocationCallbacks, pfnFree) - 24usize];
    ["Offset of field: VkAllocationCallbacks::pfnInternalAllocation"]
        [::std::mem::offset_of!(VkAllocationCallbacks, pfnInternalAllocation) - 32usize];
    ["Offset of field: VkAllocationCallbacks::pfnInternalFree"]
        [::std::mem::offset_of!(VkAllocationCallbacks, pfnInternalFree) - 40usize];
};
impl Default for VkAllocationCallbacks {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkApplicationInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pApplicationName: *const ::std::os::raw::c_char,
    pub applicationVersion: u32,
    pub pEngineName: *const ::std::os::raw::c_char,
    pub engineVersion: u32,
    pub apiVersion: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkApplicationInfo"][::std::mem::size_of::<VkApplicationInfo>() - 48usize];
    ["Alignment of VkApplicationInfo"][::std::mem::align_of::<VkApplicationInfo>() - 8usize];
    ["Offset of field: VkApplicationInfo::sType"]
        [::std::mem::offset_of!(VkApplicationInfo, sType) - 0usize];
    ["Offset of field: VkApplicationInfo::pNext"]
        [::std::mem::offset_of!(VkApplicationInfo, pNext) - 8usize];
    ["Offset of field: VkApplicationInfo::pApplicationName"]
        [::std::mem::offset_of!(VkApplicationInfo, pApplicationName) - 16usize];
    ["Offset of field: VkApplicationInfo::applicationVersion"]
        [::std::mem::offset_of!(VkApplicationInfo, applicationVersion) - 24usize];
    ["Offset of field: VkApplicationInfo::pEngineName"]
        [::std::mem::offset_of!(VkApplicationInfo, pEngineName) - 32usize];
    ["Offset of field: VkApplicationInfo::engineVersion"]
        [::std::mem::offset_of!(VkApplicationInfo, engineVersion) - 40usize];
    ["Offset of field: VkApplicationInfo::apiVersion"]
        [::std::mem::offset_of!(VkApplicationInfo, apiVersion) - 44usize];
};
impl Default for VkApplicationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkFormatProperties {
    pub linearTilingFeatures: VkFormatFeatureFlags,
    pub optimalTilingFeatures: VkFormatFeatureFlags,
    pub bufferFeatures: VkFormatFeatureFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFormatProperties"][::std::mem::size_of::<VkFormatProperties>() - 12usize];
    ["Alignment of VkFormatProperties"][::std::mem::align_of::<VkFormatProperties>() - 4usize];
    ["Offset of field: VkFormatProperties::linearTilingFeatures"]
        [::std::mem::offset_of!(VkFormatProperties, linearTilingFeatures) - 0usize];
    ["Offset of field: VkFormatProperties::optimalTilingFeatures"]
        [::std::mem::offset_of!(VkFormatProperties, optimalTilingFeatures) - 4usize];
    ["Offset of field: VkFormatProperties::bufferFeatures"]
        [::std::mem::offset_of!(VkFormatProperties, bufferFeatures) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageFormatProperties {
    pub maxExtent: VkExtent3D,
    pub maxMipLevels: u32,
    pub maxArrayLayers: u32,
    pub sampleCounts: VkSampleCountFlags,
    pub maxResourceSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageFormatProperties"][::std::mem::size_of::<VkImageFormatProperties>() - 32usize];
    ["Alignment of VkImageFormatProperties"]
        [::std::mem::align_of::<VkImageFormatProperties>() - 8usize];
    ["Offset of field: VkImageFormatProperties::maxExtent"]
        [::std::mem::offset_of!(VkImageFormatProperties, maxExtent) - 0usize];
    ["Offset of field: VkImageFormatProperties::maxMipLevels"]
        [::std::mem::offset_of!(VkImageFormatProperties, maxMipLevels) - 12usize];
    ["Offset of field: VkImageFormatProperties::maxArrayLayers"]
        [::std::mem::offset_of!(VkImageFormatProperties, maxArrayLayers) - 16usize];
    ["Offset of field: VkImageFormatProperties::sampleCounts"]
        [::std::mem::offset_of!(VkImageFormatProperties, sampleCounts) - 20usize];
    ["Offset of field: VkImageFormatProperties::maxResourceSize"]
        [::std::mem::offset_of!(VkImageFormatProperties, maxResourceSize) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInstanceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkInstanceCreateFlags,
    pub pApplicationInfo: *const VkApplicationInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkInstanceCreateInfo"][::std::mem::size_of::<VkInstanceCreateInfo>() - 64usize];
    ["Alignment of VkInstanceCreateInfo"][::std::mem::align_of::<VkInstanceCreateInfo>() - 8usize];
    ["Offset of field: VkInstanceCreateInfo::sType"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, sType) - 0usize];
    ["Offset of field: VkInstanceCreateInfo::pNext"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, pNext) - 8usize];
    ["Offset of field: VkInstanceCreateInfo::flags"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, flags) - 16usize];
    ["Offset of field: VkInstanceCreateInfo::pApplicationInfo"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, pApplicationInfo) - 24usize];
    ["Offset of field: VkInstanceCreateInfo::enabledLayerCount"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, enabledLayerCount) - 32usize];
    ["Offset of field: VkInstanceCreateInfo::ppEnabledLayerNames"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, ppEnabledLayerNames) - 40usize];
    ["Offset of field: VkInstanceCreateInfo::enabledExtensionCount"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, enabledExtensionCount) - 48usize];
    ["Offset of field: VkInstanceCreateInfo::ppEnabledExtensionNames"]
        [::std::mem::offset_of!(VkInstanceCreateInfo, ppEnabledExtensionNames) - 56usize];
};
impl Default for VkInstanceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMemoryHeap {
    pub size: VkDeviceSize,
    pub flags: VkMemoryHeapFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryHeap"][::std::mem::size_of::<VkMemoryHeap>() - 16usize];
    ["Alignment of VkMemoryHeap"][::std::mem::align_of::<VkMemoryHeap>() - 8usize];
    ["Offset of field: VkMemoryHeap::size"][::std::mem::offset_of!(VkMemoryHeap, size) - 0usize];
    ["Offset of field: VkMemoryHeap::flags"][::std::mem::offset_of!(VkMemoryHeap, flags) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMemoryType {
    pub propertyFlags: VkMemoryPropertyFlags,
    pub heapIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryType"][::std::mem::size_of::<VkMemoryType>() - 8usize];
    ["Alignment of VkMemoryType"][::std::mem::align_of::<VkMemoryType>() - 4usize];
    ["Offset of field: VkMemoryType::propertyFlags"]
        [::std::mem::offset_of!(VkMemoryType, propertyFlags) - 0usize];
    ["Offset of field: VkMemoryType::heapIndex"]
        [::std::mem::offset_of!(VkMemoryType, heapIndex) - 4usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceFeatures {
    pub robustBufferAccess: VkBool32,
    pub fullDrawIndexUint32: VkBool32,
    pub imageCubeArray: VkBool32,
    pub independentBlend: VkBool32,
    pub geometryShader: VkBool32,
    pub tessellationShader: VkBool32,
    pub sampleRateShading: VkBool32,
    pub dualSrcBlend: VkBool32,
    pub logicOp: VkBool32,
    pub multiDrawIndirect: VkBool32,
    pub drawIndirectFirstInstance: VkBool32,
    pub depthClamp: VkBool32,
    pub depthBiasClamp: VkBool32,
    pub fillModeNonSolid: VkBool32,
    pub depthBounds: VkBool32,
    pub wideLines: VkBool32,
    pub largePoints: VkBool32,
    pub alphaToOne: VkBool32,
    pub multiViewport: VkBool32,
    pub samplerAnisotropy: VkBool32,
    pub textureCompressionETC2: VkBool32,
    pub textureCompressionASTC_LDR: VkBool32,
    pub textureCompressionBC: VkBool32,
    pub occlusionQueryPrecise: VkBool32,
    pub pipelineStatisticsQuery: VkBool32,
    pub vertexPipelineStoresAndAtomics: VkBool32,
    pub fragmentStoresAndAtomics: VkBool32,
    pub shaderTessellationAndGeometryPointSize: VkBool32,
    pub shaderImageGatherExtended: VkBool32,
    pub shaderStorageImageExtendedFormats: VkBool32,
    pub shaderStorageImageMultisample: VkBool32,
    pub shaderStorageImageReadWithoutFormat: VkBool32,
    pub shaderStorageImageWriteWithoutFormat: VkBool32,
    pub shaderUniformBufferArrayDynamicIndexing: VkBool32,
    pub shaderSampledImageArrayDynamicIndexing: VkBool32,
    pub shaderStorageBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageImageArrayDynamicIndexing: VkBool32,
    pub shaderClipDistance: VkBool32,
    pub shaderCullDistance: VkBool32,
    pub shaderFloat64: VkBool32,
    pub shaderInt64: VkBool32,
    pub shaderInt16: VkBool32,
    pub shaderResourceResidency: VkBool32,
    pub shaderResourceMinLod: VkBool32,
    pub sparseBinding: VkBool32,
    pub sparseResidencyBuffer: VkBool32,
    pub sparseResidencyImage2D: VkBool32,
    pub sparseResidencyImage3D: VkBool32,
    pub sparseResidency2Samples: VkBool32,
    pub sparseResidency4Samples: VkBool32,
    pub sparseResidency8Samples: VkBool32,
    pub sparseResidency16Samples: VkBool32,
    pub sparseResidencyAliased: VkBool32,
    pub variableMultisampleRate: VkBool32,
    pub inheritedQueries: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceFeatures>() - 220usize];
    ["Alignment of VkPhysicalDeviceFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceFeatures>() - 4usize];
    ["Offset of field: VkPhysicalDeviceFeatures::robustBufferAccess"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, robustBufferAccess) - 0usize];
    ["Offset of field: VkPhysicalDeviceFeatures::fullDrawIndexUint32"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, fullDrawIndexUint32) - 4usize];
    ["Offset of field: VkPhysicalDeviceFeatures::imageCubeArray"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, imageCubeArray) - 8usize];
    ["Offset of field: VkPhysicalDeviceFeatures::independentBlend"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, independentBlend) - 12usize];
    ["Offset of field: VkPhysicalDeviceFeatures::geometryShader"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, geometryShader) - 16usize];
    ["Offset of field: VkPhysicalDeviceFeatures::tessellationShader"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, tessellationShader) - 20usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sampleRateShading"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sampleRateShading) - 24usize];
    ["Offset of field: VkPhysicalDeviceFeatures::dualSrcBlend"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, dualSrcBlend) - 28usize];
    ["Offset of field: VkPhysicalDeviceFeatures::logicOp"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, logicOp) - 32usize];
    ["Offset of field: VkPhysicalDeviceFeatures::multiDrawIndirect"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, multiDrawIndirect) - 36usize];
    ["Offset of field: VkPhysicalDeviceFeatures::drawIndirectFirstInstance"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, drawIndirectFirstInstance) - 40usize];
    ["Offset of field: VkPhysicalDeviceFeatures::depthClamp"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, depthClamp) - 44usize];
    ["Offset of field: VkPhysicalDeviceFeatures::depthBiasClamp"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, depthBiasClamp) - 48usize];
    ["Offset of field: VkPhysicalDeviceFeatures::fillModeNonSolid"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, fillModeNonSolid) - 52usize];
    ["Offset of field: VkPhysicalDeviceFeatures::depthBounds"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, depthBounds) - 56usize];
    ["Offset of field: VkPhysicalDeviceFeatures::wideLines"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, wideLines) - 60usize];
    ["Offset of field: VkPhysicalDeviceFeatures::largePoints"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, largePoints) - 64usize];
    ["Offset of field: VkPhysicalDeviceFeatures::alphaToOne"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, alphaToOne) - 68usize];
    ["Offset of field: VkPhysicalDeviceFeatures::multiViewport"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, multiViewport) - 72usize];
    ["Offset of field: VkPhysicalDeviceFeatures::samplerAnisotropy"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, samplerAnisotropy) - 76usize];
    ["Offset of field: VkPhysicalDeviceFeatures::textureCompressionETC2"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, textureCompressionETC2) - 80usize];
    ["Offset of field: VkPhysicalDeviceFeatures::textureCompressionASTC_LDR"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, textureCompressionASTC_LDR) - 84usize];
    ["Offset of field: VkPhysicalDeviceFeatures::textureCompressionBC"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, textureCompressionBC) - 88usize];
    ["Offset of field: VkPhysicalDeviceFeatures::occlusionQueryPrecise"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, occlusionQueryPrecise) - 92usize];
    ["Offset of field: VkPhysicalDeviceFeatures::pipelineStatisticsQuery"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, pipelineStatisticsQuery) - 96usize];
    ["Offset of field: VkPhysicalDeviceFeatures::vertexPipelineStoresAndAtomics"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        vertexPipelineStoresAndAtomics
    ) - 100usize];
    ["Offset of field: VkPhysicalDeviceFeatures::fragmentStoresAndAtomics"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, fragmentStoresAndAtomics) - 104usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderTessellationAndGeometryPointSize"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderTessellationAndGeometryPointSize
    )
        - 108usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderImageGatherExtended"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderImageGatherExtended) - 112usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageExtendedFormats"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageExtendedFormats
    ) - 116usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageMultisample"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageMultisample
    ) - 120usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageReadWithoutFormat"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageReadWithoutFormat
    )
        - 124usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageWriteWithoutFormat"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageWriteWithoutFormat
    )
        - 128usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderUniformBufferArrayDynamicIndexing"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderUniformBufferArrayDynamicIndexing
    )
        - 132usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderSampledImageArrayDynamicIndexing"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderSampledImageArrayDynamicIndexing
    )
        - 136usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageBufferArrayDynamicIndexing"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageBufferArrayDynamicIndexing
    )
        - 140usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderStorageImageArrayDynamicIndexing"][::std::mem::offset_of!(
        VkPhysicalDeviceFeatures,
        shaderStorageImageArrayDynamicIndexing
    )
        - 144usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderClipDistance"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderClipDistance) - 148usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderCullDistance"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderCullDistance) - 152usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderFloat64"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderFloat64) - 156usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderInt64"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderInt64) - 160usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderInt16"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderInt16) - 164usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderResourceResidency"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderResourceResidency) - 168usize];
    ["Offset of field: VkPhysicalDeviceFeatures::shaderResourceMinLod"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, shaderResourceMinLod) - 172usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseBinding"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseBinding) - 176usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyBuffer"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyBuffer) - 180usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyImage2D"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyImage2D) - 184usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyImage3D"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyImage3D) - 188usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency2Samples"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency2Samples) - 192usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency4Samples"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency4Samples) - 196usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency8Samples"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency8Samples) - 200usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidency16Samples"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidency16Samples) - 204usize];
    ["Offset of field: VkPhysicalDeviceFeatures::sparseResidencyAliased"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, sparseResidencyAliased) - 208usize];
    ["Offset of field: VkPhysicalDeviceFeatures::variableMultisampleRate"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, variableMultisampleRate) - 212usize];
    ["Offset of field: VkPhysicalDeviceFeatures::inheritedQueries"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures, inheritedQueries) - 216usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceLimits {
    pub maxImageDimension1D: u32,
    pub maxImageDimension2D: u32,
    pub maxImageDimension3D: u32,
    pub maxImageDimensionCube: u32,
    pub maxImageArrayLayers: u32,
    pub maxTexelBufferElements: u32,
    pub maxUniformBufferRange: u32,
    pub maxStorageBufferRange: u32,
    pub maxPushConstantsSize: u32,
    pub maxMemoryAllocationCount: u32,
    pub maxSamplerAllocationCount: u32,
    pub bufferImageGranularity: VkDeviceSize,
    pub sparseAddressSpaceSize: VkDeviceSize,
    pub maxBoundDescriptorSets: u32,
    pub maxPerStageDescriptorSamplers: u32,
    pub maxPerStageDescriptorUniformBuffers: u32,
    pub maxPerStageDescriptorStorageBuffers: u32,
    pub maxPerStageDescriptorSampledImages: u32,
    pub maxPerStageDescriptorStorageImages: u32,
    pub maxPerStageDescriptorInputAttachments: u32,
    pub maxPerStageResources: u32,
    pub maxDescriptorSetSamplers: u32,
    pub maxDescriptorSetUniformBuffers: u32,
    pub maxDescriptorSetUniformBuffersDynamic: u32,
    pub maxDescriptorSetStorageBuffers: u32,
    pub maxDescriptorSetStorageBuffersDynamic: u32,
    pub maxDescriptorSetSampledImages: u32,
    pub maxDescriptorSetStorageImages: u32,
    pub maxDescriptorSetInputAttachments: u32,
    pub maxVertexInputAttributes: u32,
    pub maxVertexInputBindings: u32,
    pub maxVertexInputAttributeOffset: u32,
    pub maxVertexInputBindingStride: u32,
    pub maxVertexOutputComponents: u32,
    pub maxTessellationGenerationLevel: u32,
    pub maxTessellationPatchSize: u32,
    pub maxTessellationControlPerVertexInputComponents: u32,
    pub maxTessellationControlPerVertexOutputComponents: u32,
    pub maxTessellationControlPerPatchOutputComponents: u32,
    pub maxTessellationControlTotalOutputComponents: u32,
    pub maxTessellationEvaluationInputComponents: u32,
    pub maxTessellationEvaluationOutputComponents: u32,
    pub maxGeometryShaderInvocations: u32,
    pub maxGeometryInputComponents: u32,
    pub maxGeometryOutputComponents: u32,
    pub maxGeometryOutputVertices: u32,
    pub maxGeometryTotalOutputComponents: u32,
    pub maxFragmentInputComponents: u32,
    pub maxFragmentOutputAttachments: u32,
    pub maxFragmentDualSrcAttachments: u32,
    pub maxFragmentCombinedOutputResources: u32,
    pub maxComputeSharedMemorySize: u32,
    pub maxComputeWorkGroupCount: [u32; 3usize],
    pub maxComputeWorkGroupInvocations: u32,
    pub maxComputeWorkGroupSize: [u32; 3usize],
    pub subPixelPrecisionBits: u32,
    pub subTexelPrecisionBits: u32,
    pub mipmapPrecisionBits: u32,
    pub maxDrawIndexedIndexValue: u32,
    pub maxDrawIndirectCount: u32,
    pub maxSamplerLodBias: f32,
    pub maxSamplerAnisotropy: f32,
    pub maxViewports: u32,
    pub maxViewportDimensions: [u32; 2usize],
    pub viewportBoundsRange: [f32; 2usize],
    pub viewportSubPixelBits: u32,
    pub minMemoryMapAlignment: usize,
    pub minTexelBufferOffsetAlignment: VkDeviceSize,
    pub minUniformBufferOffsetAlignment: VkDeviceSize,
    pub minStorageBufferOffsetAlignment: VkDeviceSize,
    pub minTexelOffset: i32,
    pub maxTexelOffset: u32,
    pub minTexelGatherOffset: i32,
    pub maxTexelGatherOffset: u32,
    pub minInterpolationOffset: f32,
    pub maxInterpolationOffset: f32,
    pub subPixelInterpolationOffsetBits: u32,
    pub maxFramebufferWidth: u32,
    pub maxFramebufferHeight: u32,
    pub maxFramebufferLayers: u32,
    pub framebufferColorSampleCounts: VkSampleCountFlags,
    pub framebufferDepthSampleCounts: VkSampleCountFlags,
    pub framebufferStencilSampleCounts: VkSampleCountFlags,
    pub framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    pub maxColorAttachments: u32,
    pub sampledImageColorSampleCounts: VkSampleCountFlags,
    pub sampledImageIntegerSampleCounts: VkSampleCountFlags,
    pub sampledImageDepthSampleCounts: VkSampleCountFlags,
    pub sampledImageStencilSampleCounts: VkSampleCountFlags,
    pub storageImageSampleCounts: VkSampleCountFlags,
    pub maxSampleMaskWords: u32,
    pub timestampComputeAndGraphics: VkBool32,
    pub timestampPeriod: f32,
    pub maxClipDistances: u32,
    pub maxCullDistances: u32,
    pub maxCombinedClipAndCullDistances: u32,
    pub discreteQueuePriorities: u32,
    pub pointSizeRange: [f32; 2usize],
    pub lineWidthRange: [f32; 2usize],
    pub pointSizeGranularity: f32,
    pub lineWidthGranularity: f32,
    pub strictLines: VkBool32,
    pub standardSampleLocations: VkBool32,
    pub optimalBufferCopyOffsetAlignment: VkDeviceSize,
    pub optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    pub nonCoherentAtomSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLimits"][::std::mem::size_of::<VkPhysicalDeviceLimits>() - 504usize];
    ["Alignment of VkPhysicalDeviceLimits"]
        [::std::mem::align_of::<VkPhysicalDeviceLimits>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimension1D"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimension1D) - 0usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimension2D"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimension2D) - 4usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimension3D"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimension3D) - 8usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageDimensionCube"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxImageDimensionCube) - 12usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxImageArrayLayers"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxImageArrayLayers) - 16usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTexelBufferElements"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxTexelBufferElements) - 20usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxUniformBufferRange"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxUniformBufferRange) - 24usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxStorageBufferRange"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxStorageBufferRange) - 28usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPushConstantsSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxPushConstantsSize) - 32usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxMemoryAllocationCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxMemoryAllocationCount) - 36usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSamplerAllocationCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxSamplerAllocationCount) - 40usize];
    ["Offset of field: VkPhysicalDeviceLimits::bufferImageGranularity"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, bufferImageGranularity) - 48usize];
    ["Offset of field: VkPhysicalDeviceLimits::sparseAddressSpaceSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, sparseAddressSpaceSize) - 56usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxBoundDescriptorSets"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxBoundDescriptorSets) - 64usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxPerStageDescriptorSamplers) - 68usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorUniformBuffers
    ) - 72usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorStorageBuffers
    ) - 76usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorSampledImages
    ) - 80usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorStorageImages
    ) - 84usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageDescriptorInputAttachments"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxPerStageDescriptorInputAttachments
    ) - 88usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxPerStageResources"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxPerStageResources) - 92usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetSamplers"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetSamplers) - 96usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffers"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetUniformBuffers) - 100usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetUniformBuffersDynamic"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetUniformBuffersDynamic
    )
        - 104usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffers"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetStorageBuffers) - 108usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetStorageBuffersDynamic"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetStorageBuffersDynamic
    )
        - 112usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetSampledImages"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetSampledImages) - 116usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetStorageImages"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxDescriptorSetStorageImages) - 120usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxDescriptorSetInputAttachments
    ) - 124usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputAttributes"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputAttributes) - 128usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputBindings"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputBindings) - 132usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputAttributeOffset"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputAttributeOffset) - 136usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexInputBindingStride"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexInputBindingStride) - 140usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxVertexOutputComponents"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxVertexOutputComponents) - 144usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationGenerationLevel"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxTessellationGenerationLevel) - 148usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationPatchSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxTessellationPatchSize) - 152usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlPerVertexInputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlPerVertexInputComponents
    )
        - 156usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlPerVertexOutputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlPerVertexOutputComponents
    )
        - 160usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlPerPatchOutputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlPerPatchOutputComponents
    )
        - 164usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationControlTotalOutputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationControlTotalOutputComponents
    )
        - 168usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationEvaluationInputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationEvaluationInputComponents
    )
        - 172usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTessellationEvaluationOutputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxTessellationEvaluationOutputComponents
    )
        - 176usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryShaderInvocations"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryShaderInvocations) - 180usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryInputComponents"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryInputComponents) - 184usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryOutputComponents"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryOutputComponents) - 188usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryOutputVertices"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxGeometryOutputVertices) - 192usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxGeometryTotalOutputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxGeometryTotalOutputComponents
    ) - 196usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentInputComponents"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxFragmentInputComponents) - 200usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentOutputAttachments"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxFragmentOutputAttachments) - 204usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentDualSrcAttachments"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxFragmentDualSrcAttachments) - 208usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFragmentCombinedOutputResources"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxFragmentCombinedOutputResources
    ) - 212usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeSharedMemorySize"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxComputeSharedMemorySize) - 216usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeWorkGroupCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxComputeWorkGroupCount) - 220usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeWorkGroupInvocations"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxComputeWorkGroupInvocations) - 232usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxComputeWorkGroupSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxComputeWorkGroupSize) - 236usize];
    ["Offset of field: VkPhysicalDeviceLimits::subPixelPrecisionBits"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, subPixelPrecisionBits) - 248usize];
    ["Offset of field: VkPhysicalDeviceLimits::subTexelPrecisionBits"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, subTexelPrecisionBits) - 252usize];
    ["Offset of field: VkPhysicalDeviceLimits::mipmapPrecisionBits"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, mipmapPrecisionBits) - 256usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDrawIndexedIndexValue"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxDrawIndexedIndexValue) - 260usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxDrawIndirectCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxDrawIndirectCount) - 264usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSamplerLodBias"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxSamplerLodBias) - 268usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSamplerAnisotropy"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxSamplerAnisotropy) - 272usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxViewports"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxViewports) - 276usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxViewportDimensions"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxViewportDimensions) - 280usize];
    ["Offset of field: VkPhysicalDeviceLimits::viewportBoundsRange"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, viewportBoundsRange) - 288usize];
    ["Offset of field: VkPhysicalDeviceLimits::viewportSubPixelBits"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, viewportSubPixelBits) - 296usize];
    ["Offset of field: VkPhysicalDeviceLimits::minMemoryMapAlignment"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, minMemoryMapAlignment) - 304usize];
    ["Offset of field: VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, minTexelBufferOffsetAlignment) - 312usize];
    ["Offset of field: VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        minUniformBufferOffsetAlignment
    ) - 320usize];
    ["Offset of field: VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        minStorageBufferOffsetAlignment
    ) - 328usize];
    ["Offset of field: VkPhysicalDeviceLimits::minTexelOffset"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, minTexelOffset) - 336usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTexelOffset"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxTexelOffset) - 340usize];
    ["Offset of field: VkPhysicalDeviceLimits::minTexelGatherOffset"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, minTexelGatherOffset) - 344usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxTexelGatherOffset"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxTexelGatherOffset) - 348usize];
    ["Offset of field: VkPhysicalDeviceLimits::minInterpolationOffset"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, minInterpolationOffset) - 352usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxInterpolationOffset"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxInterpolationOffset) - 356usize];
    ["Offset of field: VkPhysicalDeviceLimits::subPixelInterpolationOffsetBits"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        subPixelInterpolationOffsetBits
    ) - 360usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFramebufferWidth"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxFramebufferWidth) - 364usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFramebufferHeight"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxFramebufferHeight) - 368usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxFramebufferLayers"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxFramebufferLayers) - 372usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferColorSampleCounts"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, framebufferColorSampleCounts) - 376usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferDepthSampleCounts"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, framebufferDepthSampleCounts) - 380usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferStencilSampleCounts"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, framebufferStencilSampleCounts) - 384usize];
    ["Offset of field: VkPhysicalDeviceLimits::framebufferNoAttachmentsSampleCounts"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        framebufferNoAttachmentsSampleCounts
    ) - 388usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxColorAttachments"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxColorAttachments) - 392usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageColorSampleCounts"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, sampledImageColorSampleCounts) - 396usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageIntegerSampleCounts"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        sampledImageIntegerSampleCounts
    ) - 400usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageDepthSampleCounts"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, sampledImageDepthSampleCounts) - 404usize];
    ["Offset of field: VkPhysicalDeviceLimits::sampledImageStencilSampleCounts"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        sampledImageStencilSampleCounts
    ) - 408usize];
    ["Offset of field: VkPhysicalDeviceLimits::storageImageSampleCounts"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, storageImageSampleCounts) - 412usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxSampleMaskWords"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxSampleMaskWords) - 416usize];
    ["Offset of field: VkPhysicalDeviceLimits::timestampComputeAndGraphics"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, timestampComputeAndGraphics) - 420usize];
    ["Offset of field: VkPhysicalDeviceLimits::timestampPeriod"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, timestampPeriod) - 424usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxClipDistances"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxClipDistances) - 428usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxCullDistances"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, maxCullDistances) - 432usize];
    ["Offset of field: VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        maxCombinedClipAndCullDistances
    ) - 436usize];
    ["Offset of field: VkPhysicalDeviceLimits::discreteQueuePriorities"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, discreteQueuePriorities) - 440usize];
    ["Offset of field: VkPhysicalDeviceLimits::pointSizeRange"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, pointSizeRange) - 444usize];
    ["Offset of field: VkPhysicalDeviceLimits::lineWidthRange"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, lineWidthRange) - 452usize];
    ["Offset of field: VkPhysicalDeviceLimits::pointSizeGranularity"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, pointSizeGranularity) - 460usize];
    ["Offset of field: VkPhysicalDeviceLimits::lineWidthGranularity"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, lineWidthGranularity) - 464usize];
    ["Offset of field: VkPhysicalDeviceLimits::strictLines"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, strictLines) - 468usize];
    ["Offset of field: VkPhysicalDeviceLimits::standardSampleLocations"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, standardSampleLocations) - 472usize];
    ["Offset of field: VkPhysicalDeviceLimits::optimalBufferCopyOffsetAlignment"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        optimalBufferCopyOffsetAlignment
    ) - 480usize];
    ["Offset of field: VkPhysicalDeviceLimits::optimalBufferCopyRowPitchAlignment"][::std::mem::offset_of!(
        VkPhysicalDeviceLimits,
        optimalBufferCopyRowPitchAlignment
    ) - 488usize];
    ["Offset of field: VkPhysicalDeviceLimits::nonCoherentAtomSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceLimits, nonCoherentAtomSize) - 496usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties {
    pub memoryTypeCount: u32,
    pub memoryTypes: [VkMemoryType; 32usize],
    pub memoryHeapCount: u32,
    pub memoryHeaps: [VkMemoryHeap; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceMemoryProperties>() - 520usize];
    ["Alignment of VkPhysicalDeviceMemoryProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceMemoryProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryTypeCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryTypeCount) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryTypes"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryTypes) - 4usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryHeapCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryHeapCount) - 260usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties::memoryHeaps"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryProperties, memoryHeaps) - 264usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPhysicalDeviceSparseProperties {
    pub residencyStandard2DBlockShape: VkBool32,
    pub residencyStandard2DMultisampleBlockShape: VkBool32,
    pub residencyStandard3DBlockShape: VkBool32,
    pub residencyAlignedMipSize: VkBool32,
    pub residencyNonResidentStrict: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSparseProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceSparseProperties>() - 20usize];
    ["Alignment of VkPhysicalDeviceSparseProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceSparseProperties>() - 4usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyStandard2DBlockShape"][::std::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyStandard2DBlockShape
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyStandard2DMultisampleBlockShape"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSparseProperties , residencyStandard2DMultisampleBlockShape) - 4usize] ;
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyStandard3DBlockShape"][::std::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyStandard3DBlockShape
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyAlignedMipSize"][::std::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyAlignedMipSize
    ) - 12usize];
    ["Offset of field: VkPhysicalDeviceSparseProperties::residencyNonResidentStrict"][::std::mem::offset_of!(
        VkPhysicalDeviceSparseProperties,
        residencyNonResidentStrict
    ) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties {
    pub apiVersion: u32,
    pub driverVersion: u32,
    pub vendorID: u32,
    pub deviceID: u32,
    pub deviceType: VkPhysicalDeviceType,
    pub deviceName: [::std::os::raw::c_char; 256usize],
    pub pipelineCacheUUID: [u8; 16usize],
    pub limits: VkPhysicalDeviceLimits,
    pub sparseProperties: VkPhysicalDeviceSparseProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceProperties>() - 824usize];
    ["Alignment of VkPhysicalDeviceProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProperties::apiVersion"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, apiVersion) - 0usize];
    ["Offset of field: VkPhysicalDeviceProperties::driverVersion"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, driverVersion) - 4usize];
    ["Offset of field: VkPhysicalDeviceProperties::vendorID"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, vendorID) - 8usize];
    ["Offset of field: VkPhysicalDeviceProperties::deviceID"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, deviceID) - 12usize];
    ["Offset of field: VkPhysicalDeviceProperties::deviceType"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, deviceType) - 16usize];
    ["Offset of field: VkPhysicalDeviceProperties::deviceName"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, deviceName) - 20usize];
    ["Offset of field: VkPhysicalDeviceProperties::pipelineCacheUUID"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, pipelineCacheUUID) - 276usize];
    ["Offset of field: VkPhysicalDeviceProperties::limits"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, limits) - 296usize];
    ["Offset of field: VkPhysicalDeviceProperties::sparseProperties"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties, sparseProperties) - 800usize];
};
impl Default for VkPhysicalDeviceProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkQueueFamilyProperties {
    pub queueFlags: VkQueueFlags,
    pub queueCount: u32,
    pub timestampValidBits: u32,
    pub minImageTransferGranularity: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyProperties"][::std::mem::size_of::<VkQueueFamilyProperties>() - 24usize];
    ["Alignment of VkQueueFamilyProperties"]
        [::std::mem::align_of::<VkQueueFamilyProperties>() - 4usize];
    ["Offset of field: VkQueueFamilyProperties::queueFlags"]
        [::std::mem::offset_of!(VkQueueFamilyProperties, queueFlags) - 0usize];
    ["Offset of field: VkQueueFamilyProperties::queueCount"]
        [::std::mem::offset_of!(VkQueueFamilyProperties, queueCount) - 4usize];
    ["Offset of field: VkQueueFamilyProperties::timestampValidBits"]
        [::std::mem::offset_of!(VkQueueFamilyProperties, timestampValidBits) - 8usize];
    ["Offset of field: VkQueueFamilyProperties::minImageTransferGranularity"]
        [::std::mem::offset_of!(VkQueueFamilyProperties, minImageTransferGranularity) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueCount: u32,
    pub pQueuePriorities: *const f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueCreateInfo"][::std::mem::size_of::<VkDeviceQueueCreateInfo>() - 40usize];
    ["Alignment of VkDeviceQueueCreateInfo"]
        [::std::mem::align_of::<VkDeviceQueueCreateInfo>() - 8usize];
    ["Offset of field: VkDeviceQueueCreateInfo::sType"]
        [::std::mem::offset_of!(VkDeviceQueueCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceQueueCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceQueueCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceQueueCreateInfo::flags"]
        [::std::mem::offset_of!(VkDeviceQueueCreateInfo, flags) - 16usize];
    ["Offset of field: VkDeviceQueueCreateInfo::queueFamilyIndex"]
        [::std::mem::offset_of!(VkDeviceQueueCreateInfo, queueFamilyIndex) - 20usize];
    ["Offset of field: VkDeviceQueueCreateInfo::queueCount"]
        [::std::mem::offset_of!(VkDeviceQueueCreateInfo, queueCount) - 24usize];
    ["Offset of field: VkDeviceQueueCreateInfo::pQueuePriorities"]
        [::std::mem::offset_of!(VkDeviceQueueCreateInfo, pQueuePriorities) - 32usize];
};
impl Default for VkDeviceQueueCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceCreateFlags,
    pub queueCreateInfoCount: u32,
    pub pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
    pub enabledLayerCount: u32,
    pub ppEnabledLayerNames: *const *const ::std::os::raw::c_char,
    pub enabledExtensionCount: u32,
    pub ppEnabledExtensionNames: *const *const ::std::os::raw::c_char,
    pub pEnabledFeatures: *const VkPhysicalDeviceFeatures,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceCreateInfo"][::std::mem::size_of::<VkDeviceCreateInfo>() - 72usize];
    ["Alignment of VkDeviceCreateInfo"][::std::mem::align_of::<VkDeviceCreateInfo>() - 8usize];
    ["Offset of field: VkDeviceCreateInfo::sType"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceCreateInfo::flags"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, flags) - 16usize];
    ["Offset of field: VkDeviceCreateInfo::queueCreateInfoCount"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, queueCreateInfoCount) - 20usize];
    ["Offset of field: VkDeviceCreateInfo::pQueueCreateInfos"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, pQueueCreateInfos) - 24usize];
    ["Offset of field: VkDeviceCreateInfo::enabledLayerCount"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, enabledLayerCount) - 32usize];
    ["Offset of field: VkDeviceCreateInfo::ppEnabledLayerNames"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, ppEnabledLayerNames) - 40usize];
    ["Offset of field: VkDeviceCreateInfo::enabledExtensionCount"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, enabledExtensionCount) - 48usize];
    ["Offset of field: VkDeviceCreateInfo::ppEnabledExtensionNames"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, ppEnabledExtensionNames) - 56usize];
    ["Offset of field: VkDeviceCreateInfo::pEnabledFeatures"]
        [::std::mem::offset_of!(VkDeviceCreateInfo, pEnabledFeatures) - 64usize];
};
impl Default for VkDeviceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExtensionProperties {
    pub extensionName: [::std::os::raw::c_char; 256usize],
    pub specVersion: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExtensionProperties"][::std::mem::size_of::<VkExtensionProperties>() - 260usize];
    ["Alignment of VkExtensionProperties"]
        [::std::mem::align_of::<VkExtensionProperties>() - 4usize];
    ["Offset of field: VkExtensionProperties::extensionName"]
        [::std::mem::offset_of!(VkExtensionProperties, extensionName) - 0usize];
    ["Offset of field: VkExtensionProperties::specVersion"]
        [::std::mem::offset_of!(VkExtensionProperties, specVersion) - 256usize];
};
impl Default for VkExtensionProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerProperties {
    pub layerName: [::std::os::raw::c_char; 256usize],
    pub specVersion: u32,
    pub implementationVersion: u32,
    pub description: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLayerProperties"][::std::mem::size_of::<VkLayerProperties>() - 520usize];
    ["Alignment of VkLayerProperties"][::std::mem::align_of::<VkLayerProperties>() - 4usize];
    ["Offset of field: VkLayerProperties::layerName"]
        [::std::mem::offset_of!(VkLayerProperties, layerName) - 0usize];
    ["Offset of field: VkLayerProperties::specVersion"]
        [::std::mem::offset_of!(VkLayerProperties, specVersion) - 256usize];
    ["Offset of field: VkLayerProperties::implementationVersion"]
        [::std::mem::offset_of!(VkLayerProperties, implementationVersion) - 260usize];
    ["Offset of field: VkLayerProperties::description"]
        [::std::mem::offset_of!(VkLayerProperties, description) - 264usize];
};
impl Default for VkLayerProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub pWaitDstStageMask: *const VkPipelineStageFlags,
    pub commandBufferCount: u32,
    pub pCommandBuffers: *const VkCommandBuffer,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubmitInfo"][::std::mem::size_of::<VkSubmitInfo>() - 72usize];
    ["Alignment of VkSubmitInfo"][::std::mem::align_of::<VkSubmitInfo>() - 8usize];
    ["Offset of field: VkSubmitInfo::sType"][::std::mem::offset_of!(VkSubmitInfo, sType) - 0usize];
    ["Offset of field: VkSubmitInfo::pNext"][::std::mem::offset_of!(VkSubmitInfo, pNext) - 8usize];
    ["Offset of field: VkSubmitInfo::waitSemaphoreCount"]
        [::std::mem::offset_of!(VkSubmitInfo, waitSemaphoreCount) - 16usize];
    ["Offset of field: VkSubmitInfo::pWaitSemaphores"]
        [::std::mem::offset_of!(VkSubmitInfo, pWaitSemaphores) - 24usize];
    ["Offset of field: VkSubmitInfo::pWaitDstStageMask"]
        [::std::mem::offset_of!(VkSubmitInfo, pWaitDstStageMask) - 32usize];
    ["Offset of field: VkSubmitInfo::commandBufferCount"]
        [::std::mem::offset_of!(VkSubmitInfo, commandBufferCount) - 40usize];
    ["Offset of field: VkSubmitInfo::pCommandBuffers"]
        [::std::mem::offset_of!(VkSubmitInfo, pCommandBuffers) - 48usize];
    ["Offset of field: VkSubmitInfo::signalSemaphoreCount"]
        [::std::mem::offset_of!(VkSubmitInfo, signalSemaphoreCount) - 56usize];
    ["Offset of field: VkSubmitInfo::pSignalSemaphores"]
        [::std::mem::offset_of!(VkSubmitInfo, pSignalSemaphores) - 64usize];
};
impl Default for VkSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMappedMemoryRange {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMappedMemoryRange"][::std::mem::size_of::<VkMappedMemoryRange>() - 40usize];
    ["Alignment of VkMappedMemoryRange"][::std::mem::align_of::<VkMappedMemoryRange>() - 8usize];
    ["Offset of field: VkMappedMemoryRange::sType"]
        [::std::mem::offset_of!(VkMappedMemoryRange, sType) - 0usize];
    ["Offset of field: VkMappedMemoryRange::pNext"]
        [::std::mem::offset_of!(VkMappedMemoryRange, pNext) - 8usize];
    ["Offset of field: VkMappedMemoryRange::memory"]
        [::std::mem::offset_of!(VkMappedMemoryRange, memory) - 16usize];
    ["Offset of field: VkMappedMemoryRange::offset"]
        [::std::mem::offset_of!(VkMappedMemoryRange, offset) - 24usize];
    ["Offset of field: VkMappedMemoryRange::size"]
        [::std::mem::offset_of!(VkMappedMemoryRange, size) - 32usize];
};
impl Default for VkMappedMemoryRange {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub allocationSize: VkDeviceSize,
    pub memoryTypeIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryAllocateInfo"][::std::mem::size_of::<VkMemoryAllocateInfo>() - 32usize];
    ["Alignment of VkMemoryAllocateInfo"][::std::mem::align_of::<VkMemoryAllocateInfo>() - 8usize];
    ["Offset of field: VkMemoryAllocateInfo::sType"]
        [::std::mem::offset_of!(VkMemoryAllocateInfo, sType) - 0usize];
    ["Offset of field: VkMemoryAllocateInfo::pNext"]
        [::std::mem::offset_of!(VkMemoryAllocateInfo, pNext) - 8usize];
    ["Offset of field: VkMemoryAllocateInfo::allocationSize"]
        [::std::mem::offset_of!(VkMemoryAllocateInfo, allocationSize) - 16usize];
    ["Offset of field: VkMemoryAllocateInfo::memoryTypeIndex"]
        [::std::mem::offset_of!(VkMemoryAllocateInfo, memoryTypeIndex) - 24usize];
};
impl Default for VkMemoryAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMemoryRequirements {
    pub size: VkDeviceSize,
    pub alignment: VkDeviceSize,
    pub memoryTypeBits: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryRequirements"][::std::mem::size_of::<VkMemoryRequirements>() - 24usize];
    ["Alignment of VkMemoryRequirements"][::std::mem::align_of::<VkMemoryRequirements>() - 8usize];
    ["Offset of field: VkMemoryRequirements::size"]
        [::std::mem::offset_of!(VkMemoryRequirements, size) - 0usize];
    ["Offset of field: VkMemoryRequirements::alignment"]
        [::std::mem::offset_of!(VkMemoryRequirements, alignment) - 8usize];
    ["Offset of field: VkMemoryRequirements::memoryTypeBits"]
        [::std::mem::offset_of!(VkMemoryRequirements, memoryTypeBits) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseMemoryBind {
    pub resourceOffset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseMemoryBind"][::std::mem::size_of::<VkSparseMemoryBind>() - 40usize];
    ["Alignment of VkSparseMemoryBind"][::std::mem::align_of::<VkSparseMemoryBind>() - 8usize];
    ["Offset of field: VkSparseMemoryBind::resourceOffset"]
        [::std::mem::offset_of!(VkSparseMemoryBind, resourceOffset) - 0usize];
    ["Offset of field: VkSparseMemoryBind::size"]
        [::std::mem::offset_of!(VkSparseMemoryBind, size) - 8usize];
    ["Offset of field: VkSparseMemoryBind::memory"]
        [::std::mem::offset_of!(VkSparseMemoryBind, memory) - 16usize];
    ["Offset of field: VkSparseMemoryBind::memoryOffset"]
        [::std::mem::offset_of!(VkSparseMemoryBind, memoryOffset) - 24usize];
    ["Offset of field: VkSparseMemoryBind::flags"]
        [::std::mem::offset_of!(VkSparseMemoryBind, flags) - 32usize];
};
impl Default for VkSparseMemoryBind {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseBufferMemoryBindInfo {
    pub buffer: VkBuffer,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseBufferMemoryBindInfo"]
        [::std::mem::size_of::<VkSparseBufferMemoryBindInfo>() - 24usize];
    ["Alignment of VkSparseBufferMemoryBindInfo"]
        [::std::mem::align_of::<VkSparseBufferMemoryBindInfo>() - 8usize];
    ["Offset of field: VkSparseBufferMemoryBindInfo::buffer"]
        [::std::mem::offset_of!(VkSparseBufferMemoryBindInfo, buffer) - 0usize];
    ["Offset of field: VkSparseBufferMemoryBindInfo::bindCount"]
        [::std::mem::offset_of!(VkSparseBufferMemoryBindInfo, bindCount) - 8usize];
    ["Offset of field: VkSparseBufferMemoryBindInfo::pBinds"]
        [::std::mem::offset_of!(VkSparseBufferMemoryBindInfo, pBinds) - 16usize];
};
impl Default for VkSparseBufferMemoryBindInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageOpaqueMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseMemoryBind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageOpaqueMemoryBindInfo"]
        [::std::mem::size_of::<VkSparseImageOpaqueMemoryBindInfo>() - 24usize];
    ["Alignment of VkSparseImageOpaqueMemoryBindInfo"]
        [::std::mem::align_of::<VkSparseImageOpaqueMemoryBindInfo>() - 8usize];
    ["Offset of field: VkSparseImageOpaqueMemoryBindInfo::image"]
        [::std::mem::offset_of!(VkSparseImageOpaqueMemoryBindInfo, image) - 0usize];
    ["Offset of field: VkSparseImageOpaqueMemoryBindInfo::bindCount"]
        [::std::mem::offset_of!(VkSparseImageOpaqueMemoryBindInfo, bindCount) - 8usize];
    ["Offset of field: VkSparseImageOpaqueMemoryBindInfo::pBinds"]
        [::std::mem::offset_of!(VkSparseImageOpaqueMemoryBindInfo, pBinds) - 16usize];
};
impl Default for VkSparseImageOpaqueMemoryBindInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageSubresource {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub arrayLayer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresource"][::std::mem::size_of::<VkImageSubresource>() - 12usize];
    ["Alignment of VkImageSubresource"][::std::mem::align_of::<VkImageSubresource>() - 4usize];
    ["Offset of field: VkImageSubresource::aspectMask"]
        [::std::mem::offset_of!(VkImageSubresource, aspectMask) - 0usize];
    ["Offset of field: VkImageSubresource::mipLevel"]
        [::std::mem::offset_of!(VkImageSubresource, mipLevel) - 4usize];
    ["Offset of field: VkImageSubresource::arrayLayer"]
        [::std::mem::offset_of!(VkImageSubresource, arrayLayer) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBind {
    pub subresource: VkImageSubresource,
    pub offset: VkOffset3D,
    pub extent: VkExtent3D,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub flags: VkSparseMemoryBindFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryBind"][::std::mem::size_of::<VkSparseImageMemoryBind>() - 64usize];
    ["Alignment of VkSparseImageMemoryBind"]
        [::std::mem::align_of::<VkSparseImageMemoryBind>() - 8usize];
    ["Offset of field: VkSparseImageMemoryBind::subresource"]
        [::std::mem::offset_of!(VkSparseImageMemoryBind, subresource) - 0usize];
    ["Offset of field: VkSparseImageMemoryBind::offset"]
        [::std::mem::offset_of!(VkSparseImageMemoryBind, offset) - 12usize];
    ["Offset of field: VkSparseImageMemoryBind::extent"]
        [::std::mem::offset_of!(VkSparseImageMemoryBind, extent) - 24usize];
    ["Offset of field: VkSparseImageMemoryBind::memory"]
        [::std::mem::offset_of!(VkSparseImageMemoryBind, memory) - 40usize];
    ["Offset of field: VkSparseImageMemoryBind::memoryOffset"]
        [::std::mem::offset_of!(VkSparseImageMemoryBind, memoryOffset) - 48usize];
    ["Offset of field: VkSparseImageMemoryBind::flags"]
        [::std::mem::offset_of!(VkSparseImageMemoryBind, flags) - 56usize];
};
impl Default for VkSparseImageMemoryBind {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryBindInfo {
    pub image: VkImage,
    pub bindCount: u32,
    pub pBinds: *const VkSparseImageMemoryBind,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryBindInfo"]
        [::std::mem::size_of::<VkSparseImageMemoryBindInfo>() - 24usize];
    ["Alignment of VkSparseImageMemoryBindInfo"]
        [::std::mem::align_of::<VkSparseImageMemoryBindInfo>() - 8usize];
    ["Offset of field: VkSparseImageMemoryBindInfo::image"]
        [::std::mem::offset_of!(VkSparseImageMemoryBindInfo, image) - 0usize];
    ["Offset of field: VkSparseImageMemoryBindInfo::bindCount"]
        [::std::mem::offset_of!(VkSparseImageMemoryBindInfo, bindCount) - 8usize];
    ["Offset of field: VkSparseImageMemoryBindInfo::pBinds"]
        [::std::mem::offset_of!(VkSparseImageMemoryBindInfo, pBinds) - 16usize];
};
impl Default for VkSparseImageMemoryBindInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub bufferBindCount: u32,
    pub pBufferBinds: *const VkSparseBufferMemoryBindInfo,
    pub imageOpaqueBindCount: u32,
    pub pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
    pub imageBindCount: u32,
    pub pImageBinds: *const VkSparseImageMemoryBindInfo,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphores: *const VkSemaphore,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindSparseInfo"][::std::mem::size_of::<VkBindSparseInfo>() - 96usize];
    ["Alignment of VkBindSparseInfo"][::std::mem::align_of::<VkBindSparseInfo>() - 8usize];
    ["Offset of field: VkBindSparseInfo::sType"]
        [::std::mem::offset_of!(VkBindSparseInfo, sType) - 0usize];
    ["Offset of field: VkBindSparseInfo::pNext"]
        [::std::mem::offset_of!(VkBindSparseInfo, pNext) - 8usize];
    ["Offset of field: VkBindSparseInfo::waitSemaphoreCount"]
        [::std::mem::offset_of!(VkBindSparseInfo, waitSemaphoreCount) - 16usize];
    ["Offset of field: VkBindSparseInfo::pWaitSemaphores"]
        [::std::mem::offset_of!(VkBindSparseInfo, pWaitSemaphores) - 24usize];
    ["Offset of field: VkBindSparseInfo::bufferBindCount"]
        [::std::mem::offset_of!(VkBindSparseInfo, bufferBindCount) - 32usize];
    ["Offset of field: VkBindSparseInfo::pBufferBinds"]
        [::std::mem::offset_of!(VkBindSparseInfo, pBufferBinds) - 40usize];
    ["Offset of field: VkBindSparseInfo::imageOpaqueBindCount"]
        [::std::mem::offset_of!(VkBindSparseInfo, imageOpaqueBindCount) - 48usize];
    ["Offset of field: VkBindSparseInfo::pImageOpaqueBinds"]
        [::std::mem::offset_of!(VkBindSparseInfo, pImageOpaqueBinds) - 56usize];
    ["Offset of field: VkBindSparseInfo::imageBindCount"]
        [::std::mem::offset_of!(VkBindSparseInfo, imageBindCount) - 64usize];
    ["Offset of field: VkBindSparseInfo::pImageBinds"]
        [::std::mem::offset_of!(VkBindSparseInfo, pImageBinds) - 72usize];
    ["Offset of field: VkBindSparseInfo::signalSemaphoreCount"]
        [::std::mem::offset_of!(VkBindSparseInfo, signalSemaphoreCount) - 80usize];
    ["Offset of field: VkBindSparseInfo::pSignalSemaphores"]
        [::std::mem::offset_of!(VkBindSparseInfo, pSignalSemaphores) - 88usize];
};
impl Default for VkBindSparseInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSparseImageFormatProperties {
    pub aspectMask: VkImageAspectFlags,
    pub imageGranularity: VkExtent3D,
    pub flags: VkSparseImageFormatFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageFormatProperties"]
        [::std::mem::size_of::<VkSparseImageFormatProperties>() - 20usize];
    ["Alignment of VkSparseImageFormatProperties"]
        [::std::mem::align_of::<VkSparseImageFormatProperties>() - 4usize];
    ["Offset of field: VkSparseImageFormatProperties::aspectMask"]
        [::std::mem::offset_of!(VkSparseImageFormatProperties, aspectMask) - 0usize];
    ["Offset of field: VkSparseImageFormatProperties::imageGranularity"]
        [::std::mem::offset_of!(VkSparseImageFormatProperties, imageGranularity) - 4usize];
    ["Offset of field: VkSparseImageFormatProperties::flags"]
        [::std::mem::offset_of!(VkSparseImageFormatProperties, flags) - 16usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSparseImageMemoryRequirements {
    pub formatProperties: VkSparseImageFormatProperties,
    pub imageMipTailFirstLod: u32,
    pub imageMipTailSize: VkDeviceSize,
    pub imageMipTailOffset: VkDeviceSize,
    pub imageMipTailStride: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryRequirements"]
        [::std::mem::size_of::<VkSparseImageMemoryRequirements>() - 48usize];
    ["Alignment of VkSparseImageMemoryRequirements"]
        [::std::mem::align_of::<VkSparseImageMemoryRequirements>() - 8usize];
    ["Offset of field: VkSparseImageMemoryRequirements::formatProperties"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements, formatProperties) - 0usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailFirstLod"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailFirstLod) - 20usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailSize"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailSize) - 24usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailOffset"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailOffset) - 32usize];
    ["Offset of field: VkSparseImageMemoryRequirements::imageMipTailStride"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements, imageMipTailStride) - 40usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkFenceCreateFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFenceCreateInfo"][::std::mem::size_of::<VkFenceCreateInfo>() - 24usize];
    ["Alignment of VkFenceCreateInfo"][::std::mem::align_of::<VkFenceCreateInfo>() - 8usize];
    ["Offset of field: VkFenceCreateInfo::sType"]
        [::std::mem::offset_of!(VkFenceCreateInfo, sType) - 0usize];
    ["Offset of field: VkFenceCreateInfo::pNext"]
        [::std::mem::offset_of!(VkFenceCreateInfo, pNext) - 8usize];
    ["Offset of field: VkFenceCreateInfo::flags"]
        [::std::mem::offset_of!(VkFenceCreateInfo, flags) - 16usize];
};
impl Default for VkFenceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSemaphoreCreateFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreCreateInfo"][::std::mem::size_of::<VkSemaphoreCreateInfo>() - 24usize];
    ["Alignment of VkSemaphoreCreateInfo"]
        [::std::mem::align_of::<VkSemaphoreCreateInfo>() - 8usize];
    ["Offset of field: VkSemaphoreCreateInfo::sType"]
        [::std::mem::offset_of!(VkSemaphoreCreateInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreCreateInfo::pNext"]
        [::std::mem::offset_of!(VkSemaphoreCreateInfo, pNext) - 8usize];
    ["Offset of field: VkSemaphoreCreateInfo::flags"]
        [::std::mem::offset_of!(VkSemaphoreCreateInfo, flags) - 16usize];
};
impl Default for VkSemaphoreCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkEventCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkEventCreateFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkEventCreateInfo"][::std::mem::size_of::<VkEventCreateInfo>() - 24usize];
    ["Alignment of VkEventCreateInfo"][::std::mem::align_of::<VkEventCreateInfo>() - 8usize];
    ["Offset of field: VkEventCreateInfo::sType"]
        [::std::mem::offset_of!(VkEventCreateInfo, sType) - 0usize];
    ["Offset of field: VkEventCreateInfo::pNext"]
        [::std::mem::offset_of!(VkEventCreateInfo, pNext) - 8usize];
    ["Offset of field: VkEventCreateInfo::flags"]
        [::std::mem::offset_of!(VkEventCreateInfo, flags) - 16usize];
};
impl Default for VkEventCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkQueryPoolCreateFlags,
    pub queryType: VkQueryType,
    pub queryCount: u32,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolCreateInfo"][::std::mem::size_of::<VkQueryPoolCreateInfo>() - 32usize];
    ["Alignment of VkQueryPoolCreateInfo"]
        [::std::mem::align_of::<VkQueryPoolCreateInfo>() - 8usize];
    ["Offset of field: VkQueryPoolCreateInfo::sType"]
        [::std::mem::offset_of!(VkQueryPoolCreateInfo, sType) - 0usize];
    ["Offset of field: VkQueryPoolCreateInfo::pNext"]
        [::std::mem::offset_of!(VkQueryPoolCreateInfo, pNext) - 8usize];
    ["Offset of field: VkQueryPoolCreateInfo::flags"]
        [::std::mem::offset_of!(VkQueryPoolCreateInfo, flags) - 16usize];
    ["Offset of field: VkQueryPoolCreateInfo::queryType"]
        [::std::mem::offset_of!(VkQueryPoolCreateInfo, queryType) - 20usize];
    ["Offset of field: VkQueryPoolCreateInfo::queryCount"]
        [::std::mem::offset_of!(VkQueryPoolCreateInfo, queryCount) - 24usize];
    ["Offset of field: VkQueryPoolCreateInfo::pipelineStatistics"]
        [::std::mem::offset_of!(VkQueryPoolCreateInfo, pipelineStatistics) - 28usize];
};
impl Default for VkQueryPoolCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferCreateFlags,
    pub size: VkDeviceSize,
    pub usage: VkBufferUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCreateInfo"][::std::mem::size_of::<VkBufferCreateInfo>() - 56usize];
    ["Alignment of VkBufferCreateInfo"][::std::mem::align_of::<VkBufferCreateInfo>() - 8usize];
    ["Offset of field: VkBufferCreateInfo::sType"]
        [::std::mem::offset_of!(VkBufferCreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferCreateInfo::pNext"]
        [::std::mem::offset_of!(VkBufferCreateInfo, pNext) - 8usize];
    ["Offset of field: VkBufferCreateInfo::flags"]
        [::std::mem::offset_of!(VkBufferCreateInfo, flags) - 16usize];
    ["Offset of field: VkBufferCreateInfo::size"]
        [::std::mem::offset_of!(VkBufferCreateInfo, size) - 24usize];
    ["Offset of field: VkBufferCreateInfo::usage"]
        [::std::mem::offset_of!(VkBufferCreateInfo, usage) - 32usize];
    ["Offset of field: VkBufferCreateInfo::sharingMode"]
        [::std::mem::offset_of!(VkBufferCreateInfo, sharingMode) - 36usize];
    ["Offset of field: VkBufferCreateInfo::queueFamilyIndexCount"]
        [::std::mem::offset_of!(VkBufferCreateInfo, queueFamilyIndexCount) - 40usize];
    ["Offset of field: VkBufferCreateInfo::pQueueFamilyIndices"]
        [::std::mem::offset_of!(VkBufferCreateInfo, pQueueFamilyIndices) - 48usize];
};
impl Default for VkBufferCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferViewCreateFlags,
    pub buffer: VkBuffer,
    pub format: VkFormat,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferViewCreateInfo"][::std::mem::size_of::<VkBufferViewCreateInfo>() - 56usize];
    ["Alignment of VkBufferViewCreateInfo"]
        [::std::mem::align_of::<VkBufferViewCreateInfo>() - 8usize];
    ["Offset of field: VkBufferViewCreateInfo::sType"]
        [::std::mem::offset_of!(VkBufferViewCreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferViewCreateInfo::pNext"]
        [::std::mem::offset_of!(VkBufferViewCreateInfo, pNext) - 8usize];
    ["Offset of field: VkBufferViewCreateInfo::flags"]
        [::std::mem::offset_of!(VkBufferViewCreateInfo, flags) - 16usize];
    ["Offset of field: VkBufferViewCreateInfo::buffer"]
        [::std::mem::offset_of!(VkBufferViewCreateInfo, buffer) - 24usize];
    ["Offset of field: VkBufferViewCreateInfo::format"]
        [::std::mem::offset_of!(VkBufferViewCreateInfo, format) - 32usize];
    ["Offset of field: VkBufferViewCreateInfo::offset"]
        [::std::mem::offset_of!(VkBufferViewCreateInfo, offset) - 40usize];
    ["Offset of field: VkBufferViewCreateInfo::range"]
        [::std::mem::offset_of!(VkBufferViewCreateInfo, range) - 48usize];
};
impl Default for VkBufferViewCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCreateFlags,
    pub imageType: VkImageType,
    pub format: VkFormat,
    pub extent: VkExtent3D,
    pub mipLevels: u32,
    pub arrayLayers: u32,
    pub samples: VkSampleCountFlagBits,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub initialLayout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCreateInfo"][::std::mem::size_of::<VkImageCreateInfo>() - 88usize];
    ["Alignment of VkImageCreateInfo"][::std::mem::align_of::<VkImageCreateInfo>() - 8usize];
    ["Offset of field: VkImageCreateInfo::sType"]
        [::std::mem::offset_of!(VkImageCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageCreateInfo::pNext"]
        [::std::mem::offset_of!(VkImageCreateInfo, pNext) - 8usize];
    ["Offset of field: VkImageCreateInfo::flags"]
        [::std::mem::offset_of!(VkImageCreateInfo, flags) - 16usize];
    ["Offset of field: VkImageCreateInfo::imageType"]
        [::std::mem::offset_of!(VkImageCreateInfo, imageType) - 20usize];
    ["Offset of field: VkImageCreateInfo::format"]
        [::std::mem::offset_of!(VkImageCreateInfo, format) - 24usize];
    ["Offset of field: VkImageCreateInfo::extent"]
        [::std::mem::offset_of!(VkImageCreateInfo, extent) - 28usize];
    ["Offset of field: VkImageCreateInfo::mipLevels"]
        [::std::mem::offset_of!(VkImageCreateInfo, mipLevels) - 40usize];
    ["Offset of field: VkImageCreateInfo::arrayLayers"]
        [::std::mem::offset_of!(VkImageCreateInfo, arrayLayers) - 44usize];
    ["Offset of field: VkImageCreateInfo::samples"]
        [::std::mem::offset_of!(VkImageCreateInfo, samples) - 48usize];
    ["Offset of field: VkImageCreateInfo::tiling"]
        [::std::mem::offset_of!(VkImageCreateInfo, tiling) - 52usize];
    ["Offset of field: VkImageCreateInfo::usage"]
        [::std::mem::offset_of!(VkImageCreateInfo, usage) - 56usize];
    ["Offset of field: VkImageCreateInfo::sharingMode"]
        [::std::mem::offset_of!(VkImageCreateInfo, sharingMode) - 60usize];
    ["Offset of field: VkImageCreateInfo::queueFamilyIndexCount"]
        [::std::mem::offset_of!(VkImageCreateInfo, queueFamilyIndexCount) - 64usize];
    ["Offset of field: VkImageCreateInfo::pQueueFamilyIndices"]
        [::std::mem::offset_of!(VkImageCreateInfo, pQueueFamilyIndices) - 72usize];
    ["Offset of field: VkImageCreateInfo::initialLayout"]
        [::std::mem::offset_of!(VkImageCreateInfo, initialLayout) - 80usize];
};
impl Default for VkImageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSubresourceLayout {
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub rowPitch: VkDeviceSize,
    pub arrayPitch: VkDeviceSize,
    pub depthPitch: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubresourceLayout"][::std::mem::size_of::<VkSubresourceLayout>() - 40usize];
    ["Alignment of VkSubresourceLayout"][::std::mem::align_of::<VkSubresourceLayout>() - 8usize];
    ["Offset of field: VkSubresourceLayout::offset"]
        [::std::mem::offset_of!(VkSubresourceLayout, offset) - 0usize];
    ["Offset of field: VkSubresourceLayout::size"]
        [::std::mem::offset_of!(VkSubresourceLayout, size) - 8usize];
    ["Offset of field: VkSubresourceLayout::rowPitch"]
        [::std::mem::offset_of!(VkSubresourceLayout, rowPitch) - 16usize];
    ["Offset of field: VkSubresourceLayout::arrayPitch"]
        [::std::mem::offset_of!(VkSubresourceLayout, arrayPitch) - 24usize];
    ["Offset of field: VkSubresourceLayout::depthPitch"]
        [::std::mem::offset_of!(VkSubresourceLayout, depthPitch) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComponentMapping {
    pub r: VkComponentSwizzle,
    pub g: VkComponentSwizzle,
    pub b: VkComponentSwizzle,
    pub a: VkComponentSwizzle,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkComponentMapping"][::std::mem::size_of::<VkComponentMapping>() - 16usize];
    ["Alignment of VkComponentMapping"][::std::mem::align_of::<VkComponentMapping>() - 4usize];
    ["Offset of field: VkComponentMapping::r"]
        [::std::mem::offset_of!(VkComponentMapping, r) - 0usize];
    ["Offset of field: VkComponentMapping::g"]
        [::std::mem::offset_of!(VkComponentMapping, g) - 4usize];
    ["Offset of field: VkComponentMapping::b"]
        [::std::mem::offset_of!(VkComponentMapping, b) - 8usize];
    ["Offset of field: VkComponentMapping::a"]
        [::std::mem::offset_of!(VkComponentMapping, a) - 12usize];
};
impl Default for VkComponentMapping {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageViewCreateFlags,
    pub image: VkImage,
    pub viewType: VkImageViewType,
    pub format: VkFormat,
    pub components: VkComponentMapping,
    pub subresourceRange: VkImageSubresourceRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewCreateInfo"][::std::mem::size_of::<VkImageViewCreateInfo>() - 80usize];
    ["Alignment of VkImageViewCreateInfo"]
        [::std::mem::align_of::<VkImageViewCreateInfo>() - 8usize];
    ["Offset of field: VkImageViewCreateInfo::sType"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageViewCreateInfo::pNext"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, pNext) - 8usize];
    ["Offset of field: VkImageViewCreateInfo::flags"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, flags) - 16usize];
    ["Offset of field: VkImageViewCreateInfo::image"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, image) - 24usize];
    ["Offset of field: VkImageViewCreateInfo::viewType"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, viewType) - 32usize];
    ["Offset of field: VkImageViewCreateInfo::format"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, format) - 36usize];
    ["Offset of field: VkImageViewCreateInfo::components"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, components) - 40usize];
    ["Offset of field: VkImageViewCreateInfo::subresourceRange"]
        [::std::mem::offset_of!(VkImageViewCreateInfo, subresourceRange) - 56usize];
};
impl Default for VkImageViewCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkShaderModuleCreateFlags,
    pub codeSize: usize,
    pub pCode: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderModuleCreateInfo"]
        [::std::mem::size_of::<VkShaderModuleCreateInfo>() - 40usize];
    ["Alignment of VkShaderModuleCreateInfo"]
        [::std::mem::align_of::<VkShaderModuleCreateInfo>() - 8usize];
    ["Offset of field: VkShaderModuleCreateInfo::sType"]
        [::std::mem::offset_of!(VkShaderModuleCreateInfo, sType) - 0usize];
    ["Offset of field: VkShaderModuleCreateInfo::pNext"]
        [::std::mem::offset_of!(VkShaderModuleCreateInfo, pNext) - 8usize];
    ["Offset of field: VkShaderModuleCreateInfo::flags"]
        [::std::mem::offset_of!(VkShaderModuleCreateInfo, flags) - 16usize];
    ["Offset of field: VkShaderModuleCreateInfo::codeSize"]
        [::std::mem::offset_of!(VkShaderModuleCreateInfo, codeSize) - 24usize];
    ["Offset of field: VkShaderModuleCreateInfo::pCode"]
        [::std::mem::offset_of!(VkShaderModuleCreateInfo, pCode) - 32usize];
};
impl Default for VkShaderModuleCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCacheCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCacheCreateFlags,
    pub initialDataSize: usize,
    pub pInitialData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCacheCreateInfo"]
        [::std::mem::size_of::<VkPipelineCacheCreateInfo>() - 40usize];
    ["Alignment of VkPipelineCacheCreateInfo"]
        [::std::mem::align_of::<VkPipelineCacheCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineCacheCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineCacheCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineCacheCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineCacheCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineCacheCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineCacheCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineCacheCreateInfo::initialDataSize"]
        [::std::mem::offset_of!(VkPipelineCacheCreateInfo, initialDataSize) - 24usize];
    ["Offset of field: VkPipelineCacheCreateInfo::pInitialData"]
        [::std::mem::offset_of!(VkPipelineCacheCreateInfo, pInitialData) - 32usize];
};
impl Default for VkPipelineCacheCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSpecializationMapEntry {
    pub constantID: u32,
    pub offset: u32,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSpecializationMapEntry"]
        [::std::mem::size_of::<VkSpecializationMapEntry>() - 16usize];
    ["Alignment of VkSpecializationMapEntry"]
        [::std::mem::align_of::<VkSpecializationMapEntry>() - 8usize];
    ["Offset of field: VkSpecializationMapEntry::constantID"]
        [::std::mem::offset_of!(VkSpecializationMapEntry, constantID) - 0usize];
    ["Offset of field: VkSpecializationMapEntry::offset"]
        [::std::mem::offset_of!(VkSpecializationMapEntry, offset) - 4usize];
    ["Offset of field: VkSpecializationMapEntry::size"]
        [::std::mem::offset_of!(VkSpecializationMapEntry, size) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSpecializationInfo {
    pub mapEntryCount: u32,
    pub pMapEntries: *const VkSpecializationMapEntry,
    pub dataSize: usize,
    pub pData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSpecializationInfo"][::std::mem::size_of::<VkSpecializationInfo>() - 32usize];
    ["Alignment of VkSpecializationInfo"][::std::mem::align_of::<VkSpecializationInfo>() - 8usize];
    ["Offset of field: VkSpecializationInfo::mapEntryCount"]
        [::std::mem::offset_of!(VkSpecializationInfo, mapEntryCount) - 0usize];
    ["Offset of field: VkSpecializationInfo::pMapEntries"]
        [::std::mem::offset_of!(VkSpecializationInfo, pMapEntries) - 8usize];
    ["Offset of field: VkSpecializationInfo::dataSize"]
        [::std::mem::offset_of!(VkSpecializationInfo, dataSize) - 16usize];
    ["Offset of field: VkSpecializationInfo::pData"]
        [::std::mem::offset_of!(VkSpecializationInfo, pData) - 24usize];
};
impl Default for VkSpecializationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineShaderStageCreateFlags,
    pub stage: VkShaderStageFlagBits,
    pub module: VkShaderModule,
    pub pName: *const ::std::os::raw::c_char,
    pub pSpecializationInfo: *const VkSpecializationInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineShaderStageCreateInfo"]
        [::std::mem::size_of::<VkPipelineShaderStageCreateInfo>() - 48usize];
    ["Alignment of VkPipelineShaderStageCreateInfo"]
        [::std::mem::align_of::<VkPipelineShaderStageCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineShaderStageCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineShaderStageCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineShaderStageCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::stage"]
        [::std::mem::offset_of!(VkPipelineShaderStageCreateInfo, stage) - 20usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::module"]
        [::std::mem::offset_of!(VkPipelineShaderStageCreateInfo, module) - 24usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::pName"]
        [::std::mem::offset_of!(VkPipelineShaderStageCreateInfo, pName) - 32usize];
    ["Offset of field: VkPipelineShaderStageCreateInfo::pSpecializationInfo"]
        [::std::mem::offset_of!(VkPipelineShaderStageCreateInfo, pSpecializationInfo) - 40usize];
};
impl Default for VkPipelineShaderStageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComputePipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stage: VkPipelineShaderStageCreateInfo,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkComputePipelineCreateInfo"]
        [::std::mem::size_of::<VkComputePipelineCreateInfo>() - 96usize];
    ["Alignment of VkComputePipelineCreateInfo"]
        [::std::mem::align_of::<VkComputePipelineCreateInfo>() - 8usize];
    ["Offset of field: VkComputePipelineCreateInfo::sType"]
        [::std::mem::offset_of!(VkComputePipelineCreateInfo, sType) - 0usize];
    ["Offset of field: VkComputePipelineCreateInfo::pNext"]
        [::std::mem::offset_of!(VkComputePipelineCreateInfo, pNext) - 8usize];
    ["Offset of field: VkComputePipelineCreateInfo::flags"]
        [::std::mem::offset_of!(VkComputePipelineCreateInfo, flags) - 16usize];
    ["Offset of field: VkComputePipelineCreateInfo::stage"]
        [::std::mem::offset_of!(VkComputePipelineCreateInfo, stage) - 24usize];
    ["Offset of field: VkComputePipelineCreateInfo::layout"]
        [::std::mem::offset_of!(VkComputePipelineCreateInfo, layout) - 72usize];
    ["Offset of field: VkComputePipelineCreateInfo::basePipelineHandle"]
        [::std::mem::offset_of!(VkComputePipelineCreateInfo, basePipelineHandle) - 80usize];
    ["Offset of field: VkComputePipelineCreateInfo::basePipelineIndex"]
        [::std::mem::offset_of!(VkComputePipelineCreateInfo, basePipelineIndex) - 88usize];
};
impl Default for VkComputePipelineCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDescription {
    pub binding: u32,
    pub stride: u32,
    pub inputRate: VkVertexInputRate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputBindingDescription"]
        [::std::mem::size_of::<VkVertexInputBindingDescription>() - 12usize];
    ["Alignment of VkVertexInputBindingDescription"]
        [::std::mem::align_of::<VkVertexInputBindingDescription>() - 4usize];
    ["Offset of field: VkVertexInputBindingDescription::binding"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription, binding) - 0usize];
    ["Offset of field: VkVertexInputBindingDescription::stride"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription, stride) - 4usize];
    ["Offset of field: VkVertexInputBindingDescription::inputRate"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription, inputRate) - 8usize];
};
impl Default for VkVertexInputBindingDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputAttributeDescription {
    pub location: u32,
    pub binding: u32,
    pub format: VkFormat,
    pub offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputAttributeDescription"]
        [::std::mem::size_of::<VkVertexInputAttributeDescription>() - 16usize];
    ["Alignment of VkVertexInputAttributeDescription"]
        [::std::mem::align_of::<VkVertexInputAttributeDescription>() - 4usize];
    ["Offset of field: VkVertexInputAttributeDescription::location"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription, location) - 0usize];
    ["Offset of field: VkVertexInputAttributeDescription::binding"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription, binding) - 4usize];
    ["Offset of field: VkVertexInputAttributeDescription::format"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription, format) - 8usize];
    ["Offset of field: VkVertexInputAttributeDescription::offset"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription, offset) - 12usize];
};
impl Default for VkVertexInputAttributeDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineVertexInputStateCreateFlags,
    pub vertexBindingDescriptionCount: u32,
    pub pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
    pub vertexAttributeDescriptionCount: u32,
    pub pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineVertexInputStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineVertexInputStateCreateInfo>() - 48usize];
    ["Alignment of VkPipelineVertexInputStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineVertexInputStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineVertexInputStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineVertexInputStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineVertexInputStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::vertexBindingDescriptionCount"][::std::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        vertexBindingDescriptionCount
    )
        - 20usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::pVertexBindingDescriptions"][::std::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        pVertexBindingDescriptions
    )
        - 24usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::vertexAttributeDescriptionCount"][::std::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        vertexAttributeDescriptionCount
    )
        - 32usize];
    ["Offset of field: VkPipelineVertexInputStateCreateInfo::pVertexAttributeDescriptions"][::std::mem::offset_of!(
        VkPipelineVertexInputStateCreateInfo,
        pVertexAttributeDescriptions
    )
        - 40usize];
};
impl Default for VkPipelineVertexInputStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInputAssemblyStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineInputAssemblyStateCreateFlags,
    pub topology: VkPrimitiveTopology,
    pub primitiveRestartEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineInputAssemblyStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineInputAssemblyStateCreateInfo>() - 32usize];
    ["Alignment of VkPipelineInputAssemblyStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineInputAssemblyStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::topology"]
        [::std::mem::offset_of!(VkPipelineInputAssemblyStateCreateInfo, topology) - 20usize];
    ["Offset of field: VkPipelineInputAssemblyStateCreateInfo::primitiveRestartEnable"][::std::mem::offset_of!(
        VkPipelineInputAssemblyStateCreateInfo,
        primitiveRestartEnable
    )
        - 24usize];
};
impl Default for VkPipelineInputAssemblyStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineTessellationStateCreateFlags,
    pub patchControlPoints: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineTessellationStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineTessellationStateCreateInfo>() - 24usize];
    ["Alignment of VkPipelineTessellationStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineTessellationStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineTessellationStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineTessellationStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineTessellationStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineTessellationStateCreateInfo::patchControlPoints"][::std::mem::offset_of!(
        VkPipelineTessellationStateCreateInfo,
        patchControlPoints
    ) - 20usize];
};
impl Default for VkPipelineTessellationStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkViewport {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
    pub minDepth: f32,
    pub maxDepth: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkViewport"][::std::mem::size_of::<VkViewport>() - 24usize];
    ["Alignment of VkViewport"][::std::mem::align_of::<VkViewport>() - 4usize];
    ["Offset of field: VkViewport::x"][::std::mem::offset_of!(VkViewport, x) - 0usize];
    ["Offset of field: VkViewport::y"][::std::mem::offset_of!(VkViewport, y) - 4usize];
    ["Offset of field: VkViewport::width"][::std::mem::offset_of!(VkViewport, width) - 8usize];
    ["Offset of field: VkViewport::height"][::std::mem::offset_of!(VkViewport, height) - 12usize];
    ["Offset of field: VkViewport::minDepth"]
        [::std::mem::offset_of!(VkViewport, minDepth) - 16usize];
    ["Offset of field: VkViewport::maxDepth"]
        [::std::mem::offset_of!(VkViewport, maxDepth) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineViewportStateCreateFlags,
    pub viewportCount: u32,
    pub pViewports: *const VkViewport,
    pub scissorCount: u32,
    pub pScissors: *const VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineViewportStateCreateInfo>() - 48usize];
    ["Alignment of VkPipelineViewportStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineViewportStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineViewportStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineViewportStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineViewportStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::viewportCount"]
        [::std::mem::offset_of!(VkPipelineViewportStateCreateInfo, viewportCount) - 20usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::pViewports"]
        [::std::mem::offset_of!(VkPipelineViewportStateCreateInfo, pViewports) - 24usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::scissorCount"]
        [::std::mem::offset_of!(VkPipelineViewportStateCreateInfo, scissorCount) - 32usize];
    ["Offset of field: VkPipelineViewportStateCreateInfo::pScissors"]
        [::std::mem::offset_of!(VkPipelineViewportStateCreateInfo, pScissors) - 40usize];
};
impl Default for VkPipelineViewportStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationStateCreateFlags,
    pub depthClampEnable: VkBool32,
    pub rasterizerDiscardEnable: VkBool32,
    pub polygonMode: VkPolygonMode,
    pub cullMode: VkCullModeFlags,
    pub frontFace: VkFrontFace,
    pub depthBiasEnable: VkBool32,
    pub depthBiasConstantFactor: f32,
    pub depthBiasClamp: f32,
    pub depthBiasSlopeFactor: f32,
    pub lineWidth: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineRasterizationStateCreateInfo>() - 64usize];
    ["Alignment of VkPipelineRasterizationStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineRasterizationStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthClampEnable"][::std::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        depthClampEnable
    ) - 20usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::rasterizerDiscardEnable"][::std::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        rasterizerDiscardEnable
    )
        - 24usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::polygonMode"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, polygonMode) - 28usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::cullMode"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, cullMode) - 32usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::frontFace"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, frontFace) - 36usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasEnable"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, depthBiasEnable) - 40usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasConstantFactor"][::std::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        depthBiasConstantFactor
    )
        - 44usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasClamp"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, depthBiasClamp) - 48usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::depthBiasSlopeFactor"][::std::mem::offset_of!(
        VkPipelineRasterizationStateCreateInfo,
        depthBiasSlopeFactor
    ) - 52usize];
    ["Offset of field: VkPipelineRasterizationStateCreateInfo::lineWidth"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateCreateInfo, lineWidth) - 56usize];
};
impl Default for VkPipelineRasterizationStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineMultisampleStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineMultisampleStateCreateFlags,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub sampleShadingEnable: VkBool32,
    pub minSampleShading: f32,
    pub pSampleMask: *const VkSampleMask,
    pub alphaToCoverageEnable: VkBool32,
    pub alphaToOneEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineMultisampleStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineMultisampleStateCreateInfo>() - 48usize];
    ["Alignment of VkPipelineMultisampleStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineMultisampleStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::rasterizationSamples"][::std::mem::offset_of!(
        VkPipelineMultisampleStateCreateInfo,
        rasterizationSamples
    ) - 20usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::sampleShadingEnable"][::std::mem::offset_of!(
        VkPipelineMultisampleStateCreateInfo,
        sampleShadingEnable
    ) - 24usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::minSampleShading"]
        [::std::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, minSampleShading) - 28usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::pSampleMask"]
        [::std::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, pSampleMask) - 32usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::alphaToCoverageEnable"][::std::mem::offset_of!(
        VkPipelineMultisampleStateCreateInfo,
        alphaToCoverageEnable
    ) - 40usize];
    ["Offset of field: VkPipelineMultisampleStateCreateInfo::alphaToOneEnable"]
        [::std::mem::offset_of!(VkPipelineMultisampleStateCreateInfo, alphaToOneEnable) - 44usize];
};
impl Default for VkPipelineMultisampleStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkStencilOpState {
    pub failOp: VkStencilOp,
    pub passOp: VkStencilOp,
    pub depthFailOp: VkStencilOp,
    pub compareOp: VkCompareOp,
    pub compareMask: u32,
    pub writeMask: u32,
    pub reference: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkStencilOpState"][::std::mem::size_of::<VkStencilOpState>() - 28usize];
    ["Alignment of VkStencilOpState"][::std::mem::align_of::<VkStencilOpState>() - 4usize];
    ["Offset of field: VkStencilOpState::failOp"]
        [::std::mem::offset_of!(VkStencilOpState, failOp) - 0usize];
    ["Offset of field: VkStencilOpState::passOp"]
        [::std::mem::offset_of!(VkStencilOpState, passOp) - 4usize];
    ["Offset of field: VkStencilOpState::depthFailOp"]
        [::std::mem::offset_of!(VkStencilOpState, depthFailOp) - 8usize];
    ["Offset of field: VkStencilOpState::compareOp"]
        [::std::mem::offset_of!(VkStencilOpState, compareOp) - 12usize];
    ["Offset of field: VkStencilOpState::compareMask"]
        [::std::mem::offset_of!(VkStencilOpState, compareMask) - 16usize];
    ["Offset of field: VkStencilOpState::writeMask"]
        [::std::mem::offset_of!(VkStencilOpState, writeMask) - 20usize];
    ["Offset of field: VkStencilOpState::reference"]
        [::std::mem::offset_of!(VkStencilOpState, reference) - 24usize];
};
impl Default for VkStencilOpState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDepthStencilStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDepthStencilStateCreateFlags,
    pub depthTestEnable: VkBool32,
    pub depthWriteEnable: VkBool32,
    pub depthCompareOp: VkCompareOp,
    pub depthBoundsTestEnable: VkBool32,
    pub stencilTestEnable: VkBool32,
    pub front: VkStencilOpState,
    pub back: VkStencilOpState,
    pub minDepthBounds: f32,
    pub maxDepthBounds: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineDepthStencilStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineDepthStencilStateCreateInfo>() - 104usize];
    ["Alignment of VkPipelineDepthStencilStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineDepthStencilStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthTestEnable"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, depthTestEnable) - 20usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthWriteEnable"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, depthWriteEnable) - 24usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthCompareOp"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, depthCompareOp) - 28usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::depthBoundsTestEnable"][::std::mem::offset_of!(
        VkPipelineDepthStencilStateCreateInfo,
        depthBoundsTestEnable
    ) - 32usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::stencilTestEnable"][::std::mem::offset_of!(
        VkPipelineDepthStencilStateCreateInfo,
        stencilTestEnable
    ) - 36usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::front"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, front) - 40usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::back"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, back) - 68usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::minDepthBounds"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, minDepthBounds) - 96usize];
    ["Offset of field: VkPipelineDepthStencilStateCreateInfo::maxDepthBounds"]
        [::std::mem::offset_of!(VkPipelineDepthStencilStateCreateInfo, maxDepthBounds) - 100usize];
};
impl Default for VkPipelineDepthStencilStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAttachmentState {
    pub blendEnable: VkBool32,
    pub srcColorBlendFactor: VkBlendFactor,
    pub dstColorBlendFactor: VkBlendFactor,
    pub colorBlendOp: VkBlendOp,
    pub srcAlphaBlendFactor: VkBlendFactor,
    pub dstAlphaBlendFactor: VkBlendFactor,
    pub alphaBlendOp: VkBlendOp,
    pub colorWriteMask: VkColorComponentFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorBlendAttachmentState"]
        [::std::mem::size_of::<VkPipelineColorBlendAttachmentState>() - 32usize];
    ["Alignment of VkPipelineColorBlendAttachmentState"]
        [::std::mem::align_of::<VkPipelineColorBlendAttachmentState>() - 4usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::blendEnable"]
        [::std::mem::offset_of!(VkPipelineColorBlendAttachmentState, blendEnable) - 0usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::srcColorBlendFactor"]
        [::std::mem::offset_of!(VkPipelineColorBlendAttachmentState, srcColorBlendFactor) - 4usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::dstColorBlendFactor"]
        [::std::mem::offset_of!(VkPipelineColorBlendAttachmentState, dstColorBlendFactor) - 8usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::colorBlendOp"]
        [::std::mem::offset_of!(VkPipelineColorBlendAttachmentState, colorBlendOp) - 12usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::srcAlphaBlendFactor"][::std::mem::offset_of!(
        VkPipelineColorBlendAttachmentState,
        srcAlphaBlendFactor
    ) - 16usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::dstAlphaBlendFactor"][::std::mem::offset_of!(
        VkPipelineColorBlendAttachmentState,
        dstAlphaBlendFactor
    ) - 20usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::alphaBlendOp"]
        [::std::mem::offset_of!(VkPipelineColorBlendAttachmentState, alphaBlendOp) - 24usize];
    ["Offset of field: VkPipelineColorBlendAttachmentState::colorWriteMask"]
        [::std::mem::offset_of!(VkPipelineColorBlendAttachmentState, colorWriteMask) - 28usize];
};
impl Default for VkPipelineColorBlendAttachmentState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineColorBlendStateCreateFlags,
    pub logicOpEnable: VkBool32,
    pub logicOp: VkLogicOp,
    pub attachmentCount: u32,
    pub pAttachments: *const VkPipelineColorBlendAttachmentState,
    pub blendConstants: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorBlendStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineColorBlendStateCreateInfo>() - 56usize];
    ["Alignment of VkPipelineColorBlendStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineColorBlendStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::logicOpEnable"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, logicOpEnable) - 20usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::logicOp"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, logicOp) - 24usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::attachmentCount"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, attachmentCount) - 28usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::pAttachments"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, pAttachments) - 32usize];
    ["Offset of field: VkPipelineColorBlendStateCreateInfo::blendConstants"]
        [::std::mem::offset_of!(VkPipelineColorBlendStateCreateInfo, blendConstants) - 40usize];
};
impl Default for VkPipelineColorBlendStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDynamicStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDynamicStateCreateFlags,
    pub dynamicStateCount: u32,
    pub pDynamicStates: *const VkDynamicState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineDynamicStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineDynamicStateCreateInfo>() - 32usize];
    ["Alignment of VkPipelineDynamicStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineDynamicStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineDynamicStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineDynamicStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineDynamicStateCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::dynamicStateCount"]
        [::std::mem::offset_of!(VkPipelineDynamicStateCreateInfo, dynamicStateCount) - 20usize];
    ["Offset of field: VkPipelineDynamicStateCreateInfo::pDynamicStates"]
        [::std::mem::offset_of!(VkPipelineDynamicStateCreateInfo, pDynamicStates) - 24usize];
};
impl Default for VkPipelineDynamicStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
    pub pViewportState: *const VkPipelineViewportStateCreateInfo,
    pub pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
    pub pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
    pub pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
    pub pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
    pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    pub layout: VkPipelineLayout,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsPipelineCreateInfo"]
        [::std::mem::size_of::<VkGraphicsPipelineCreateInfo>() - 144usize];
    ["Alignment of VkGraphicsPipelineCreateInfo"]
        [::std::mem::align_of::<VkGraphicsPipelineCreateInfo>() - 8usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::sType"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, sType) - 0usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pNext"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pNext) - 8usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::flags"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, flags) - 16usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::stageCount"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, stageCount) - 20usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pStages"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pStages) - 24usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pVertexInputState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pVertexInputState) - 32usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pInputAssemblyState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pInputAssemblyState) - 40usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pTessellationState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pTessellationState) - 48usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pViewportState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pViewportState) - 56usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pRasterizationState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pRasterizationState) - 64usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pMultisampleState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pMultisampleState) - 72usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pDepthStencilState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pDepthStencilState) - 80usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pColorBlendState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pColorBlendState) - 88usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::pDynamicState"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, pDynamicState) - 96usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::layout"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, layout) - 104usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::renderPass"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, renderPass) - 112usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::subpass"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, subpass) - 120usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::basePipelineHandle"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, basePipelineHandle) - 128usize];
    ["Offset of field: VkGraphicsPipelineCreateInfo::basePipelineIndex"]
        [::std::mem::offset_of!(VkGraphicsPipelineCreateInfo, basePipelineIndex) - 136usize];
};
impl Default for VkGraphicsPipelineCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPushConstantRange {
    pub stageFlags: VkShaderStageFlags,
    pub offset: u32,
    pub size: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushConstantRange"][::std::mem::size_of::<VkPushConstantRange>() - 12usize];
    ["Alignment of VkPushConstantRange"][::std::mem::align_of::<VkPushConstantRange>() - 4usize];
    ["Offset of field: VkPushConstantRange::stageFlags"]
        [::std::mem::offset_of!(VkPushConstantRange, stageFlags) - 0usize];
    ["Offset of field: VkPushConstantRange::offset"]
        [::std::mem::offset_of!(VkPushConstantRange, offset) - 4usize];
    ["Offset of field: VkPushConstantRange::size"]
        [::std::mem::offset_of!(VkPushConstantRange, size) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineLayoutCreateFlags,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineLayoutCreateInfo"]
        [::std::mem::size_of::<VkPipelineLayoutCreateInfo>() - 48usize];
    ["Alignment of VkPipelineLayoutCreateInfo"]
        [::std::mem::align_of::<VkPipelineLayoutCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineLayoutCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineLayoutCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineLayoutCreateInfo, flags) - 16usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::setLayoutCount"]
        [::std::mem::offset_of!(VkPipelineLayoutCreateInfo, setLayoutCount) - 20usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pSetLayouts"]
        [::std::mem::offset_of!(VkPipelineLayoutCreateInfo, pSetLayouts) - 24usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pushConstantRangeCount"]
        [::std::mem::offset_of!(VkPipelineLayoutCreateInfo, pushConstantRangeCount) - 32usize];
    ["Offset of field: VkPipelineLayoutCreateInfo::pPushConstantRanges"]
        [::std::mem::offset_of!(VkPipelineLayoutCreateInfo, pPushConstantRanges) - 40usize];
};
impl Default for VkPipelineLayoutCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSamplerCreateFlags,
    pub magFilter: VkFilter,
    pub minFilter: VkFilter,
    pub mipmapMode: VkSamplerMipmapMode,
    pub addressModeU: VkSamplerAddressMode,
    pub addressModeV: VkSamplerAddressMode,
    pub addressModeW: VkSamplerAddressMode,
    pub mipLodBias: f32,
    pub anisotropyEnable: VkBool32,
    pub maxAnisotropy: f32,
    pub compareEnable: VkBool32,
    pub compareOp: VkCompareOp,
    pub minLod: f32,
    pub maxLod: f32,
    pub borderColor: VkBorderColor,
    pub unnormalizedCoordinates: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCreateInfo"][::std::mem::size_of::<VkSamplerCreateInfo>() - 80usize];
    ["Alignment of VkSamplerCreateInfo"][::std::mem::align_of::<VkSamplerCreateInfo>() - 8usize];
    ["Offset of field: VkSamplerCreateInfo::sType"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, sType) - 0usize];
    ["Offset of field: VkSamplerCreateInfo::pNext"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, pNext) - 8usize];
    ["Offset of field: VkSamplerCreateInfo::flags"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, flags) - 16usize];
    ["Offset of field: VkSamplerCreateInfo::magFilter"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, magFilter) - 20usize];
    ["Offset of field: VkSamplerCreateInfo::minFilter"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, minFilter) - 24usize];
    ["Offset of field: VkSamplerCreateInfo::mipmapMode"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, mipmapMode) - 28usize];
    ["Offset of field: VkSamplerCreateInfo::addressModeU"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, addressModeU) - 32usize];
    ["Offset of field: VkSamplerCreateInfo::addressModeV"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, addressModeV) - 36usize];
    ["Offset of field: VkSamplerCreateInfo::addressModeW"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, addressModeW) - 40usize];
    ["Offset of field: VkSamplerCreateInfo::mipLodBias"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, mipLodBias) - 44usize];
    ["Offset of field: VkSamplerCreateInfo::anisotropyEnable"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, anisotropyEnable) - 48usize];
    ["Offset of field: VkSamplerCreateInfo::maxAnisotropy"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, maxAnisotropy) - 52usize];
    ["Offset of field: VkSamplerCreateInfo::compareEnable"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, compareEnable) - 56usize];
    ["Offset of field: VkSamplerCreateInfo::compareOp"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, compareOp) - 60usize];
    ["Offset of field: VkSamplerCreateInfo::minLod"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, minLod) - 64usize];
    ["Offset of field: VkSamplerCreateInfo::maxLod"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, maxLod) - 68usize];
    ["Offset of field: VkSamplerCreateInfo::borderColor"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, borderColor) - 72usize];
    ["Offset of field: VkSamplerCreateInfo::unnormalizedCoordinates"]
        [::std::mem::offset_of!(VkSamplerCreateInfo, unnormalizedCoordinates) - 76usize];
};
impl Default for VkSamplerCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSet: VkDescriptorSet,
    pub srcBinding: u32,
    pub srcArrayElement: u32,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyDescriptorSet"][::std::mem::size_of::<VkCopyDescriptorSet>() - 56usize];
    ["Alignment of VkCopyDescriptorSet"][::std::mem::align_of::<VkCopyDescriptorSet>() - 8usize];
    ["Offset of field: VkCopyDescriptorSet::sType"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, sType) - 0usize];
    ["Offset of field: VkCopyDescriptorSet::pNext"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, pNext) - 8usize];
    ["Offset of field: VkCopyDescriptorSet::srcSet"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, srcSet) - 16usize];
    ["Offset of field: VkCopyDescriptorSet::srcBinding"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, srcBinding) - 24usize];
    ["Offset of field: VkCopyDescriptorSet::srcArrayElement"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, srcArrayElement) - 28usize];
    ["Offset of field: VkCopyDescriptorSet::dstSet"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, dstSet) - 32usize];
    ["Offset of field: VkCopyDescriptorSet::dstBinding"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, dstBinding) - 40usize];
    ["Offset of field: VkCopyDescriptorSet::dstArrayElement"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, dstArrayElement) - 44usize];
    ["Offset of field: VkCopyDescriptorSet::descriptorCount"]
        [::std::mem::offset_of!(VkCopyDescriptorSet, descriptorCount) - 48usize];
};
impl Default for VkCopyDescriptorSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorBufferInfo {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub range: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorBufferInfo"][::std::mem::size_of::<VkDescriptorBufferInfo>() - 24usize];
    ["Alignment of VkDescriptorBufferInfo"]
        [::std::mem::align_of::<VkDescriptorBufferInfo>() - 8usize];
    ["Offset of field: VkDescriptorBufferInfo::buffer"]
        [::std::mem::offset_of!(VkDescriptorBufferInfo, buffer) - 0usize];
    ["Offset of field: VkDescriptorBufferInfo::offset"]
        [::std::mem::offset_of!(VkDescriptorBufferInfo, offset) - 8usize];
    ["Offset of field: VkDescriptorBufferInfo::range"]
        [::std::mem::offset_of!(VkDescriptorBufferInfo, range) - 16usize];
};
impl Default for VkDescriptorBufferInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorImageInfo {
    pub sampler: VkSampler,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorImageInfo"][::std::mem::size_of::<VkDescriptorImageInfo>() - 24usize];
    ["Alignment of VkDescriptorImageInfo"]
        [::std::mem::align_of::<VkDescriptorImageInfo>() - 8usize];
    ["Offset of field: VkDescriptorImageInfo::sampler"]
        [::std::mem::offset_of!(VkDescriptorImageInfo, sampler) - 0usize];
    ["Offset of field: VkDescriptorImageInfo::imageView"]
        [::std::mem::offset_of!(VkDescriptorImageInfo, imageView) - 8usize];
    ["Offset of field: VkDescriptorImageInfo::imageLayout"]
        [::std::mem::offset_of!(VkDescriptorImageInfo, imageLayout) - 16usize];
};
impl Default for VkDescriptorImageInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolSize {
    pub type_: VkDescriptorType,
    pub descriptorCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorPoolSize"][::std::mem::size_of::<VkDescriptorPoolSize>() - 8usize];
    ["Alignment of VkDescriptorPoolSize"][::std::mem::align_of::<VkDescriptorPoolSize>() - 4usize];
    ["Offset of field: VkDescriptorPoolSize::type_"]
        [::std::mem::offset_of!(VkDescriptorPoolSize, type_) - 0usize];
    ["Offset of field: VkDescriptorPoolSize::descriptorCount"]
        [::std::mem::offset_of!(VkDescriptorPoolSize, descriptorCount) - 4usize];
};
impl Default for VkDescriptorPoolSize {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorPoolCreateFlags,
    pub maxSets: u32,
    pub poolSizeCount: u32,
    pub pPoolSizes: *const VkDescriptorPoolSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorPoolCreateInfo"]
        [::std::mem::size_of::<VkDescriptorPoolCreateInfo>() - 40usize];
    ["Alignment of VkDescriptorPoolCreateInfo"]
        [::std::mem::align_of::<VkDescriptorPoolCreateInfo>() - 8usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::sType"]
        [::std::mem::offset_of!(VkDescriptorPoolCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDescriptorPoolCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::flags"]
        [::std::mem::offset_of!(VkDescriptorPoolCreateInfo, flags) - 16usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::maxSets"]
        [::std::mem::offset_of!(VkDescriptorPoolCreateInfo, maxSets) - 20usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::poolSizeCount"]
        [::std::mem::offset_of!(VkDescriptorPoolCreateInfo, poolSizeCount) - 24usize];
    ["Offset of field: VkDescriptorPoolCreateInfo::pPoolSizes"]
        [::std::mem::offset_of!(VkDescriptorPoolCreateInfo, pPoolSizes) - 32usize];
};
impl Default for VkDescriptorPoolCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorPool: VkDescriptorPool,
    pub descriptorSetCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetAllocateInfo"]
        [::std::mem::size_of::<VkDescriptorSetAllocateInfo>() - 40usize];
    ["Alignment of VkDescriptorSetAllocateInfo"]
        [::std::mem::align_of::<VkDescriptorSetAllocateInfo>() - 8usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::sType"]
        [::std::mem::offset_of!(VkDescriptorSetAllocateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::pNext"]
        [::std::mem::offset_of!(VkDescriptorSetAllocateInfo, pNext) - 8usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::descriptorPool"]
        [::std::mem::offset_of!(VkDescriptorSetAllocateInfo, descriptorPool) - 16usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::descriptorSetCount"]
        [::std::mem::offset_of!(VkDescriptorSetAllocateInfo, descriptorSetCount) - 24usize];
    ["Offset of field: VkDescriptorSetAllocateInfo::pSetLayouts"]
        [::std::mem::offset_of!(VkDescriptorSetAllocateInfo, pSetLayouts) - 32usize];
};
impl Default for VkDescriptorSetAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBinding {
    pub binding: u32,
    pub descriptorType: VkDescriptorType,
    pub descriptorCount: u32,
    pub stageFlags: VkShaderStageFlags,
    pub pImmutableSamplers: *const VkSampler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutBinding"]
        [::std::mem::size_of::<VkDescriptorSetLayoutBinding>() - 24usize];
    ["Alignment of VkDescriptorSetLayoutBinding"]
        [::std::mem::align_of::<VkDescriptorSetLayoutBinding>() - 8usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::binding"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutBinding, binding) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::descriptorType"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutBinding, descriptorType) - 4usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::descriptorCount"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutBinding, descriptorCount) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::stageFlags"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutBinding, stageFlags) - 12usize];
    ["Offset of field: VkDescriptorSetLayoutBinding::pImmutableSamplers"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutBinding, pImmutableSamplers) - 16usize];
};
impl Default for VkDescriptorSetLayoutBinding {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorSetLayoutCreateFlags,
    pub bindingCount: u32,
    pub pBindings: *const VkDescriptorSetLayoutBinding,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutCreateInfo"]
        [::std::mem::size_of::<VkDescriptorSetLayoutCreateInfo>() - 32usize];
    ["Alignment of VkDescriptorSetLayoutCreateInfo"]
        [::std::mem::align_of::<VkDescriptorSetLayoutCreateInfo>() - 8usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::sType"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::flags"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, flags) - 16usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::bindingCount"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, bindingCount) - 20usize];
    ["Offset of field: VkDescriptorSetLayoutCreateInfo::pBindings"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutCreateInfo, pBindings) - 24usize];
};
impl Default for VkDescriptorSetLayoutCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSet {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dstSet: VkDescriptorSet,
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub pImageInfo: *const VkDescriptorImageInfo,
    pub pBufferInfo: *const VkDescriptorBufferInfo,
    pub pTexelBufferView: *const VkBufferView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSet"][::std::mem::size_of::<VkWriteDescriptorSet>() - 64usize];
    ["Alignment of VkWriteDescriptorSet"][::std::mem::align_of::<VkWriteDescriptorSet>() - 8usize];
    ["Offset of field: VkWriteDescriptorSet::sType"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSet::pNext"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, pNext) - 8usize];
    ["Offset of field: VkWriteDescriptorSet::dstSet"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, dstSet) - 16usize];
    ["Offset of field: VkWriteDescriptorSet::dstBinding"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, dstBinding) - 24usize];
    ["Offset of field: VkWriteDescriptorSet::dstArrayElement"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, dstArrayElement) - 28usize];
    ["Offset of field: VkWriteDescriptorSet::descriptorCount"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, descriptorCount) - 32usize];
    ["Offset of field: VkWriteDescriptorSet::descriptorType"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, descriptorType) - 36usize];
    ["Offset of field: VkWriteDescriptorSet::pImageInfo"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, pImageInfo) - 40usize];
    ["Offset of field: VkWriteDescriptorSet::pBufferInfo"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, pBufferInfo) - 48usize];
    ["Offset of field: VkWriteDescriptorSet::pTexelBufferView"]
        [::std::mem::offset_of!(VkWriteDescriptorSet, pTexelBufferView) - 56usize];
};
impl Default for VkWriteDescriptorSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription {
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentDescription"][::std::mem::size_of::<VkAttachmentDescription>() - 36usize];
    ["Alignment of VkAttachmentDescription"]
        [::std::mem::align_of::<VkAttachmentDescription>() - 4usize];
    ["Offset of field: VkAttachmentDescription::flags"]
        [::std::mem::offset_of!(VkAttachmentDescription, flags) - 0usize];
    ["Offset of field: VkAttachmentDescription::format"]
        [::std::mem::offset_of!(VkAttachmentDescription, format) - 4usize];
    ["Offset of field: VkAttachmentDescription::samples"]
        [::std::mem::offset_of!(VkAttachmentDescription, samples) - 8usize];
    ["Offset of field: VkAttachmentDescription::loadOp"]
        [::std::mem::offset_of!(VkAttachmentDescription, loadOp) - 12usize];
    ["Offset of field: VkAttachmentDescription::storeOp"]
        [::std::mem::offset_of!(VkAttachmentDescription, storeOp) - 16usize];
    ["Offset of field: VkAttachmentDescription::stencilLoadOp"]
        [::std::mem::offset_of!(VkAttachmentDescription, stencilLoadOp) - 20usize];
    ["Offset of field: VkAttachmentDescription::stencilStoreOp"]
        [::std::mem::offset_of!(VkAttachmentDescription, stencilStoreOp) - 24usize];
    ["Offset of field: VkAttachmentDescription::initialLayout"]
        [::std::mem::offset_of!(VkAttachmentDescription, initialLayout) - 28usize];
    ["Offset of field: VkAttachmentDescription::finalLayout"]
        [::std::mem::offset_of!(VkAttachmentDescription, finalLayout) - 32usize];
};
impl Default for VkAttachmentDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference {
    pub attachment: u32,
    pub layout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentReference"][::std::mem::size_of::<VkAttachmentReference>() - 8usize];
    ["Alignment of VkAttachmentReference"]
        [::std::mem::align_of::<VkAttachmentReference>() - 4usize];
    ["Offset of field: VkAttachmentReference::attachment"]
        [::std::mem::offset_of!(VkAttachmentReference, attachment) - 0usize];
    ["Offset of field: VkAttachmentReference::layout"]
        [::std::mem::offset_of!(VkAttachmentReference, layout) - 4usize];
};
impl Default for VkAttachmentReference {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkFramebufferCreateFlags,
    pub renderPass: VkRenderPass,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
    pub width: u32,
    pub height: u32,
    pub layers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferCreateInfo"][::std::mem::size_of::<VkFramebufferCreateInfo>() - 64usize];
    ["Alignment of VkFramebufferCreateInfo"]
        [::std::mem::align_of::<VkFramebufferCreateInfo>() - 8usize];
    ["Offset of field: VkFramebufferCreateInfo::sType"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, sType) - 0usize];
    ["Offset of field: VkFramebufferCreateInfo::pNext"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, pNext) - 8usize];
    ["Offset of field: VkFramebufferCreateInfo::flags"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, flags) - 16usize];
    ["Offset of field: VkFramebufferCreateInfo::renderPass"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, renderPass) - 24usize];
    ["Offset of field: VkFramebufferCreateInfo::attachmentCount"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, attachmentCount) - 32usize];
    ["Offset of field: VkFramebufferCreateInfo::pAttachments"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, pAttachments) - 40usize];
    ["Offset of field: VkFramebufferCreateInfo::width"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, width) - 48usize];
    ["Offset of field: VkFramebufferCreateInfo::height"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, height) - 52usize];
    ["Offset of field: VkFramebufferCreateInfo::layers"]
        [::std::mem::offset_of!(VkFramebufferCreateInfo, layers) - 56usize];
};
impl Default for VkFramebufferCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription {
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference,
    pub pResolveAttachments: *const VkAttachmentReference,
    pub pDepthStencilAttachment: *const VkAttachmentReference,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDescription"][::std::mem::size_of::<VkSubpassDescription>() - 72usize];
    ["Alignment of VkSubpassDescription"][::std::mem::align_of::<VkSubpassDescription>() - 8usize];
    ["Offset of field: VkSubpassDescription::flags"]
        [::std::mem::offset_of!(VkSubpassDescription, flags) - 0usize];
    ["Offset of field: VkSubpassDescription::pipelineBindPoint"]
        [::std::mem::offset_of!(VkSubpassDescription, pipelineBindPoint) - 4usize];
    ["Offset of field: VkSubpassDescription::inputAttachmentCount"]
        [::std::mem::offset_of!(VkSubpassDescription, inputAttachmentCount) - 8usize];
    ["Offset of field: VkSubpassDescription::pInputAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription, pInputAttachments) - 16usize];
    ["Offset of field: VkSubpassDescription::colorAttachmentCount"]
        [::std::mem::offset_of!(VkSubpassDescription, colorAttachmentCount) - 24usize];
    ["Offset of field: VkSubpassDescription::pColorAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription, pColorAttachments) - 32usize];
    ["Offset of field: VkSubpassDescription::pResolveAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription, pResolveAttachments) - 40usize];
    ["Offset of field: VkSubpassDescription::pDepthStencilAttachment"]
        [::std::mem::offset_of!(VkSubpassDescription, pDepthStencilAttachment) - 48usize];
    ["Offset of field: VkSubpassDescription::preserveAttachmentCount"]
        [::std::mem::offset_of!(VkSubpassDescription, preserveAttachmentCount) - 56usize];
    ["Offset of field: VkSubpassDescription::pPreserveAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription, pPreserveAttachments) - 64usize];
};
impl Default for VkSubpassDescription {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSubpassDependency {
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDependency"][::std::mem::size_of::<VkSubpassDependency>() - 28usize];
    ["Alignment of VkSubpassDependency"][::std::mem::align_of::<VkSubpassDependency>() - 4usize];
    ["Offset of field: VkSubpassDependency::srcSubpass"]
        [::std::mem::offset_of!(VkSubpassDependency, srcSubpass) - 0usize];
    ["Offset of field: VkSubpassDependency::dstSubpass"]
        [::std::mem::offset_of!(VkSubpassDependency, dstSubpass) - 4usize];
    ["Offset of field: VkSubpassDependency::srcStageMask"]
        [::std::mem::offset_of!(VkSubpassDependency, srcStageMask) - 8usize];
    ["Offset of field: VkSubpassDependency::dstStageMask"]
        [::std::mem::offset_of!(VkSubpassDependency, dstStageMask) - 12usize];
    ["Offset of field: VkSubpassDependency::srcAccessMask"]
        [::std::mem::offset_of!(VkSubpassDependency, srcAccessMask) - 16usize];
    ["Offset of field: VkSubpassDependency::dstAccessMask"]
        [::std::mem::offset_of!(VkSubpassDependency, dstAccessMask) - 20usize];
    ["Offset of field: VkSubpassDependency::dependencyFlags"]
        [::std::mem::offset_of!(VkSubpassDependency, dependencyFlags) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreateInfo"][::std::mem::size_of::<VkRenderPassCreateInfo>() - 64usize];
    ["Alignment of VkRenderPassCreateInfo"]
        [::std::mem::align_of::<VkRenderPassCreateInfo>() - 8usize];
    ["Offset of field: VkRenderPassCreateInfo::sType"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassCreateInfo::pNext"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, pNext) - 8usize];
    ["Offset of field: VkRenderPassCreateInfo::flags"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, flags) - 16usize];
    ["Offset of field: VkRenderPassCreateInfo::attachmentCount"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, attachmentCount) - 20usize];
    ["Offset of field: VkRenderPassCreateInfo::pAttachments"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, pAttachments) - 24usize];
    ["Offset of field: VkRenderPassCreateInfo::subpassCount"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, subpassCount) - 32usize];
    ["Offset of field: VkRenderPassCreateInfo::pSubpasses"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, pSubpasses) - 40usize];
    ["Offset of field: VkRenderPassCreateInfo::dependencyCount"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, dependencyCount) - 48usize];
    ["Offset of field: VkRenderPassCreateInfo::pDependencies"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo, pDependencies) - 56usize];
};
impl Default for VkRenderPassCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandPoolCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkCommandPoolCreateFlags,
    pub queueFamilyIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandPoolCreateInfo"][::std::mem::size_of::<VkCommandPoolCreateInfo>() - 24usize];
    ["Alignment of VkCommandPoolCreateInfo"]
        [::std::mem::align_of::<VkCommandPoolCreateInfo>() - 8usize];
    ["Offset of field: VkCommandPoolCreateInfo::sType"]
        [::std::mem::offset_of!(VkCommandPoolCreateInfo, sType) - 0usize];
    ["Offset of field: VkCommandPoolCreateInfo::pNext"]
        [::std::mem::offset_of!(VkCommandPoolCreateInfo, pNext) - 8usize];
    ["Offset of field: VkCommandPoolCreateInfo::flags"]
        [::std::mem::offset_of!(VkCommandPoolCreateInfo, flags) - 16usize];
    ["Offset of field: VkCommandPoolCreateInfo::queueFamilyIndex"]
        [::std::mem::offset_of!(VkCommandPoolCreateInfo, queueFamilyIndex) - 20usize];
};
impl Default for VkCommandPoolCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub commandPool: VkCommandPool,
    pub level: VkCommandBufferLevel,
    pub commandBufferCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferAllocateInfo"]
        [::std::mem::size_of::<VkCommandBufferAllocateInfo>() - 32usize];
    ["Alignment of VkCommandBufferAllocateInfo"]
        [::std::mem::align_of::<VkCommandBufferAllocateInfo>() - 8usize];
    ["Offset of field: VkCommandBufferAllocateInfo::sType"]
        [::std::mem::offset_of!(VkCommandBufferAllocateInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferAllocateInfo::pNext"]
        [::std::mem::offset_of!(VkCommandBufferAllocateInfo, pNext) - 8usize];
    ["Offset of field: VkCommandBufferAllocateInfo::commandPool"]
        [::std::mem::offset_of!(VkCommandBufferAllocateInfo, commandPool) - 16usize];
    ["Offset of field: VkCommandBufferAllocateInfo::level"]
        [::std::mem::offset_of!(VkCommandBufferAllocateInfo, level) - 24usize];
    ["Offset of field: VkCommandBufferAllocateInfo::commandBufferCount"]
        [::std::mem::offset_of!(VkCommandBufferAllocateInfo, commandBufferCount) - 28usize];
};
impl Default for VkCommandBufferAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
    pub framebuffer: VkFramebuffer,
    pub occlusionQueryEnable: VkBool32,
    pub queryFlags: VkQueryControlFlags,
    pub pipelineStatistics: VkQueryPipelineStatisticFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceInfo"]
        [::std::mem::size_of::<VkCommandBufferInheritanceInfo>() - 56usize];
    ["Alignment of VkCommandBufferInheritanceInfo"]
        [::std::mem::align_of::<VkCommandBufferInheritanceInfo>() - 8usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::sType"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::pNext"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, pNext) - 8usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::renderPass"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, renderPass) - 16usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::subpass"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, subpass) - 24usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::framebuffer"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, framebuffer) - 32usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::occlusionQueryEnable"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, occlusionQueryEnable) - 40usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::queryFlags"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, queryFlags) - 44usize];
    ["Offset of field: VkCommandBufferInheritanceInfo::pipelineStatistics"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceInfo, pipelineStatistics) - 48usize];
};
impl Default for VkCommandBufferInheritanceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkCommandBufferUsageFlags,
    pub pInheritanceInfo: *const VkCommandBufferInheritanceInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferBeginInfo"]
        [::std::mem::size_of::<VkCommandBufferBeginInfo>() - 32usize];
    ["Alignment of VkCommandBufferBeginInfo"]
        [::std::mem::align_of::<VkCommandBufferBeginInfo>() - 8usize];
    ["Offset of field: VkCommandBufferBeginInfo::sType"]
        [::std::mem::offset_of!(VkCommandBufferBeginInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferBeginInfo::pNext"]
        [::std::mem::offset_of!(VkCommandBufferBeginInfo, pNext) - 8usize];
    ["Offset of field: VkCommandBufferBeginInfo::flags"]
        [::std::mem::offset_of!(VkCommandBufferBeginInfo, flags) - 16usize];
    ["Offset of field: VkCommandBufferBeginInfo::pInheritanceInfo"]
        [::std::mem::offset_of!(VkCommandBufferBeginInfo, pInheritanceInfo) - 24usize];
};
impl Default for VkCommandBufferBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBufferCopy {
    pub srcOffset: VkDeviceSize,
    pub dstOffset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCopy"][::std::mem::size_of::<VkBufferCopy>() - 24usize];
    ["Alignment of VkBufferCopy"][::std::mem::align_of::<VkBufferCopy>() - 8usize];
    ["Offset of field: VkBufferCopy::srcOffset"]
        [::std::mem::offset_of!(VkBufferCopy, srcOffset) - 0usize];
    ["Offset of field: VkBufferCopy::dstOffset"]
        [::std::mem::offset_of!(VkBufferCopy, dstOffset) - 8usize];
    ["Offset of field: VkBufferCopy::size"][::std::mem::offset_of!(VkBufferCopy, size) - 16usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageSubresourceLayers {
    pub aspectMask: VkImageAspectFlags,
    pub mipLevel: u32,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresourceLayers"]
        [::std::mem::size_of::<VkImageSubresourceLayers>() - 16usize];
    ["Alignment of VkImageSubresourceLayers"]
        [::std::mem::align_of::<VkImageSubresourceLayers>() - 4usize];
    ["Offset of field: VkImageSubresourceLayers::aspectMask"]
        [::std::mem::offset_of!(VkImageSubresourceLayers, aspectMask) - 0usize];
    ["Offset of field: VkImageSubresourceLayers::mipLevel"]
        [::std::mem::offset_of!(VkImageSubresourceLayers, mipLevel) - 4usize];
    ["Offset of field: VkImageSubresourceLayers::baseArrayLayer"]
        [::std::mem::offset_of!(VkImageSubresourceLayers, baseArrayLayer) - 8usize];
    ["Offset of field: VkImageSubresourceLayers::layerCount"]
        [::std::mem::offset_of!(VkImageSubresourceLayers, layerCount) - 12usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBufferImageCopy {
    pub bufferOffset: VkDeviceSize,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferImageCopy"][::std::mem::size_of::<VkBufferImageCopy>() - 56usize];
    ["Alignment of VkBufferImageCopy"][::std::mem::align_of::<VkBufferImageCopy>() - 8usize];
    ["Offset of field: VkBufferImageCopy::bufferOffset"]
        [::std::mem::offset_of!(VkBufferImageCopy, bufferOffset) - 0usize];
    ["Offset of field: VkBufferImageCopy::bufferRowLength"]
        [::std::mem::offset_of!(VkBufferImageCopy, bufferRowLength) - 8usize];
    ["Offset of field: VkBufferImageCopy::bufferImageHeight"]
        [::std::mem::offset_of!(VkBufferImageCopy, bufferImageHeight) - 12usize];
    ["Offset of field: VkBufferImageCopy::imageSubresource"]
        [::std::mem::offset_of!(VkBufferImageCopy, imageSubresource) - 16usize];
    ["Offset of field: VkBufferImageCopy::imageOffset"]
        [::std::mem::offset_of!(VkBufferImageCopy, imageOffset) - 32usize];
    ["Offset of field: VkBufferImageCopy::imageExtent"]
        [::std::mem::offset_of!(VkBufferImageCopy, imageExtent) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearColorValue {
    pub float32: [f32; 4usize],
    pub int32: [i32; 4usize],
    pub uint32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearColorValue"][::std::mem::size_of::<VkClearColorValue>() - 16usize];
    ["Alignment of VkClearColorValue"][::std::mem::align_of::<VkClearColorValue>() - 4usize];
    ["Offset of field: VkClearColorValue::float32"]
        [::std::mem::offset_of!(VkClearColorValue, float32) - 0usize];
    ["Offset of field: VkClearColorValue::int32"]
        [::std::mem::offset_of!(VkClearColorValue, int32) - 0usize];
    ["Offset of field: VkClearColorValue::uint32"]
        [::std::mem::offset_of!(VkClearColorValue, uint32) - 0usize];
};
impl Default for VkClearColorValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClearDepthStencilValue {
    pub depth: f32,
    pub stencil: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearDepthStencilValue"]
        [::std::mem::size_of::<VkClearDepthStencilValue>() - 8usize];
    ["Alignment of VkClearDepthStencilValue"]
        [::std::mem::align_of::<VkClearDepthStencilValue>() - 4usize];
    ["Offset of field: VkClearDepthStencilValue::depth"]
        [::std::mem::offset_of!(VkClearDepthStencilValue, depth) - 0usize];
    ["Offset of field: VkClearDepthStencilValue::stencil"]
        [::std::mem::offset_of!(VkClearDepthStencilValue, stencil) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClearValue {
    pub color: VkClearColorValue,
    pub depthStencil: VkClearDepthStencilValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearValue"][::std::mem::size_of::<VkClearValue>() - 16usize];
    ["Alignment of VkClearValue"][::std::mem::align_of::<VkClearValue>() - 4usize];
    ["Offset of field: VkClearValue::color"][::std::mem::offset_of!(VkClearValue, color) - 0usize];
    ["Offset of field: VkClearValue::depthStencil"]
        [::std::mem::offset_of!(VkClearValue, depthStencil) - 0usize];
};
impl Default for VkClearValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClearAttachment {
    pub aspectMask: VkImageAspectFlags,
    pub colorAttachment: u32,
    pub clearValue: VkClearValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearAttachment"][::std::mem::size_of::<VkClearAttachment>() - 24usize];
    ["Alignment of VkClearAttachment"][::std::mem::align_of::<VkClearAttachment>() - 4usize];
    ["Offset of field: VkClearAttachment::aspectMask"]
        [::std::mem::offset_of!(VkClearAttachment, aspectMask) - 0usize];
    ["Offset of field: VkClearAttachment::colorAttachment"]
        [::std::mem::offset_of!(VkClearAttachment, colorAttachment) - 4usize];
    ["Offset of field: VkClearAttachment::clearValue"]
        [::std::mem::offset_of!(VkClearAttachment, clearValue) - 8usize];
};
impl Default for VkClearAttachment {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClearRect {
    pub rect: VkRect2D,
    pub baseArrayLayer: u32,
    pub layerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClearRect"][::std::mem::size_of::<VkClearRect>() - 24usize];
    ["Alignment of VkClearRect"][::std::mem::align_of::<VkClearRect>() - 4usize];
    ["Offset of field: VkClearRect::rect"][::std::mem::offset_of!(VkClearRect, rect) - 0usize];
    ["Offset of field: VkClearRect::baseArrayLayer"]
        [::std::mem::offset_of!(VkClearRect, baseArrayLayer) - 16usize];
    ["Offset of field: VkClearRect::layerCount"]
        [::std::mem::offset_of!(VkClearRect, layerCount) - 20usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageBlit {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffsets: [VkOffset3D; 2usize],
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffsets: [VkOffset3D; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageBlit"][::std::mem::size_of::<VkImageBlit>() - 80usize];
    ["Alignment of VkImageBlit"][::std::mem::align_of::<VkImageBlit>() - 4usize];
    ["Offset of field: VkImageBlit::srcSubresource"]
        [::std::mem::offset_of!(VkImageBlit, srcSubresource) - 0usize];
    ["Offset of field: VkImageBlit::srcOffsets"]
        [::std::mem::offset_of!(VkImageBlit, srcOffsets) - 16usize];
    ["Offset of field: VkImageBlit::dstSubresource"]
        [::std::mem::offset_of!(VkImageBlit, dstSubresource) - 40usize];
    ["Offset of field: VkImageBlit::dstOffsets"]
        [::std::mem::offset_of!(VkImageBlit, dstOffsets) - 56usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageCopy {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCopy"][::std::mem::size_of::<VkImageCopy>() - 68usize];
    ["Alignment of VkImageCopy"][::std::mem::align_of::<VkImageCopy>() - 4usize];
    ["Offset of field: VkImageCopy::srcSubresource"]
        [::std::mem::offset_of!(VkImageCopy, srcSubresource) - 0usize];
    ["Offset of field: VkImageCopy::srcOffset"]
        [::std::mem::offset_of!(VkImageCopy, srcOffset) - 16usize];
    ["Offset of field: VkImageCopy::dstSubresource"]
        [::std::mem::offset_of!(VkImageCopy, dstSubresource) - 28usize];
    ["Offset of field: VkImageCopy::dstOffset"]
        [::std::mem::offset_of!(VkImageCopy, dstOffset) - 44usize];
    ["Offset of field: VkImageCopy::extent"][::std::mem::offset_of!(VkImageCopy, extent) - 56usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkImageResolve {
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageResolve"][::std::mem::size_of::<VkImageResolve>() - 68usize];
    ["Alignment of VkImageResolve"][::std::mem::align_of::<VkImageResolve>() - 4usize];
    ["Offset of field: VkImageResolve::srcSubresource"]
        [::std::mem::offset_of!(VkImageResolve, srcSubresource) - 0usize];
    ["Offset of field: VkImageResolve::srcOffset"]
        [::std::mem::offset_of!(VkImageResolve, srcOffset) - 16usize];
    ["Offset of field: VkImageResolve::dstSubresource"]
        [::std::mem::offset_of!(VkImageResolve, dstSubresource) - 28usize];
    ["Offset of field: VkImageResolve::dstOffset"]
        [::std::mem::offset_of!(VkImageResolve, dstOffset) - 44usize];
    ["Offset of field: VkImageResolve::extent"]
        [::std::mem::offset_of!(VkImageResolve, extent) - 56usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub framebuffer: VkFramebuffer,
    pub renderArea: VkRect2D,
    pub clearValueCount: u32,
    pub pClearValues: *const VkClearValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassBeginInfo"][::std::mem::size_of::<VkRenderPassBeginInfo>() - 64usize];
    ["Alignment of VkRenderPassBeginInfo"]
        [::std::mem::align_of::<VkRenderPassBeginInfo>() - 8usize];
    ["Offset of field: VkRenderPassBeginInfo::sType"]
        [::std::mem::offset_of!(VkRenderPassBeginInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassBeginInfo::pNext"]
        [::std::mem::offset_of!(VkRenderPassBeginInfo, pNext) - 8usize];
    ["Offset of field: VkRenderPassBeginInfo::renderPass"]
        [::std::mem::offset_of!(VkRenderPassBeginInfo, renderPass) - 16usize];
    ["Offset of field: VkRenderPassBeginInfo::framebuffer"]
        [::std::mem::offset_of!(VkRenderPassBeginInfo, framebuffer) - 24usize];
    ["Offset of field: VkRenderPassBeginInfo::renderArea"]
        [::std::mem::offset_of!(VkRenderPassBeginInfo, renderArea) - 32usize];
    ["Offset of field: VkRenderPassBeginInfo::clearValueCount"]
        [::std::mem::offset_of!(VkRenderPassBeginInfo, clearValueCount) - 48usize];
    ["Offset of field: VkRenderPassBeginInfo::pClearValues"]
        [::std::mem::offset_of!(VkRenderPassBeginInfo, pClearValues) - 56usize];
};
impl Default for VkRenderPassBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateInstance = ::std::option::Option<
    unsafe extern "system" fn(
        pCreateInfo: *const VkInstanceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pInstance: *mut VkInstance,
    ) -> VkResult,
>;
pub type PFN_vkDestroyInstance = ::std::option::Option<
    unsafe extern "system" fn(instance: VkInstance, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumeratePhysicalDevices = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceCount: *mut u32,
        pPhysicalDevices: *mut VkPhysicalDevice,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceFeatures = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        pImageFormatProperties: *mut VkImageFormatProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties,
    ),
>;
pub type PFN_vkGetInstanceProcAddr = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkGetDeviceProcAddr = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
pub type PFN_vkCreateDevice = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDevice = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pAllocator: *const VkAllocationCallbacks),
>;
pub type PFN_vkEnumerateInstanceExtensionProperties = ::std::option::Option<
    unsafe extern "system" fn(
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceExtensionProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult,
>;
pub type PFN_vkEnumerateInstanceLayerProperties = ::std::option::Option<
    unsafe extern "system" fn(pPropertyCount: *mut u32, pProperties: *mut VkLayerProperties) -> VkResult,
>;
pub type PFN_vkEnumerateDeviceLayerProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceQueue = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queueFamilyIndex: u32,
        queueIndex: u32,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkQueueSubmit = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkQueueWaitIdle =
    ::std::option::Option<unsafe extern "system" fn(queue: VkQueue) -> VkResult>;
pub type PFN_vkDeviceWaitIdle =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice) -> VkResult>;
pub type PFN_vkAllocateMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkMemoryAllocateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pMemory: *mut VkDeviceMemory,
    ) -> VkResult,
>;
pub type PFN_vkFreeMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMapMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        flags: VkMemoryMapFlags,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, memory: VkDeviceMemory)>;
pub type PFN_vkFlushMappedMemoryRanges = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkInvalidateMappedMemoryRanges = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceMemoryCommitment = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        memory: VkDeviceMemory,
        pCommittedMemoryInBytes: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkBindBufferMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult,
>;
pub type PFN_vkGetBufferMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pMemoryRequirements: *mut VkMemoryRequirements,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        samples: VkSampleCountFlagBits,
        usage: VkImageUsageFlags,
        tiling: VkImageTiling,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties,
    ),
>;
pub type PFN_vkQueueBindSparse = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        bindInfoCount: u32,
        pBindInfo: *const VkBindSparseInfo,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCreateFence = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkFenceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFence = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        fence: VkFence,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetFences = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult,
>;
pub type PFN_vkGetFenceStatus =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, fence: VkFence) -> VkResult>;
pub type PFN_vkWaitForFences = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
        waitAll: VkBool32,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkCreateSemaphore = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSemaphoreCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSemaphore: *mut VkSemaphore,
    ) -> VkResult,
>;
pub type PFN_vkDestroySemaphore = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        semaphore: VkSemaphore,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateEvent = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkEventCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pEvent: *mut VkEvent,
    ) -> VkResult,
>;
pub type PFN_vkDestroyEvent = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        event: VkEvent,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetEventStatus =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkSetEvent =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkResetEvent =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, event: VkEvent) -> VkResult>;
pub type PFN_vkCreateQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkQueryPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pQueryPool: *mut VkQueryPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetQueryPoolResults = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ) -> VkResult,
>;
pub type PFN_vkCreateBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pBuffer: *mut VkBuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buffer: VkBuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateBufferView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkBufferViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkBufferView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyBufferView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bufferView: VkBufferView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pImage: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource,
        pLayout: *mut VkSubresourceLayout,
    ),
>;
pub type PFN_vkCreateImageView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkImageViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkImageView,
    ) -> VkResult,
>;
pub type PFN_vkDestroyImageView = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        imageView: VkImageView,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateShaderModule = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pShaderModule: *mut VkShaderModule,
    ) -> VkResult,
>;
pub type PFN_vkDestroyShaderModule = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineCache = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineCacheCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineCache: *mut VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineCache = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPipelineCacheData = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkMergePipelineCaches = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        dstCache: VkPipelineCache,
        srcCacheCount: u32,
        pSrcCaches: *const VkPipelineCache,
    ) -> VkResult,
>;
pub type PFN_vkCreateGraphicsPipelines = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkGraphicsPipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkCreateComputePipelines = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkComputePipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipeline = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreatePipelineLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineLayout: *mut VkPipelineLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineLayout: VkPipelineLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateSampler = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSampler: *mut VkSampler,
    ) -> VkResult,
>;
pub type PFN_vkDestroySampler = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        sampler: VkSampler,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorSetLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSetLayout: *mut VkDescriptorSetLayout,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorSetLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSetLayout: VkDescriptorSetLayout,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorPool: *mut VkDescriptorPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetDescriptorPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        flags: VkDescriptorPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkDescriptorSetAllocateInfo,
        pDescriptorSets: *mut VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkFreeDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
    ) -> VkResult,
>;
pub type PFN_vkUpdateDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
        descriptorCopyCount: u32,
        pDescriptorCopies: *const VkCopyDescriptorSet,
    ),
>;
pub type PFN_vkCreateFramebuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkFramebufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFramebuffer: *mut VkFramebuffer,
    ) -> VkResult,
>;
pub type PFN_vkDestroyFramebuffer = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkDestroyRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        renderPass: VkRenderPass,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetRenderAreaGranularity = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, renderPass: VkRenderPass, pGranularity: *mut VkExtent2D),
>;
pub type PFN_vkCreateCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCommandPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pCommandPool: *mut VkCommandPool,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkResetCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkAllocateCommandBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocateInfo: *const VkCommandBufferAllocateInfo,
        pCommandBuffers: *mut VkCommandBuffer,
    ) -> VkResult,
>;
pub type PFN_vkFreeCommandBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
pub type PFN_vkBeginCommandBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkCommandBufferBeginInfo,
    ) -> VkResult,
>;
pub type PFN_vkEndCommandBuffer =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer) -> VkResult>;
pub type PFN_vkResetCommandBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        flags: VkCommandBufferResetFlags,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindPipeline = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    ),
>;
pub type PFN_vkCmdSetViewport = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissor = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstScissor: u32,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetLineWidth =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, lineWidth: f32)>;
pub type PFN_vkCmdSetDepthBias = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        depthBiasConstantFactor: f32,
        depthBiasClamp: f32,
        depthBiasSlopeFactor: f32,
    ),
>;
pub type PFN_vkCmdSetBlendConstants = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, blendConstants: *const f32),
>;
pub type PFN_vkCmdSetDepthBounds = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32),
>;
pub type PFN_vkCmdSetStencilCompareMask = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        compareMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilWriteMask = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        writeMask: u32,
    ),
>;
pub type PFN_vkCmdSetStencilReference = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        reference: u32,
    ),
>;
pub type PFN_vkCmdBindDescriptorSets = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
        dynamicOffsetCount: u32,
        pDynamicOffsets: *const u32,
    ),
>;
pub type PFN_vkCmdBindIndexBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdDraw = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexed = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        vertexOffset: i32,
        firstInstance: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirect = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirect = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDispatch = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDispatchIndirect = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize),
>;
pub type PFN_vkCmdCopyBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferCopy,
    ),
>;
pub type PFN_vkCmdCopyImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageCopy,
    ),
>;
pub type PFN_vkCmdBlitImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageBlit,
        filter: VkFilter,
    ),
>;
pub type PFN_vkCmdCopyBufferToImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    ),
>;
pub type PFN_vkCmdUpdateBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        dataSize: VkDeviceSize,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdFillBuffer = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        size: VkDeviceSize,
        data: u32,
    ),
>;
pub type PFN_vkCmdClearColorImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pColor: *const VkClearColorValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearDepthStencilImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pDepthStencil: *const VkClearDepthStencilValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    ),
>;
pub type PFN_vkCmdClearAttachments = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pAttachments: *const VkClearAttachment,
        rectCount: u32,
        pRects: *const VkClearRect,
    ),
>;
pub type PFN_vkCmdResolveImage = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageResolve,
    ),
>;
pub type PFN_vkCmdSetEvent = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdResetEvent = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    ),
>;
pub type PFN_vkCmdWaitEvents = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdPipelineBarrier = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        dependencyFlags: VkDependencyFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    ),
>;
pub type PFN_vkCmdBeginQuery = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
    ),
>;
pub type PFN_vkCmdEndQuery = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32),
>;
pub type PFN_vkCmdResetQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkCmdWriteTimestamp = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkCmdCopyQueryPoolResults = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ),
>;
pub type PFN_vkCmdPushConstants = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        layout: VkPipelineLayout,
        stageFlags: VkShaderStageFlags,
        offset: u32,
        size: u32,
        pValues: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdBeginRenderPass = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        contents: VkSubpassContents,
    ),
>;
pub type PFN_vkCmdNextSubpass = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, contents: VkSubpassContents),
>;
pub type PFN_vkCmdEndRenderPass =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdExecuteCommands = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    ),
>;
unsafe extern "system" {
    pub fn vkCreateInstance(
        pCreateInfo: *const VkInstanceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pInstance: *mut VkInstance,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyInstance(instance: VkInstance, pAllocator: *const VkAllocationCallbacks);
}
unsafe extern "system" {
    pub fn vkEnumeratePhysicalDevices(
        instance: VkInstance,
        pPhysicalDeviceCount: *mut u32,
        pPhysicalDevices: *mut VkPhysicalDevice,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceFeatures(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        pImageFormatProperties: *mut VkImageFormatProperties,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceProperties(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties,
    );
}
unsafe extern "system" {
    pub fn vkGetInstanceProcAddr(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction;
}
unsafe extern "system" {
    pub fn vkGetDeviceProcAddr(
        device: VkDevice,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction;
}
unsafe extern "system" {
    pub fn vkCreateDevice(
        physicalDevice: VkPhysicalDevice,
        pCreateInfo: *const VkDeviceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDevice: *mut VkDevice,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDevice(device: VkDevice, pAllocator: *const VkAllocationCallbacks);
}
unsafe extern "system" {
    pub fn vkEnumerateInstanceExtensionProperties(
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkEnumerateDeviceExtensionProperties(
        physicalDevice: VkPhysicalDevice,
        pLayerName: *const ::std::os::raw::c_char,
        pPropertyCount: *mut u32,
        pProperties: *mut VkExtensionProperties,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkEnumerateInstanceLayerProperties(
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkEnumerateDeviceLayerProperties(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkLayerProperties,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDeviceQueue(
        device: VkDevice,
        queueFamilyIndex: u32,
        queueIndex: u32,
        pQueue: *mut VkQueue,
    );
}
unsafe extern "system" {
    pub fn vkQueueSubmit(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo,
        fence: VkFence,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkQueueWaitIdle(queue: VkQueue) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDeviceWaitIdle(device: VkDevice) -> VkResult;
}
unsafe extern "system" {
    pub fn vkAllocateMemory(
        device: VkDevice,
        pAllocateInfo: *const VkMemoryAllocateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pMemory: *mut VkDeviceMemory,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkFreeMemory(
        device: VkDevice,
        memory: VkDeviceMemory,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkMapMemory(
        device: VkDevice,
        memory: VkDeviceMemory,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        flags: VkMemoryMapFlags,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory);
}
unsafe extern "system" {
    pub fn vkFlushMappedMemoryRanges(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkInvalidateMappedMemoryRanges(
        device: VkDevice,
        memoryRangeCount: u32,
        pMemoryRanges: *const VkMappedMemoryRange,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDeviceMemoryCommitment(
        device: VkDevice,
        memory: VkDeviceMemory,
        pCommittedMemoryInBytes: *mut VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkBindBufferMemory(
        device: VkDevice,
        buffer: VkBuffer,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkBindImageMemory(
        device: VkDevice,
        image: VkImage,
        memory: VkDeviceMemory,
        memoryOffset: VkDeviceSize,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetBufferMemoryRequirements(
        device: VkDevice,
        buffer: VkBuffer,
        pMemoryRequirements: *mut VkMemoryRequirements,
    );
}
unsafe extern "system" {
    pub fn vkGetImageMemoryRequirements(
        device: VkDevice,
        image: VkImage,
        pMemoryRequirements: *mut VkMemoryRequirements,
    );
}
unsafe extern "system" {
    pub fn vkGetImageSparseMemoryRequirements(
        device: VkDevice,
        image: VkImage,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        samples: VkSampleCountFlagBits,
        usage: VkImageUsageFlags,
        tiling: VkImageTiling,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties,
    );
}
unsafe extern "system" {
    pub fn vkQueueBindSparse(
        queue: VkQueue,
        bindInfoCount: u32,
        pBindInfo: *const VkBindSparseInfo,
        fence: VkFence,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateFence(
        device: VkDevice,
        pCreateInfo: *const VkFenceCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyFence(
        device: VkDevice,
        fence: VkFence,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: *const VkFence) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetFenceStatus(device: VkDevice, fence: VkFence) -> VkResult;
}
unsafe extern "system" {
    pub fn vkWaitForFences(
        device: VkDevice,
        fenceCount: u32,
        pFences: *const VkFence,
        waitAll: VkBool32,
        timeout: u64,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateSemaphore(
        device: VkDevice,
        pCreateInfo: *const VkSemaphoreCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSemaphore: *mut VkSemaphore,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroySemaphore(
        device: VkDevice,
        semaphore: VkSemaphore,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateEvent(
        device: VkDevice,
        pCreateInfo: *const VkEventCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pEvent: *mut VkEvent,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyEvent(
        device: VkDevice,
        event: VkEvent,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetEventStatus(device: VkDevice, event: VkEvent) -> VkResult;
}
unsafe extern "system" {
    pub fn vkSetEvent(device: VkDevice, event: VkEvent) -> VkResult;
}
unsafe extern "system" {
    pub fn vkResetEvent(device: VkDevice, event: VkEvent) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateQueryPool(
        device: VkDevice,
        pCreateInfo: *const VkQueryPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pQueryPool: *mut VkQueryPool,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyQueryPool(
        device: VkDevice,
        queryPool: VkQueryPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetQueryPoolResults(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateBuffer(
        device: VkDevice,
        pCreateInfo: *const VkBufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pBuffer: *mut VkBuffer,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyBuffer(
        device: VkDevice,
        buffer: VkBuffer,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateBufferView(
        device: VkDevice,
        pCreateInfo: *const VkBufferViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkBufferView,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyBufferView(
        device: VkDevice,
        bufferView: VkBufferView,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateImage(
        device: VkDevice,
        pCreateInfo: *const VkImageCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pImage: *mut VkImage,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyImage(
        device: VkDevice,
        image: VkImage,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetImageSubresourceLayout(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource,
        pLayout: *mut VkSubresourceLayout,
    );
}
unsafe extern "system" {
    pub fn vkCreateImageView(
        device: VkDevice,
        pCreateInfo: *const VkImageViewCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pView: *mut VkImageView,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyImageView(
        device: VkDevice,
        imageView: VkImageView,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateShaderModule(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pShaderModule: *mut VkShaderModule,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyShaderModule(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreatePipelineCache(
        device: VkDevice,
        pCreateInfo: *const VkPipelineCacheCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineCache: *mut VkPipelineCache,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyPipelineCache(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetPipelineCacheData(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkMergePipelineCaches(
        device: VkDevice,
        dstCache: VkPipelineCache,
        srcCacheCount: u32,
        pSrcCaches: *const VkPipelineCache,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateGraphicsPipelines(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkGraphicsPipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateComputePipelines(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkComputePipelineCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyPipeline(
        device: VkDevice,
        pipeline: VkPipeline,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreatePipelineLayout(
        device: VkDevice,
        pCreateInfo: *const VkPipelineLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPipelineLayout: *mut VkPipelineLayout,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyPipelineLayout(
        device: VkDevice,
        pipelineLayout: VkPipelineLayout,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateSampler(
        device: VkDevice,
        pCreateInfo: *const VkSamplerCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSampler: *mut VkSampler,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroySampler(
        device: VkDevice,
        sampler: VkSampler,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateDescriptorSetLayout(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pSetLayout: *mut VkDescriptorSetLayout,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDescriptorSetLayout(
        device: VkDevice,
        descriptorSetLayout: VkDescriptorSetLayout,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateDescriptorPool(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorPool: *mut VkDescriptorPool,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDescriptorPool(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkResetDescriptorPool(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        flags: VkDescriptorPoolResetFlags,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkAllocateDescriptorSets(
        device: VkDevice,
        pAllocateInfo: *const VkDescriptorSetAllocateInfo,
        pDescriptorSets: *mut VkDescriptorSet,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkFreeDescriptorSets(
        device: VkDevice,
        descriptorPool: VkDescriptorPool,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkUpdateDescriptorSets(
        device: VkDevice,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
        descriptorCopyCount: u32,
        pDescriptorCopies: *const VkCopyDescriptorSet,
    );
}
unsafe extern "system" {
    pub fn vkCreateFramebuffer(
        device: VkDevice,
        pCreateInfo: *const VkFramebufferCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pFramebuffer: *mut VkFramebuffer,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyFramebuffer(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateRenderPass(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyRenderPass(
        device: VkDevice,
        renderPass: VkRenderPass,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetRenderAreaGranularity(
        device: VkDevice,
        renderPass: VkRenderPass,
        pGranularity: *mut VkExtent2D,
    );
}
unsafe extern "system" {
    pub fn vkCreateCommandPool(
        device: VkDevice,
        pCreateInfo: *const VkCommandPoolCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pCommandPool: *mut VkCommandPool,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkResetCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolResetFlags,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkAllocateCommandBuffers(
        device: VkDevice,
        pAllocateInfo: *const VkCommandBufferAllocateInfo,
        pCommandBuffers: *mut VkCommandBuffer,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkFreeCommandBuffers(
        device: VkDevice,
        commandPool: VkCommandPool,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    );
}
unsafe extern "system" {
    pub fn vkBeginCommandBuffer(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkCommandBufferBeginInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer) -> VkResult;
}
unsafe extern "system" {
    pub fn vkResetCommandBuffer(
        commandBuffer: VkCommandBuffer,
        flags: VkCommandBufferResetFlags,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdBindPipeline(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetViewport(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetScissor(
        commandBuffer: VkCommandBuffer,
        firstScissor: u32,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthBias(
        commandBuffer: VkCommandBuffer,
        depthBiasConstantFactor: f32,
        depthBiasClamp: f32,
        depthBiasSlopeFactor: f32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: *const f32);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthBounds(
        commandBuffer: VkCommandBuffer,
        minDepthBounds: f32,
        maxDepthBounds: f32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetStencilCompareMask(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        compareMask: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetStencilWriteMask(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        writeMask: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetStencilReference(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        reference: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindDescriptorSets(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        descriptorSetCount: u32,
        pDescriptorSets: *const VkDescriptorSet,
        dynamicOffsetCount: u32,
        pDynamicOffsets: *const u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindIndexBuffer(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        indexType: VkIndexType,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindVertexBuffers(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdDraw(
        commandBuffer: VkCommandBuffer,
        vertexCount: u32,
        instanceCount: u32,
        firstVertex: u32,
        firstInstance: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawIndexed(
        commandBuffer: VkCommandBuffer,
        indexCount: u32,
        instanceCount: u32,
        firstIndex: u32,
        vertexOffset: i32,
        firstInstance: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawIndexedIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDispatch(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDispatchIndirect(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyBuffer(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferCopy,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageCopy,
    );
}
unsafe extern "system" {
    pub fn vkCmdBlitImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageBlit,
        filter: VkFilter,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyBufferToImage(
        commandBuffer: VkCommandBuffer,
        srcBuffer: VkBuffer,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyImageToBuffer(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstBuffer: VkBuffer,
        regionCount: u32,
        pRegions: *const VkBufferImageCopy,
    );
}
unsafe extern "system" {
    pub fn vkCmdUpdateBuffer(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        dataSize: VkDeviceSize,
        pData: *const ::std::os::raw::c_void,
    );
}
unsafe extern "system" {
    pub fn vkCmdFillBuffer(
        commandBuffer: VkCommandBuffer,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        size: VkDeviceSize,
        data: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdClearColorImage(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pColor: *const VkClearColorValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    );
}
unsafe extern "system" {
    pub fn vkCmdClearDepthStencilImage(
        commandBuffer: VkCommandBuffer,
        image: VkImage,
        imageLayout: VkImageLayout,
        pDepthStencil: *const VkClearDepthStencilValue,
        rangeCount: u32,
        pRanges: *const VkImageSubresourceRange,
    );
}
unsafe extern "system" {
    pub fn vkCmdClearAttachments(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pAttachments: *const VkClearAttachment,
        rectCount: u32,
        pRects: *const VkClearRect,
    );
}
unsafe extern "system" {
    pub fn vkCmdResolveImage(
        commandBuffer: VkCommandBuffer,
        srcImage: VkImage,
        srcImageLayout: VkImageLayout,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        regionCount: u32,
        pRegions: *const VkImageResolve,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetEvent(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    );
}
unsafe extern "system" {
    pub fn vkCmdResetEvent(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags,
    );
}
unsafe extern "system" {
    pub fn vkCmdWaitEvents(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    );
}
unsafe extern "system" {
    pub fn vkCmdPipelineBarrier(
        commandBuffer: VkCommandBuffer,
        srcStageMask: VkPipelineStageFlags,
        dstStageMask: VkPipelineStageFlags,
        dependencyFlags: VkDependencyFlags,
        memoryBarrierCount: u32,
        pMemoryBarriers: *const VkMemoryBarrier,
        bufferMemoryBarrierCount: u32,
        pBufferMemoryBarriers: *const VkBufferMemoryBarrier,
        imageMemoryBarrierCount: u32,
        pImageMemoryBarriers: *const VkImageMemoryBarrier,
    );
}
unsafe extern "system" {
    pub fn vkCmdBeginQuery(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32);
}
unsafe extern "system" {
    pub fn vkCmdResetQueryPool(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdWriteTimestamp(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        queryPool: VkQueryPool,
        query: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyQueryPoolResults(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        stride: VkDeviceSize,
        flags: VkQueryResultFlags,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushConstants(
        commandBuffer: VkCommandBuffer,
        layout: VkPipelineLayout,
        stageFlags: VkShaderStageFlags,
        offset: u32,
        size: u32,
        pValues: *const ::std::os::raw::c_void,
    );
}
unsafe extern "system" {
    pub fn vkCmdBeginRenderPass(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        contents: VkSubpassContents,
    );
}
unsafe extern "system" {
    pub fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents);
}
unsafe extern "system" {
    pub fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer);
}
unsafe extern "system" {
    pub fn vkCmdExecuteCommands(
        commandBuffer: VkCommandBuffer,
        commandBufferCount: u32,
        pCommandBuffers: *const VkCommandBuffer,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversion_T {
    _unused: [u8; 0],
}
pub type VkSamplerYcbcrConversion = *mut VkSamplerYcbcrConversion_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplate_T {
    _unused: [u8; 0],
}
pub type VkDescriptorUpdateTemplate = *mut VkDescriptorUpdateTemplate_T;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES:
    VkPointClippingBehavior = 0;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY:
    VkPointClippingBehavior = 1;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR:
    VkPointClippingBehavior = 0;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR:
    VkPointClippingBehavior = 1;
pub const VkPointClippingBehavior_VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: VkPointClippingBehavior =
    2147483647;
pub type VkPointClippingBehavior = ::std::os::raw::c_uint;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT:
    VkTessellationDomainOrigin = 0;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT:
    VkTessellationDomainOrigin = 1;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR:
    VkTessellationDomainOrigin = 0;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR:
    VkTessellationDomainOrigin = 1;
pub const VkTessellationDomainOrigin_VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM:
    VkTessellationDomainOrigin = 2147483647;
pub type VkTessellationDomainOrigin = ::std::os::raw::c_uint;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 0;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR:
    VkSamplerYcbcrModelConversion = 1;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR:
    VkSamplerYcbcrModelConversion = 2;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR:
    VkSamplerYcbcrModelConversion = 3;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR:
    VkSamplerYcbcrModelConversion = 4;
pub const VkSamplerYcbcrModelConversion_VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM:
    VkSamplerYcbcrModelConversion = 2147483647;
pub type VkSamplerYcbcrModelConversion = ::std::os::raw::c_uint;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: VkSamplerYcbcrRange = 0;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: VkSamplerYcbcrRange = 1;
pub const VkSamplerYcbcrRange_VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: VkSamplerYcbcrRange = 2147483647;
pub type VkSamplerYcbcrRange = ::std::os::raw::c_uint;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_COSITED_EVEN_KHR: VkChromaLocation = 0;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MIDPOINT_KHR: VkChromaLocation = 1;
pub const VkChromaLocation_VK_CHROMA_LOCATION_MAX_ENUM: VkChromaLocation = 2147483647;
pub type VkChromaLocation = ::std::os::raw::c_uint;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS:
    VkDescriptorUpdateTemplateType = 1;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR:
    VkDescriptorUpdateTemplateType = 1;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR:
    VkDescriptorUpdateTemplateType = 0;
pub const VkDescriptorUpdateTemplateType_VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM:
    VkDescriptorUpdateTemplateType = 2147483647;
pub type VkDescriptorUpdateTemplateType = ::std::os::raw::c_uint;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_BASIC_BIT: VkSubgroupFeatureFlagBits = 1;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_VOTE_BIT: VkSubgroupFeatureFlagBits = 2;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: VkSubgroupFeatureFlagBits =
    4;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_BALLOT_BIT: VkSubgroupFeatureFlagBits = 8;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_SHUFFLE_BIT: VkSubgroupFeatureFlagBits = 16;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT:
    VkSubgroupFeatureFlagBits = 32;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_CLUSTERED_BIT: VkSubgroupFeatureFlagBits =
    64;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_QUAD_BIT: VkSubgroupFeatureFlagBits = 128;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_BIT: VkSubgroupFeatureFlagBits = 512;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT:
    VkSubgroupFeatureFlagBits = 1024;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV:
    VkSubgroupFeatureFlagBits = 256;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_BIT_KHR: VkSubgroupFeatureFlagBits =
    512;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_ROTATE_CLUSTERED_BIT_KHR:
    VkSubgroupFeatureFlagBits = 1024;
pub const VkSubgroupFeatureFlagBits_VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM:
    VkSubgroupFeatureFlagBits = 2147483647;
pub type VkSubgroupFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkSubgroupFeatureFlags = VkFlags;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT:
    VkPeerMemoryFeatureFlagBits = 1;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_DST_BIT:
    VkPeerMemoryFeatureFlagBits = 2;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT:
    VkPeerMemoryFeatureFlagBits = 4;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT:
    VkPeerMemoryFeatureFlagBits = 8;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 1;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 2;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 4;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR:
    VkPeerMemoryFeatureFlagBits = 8;
pub const VkPeerMemoryFeatureFlagBits_VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM:
    VkPeerMemoryFeatureFlagBits = 2147483647;
pub type VkPeerMemoryFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkPeerMemoryFeatureFlags = VkFlags;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: VkMemoryAllocateFlagBits = 1;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: VkMemoryAllocateFlagBits =
    2;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT:
    VkMemoryAllocateFlagBits = 4;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR:
    VkMemoryAllocateFlagBits = 1;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR:
    VkMemoryAllocateFlagBits = 2;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR:
    VkMemoryAllocateFlagBits = 4;
pub const VkMemoryAllocateFlagBits_VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: VkMemoryAllocateFlagBits =
    2147483647;
pub type VkMemoryAllocateFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryAllocateFlags = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalMemoryHandleTypeFlagBits = 1;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT:
    VkExternalMemoryHandleTypeFlagBits = 2;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
    VkExternalMemoryHandleTypeFlagBits = 4;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT:
    VkExternalMemoryHandleTypeFlagBits = 8;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT : VkExternalMemoryHandleTypeFlagBits = 16 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT:
    VkExternalMemoryHandleTypeFlagBits = 32;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT:
    VkExternalMemoryHandleTypeFlagBits = 64;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 512;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID : VkExternalMemoryHandleTypeFlagBits = 1024 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT : VkExternalMemoryHandleTypeFlagBits = 128 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT : VkExternalMemoryHandleTypeFlagBits = 256 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA : VkExternalMemoryHandleTypeFlagBits = 2048 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV:
    VkExternalMemoryHandleTypeFlagBits = 4096;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX : VkExternalMemoryHandleTypeFlagBits = 16384 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLBUFFER_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 65536;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLTEXTURE_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 131072;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_MTLHEAP_BIT_EXT:
    VkExternalMemoryHandleTypeFlagBits = 262144;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 1;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 2;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 4 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 8 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 16 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR:
    VkExternalMemoryHandleTypeFlagBits = 32;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR : VkExternalMemoryHandleTypeFlagBits = 64 ;
pub const VkExternalMemoryHandleTypeFlagBits_VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM:
    VkExternalMemoryHandleTypeFlagBits = 2147483647;
pub type VkExternalMemoryHandleTypeFlagBits = ::std::os::raw::c_uint;
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT:
    VkExternalMemoryFeatureFlagBits = 1;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT:
    VkExternalMemoryFeatureFlagBits = 2;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT:
    VkExternalMemoryFeatureFlagBits = 4;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 1;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 2;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalMemoryFeatureFlagBits = 4;
pub const VkExternalMemoryFeatureFlagBits_VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalMemoryFeatureFlagBits = 2147483647;
pub type VkExternalMemoryFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkExternalMemoryFeatureFlags = VkFlags;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalFenceHandleTypeFlagBits = 1;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT:
    VkExternalFenceHandleTypeFlagBits = 2;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT:
    VkExternalFenceHandleTypeFlagBits = 4;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT:
    VkExternalFenceHandleTypeFlagBits = 8;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 1;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 2;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalFenceHandleTypeFlagBits = 4 ;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR:
    VkExternalFenceHandleTypeFlagBits = 8;
pub const VkExternalFenceHandleTypeFlagBits_VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM:
    VkExternalFenceHandleTypeFlagBits = 2147483647;
pub type VkExternalFenceHandleTypeFlagBits = ::std::os::raw::c_uint;
pub type VkExternalFenceHandleTypeFlags = VkFlags;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT:
    VkExternalFenceFeatureFlagBits = 1;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT:
    VkExternalFenceFeatureFlagBits = 2;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalFenceFeatureFlagBits = 1;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalFenceFeatureFlagBits = 2;
pub const VkExternalFenceFeatureFlagBits_VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalFenceFeatureFlagBits = 2147483647;
pub type VkExternalFenceFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkExternalFenceFeatureFlags = VkFlags;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_TEMPORARY_BIT: VkFenceImportFlagBits = 1;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: VkFenceImportFlagBits = 1;
pub const VkFenceImportFlagBits_VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: VkFenceImportFlagBits =
    2147483647;
pub type VkFenceImportFlagBits = ::std::os::raw::c_uint;
pub type VkFenceImportFlags = VkFlags;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: VkSemaphoreImportFlagBits =
    1;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR:
    VkSemaphoreImportFlagBits = 1;
pub const VkSemaphoreImportFlagBits_VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM:
    VkSemaphoreImportFlagBits = 2147483647;
pub type VkSemaphoreImportFlagBits = ::std::os::raw::c_uint;
pub type VkSemaphoreImportFlags = VkFlags;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT:
    VkExternalSemaphoreHandleTypeFlagBits = 1;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT : VkExternalSemaphoreHandleTypeFlagBits = 2 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT : VkExternalSemaphoreHandleTypeFlagBits = 4 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT:
    VkExternalSemaphoreHandleTypeFlagBits = 16;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA : VkExternalSemaphoreHandleTypeFlagBits = 128 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 1 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 2 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 4 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 8 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR : VkExternalSemaphoreHandleTypeFlagBits = 16 ;
pub const VkExternalSemaphoreHandleTypeFlagBits_VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM : VkExternalSemaphoreHandleTypeFlagBits = 2147483647 ;
pub type VkExternalSemaphoreHandleTypeFlagBits = ::std::os::raw::c_uint;
pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT:
    VkExternalSemaphoreFeatureFlagBits = 1;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT:
    VkExternalSemaphoreFeatureFlagBits = 2;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR:
    VkExternalSemaphoreFeatureFlagBits = 1;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR:
    VkExternalSemaphoreFeatureFlagBits = 2;
pub const VkExternalSemaphoreFeatureFlagBits_VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM:
    VkExternalSemaphoreFeatureFlagBits = 2147483647;
pub type VkExternalSemaphoreFeatureFlagBits = ::std::os::raw::c_uint;
pub type VkExternalSemaphoreFeatureFlags = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subgroupSize: u32,
    pub supportedStages: VkShaderStageFlags,
    pub supportedOperations: VkSubgroupFeatureFlags,
    pub quadOperationsInAllStages: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubgroupProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceSubgroupProperties>() - 32usize];
    ["Alignment of VkPhysicalDeviceSubgroupProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceSubgroupProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::subgroupSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, subgroupSize) - 16usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::supportedStages"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, supportedStages) - 20usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::supportedOperations"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupProperties, supportedOperations) - 24usize];
    ["Offset of field: VkPhysicalDeviceSubgroupProperties::quadOperationsInAllStages"][::std::mem::offset_of!(
        VkPhysicalDeviceSubgroupProperties,
        quadOperationsInAllStages
    ) - 28usize];
};
impl Default for VkPhysicalDeviceSubgroupProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindBufferMemoryInfo"][::std::mem::size_of::<VkBindBufferMemoryInfo>() - 40usize];
    ["Alignment of VkBindBufferMemoryInfo"]
        [::std::mem::align_of::<VkBindBufferMemoryInfo>() - 8usize];
    ["Offset of field: VkBindBufferMemoryInfo::sType"]
        [::std::mem::offset_of!(VkBindBufferMemoryInfo, sType) - 0usize];
    ["Offset of field: VkBindBufferMemoryInfo::pNext"]
        [::std::mem::offset_of!(VkBindBufferMemoryInfo, pNext) - 8usize];
    ["Offset of field: VkBindBufferMemoryInfo::buffer"]
        [::std::mem::offset_of!(VkBindBufferMemoryInfo, buffer) - 16usize];
    ["Offset of field: VkBindBufferMemoryInfo::memory"]
        [::std::mem::offset_of!(VkBindBufferMemoryInfo, memory) - 24usize];
    ["Offset of field: VkBindBufferMemoryInfo::memoryOffset"]
        [::std::mem::offset_of!(VkBindBufferMemoryInfo, memoryOffset) - 32usize];
};
impl Default for VkBindBufferMemoryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImageMemoryInfo"][::std::mem::size_of::<VkBindImageMemoryInfo>() - 40usize];
    ["Alignment of VkBindImageMemoryInfo"]
        [::std::mem::align_of::<VkBindImageMemoryInfo>() - 8usize];
    ["Offset of field: VkBindImageMemoryInfo::sType"]
        [::std::mem::offset_of!(VkBindImageMemoryInfo, sType) - 0usize];
    ["Offset of field: VkBindImageMemoryInfo::pNext"]
        [::std::mem::offset_of!(VkBindImageMemoryInfo, pNext) - 8usize];
    ["Offset of field: VkBindImageMemoryInfo::image"]
        [::std::mem::offset_of!(VkBindImageMemoryInfo, image) - 16usize];
    ["Offset of field: VkBindImageMemoryInfo::memory"]
        [::std::mem::offset_of!(VkBindImageMemoryInfo, memory) - 24usize];
    ["Offset of field: VkBindImageMemoryInfo::memoryOffset"]
        [::std::mem::offset_of!(VkBindImageMemoryInfo, memoryOffset) - 32usize];
};
impl Default for VkBindImageMemoryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice16BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevice16BitStorageFeatures"]
        [::std::mem::size_of::<VkPhysicalDevice16BitStorageFeatures>() - 32usize];
    ["Alignment of VkPhysicalDevice16BitStorageFeatures"]
        [::std::mem::align_of::<VkPhysicalDevice16BitStorageFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDevice16BitStorageFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevice16BitStorageFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::storageBuffer16BitAccess"][::std::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        storageBuffer16BitAccess
    )
        - 16usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::uniformAndStorageBuffer16BitAccess"][::std::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        uniformAndStorageBuffer16BitAccess
    )
        - 20usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::storagePushConstant16"][::std::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        storagePushConstant16
    ) - 24usize];
    ["Offset of field: VkPhysicalDevice16BitStorageFeatures::storageInputOutput16"][::std::mem::offset_of!(
        VkPhysicalDevice16BitStorageFeatures,
        storageInputOutput16
    ) - 28usize];
};
impl Default for VkPhysicalDevice16BitStorageFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedRequirements {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub prefersDedicatedAllocation: VkBool32,
    pub requiresDedicatedAllocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryDedicatedRequirements"]
        [::std::mem::size_of::<VkMemoryDedicatedRequirements>() - 24usize];
    ["Alignment of VkMemoryDedicatedRequirements"]
        [::std::mem::align_of::<VkMemoryDedicatedRequirements>() - 8usize];
    ["Offset of field: VkMemoryDedicatedRequirements::sType"]
        [::std::mem::offset_of!(VkMemoryDedicatedRequirements, sType) - 0usize];
    ["Offset of field: VkMemoryDedicatedRequirements::pNext"]
        [::std::mem::offset_of!(VkMemoryDedicatedRequirements, pNext) - 8usize];
    ["Offset of field: VkMemoryDedicatedRequirements::prefersDedicatedAllocation"][::std::mem::offset_of!(
        VkMemoryDedicatedRequirements,
        prefersDedicatedAllocation
    ) - 16usize];
    ["Offset of field: VkMemoryDedicatedRequirements::requiresDedicatedAllocation"][::std::mem::offset_of!(
        VkMemoryDedicatedRequirements,
        requiresDedicatedAllocation
    ) - 20usize];
};
impl Default for VkMemoryDedicatedRequirements {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryDedicatedAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryDedicatedAllocateInfo"]
        [::std::mem::size_of::<VkMemoryDedicatedAllocateInfo>() - 32usize];
    ["Alignment of VkMemoryDedicatedAllocateInfo"]
        [::std::mem::align_of::<VkMemoryDedicatedAllocateInfo>() - 8usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::sType"]
        [::std::mem::offset_of!(VkMemoryDedicatedAllocateInfo, sType) - 0usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::pNext"]
        [::std::mem::offset_of!(VkMemoryDedicatedAllocateInfo, pNext) - 8usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::image"]
        [::std::mem::offset_of!(VkMemoryDedicatedAllocateInfo, image) - 16usize];
    ["Offset of field: VkMemoryDedicatedAllocateInfo::buffer"]
        [::std::mem::offset_of!(VkMemoryDedicatedAllocateInfo, buffer) - 24usize];
};
impl Default for VkMemoryDedicatedAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryAllocateFlagsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkMemoryAllocateFlags,
    pub deviceMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryAllocateFlagsInfo"]
        [::std::mem::size_of::<VkMemoryAllocateFlagsInfo>() - 24usize];
    ["Alignment of VkMemoryAllocateFlagsInfo"]
        [::std::mem::align_of::<VkMemoryAllocateFlagsInfo>() - 8usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::sType"]
        [::std::mem::offset_of!(VkMemoryAllocateFlagsInfo, sType) - 0usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::pNext"]
        [::std::mem::offset_of!(VkMemoryAllocateFlagsInfo, pNext) - 8usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::flags"]
        [::std::mem::offset_of!(VkMemoryAllocateFlagsInfo, flags) - 16usize];
    ["Offset of field: VkMemoryAllocateFlagsInfo::deviceMask"]
        [::std::mem::offset_of!(VkMemoryAllocateFlagsInfo, deviceMask) - 20usize];
};
impl Default for VkMemoryAllocateFlagsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupRenderPassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceMask: u32,
    pub deviceRenderAreaCount: u32,
    pub pDeviceRenderAreas: *const VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupRenderPassBeginInfo"]
        [::std::mem::size_of::<VkDeviceGroupRenderPassBeginInfo>() - 32usize];
    ["Alignment of VkDeviceGroupRenderPassBeginInfo"]
        [::std::mem::align_of::<VkDeviceGroupRenderPassBeginInfo>() - 8usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::sType"]
        [::std::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::deviceMask"]
        [::std::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, deviceMask) - 16usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::deviceRenderAreaCount"]
        [::std::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, deviceRenderAreaCount) - 20usize];
    ["Offset of field: VkDeviceGroupRenderPassBeginInfo::pDeviceRenderAreas"]
        [::std::mem::offset_of!(VkDeviceGroupRenderPassBeginInfo, pDeviceRenderAreas) - 24usize];
};
impl Default for VkDeviceGroupRenderPassBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupCommandBufferBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupCommandBufferBeginInfo"]
        [::std::mem::size_of::<VkDeviceGroupCommandBufferBeginInfo>() - 24usize];
    ["Alignment of VkDeviceGroupCommandBufferBeginInfo"]
        [::std::mem::align_of::<VkDeviceGroupCommandBufferBeginInfo>() - 8usize];
    ["Offset of field: VkDeviceGroupCommandBufferBeginInfo::sType"]
        [::std::mem::offset_of!(VkDeviceGroupCommandBufferBeginInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupCommandBufferBeginInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupCommandBufferBeginInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupCommandBufferBeginInfo::deviceMask"]
        [::std::mem::offset_of!(VkDeviceGroupCommandBufferBeginInfo, deviceMask) - 16usize];
};
impl Default for VkDeviceGroupCommandBufferBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphoreDeviceIndices: *const u32,
    pub commandBufferCount: u32,
    pub pCommandBufferDeviceMasks: *const u32,
    pub signalSemaphoreCount: u32,
    pub pSignalSemaphoreDeviceIndices: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupSubmitInfo"][::std::mem::size_of::<VkDeviceGroupSubmitInfo>() - 64usize];
    ["Alignment of VkDeviceGroupSubmitInfo"]
        [::std::mem::align_of::<VkDeviceGroupSubmitInfo>() - 8usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::sType"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::waitSemaphoreCount"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, waitSemaphoreCount) - 16usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pWaitSemaphoreDeviceIndices"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, pWaitSemaphoreDeviceIndices) - 24usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::commandBufferCount"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, commandBufferCount) - 32usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pCommandBufferDeviceMasks"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, pCommandBufferDeviceMasks) - 40usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::signalSemaphoreCount"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, signalSemaphoreCount) - 48usize];
    ["Offset of field: VkDeviceGroupSubmitInfo::pSignalSemaphoreDeviceIndices"]
        [::std::mem::offset_of!(VkDeviceGroupSubmitInfo, pSignalSemaphoreDeviceIndices) - 56usize];
};
impl Default for VkDeviceGroupSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupBindSparseInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub resourceDeviceIndex: u32,
    pub memoryDeviceIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupBindSparseInfo"]
        [::std::mem::size_of::<VkDeviceGroupBindSparseInfo>() - 24usize];
    ["Alignment of VkDeviceGroupBindSparseInfo"]
        [::std::mem::align_of::<VkDeviceGroupBindSparseInfo>() - 8usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::sType"]
        [::std::mem::offset_of!(VkDeviceGroupBindSparseInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupBindSparseInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::resourceDeviceIndex"]
        [::std::mem::offset_of!(VkDeviceGroupBindSparseInfo, resourceDeviceIndex) - 16usize];
    ["Offset of field: VkDeviceGroupBindSparseInfo::memoryDeviceIndex"]
        [::std::mem::offset_of!(VkDeviceGroupBindSparseInfo, memoryDeviceIndex) - 20usize];
};
impl Default for VkDeviceGroupBindSparseInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindBufferMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindBufferMemoryDeviceGroupInfo"]
        [::std::mem::size_of::<VkBindBufferMemoryDeviceGroupInfo>() - 32usize];
    ["Alignment of VkBindBufferMemoryDeviceGroupInfo"]
        [::std::mem::align_of::<VkBindBufferMemoryDeviceGroupInfo>() - 8usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::sType"]
        [::std::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, sType) - 0usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::pNext"]
        [::std::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, pNext) - 8usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::deviceIndexCount"]
        [::std::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, deviceIndexCount) - 16usize];
    ["Offset of field: VkBindBufferMemoryDeviceGroupInfo::pDeviceIndices"]
        [::std::mem::offset_of!(VkBindBufferMemoryDeviceGroupInfo, pDeviceIndices) - 24usize];
};
impl Default for VkBindBufferMemoryDeviceGroupInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemoryDeviceGroupInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
    pub splitInstanceBindRegionCount: u32,
    pub pSplitInstanceBindRegions: *const VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImageMemoryDeviceGroupInfo"]
        [::std::mem::size_of::<VkBindImageMemoryDeviceGroupInfo>() - 48usize];
    ["Alignment of VkBindImageMemoryDeviceGroupInfo"]
        [::std::mem::align_of::<VkBindImageMemoryDeviceGroupInfo>() - 8usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::sType"]
        [::std::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, sType) - 0usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::pNext"]
        [::std::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, pNext) - 8usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::deviceIndexCount"]
        [::std::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, deviceIndexCount) - 16usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::pDeviceIndices"]
        [::std::mem::offset_of!(VkBindImageMemoryDeviceGroupInfo, pDeviceIndices) - 24usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::splitInstanceBindRegionCount"][::std::mem::offset_of!(
        VkBindImageMemoryDeviceGroupInfo,
        splitInstanceBindRegionCount
    )
        - 32usize];
    ["Offset of field: VkBindImageMemoryDeviceGroupInfo::pSplitInstanceBindRegions"][::std::mem::offset_of!(
        VkBindImageMemoryDeviceGroupInfo,
        pSplitInstanceBindRegions
    ) - 40usize];
};
impl Default for VkBindImageMemoryDeviceGroupInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGroupProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub physicalDeviceCount: u32,
    pub physicalDevices: [VkPhysicalDevice; 32usize],
    pub subsetAllocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGroupProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceGroupProperties>() - 288usize];
    ["Alignment of VkPhysicalDeviceGroupProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceGroupProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceGroupProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceGroupProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::physicalDeviceCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceGroupProperties, physicalDeviceCount) - 16usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::physicalDevices"]
        [::std::mem::offset_of!(VkPhysicalDeviceGroupProperties, physicalDevices) - 24usize];
    ["Offset of field: VkPhysicalDeviceGroupProperties::subsetAllocation"]
        [::std::mem::offset_of!(VkPhysicalDeviceGroupProperties, subsetAllocation) - 280usize];
};
impl Default for VkPhysicalDeviceGroupProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupDeviceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub physicalDeviceCount: u32,
    pub pPhysicalDevices: *const VkPhysicalDevice,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupDeviceCreateInfo"]
        [::std::mem::size_of::<VkDeviceGroupDeviceCreateInfo>() - 32usize];
    ["Alignment of VkDeviceGroupDeviceCreateInfo"]
        [::std::mem::align_of::<VkDeviceGroupDeviceCreateInfo>() - 8usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::sType"]
        [::std::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::physicalDeviceCount"]
        [::std::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, physicalDeviceCount) - 16usize];
    ["Offset of field: VkDeviceGroupDeviceCreateInfo::pPhysicalDevices"]
        [::std::mem::offset_of!(VkDeviceGroupDeviceCreateInfo, pPhysicalDevices) - 24usize];
};
impl Default for VkDeviceGroupDeviceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferMemoryRequirementsInfo2"]
        [::std::mem::size_of::<VkBufferMemoryRequirementsInfo2>() - 24usize];
    ["Alignment of VkBufferMemoryRequirementsInfo2"]
        [::std::mem::align_of::<VkBufferMemoryRequirementsInfo2>() - 8usize];
    ["Offset of field: VkBufferMemoryRequirementsInfo2::sType"]
        [::std::mem::offset_of!(VkBufferMemoryRequirementsInfo2, sType) - 0usize];
    ["Offset of field: VkBufferMemoryRequirementsInfo2::pNext"]
        [::std::mem::offset_of!(VkBufferMemoryRequirementsInfo2, pNext) - 8usize];
    ["Offset of field: VkBufferMemoryRequirementsInfo2::buffer"]
        [::std::mem::offset_of!(VkBufferMemoryRequirementsInfo2, buffer) - 16usize];
};
impl Default for VkBufferMemoryRequirementsInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageMemoryRequirementsInfo2"]
        [::std::mem::size_of::<VkImageMemoryRequirementsInfo2>() - 24usize];
    ["Alignment of VkImageMemoryRequirementsInfo2"]
        [::std::mem::align_of::<VkImageMemoryRequirementsInfo2>() - 8usize];
    ["Offset of field: VkImageMemoryRequirementsInfo2::sType"]
        [::std::mem::offset_of!(VkImageMemoryRequirementsInfo2, sType) - 0usize];
    ["Offset of field: VkImageMemoryRequirementsInfo2::pNext"]
        [::std::mem::offset_of!(VkImageMemoryRequirementsInfo2, pNext) - 8usize];
    ["Offset of field: VkImageMemoryRequirementsInfo2::image"]
        [::std::mem::offset_of!(VkImageMemoryRequirementsInfo2, image) - 16usize];
};
impl Default for VkImageMemoryRequirementsInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSparseMemoryRequirementsInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSparseMemoryRequirementsInfo2"]
        [::std::mem::size_of::<VkImageSparseMemoryRequirementsInfo2>() - 24usize];
    ["Alignment of VkImageSparseMemoryRequirementsInfo2"]
        [::std::mem::align_of::<VkImageSparseMemoryRequirementsInfo2>() - 8usize];
    ["Offset of field: VkImageSparseMemoryRequirementsInfo2::sType"]
        [::std::mem::offset_of!(VkImageSparseMemoryRequirementsInfo2, sType) - 0usize];
    ["Offset of field: VkImageSparseMemoryRequirementsInfo2::pNext"]
        [::std::mem::offset_of!(VkImageSparseMemoryRequirementsInfo2, pNext) - 8usize];
    ["Offset of field: VkImageSparseMemoryRequirementsInfo2::image"]
        [::std::mem::offset_of!(VkImageSparseMemoryRequirementsInfo2, image) - 16usize];
};
impl Default for VkImageSparseMemoryRequirementsInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryRequirements: VkMemoryRequirements,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryRequirements2"][::std::mem::size_of::<VkMemoryRequirements2>() - 40usize];
    ["Alignment of VkMemoryRequirements2"]
        [::std::mem::align_of::<VkMemoryRequirements2>() - 8usize];
    ["Offset of field: VkMemoryRequirements2::sType"]
        [::std::mem::offset_of!(VkMemoryRequirements2, sType) - 0usize];
    ["Offset of field: VkMemoryRequirements2::pNext"]
        [::std::mem::offset_of!(VkMemoryRequirements2, pNext) - 8usize];
    ["Offset of field: VkMemoryRequirements2::memoryRequirements"]
        [::std::mem::offset_of!(VkMemoryRequirements2, memoryRequirements) - 16usize];
};
impl Default for VkMemoryRequirements2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageMemoryRequirements2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryRequirements: VkSparseImageMemoryRequirements,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageMemoryRequirements2"]
        [::std::mem::size_of::<VkSparseImageMemoryRequirements2>() - 64usize];
    ["Alignment of VkSparseImageMemoryRequirements2"]
        [::std::mem::align_of::<VkSparseImageMemoryRequirements2>() - 8usize];
    ["Offset of field: VkSparseImageMemoryRequirements2::sType"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements2, sType) - 0usize];
    ["Offset of field: VkSparseImageMemoryRequirements2::pNext"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements2, pNext) - 8usize];
    ["Offset of field: VkSparseImageMemoryRequirements2::memoryRequirements"]
        [::std::mem::offset_of!(VkSparseImageMemoryRequirements2, memoryRequirements) - 16usize];
};
impl Default for VkSparseImageMemoryRequirements2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFeatures2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub features: VkPhysicalDeviceFeatures,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFeatures2"]
        [::std::mem::size_of::<VkPhysicalDeviceFeatures2>() - 240usize];
    ["Alignment of VkPhysicalDeviceFeatures2"]
        [::std::mem::align_of::<VkPhysicalDeviceFeatures2>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFeatures2::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFeatures2::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures2, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFeatures2::features"]
        [::std::mem::offset_of!(VkPhysicalDeviceFeatures2, features) - 16usize];
};
impl Default for VkPhysicalDeviceFeatures2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub properties: VkPhysicalDeviceProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProperties2"]
        [::std::mem::size_of::<VkPhysicalDeviceProperties2>() - 840usize];
    ["Alignment of VkPhysicalDeviceProperties2"]
        [::std::mem::align_of::<VkPhysicalDeviceProperties2>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProperties2::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProperties2::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties2, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceProperties2::properties"]
        [::std::mem::offset_of!(VkPhysicalDeviceProperties2, properties) - 16usize];
};
impl Default for VkPhysicalDeviceProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub formatProperties: VkFormatProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFormatProperties2"][::std::mem::size_of::<VkFormatProperties2>() - 32usize];
    ["Alignment of VkFormatProperties2"][::std::mem::align_of::<VkFormatProperties2>() - 8usize];
    ["Offset of field: VkFormatProperties2::sType"]
        [::std::mem::offset_of!(VkFormatProperties2, sType) - 0usize];
    ["Offset of field: VkFormatProperties2::pNext"]
        [::std::mem::offset_of!(VkFormatProperties2, pNext) - 8usize];
    ["Offset of field: VkFormatProperties2::formatProperties"]
        [::std::mem::offset_of!(VkFormatProperties2, formatProperties) - 16usize];
};
impl Default for VkFormatProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageFormatProperties: VkImageFormatProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageFormatProperties2"]
        [::std::mem::size_of::<VkImageFormatProperties2>() - 48usize];
    ["Alignment of VkImageFormatProperties2"]
        [::std::mem::align_of::<VkImageFormatProperties2>() - 8usize];
    ["Offset of field: VkImageFormatProperties2::sType"]
        [::std::mem::offset_of!(VkImageFormatProperties2, sType) - 0usize];
    ["Offset of field: VkImageFormatProperties2::pNext"]
        [::std::mem::offset_of!(VkImageFormatProperties2, pNext) - 8usize];
    ["Offset of field: VkImageFormatProperties2::imageFormatProperties"]
        [::std::mem::offset_of!(VkImageFormatProperties2, imageFormatProperties) - 16usize];
};
impl Default for VkImageFormatProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub tiling: VkImageTiling,
    pub usage: VkImageUsageFlags,
    pub flags: VkImageCreateFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageFormatInfo2"]
        [::std::mem::size_of::<VkPhysicalDeviceImageFormatInfo2>() - 40usize];
    ["Alignment of VkPhysicalDeviceImageFormatInfo2"]
        [::std::mem::align_of::<VkPhysicalDeviceImageFormatInfo2>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::format"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, format) - 16usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::type_"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, type_) - 20usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::tiling"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, tiling) - 24usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::usage"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, usage) - 28usize];
    ["Offset of field: VkPhysicalDeviceImageFormatInfo2::flags"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageFormatInfo2, flags) - 32usize];
};
impl Default for VkPhysicalDeviceImageFormatInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub queueFamilyProperties: VkQueueFamilyProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyProperties2"]
        [::std::mem::size_of::<VkQueueFamilyProperties2>() - 40usize];
    ["Alignment of VkQueueFamilyProperties2"]
        [::std::mem::align_of::<VkQueueFamilyProperties2>() - 8usize];
    ["Offset of field: VkQueueFamilyProperties2::sType"]
        [::std::mem::offset_of!(VkQueueFamilyProperties2, sType) - 0usize];
    ["Offset of field: VkQueueFamilyProperties2::pNext"]
        [::std::mem::offset_of!(VkQueueFamilyProperties2, pNext) - 8usize];
    ["Offset of field: VkQueueFamilyProperties2::queueFamilyProperties"]
        [::std::mem::offset_of!(VkQueueFamilyProperties2, queueFamilyProperties) - 16usize];
};
impl Default for VkQueueFamilyProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryProperties: VkPhysicalDeviceMemoryProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryProperties2"]
        [::std::mem::size_of::<VkPhysicalDeviceMemoryProperties2>() - 536usize];
    ["Alignment of VkPhysicalDeviceMemoryProperties2"]
        [::std::mem::align_of::<VkPhysicalDeviceMemoryProperties2>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties2::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryProperties2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties2::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryProperties2, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryProperties2::memoryProperties"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryProperties2, memoryProperties) - 16usize];
};
impl Default for VkPhysicalDeviceMemoryProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSparseImageFormatProperties2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub properties: VkSparseImageFormatProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSparseImageFormatProperties2"]
        [::std::mem::size_of::<VkSparseImageFormatProperties2>() - 40usize];
    ["Alignment of VkSparseImageFormatProperties2"]
        [::std::mem::align_of::<VkSparseImageFormatProperties2>() - 8usize];
    ["Offset of field: VkSparseImageFormatProperties2::sType"]
        [::std::mem::offset_of!(VkSparseImageFormatProperties2, sType) - 0usize];
    ["Offset of field: VkSparseImageFormatProperties2::pNext"]
        [::std::mem::offset_of!(VkSparseImageFormatProperties2, pNext) - 8usize];
    ["Offset of field: VkSparseImageFormatProperties2::properties"]
        [::std::mem::offset_of!(VkSparseImageFormatProperties2, properties) - 16usize];
};
impl Default for VkSparseImageFormatProperties2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub type_: VkImageType,
    pub samples: VkSampleCountFlagBits,
    pub usage: VkImageUsageFlags,
    pub tiling: VkImageTiling,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSparseImageFormatInfo2"]
        [::std::mem::size_of::<VkPhysicalDeviceSparseImageFormatInfo2>() - 40usize];
    ["Alignment of VkPhysicalDeviceSparseImageFormatInfo2"]
        [::std::mem::align_of::<VkPhysicalDeviceSparseImageFormatInfo2>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::format"]
        [::std::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, format) - 16usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::type_"]
        [::std::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, type_) - 20usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::samples"]
        [::std::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, samples) - 24usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::usage"]
        [::std::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, usage) - 28usize];
    ["Offset of field: VkPhysicalDeviceSparseImageFormatInfo2::tiling"]
        [::std::mem::offset_of!(VkPhysicalDeviceSparseImageFormatInfo2, tiling) - 32usize];
};
impl Default for VkPhysicalDeviceSparseImageFormatInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePointClippingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pointClippingBehavior: VkPointClippingBehavior,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePointClippingProperties"]
        [::std::mem::size_of::<VkPhysicalDevicePointClippingProperties>() - 24usize];
    ["Alignment of VkPhysicalDevicePointClippingProperties"]
        [::std::mem::align_of::<VkPhysicalDevicePointClippingProperties>() - 8usize];
    ["Offset of field: VkPhysicalDevicePointClippingProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePointClippingProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePointClippingProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePointClippingProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePointClippingProperties::pointClippingBehavior"][::std::mem::offset_of!(
        VkPhysicalDevicePointClippingProperties,
        pointClippingBehavior
    )
        - 16usize];
};
impl Default for VkPhysicalDevicePointClippingProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkInputAttachmentAspectReference {
    pub subpass: u32,
    pub inputAttachmentIndex: u32,
    pub aspectMask: VkImageAspectFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkInputAttachmentAspectReference"]
        [::std::mem::size_of::<VkInputAttachmentAspectReference>() - 12usize];
    ["Alignment of VkInputAttachmentAspectReference"]
        [::std::mem::align_of::<VkInputAttachmentAspectReference>() - 4usize];
    ["Offset of field: VkInputAttachmentAspectReference::subpass"]
        [::std::mem::offset_of!(VkInputAttachmentAspectReference, subpass) - 0usize];
    ["Offset of field: VkInputAttachmentAspectReference::inputAttachmentIndex"]
        [::std::mem::offset_of!(VkInputAttachmentAspectReference, inputAttachmentIndex) - 4usize];
    ["Offset of field: VkInputAttachmentAspectReference::aspectMask"]
        [::std::mem::offset_of!(VkInputAttachmentAspectReference, aspectMask) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub aspectReferenceCount: u32,
    pub pAspectReferences: *const VkInputAttachmentAspectReference,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassInputAttachmentAspectCreateInfo"]
        [::std::mem::size_of::<VkRenderPassInputAttachmentAspectCreateInfo>() - 32usize];
    ["Alignment of VkRenderPassInputAttachmentAspectCreateInfo"]
        [::std::mem::align_of::<VkRenderPassInputAttachmentAspectCreateInfo>() - 8usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::sType"]
        [::std::mem::offset_of!(VkRenderPassInputAttachmentAspectCreateInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::pNext"]
        [::std::mem::offset_of!(VkRenderPassInputAttachmentAspectCreateInfo, pNext) - 8usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::aspectReferenceCount"][::std::mem::offset_of!(
        VkRenderPassInputAttachmentAspectCreateInfo,
        aspectReferenceCount
    )
        - 16usize];
    ["Offset of field: VkRenderPassInputAttachmentAspectCreateInfo::pAspectReferences"][::std::mem::offset_of!(
        VkRenderPassInputAttachmentAspectCreateInfo,
        pAspectReferences
    )
        - 24usize];
};
impl Default for VkRenderPassInputAttachmentAspectCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub usage: VkImageUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewUsageCreateInfo"]
        [::std::mem::size_of::<VkImageViewUsageCreateInfo>() - 24usize];
    ["Alignment of VkImageViewUsageCreateInfo"]
        [::std::mem::align_of::<VkImageViewUsageCreateInfo>() - 8usize];
    ["Offset of field: VkImageViewUsageCreateInfo::sType"]
        [::std::mem::offset_of!(VkImageViewUsageCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageViewUsageCreateInfo::pNext"]
        [::std::mem::offset_of!(VkImageViewUsageCreateInfo, pNext) - 8usize];
    ["Offset of field: VkImageViewUsageCreateInfo::usage"]
        [::std::mem::offset_of!(VkImageViewUsageCreateInfo, usage) - 16usize];
};
impl Default for VkImageViewUsageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub domainOrigin: VkTessellationDomainOrigin,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineTessellationDomainOriginStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineTessellationDomainOriginStateCreateInfo>() - 24usize];
    ["Alignment of VkPipelineTessellationDomainOriginStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineTessellationDomainOriginStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineTessellationDomainOriginStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineTessellationDomainOriginStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineTessellationDomainOriginStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineTessellationDomainOriginStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineTessellationDomainOriginStateCreateInfo::domainOrigin"][::std::mem::offset_of!(
        VkPipelineTessellationDomainOriginStateCreateInfo,
        domainOrigin
    )
        - 16usize];
};
impl Default for VkPipelineTessellationDomainOriginStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassMultiviewCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub subpassCount: u32,
    pub pViewMasks: *const u32,
    pub dependencyCount: u32,
    pub pViewOffsets: *const i32,
    pub correlationMaskCount: u32,
    pub pCorrelationMasks: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassMultiviewCreateInfo"]
        [::std::mem::size_of::<VkRenderPassMultiviewCreateInfo>() - 64usize];
    ["Alignment of VkRenderPassMultiviewCreateInfo"]
        [::std::mem::align_of::<VkRenderPassMultiviewCreateInfo>() - 8usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::sType"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pNext"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pNext) - 8usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::subpassCount"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, subpassCount) - 16usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pViewMasks"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pViewMasks) - 24usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::dependencyCount"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, dependencyCount) - 32usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pViewOffsets"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pViewOffsets) - 40usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::correlationMaskCount"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, correlationMaskCount) - 48usize];
    ["Offset of field: VkRenderPassMultiviewCreateInfo::pCorrelationMasks"]
        [::std::mem::offset_of!(VkRenderPassMultiviewCreateInfo, pCorrelationMasks) - 56usize];
};
impl Default for VkRenderPassMultiviewCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceMultiviewFeatures>() - 32usize];
    ["Alignment of VkPhysicalDeviceMultiviewFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceMultiviewFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiviewFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiviewFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::multiview"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiviewFeatures, multiview) - 16usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::multiviewGeometryShader"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewFeatures,
        multiviewGeometryShader
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceMultiviewFeatures::multiviewTessellationShader"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewFeatures,
        multiviewTessellationShader
    )
        - 24usize];
};
impl Default for VkPhysicalDeviceMultiviewFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceMultiviewProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceMultiviewProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceMultiviewProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiviewProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiviewProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::maxMultiviewViewCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewProperties,
        maxMultiviewViewCount
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceMultiviewProperties::maxMultiviewInstanceIndex"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewProperties,
        maxMultiviewInstanceIndex
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceMultiviewProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVariablePointersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVariablePointersFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceVariablePointersFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceVariablePointersFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceVariablePointersFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVariablePointersFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVariablePointersFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::variablePointersStorageBuffer"][::std::mem::offset_of!(
        VkPhysicalDeviceVariablePointersFeatures,
        variablePointersStorageBuffer
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceVariablePointersFeatures::variablePointers"][::std::mem::offset_of!(
        VkPhysicalDeviceVariablePointersFeatures,
        variablePointers
    ) - 20usize];
};
impl Default for VkPhysicalDeviceVariablePointersFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub protectedMemory: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProtectedMemoryFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceProtectedMemoryFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceProtectedMemoryFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceProtectedMemoryFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceProtectedMemoryFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceProtectedMemoryFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryFeatures::protectedMemory"][::std::mem::offset_of!(
        VkPhysicalDeviceProtectedMemoryFeatures,
        protectedMemory
    ) - 16usize];
};
impl Default for VkPhysicalDeviceProtectedMemoryFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProtectedMemoryProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub protectedNoFault: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProtectedMemoryProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceProtectedMemoryProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceProtectedMemoryProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceProtectedMemoryProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceProtectedMemoryProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceProtectedMemoryProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceProtectedMemoryProperties::protectedNoFault"][::std::mem::offset_of!(
        VkPhysicalDeviceProtectedMemoryProperties,
        protectedNoFault
    ) - 16usize];
};
impl Default for VkPhysicalDeviceProtectedMemoryProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceQueueCreateFlags,
    pub queueFamilyIndex: u32,
    pub queueIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueInfo2"][::std::mem::size_of::<VkDeviceQueueInfo2>() - 32usize];
    ["Alignment of VkDeviceQueueInfo2"][::std::mem::align_of::<VkDeviceQueueInfo2>() - 8usize];
    ["Offset of field: VkDeviceQueueInfo2::sType"]
        [::std::mem::offset_of!(VkDeviceQueueInfo2, sType) - 0usize];
    ["Offset of field: VkDeviceQueueInfo2::pNext"]
        [::std::mem::offset_of!(VkDeviceQueueInfo2, pNext) - 8usize];
    ["Offset of field: VkDeviceQueueInfo2::flags"]
        [::std::mem::offset_of!(VkDeviceQueueInfo2, flags) - 16usize];
    ["Offset of field: VkDeviceQueueInfo2::queueFamilyIndex"]
        [::std::mem::offset_of!(VkDeviceQueueInfo2, queueFamilyIndex) - 20usize];
    ["Offset of field: VkDeviceQueueInfo2::queueIndex"]
        [::std::mem::offset_of!(VkDeviceQueueInfo2, queueIndex) - 24usize];
};
impl Default for VkDeviceQueueInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkProtectedSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub protectedSubmit: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkProtectedSubmitInfo"][::std::mem::size_of::<VkProtectedSubmitInfo>() - 24usize];
    ["Alignment of VkProtectedSubmitInfo"]
        [::std::mem::align_of::<VkProtectedSubmitInfo>() - 8usize];
    ["Offset of field: VkProtectedSubmitInfo::sType"]
        [::std::mem::offset_of!(VkProtectedSubmitInfo, sType) - 0usize];
    ["Offset of field: VkProtectedSubmitInfo::pNext"]
        [::std::mem::offset_of!(VkProtectedSubmitInfo, pNext) - 8usize];
    ["Offset of field: VkProtectedSubmitInfo::protectedSubmit"]
        [::std::mem::offset_of!(VkProtectedSubmitInfo, protectedSubmit) - 16usize];
};
impl Default for VkProtectedSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
    pub ycbcrModel: VkSamplerYcbcrModelConversion,
    pub ycbcrRange: VkSamplerYcbcrRange,
    pub components: VkComponentMapping,
    pub xChromaOffset: VkChromaLocation,
    pub yChromaOffset: VkChromaLocation,
    pub chromaFilter: VkFilter,
    pub forceExplicitReconstruction: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionCreateInfo"]
        [::std::mem::size_of::<VkSamplerYcbcrConversionCreateInfo>() - 64usize];
    ["Alignment of VkSamplerYcbcrConversionCreateInfo"]
        [::std::mem::align_of::<VkSamplerYcbcrConversionCreateInfo>() - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::sType"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, sType) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::pNext"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, pNext) - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::format"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, format) - 16usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::ycbcrModel"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, ycbcrModel) - 20usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::ycbcrRange"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, ycbcrRange) - 24usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::components"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, components) - 28usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::xChromaOffset"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, xChromaOffset) - 44usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::yChromaOffset"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, yChromaOffset) - 48usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::chromaFilter"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionCreateInfo, chromaFilter) - 52usize];
    ["Offset of field: VkSamplerYcbcrConversionCreateInfo::forceExplicitReconstruction"][::std::mem::offset_of!(
        VkSamplerYcbcrConversionCreateInfo,
        forceExplicitReconstruction
    )
        - 56usize];
};
impl Default for VkSamplerYcbcrConversionCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub conversion: VkSamplerYcbcrConversion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionInfo"]
        [::std::mem::size_of::<VkSamplerYcbcrConversionInfo>() - 24usize];
    ["Alignment of VkSamplerYcbcrConversionInfo"]
        [::std::mem::align_of::<VkSamplerYcbcrConversionInfo>() - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionInfo::sType"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionInfo, sType) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionInfo::pNext"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionInfo, pNext) - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionInfo::conversion"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionInfo, conversion) - 16usize];
};
impl Default for VkSamplerYcbcrConversionInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImagePlaneMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImagePlaneMemoryInfo"]
        [::std::mem::size_of::<VkBindImagePlaneMemoryInfo>() - 24usize];
    ["Alignment of VkBindImagePlaneMemoryInfo"]
        [::std::mem::align_of::<VkBindImagePlaneMemoryInfo>() - 8usize];
    ["Offset of field: VkBindImagePlaneMemoryInfo::sType"]
        [::std::mem::offset_of!(VkBindImagePlaneMemoryInfo, sType) - 0usize];
    ["Offset of field: VkBindImagePlaneMemoryInfo::pNext"]
        [::std::mem::offset_of!(VkBindImagePlaneMemoryInfo, pNext) - 8usize];
    ["Offset of field: VkBindImagePlaneMemoryInfo::planeAspect"]
        [::std::mem::offset_of!(VkBindImagePlaneMemoryInfo, planeAspect) - 16usize];
};
impl Default for VkBindImagePlaneMemoryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImagePlaneMemoryRequirementsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub planeAspect: VkImageAspectFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImagePlaneMemoryRequirementsInfo"]
        [::std::mem::size_of::<VkImagePlaneMemoryRequirementsInfo>() - 24usize];
    ["Alignment of VkImagePlaneMemoryRequirementsInfo"]
        [::std::mem::align_of::<VkImagePlaneMemoryRequirementsInfo>() - 8usize];
    ["Offset of field: VkImagePlaneMemoryRequirementsInfo::sType"]
        [::std::mem::offset_of!(VkImagePlaneMemoryRequirementsInfo, sType) - 0usize];
    ["Offset of field: VkImagePlaneMemoryRequirementsInfo::pNext"]
        [::std::mem::offset_of!(VkImagePlaneMemoryRequirementsInfo, pNext) - 8usize];
    ["Offset of field: VkImagePlaneMemoryRequirementsInfo::planeAspect"]
        [::std::mem::offset_of!(VkImagePlaneMemoryRequirementsInfo, planeAspect) - 16usize];
};
impl Default for VkImagePlaneMemoryRequirementsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub samplerYcbcrConversion: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSamplerYcbcrConversionFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceSamplerYcbcrConversionFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceSamplerYcbcrConversionFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSamplerYcbcrConversionFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSamplerYcbcrConversionFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSamplerYcbcrConversionFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSamplerYcbcrConversionFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSamplerYcbcrConversionFeatures::samplerYcbcrConversion"][::std::mem::offset_of!(
        VkPhysicalDeviceSamplerYcbcrConversionFeatures,
        samplerYcbcrConversion
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceSamplerYcbcrConversionFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub combinedImageSamplerDescriptorCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionImageFormatProperties"]
        [::std::mem::size_of::<VkSamplerYcbcrConversionImageFormatProperties>() - 24usize];
    ["Alignment of VkSamplerYcbcrConversionImageFormatProperties"]
        [::std::mem::align_of::<VkSamplerYcbcrConversionImageFormatProperties>() - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionImageFormatProperties::sType"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionImageFormatProperties, sType) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionImageFormatProperties::pNext"]
        [::std::mem::offset_of!(VkSamplerYcbcrConversionImageFormatProperties, pNext) - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionImageFormatProperties::combinedImageSamplerDescriptorCount"] [:: std :: mem :: offset_of ! (VkSamplerYcbcrConversionImageFormatProperties , combinedImageSamplerDescriptorCount) - 16usize] ;
};
impl Default for VkSamplerYcbcrConversionImageFormatProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateEntry {
    pub dstBinding: u32,
    pub dstArrayElement: u32,
    pub descriptorCount: u32,
    pub descriptorType: VkDescriptorType,
    pub offset: usize,
    pub stride: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorUpdateTemplateEntry"]
        [::std::mem::size_of::<VkDescriptorUpdateTemplateEntry>() - 32usize];
    ["Alignment of VkDescriptorUpdateTemplateEntry"]
        [::std::mem::align_of::<VkDescriptorUpdateTemplateEntry>() - 8usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::dstBinding"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateEntry, dstBinding) - 0usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::dstArrayElement"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateEntry, dstArrayElement) - 4usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::descriptorCount"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateEntry, descriptorCount) - 8usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::descriptorType"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateEntry, descriptorType) - 12usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::offset"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateEntry, offset) - 16usize];
    ["Offset of field: VkDescriptorUpdateTemplateEntry::stride"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateEntry, stride) - 24usize];
};
impl Default for VkDescriptorUpdateTemplateEntry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorUpdateTemplateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDescriptorUpdateTemplateCreateFlags,
    pub descriptorUpdateEntryCount: u32,
    pub pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
    pub templateType: VkDescriptorUpdateTemplateType,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipelineLayout: VkPipelineLayout,
    pub set: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorUpdateTemplateCreateInfo"]
        [::std::mem::size_of::<VkDescriptorUpdateTemplateCreateInfo>() - 72usize];
    ["Alignment of VkDescriptorUpdateTemplateCreateInfo"]
        [::std::mem::align_of::<VkDescriptorUpdateTemplateCreateInfo>() - 8usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::sType"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::flags"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, flags) - 16usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::descriptorUpdateEntryCount"][::std::mem::offset_of!(
        VkDescriptorUpdateTemplateCreateInfo,
        descriptorUpdateEntryCount
    )
        - 20usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pDescriptorUpdateEntries"][::std::mem::offset_of!(
        VkDescriptorUpdateTemplateCreateInfo,
        pDescriptorUpdateEntries
    )
        - 24usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::templateType"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, templateType) - 32usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::descriptorSetLayout"][::std::mem::offset_of!(
        VkDescriptorUpdateTemplateCreateInfo,
        descriptorSetLayout
    ) - 40usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pipelineBindPoint"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, pipelineBindPoint) - 48usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::pipelineLayout"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, pipelineLayout) - 56usize];
    ["Offset of field: VkDescriptorUpdateTemplateCreateInfo::set"]
        [::std::mem::offset_of!(VkDescriptorUpdateTemplateCreateInfo, set) - 64usize];
};
impl Default for VkDescriptorUpdateTemplateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExternalMemoryProperties {
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryProperties"]
        [::std::mem::size_of::<VkExternalMemoryProperties>() - 12usize];
    ["Alignment of VkExternalMemoryProperties"]
        [::std::mem::align_of::<VkExternalMemoryProperties>() - 4usize];
    ["Offset of field: VkExternalMemoryProperties::externalMemoryFeatures"]
        [::std::mem::offset_of!(VkExternalMemoryProperties, externalMemoryFeatures) - 0usize];
    ["Offset of field: VkExternalMemoryProperties::exportFromImportedHandleTypes"][::std::mem::offset_of!(
        VkExternalMemoryProperties,
        exportFromImportedHandleTypes
    ) - 4usize];
    ["Offset of field: VkExternalMemoryProperties::compatibleHandleTypes"]
        [::std::mem::offset_of!(VkExternalMemoryProperties, compatibleHandleTypes) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalImageFormatInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalImageFormatInfo"]
        [::std::mem::size_of::<VkPhysicalDeviceExternalImageFormatInfo>() - 24usize];
    ["Alignment of VkPhysicalDeviceExternalImageFormatInfo"]
        [::std::mem::align_of::<VkPhysicalDeviceExternalImageFormatInfo>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalImageFormatInfo::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalImageFormatInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalImageFormatInfo::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalImageFormatInfo, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalImageFormatInfo::handleType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalImageFormatInfo, handleType) - 16usize];
};
impl Default for VkPhysicalDeviceExternalImageFormatInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalImageFormatProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalImageFormatProperties"]
        [::std::mem::size_of::<VkExternalImageFormatProperties>() - 32usize];
    ["Alignment of VkExternalImageFormatProperties"]
        [::std::mem::align_of::<VkExternalImageFormatProperties>() - 8usize];
    ["Offset of field: VkExternalImageFormatProperties::sType"]
        [::std::mem::offset_of!(VkExternalImageFormatProperties, sType) - 0usize];
    ["Offset of field: VkExternalImageFormatProperties::pNext"]
        [::std::mem::offset_of!(VkExternalImageFormatProperties, pNext) - 8usize];
    ["Offset of field: VkExternalImageFormatProperties::externalMemoryProperties"][::std::mem::offset_of!(
        VkExternalImageFormatProperties,
        externalMemoryProperties
    ) - 16usize];
};
impl Default for VkExternalImageFormatProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalBufferInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkBufferCreateFlags,
    pub usage: VkBufferUsageFlags,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalBufferInfo"]
        [::std::mem::size_of::<VkPhysicalDeviceExternalBufferInfo>() - 32usize];
    ["Alignment of VkPhysicalDeviceExternalBufferInfo"]
        [::std::mem::align_of::<VkPhysicalDeviceExternalBufferInfo>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::flags"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, flags) - 16usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::usage"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, usage) - 20usize];
    ["Offset of field: VkPhysicalDeviceExternalBufferInfo::handleType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalBufferInfo, handleType) - 24usize];
};
impl Default for VkPhysicalDeviceExternalBufferInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalBufferProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryProperties: VkExternalMemoryProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalBufferProperties"]
        [::std::mem::size_of::<VkExternalBufferProperties>() - 32usize];
    ["Alignment of VkExternalBufferProperties"]
        [::std::mem::align_of::<VkExternalBufferProperties>() - 8usize];
    ["Offset of field: VkExternalBufferProperties::sType"]
        [::std::mem::offset_of!(VkExternalBufferProperties, sType) - 0usize];
    ["Offset of field: VkExternalBufferProperties::pNext"]
        [::std::mem::offset_of!(VkExternalBufferProperties, pNext) - 8usize];
    ["Offset of field: VkExternalBufferProperties::externalMemoryProperties"]
        [::std::mem::offset_of!(VkExternalBufferProperties, externalMemoryProperties) - 16usize];
};
impl Default for VkExternalBufferProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIDProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceIDProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceIDProperties>() - 64usize];
    ["Alignment of VkPhysicalDeviceIDProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceIDProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceIDProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceIDProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceUUID"]
        [::std::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceUUID) - 16usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::driverUUID"]
        [::std::mem::offset_of!(VkPhysicalDeviceIDProperties, driverUUID) - 32usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceLUID"]
        [::std::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceLUID) - 48usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceNodeMask"]
        [::std::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceNodeMask) - 56usize];
    ["Offset of field: VkPhysicalDeviceIDProperties::deviceLUIDValid"]
        [::std::mem::offset_of!(VkPhysicalDeviceIDProperties, deviceLUIDValid) - 60usize];
};
impl Default for VkPhysicalDeviceIDProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryImageCreateInfo"]
        [::std::mem::size_of::<VkExternalMemoryImageCreateInfo>() - 24usize];
    ["Alignment of VkExternalMemoryImageCreateInfo"]
        [::std::mem::align_of::<VkExternalMemoryImageCreateInfo>() - 8usize];
    ["Offset of field: VkExternalMemoryImageCreateInfo::sType"]
        [::std::mem::offset_of!(VkExternalMemoryImageCreateInfo, sType) - 0usize];
    ["Offset of field: VkExternalMemoryImageCreateInfo::pNext"]
        [::std::mem::offset_of!(VkExternalMemoryImageCreateInfo, pNext) - 8usize];
    ["Offset of field: VkExternalMemoryImageCreateInfo::handleTypes"]
        [::std::mem::offset_of!(VkExternalMemoryImageCreateInfo, handleTypes) - 16usize];
};
impl Default for VkExternalMemoryImageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryBufferCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryBufferCreateInfo"]
        [::std::mem::size_of::<VkExternalMemoryBufferCreateInfo>() - 24usize];
    ["Alignment of VkExternalMemoryBufferCreateInfo"]
        [::std::mem::align_of::<VkExternalMemoryBufferCreateInfo>() - 8usize];
    ["Offset of field: VkExternalMemoryBufferCreateInfo::sType"]
        [::std::mem::offset_of!(VkExternalMemoryBufferCreateInfo, sType) - 0usize];
    ["Offset of field: VkExternalMemoryBufferCreateInfo::pNext"]
        [::std::mem::offset_of!(VkExternalMemoryBufferCreateInfo, pNext) - 8usize];
    ["Offset of field: VkExternalMemoryBufferCreateInfo::handleTypes"]
        [::std::mem::offset_of!(VkExternalMemoryBufferCreateInfo, handleTypes) - 16usize];
};
impl Default for VkExternalMemoryBufferCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportMemoryAllocateInfo"]
        [::std::mem::size_of::<VkExportMemoryAllocateInfo>() - 24usize];
    ["Alignment of VkExportMemoryAllocateInfo"]
        [::std::mem::align_of::<VkExportMemoryAllocateInfo>() - 8usize];
    ["Offset of field: VkExportMemoryAllocateInfo::sType"]
        [::std::mem::offset_of!(VkExportMemoryAllocateInfo, sType) - 0usize];
    ["Offset of field: VkExportMemoryAllocateInfo::pNext"]
        [::std::mem::offset_of!(VkExportMemoryAllocateInfo, pNext) - 8usize];
    ["Offset of field: VkExportMemoryAllocateInfo::handleTypes"]
        [::std::mem::offset_of!(VkExportMemoryAllocateInfo, handleTypes) - 16usize];
};
impl Default for VkExportMemoryAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalFenceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalFenceInfo"]
        [::std::mem::size_of::<VkPhysicalDeviceExternalFenceInfo>() - 24usize];
    ["Alignment of VkPhysicalDeviceExternalFenceInfo"]
        [::std::mem::align_of::<VkPhysicalDeviceExternalFenceInfo>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalFenceInfo::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalFenceInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalFenceInfo::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalFenceInfo, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalFenceInfo::handleType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalFenceInfo, handleType) - 16usize];
};
impl Default for VkPhysicalDeviceExternalFenceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalFenceProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    pub externalFenceFeatures: VkExternalFenceFeatureFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalFenceProperties"]
        [::std::mem::size_of::<VkExternalFenceProperties>() - 32usize];
    ["Alignment of VkExternalFenceProperties"]
        [::std::mem::align_of::<VkExternalFenceProperties>() - 8usize];
    ["Offset of field: VkExternalFenceProperties::sType"]
        [::std::mem::offset_of!(VkExternalFenceProperties, sType) - 0usize];
    ["Offset of field: VkExternalFenceProperties::pNext"]
        [::std::mem::offset_of!(VkExternalFenceProperties, pNext) - 8usize];
    ["Offset of field: VkExternalFenceProperties::exportFromImportedHandleTypes"][::std::mem::offset_of!(
        VkExternalFenceProperties,
        exportFromImportedHandleTypes
    ) - 16usize];
    ["Offset of field: VkExternalFenceProperties::compatibleHandleTypes"]
        [::std::mem::offset_of!(VkExternalFenceProperties, compatibleHandleTypes) - 20usize];
    ["Offset of field: VkExternalFenceProperties::externalFenceFeatures"]
        [::std::mem::offset_of!(VkExternalFenceProperties, externalFenceFeatures) - 24usize];
};
impl Default for VkExternalFenceProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportFenceCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalFenceHandleTypeFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportFenceCreateInfo"][::std::mem::size_of::<VkExportFenceCreateInfo>() - 24usize];
    ["Alignment of VkExportFenceCreateInfo"]
        [::std::mem::align_of::<VkExportFenceCreateInfo>() - 8usize];
    ["Offset of field: VkExportFenceCreateInfo::sType"]
        [::std::mem::offset_of!(VkExportFenceCreateInfo, sType) - 0usize];
    ["Offset of field: VkExportFenceCreateInfo::pNext"]
        [::std::mem::offset_of!(VkExportFenceCreateInfo, pNext) - 8usize];
    ["Offset of field: VkExportFenceCreateInfo::handleTypes"]
        [::std::mem::offset_of!(VkExportFenceCreateInfo, handleTypes) - 16usize];
};
impl Default for VkExportFenceCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportSemaphoreCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalSemaphoreHandleTypeFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportSemaphoreCreateInfo"]
        [::std::mem::size_of::<VkExportSemaphoreCreateInfo>() - 24usize];
    ["Alignment of VkExportSemaphoreCreateInfo"]
        [::std::mem::align_of::<VkExportSemaphoreCreateInfo>() - 8usize];
    ["Offset of field: VkExportSemaphoreCreateInfo::sType"]
        [::std::mem::offset_of!(VkExportSemaphoreCreateInfo, sType) - 0usize];
    ["Offset of field: VkExportSemaphoreCreateInfo::pNext"]
        [::std::mem::offset_of!(VkExportSemaphoreCreateInfo, pNext) - 8usize];
    ["Offset of field: VkExportSemaphoreCreateInfo::handleTypes"]
        [::std::mem::offset_of!(VkExportSemaphoreCreateInfo, handleTypes) - 16usize];
};
impl Default for VkExportSemaphoreCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalSemaphoreInfo"]
        [::std::mem::size_of::<VkPhysicalDeviceExternalSemaphoreInfo>() - 24usize];
    ["Alignment of VkPhysicalDeviceExternalSemaphoreInfo"]
        [::std::mem::align_of::<VkPhysicalDeviceExternalSemaphoreInfo>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalSemaphoreInfo::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalSemaphoreInfo, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalSemaphoreInfo::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalSemaphoreInfo, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalSemaphoreInfo::handleType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalSemaphoreInfo, handleType) - 16usize];
};
impl Default for VkPhysicalDeviceExternalSemaphoreInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    pub externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalSemaphoreProperties"]
        [::std::mem::size_of::<VkExternalSemaphoreProperties>() - 32usize];
    ["Alignment of VkExternalSemaphoreProperties"]
        [::std::mem::align_of::<VkExternalSemaphoreProperties>() - 8usize];
    ["Offset of field: VkExternalSemaphoreProperties::sType"]
        [::std::mem::offset_of!(VkExternalSemaphoreProperties, sType) - 0usize];
    ["Offset of field: VkExternalSemaphoreProperties::pNext"]
        [::std::mem::offset_of!(VkExternalSemaphoreProperties, pNext) - 8usize];
    ["Offset of field: VkExternalSemaphoreProperties::exportFromImportedHandleTypes"][::std::mem::offset_of!(
        VkExternalSemaphoreProperties,
        exportFromImportedHandleTypes
    ) - 16usize];
    ["Offset of field: VkExternalSemaphoreProperties::compatibleHandleTypes"]
        [::std::mem::offset_of!(VkExternalSemaphoreProperties, compatibleHandleTypes) - 20usize];
    ["Offset of field: VkExternalSemaphoreProperties::externalSemaphoreFeatures"][::std::mem::offset_of!(
        VkExternalSemaphoreProperties,
        externalSemaphoreFeatures
    ) - 24usize];
};
impl Default for VkExternalSemaphoreProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance3Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance3Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance3Properties>() - 32usize];
    ["Alignment of VkPhysicalDeviceMaintenance3Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance3Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance3Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance3Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::maxPerSetDescriptors"][::std::mem::offset_of!(
        VkPhysicalDeviceMaintenance3Properties,
        maxPerSetDescriptors
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceMaintenance3Properties::maxMemoryAllocationSize"][::std::mem::offset_of!(
        VkPhysicalDeviceMaintenance3Properties,
        maxMemoryAllocationSize
    )
        - 24usize];
};
impl Default for VkPhysicalDeviceMaintenance3Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supported: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutSupport"]
        [::std::mem::size_of::<VkDescriptorSetLayoutSupport>() - 24usize];
    ["Alignment of VkDescriptorSetLayoutSupport"]
        [::std::mem::align_of::<VkDescriptorSetLayoutSupport>() - 8usize];
    ["Offset of field: VkDescriptorSetLayoutSupport::sType"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutSupport, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutSupport::pNext"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutSupport, pNext) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutSupport::supported"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutSupport, supported) - 16usize];
};
impl Default for VkDescriptorSetLayoutSupport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderDrawParameters: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderDrawParametersFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderDrawParametersFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderDrawParametersFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderDrawParametersFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderDrawParametersFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderDrawParametersFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderDrawParametersFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderDrawParametersFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderDrawParametersFeatures::shaderDrawParameters"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderDrawParametersFeatures,
        shaderDrawParameters
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceShaderDrawParametersFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub type PFN_vkEnumerateInstanceVersion =
    ::std::option::Option<unsafe extern "system" fn(pApiVersion: *mut u32) -> VkResult>;
pub type PFN_vkBindBufferMemory2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPeerMemoryFeatures = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMask =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, deviceMask: u32)>;
pub type PFN_vkCmdDispatchBase = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkEnumeratePhysicalDeviceGroups = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
pub type PFN_vkGetImageMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFeatures2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
pub type PFN_vkTrimCommandPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
pub type PFN_vkGetDeviceQueue2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pQueueInfo: *const VkDeviceQueueInfo2,
        pQueue: *mut VkQueue,
    ),
>;
pub type PFN_vkCreateSamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversion = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalBufferProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalFenceProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
pub type PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutSupport = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
unsafe extern "system" {
    pub fn vkEnumerateInstanceVersion(pApiVersion: *mut u32) -> VkResult;
}
unsafe extern "system" {
    pub fn vkBindBufferMemory2(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkBindImageMemory2(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDeviceGroupPeerMemoryFeatures(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32);
}
unsafe extern "system" {
    pub fn vkCmdDispatchBase(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
unsafe extern "system" {
    pub fn vkEnumeratePhysicalDeviceGroups(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetImageMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetBufferMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetImageSparseMemoryRequirements2(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceFeatures2(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceProperties2(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties2(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties2(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties2(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    );
}
unsafe extern "system" {
    pub fn vkTrimCommandPool(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceQueue2(
        device: VkDevice,
        pQueueInfo: *const VkDeviceQueueInfo2,
        pQueue: *mut VkQueue,
    );
}
unsafe extern "system" {
    pub fn vkCreateSamplerYcbcrConversion(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroySamplerYcbcrConversion(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateDescriptorUpdateTemplate(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDescriptorUpdateTemplate(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkUpdateDescriptorSetWithTemplate(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceExternalBufferProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceExternalFenceProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceExternalSemaphoreProperties(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    );
}
unsafe extern "system" {
    pub fn vkGetDescriptorSetLayoutSupport(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    );
}
pub const VkDriverId_VK_DRIVER_ID_AMD_PROPRIETARY: VkDriverId = 1;
pub const VkDriverId_VK_DRIVER_ID_AMD_OPEN_SOURCE: VkDriverId = 2;
pub const VkDriverId_VK_DRIVER_ID_MESA_RADV: VkDriverId = 3;
pub const VkDriverId_VK_DRIVER_ID_NVIDIA_PROPRIETARY: VkDriverId = 4;
pub const VkDriverId_VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: VkDriverId = 5;
pub const VkDriverId_VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: VkDriverId = 6;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_PROPRIETARY: VkDriverId = 7;
pub const VkDriverId_VK_DRIVER_ID_QUALCOMM_PROPRIETARY: VkDriverId = 8;
pub const VkDriverId_VK_DRIVER_ID_ARM_PROPRIETARY: VkDriverId = 9;
pub const VkDriverId_VK_DRIVER_ID_GOOGLE_SWIFTSHADER: VkDriverId = 10;
pub const VkDriverId_VK_DRIVER_ID_GGP_PROPRIETARY: VkDriverId = 11;
pub const VkDriverId_VK_DRIVER_ID_BROADCOM_PROPRIETARY: VkDriverId = 12;
pub const VkDriverId_VK_DRIVER_ID_MESA_LLVMPIPE: VkDriverId = 13;
pub const VkDriverId_VK_DRIVER_ID_MOLTENVK: VkDriverId = 14;
pub const VkDriverId_VK_DRIVER_ID_COREAVI_PROPRIETARY: VkDriverId = 15;
pub const VkDriverId_VK_DRIVER_ID_JUICE_PROPRIETARY: VkDriverId = 16;
pub const VkDriverId_VK_DRIVER_ID_VERISILICON_PROPRIETARY: VkDriverId = 17;
pub const VkDriverId_VK_DRIVER_ID_MESA_TURNIP: VkDriverId = 18;
pub const VkDriverId_VK_DRIVER_ID_MESA_V3DV: VkDriverId = 19;
pub const VkDriverId_VK_DRIVER_ID_MESA_PANVK: VkDriverId = 20;
pub const VkDriverId_VK_DRIVER_ID_SAMSUNG_PROPRIETARY: VkDriverId = 21;
pub const VkDriverId_VK_DRIVER_ID_MESA_VENUS: VkDriverId = 22;
pub const VkDriverId_VK_DRIVER_ID_MESA_DOZEN: VkDriverId = 23;
pub const VkDriverId_VK_DRIVER_ID_MESA_NVK: VkDriverId = 24;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA: VkDriverId = 25;
pub const VkDriverId_VK_DRIVER_ID_MESA_HONEYKRISP: VkDriverId = 26;
pub const VkDriverId_VK_DRIVER_ID_VULKAN_SC_EMULATION_ON_VULKAN: VkDriverId = 27;
pub const VkDriverId_VK_DRIVER_ID_AMD_PROPRIETARY_KHR: VkDriverId = 1;
pub const VkDriverId_VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: VkDriverId = 2;
pub const VkDriverId_VK_DRIVER_ID_MESA_RADV_KHR: VkDriverId = 3;
pub const VkDriverId_VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: VkDriverId = 4;
pub const VkDriverId_VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: VkDriverId = 5;
pub const VkDriverId_VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: VkDriverId = 6;
pub const VkDriverId_VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: VkDriverId = 7;
pub const VkDriverId_VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: VkDriverId = 8;
pub const VkDriverId_VK_DRIVER_ID_ARM_PROPRIETARY_KHR: VkDriverId = 9;
pub const VkDriverId_VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: VkDriverId = 10;
pub const VkDriverId_VK_DRIVER_ID_GGP_PROPRIETARY_KHR: VkDriverId = 11;
pub const VkDriverId_VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: VkDriverId = 12;
pub const VkDriverId_VK_DRIVER_ID_MAX_ENUM: VkDriverId = 2147483647;
pub type VkDriverId = ::std::os::raw::c_uint;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY:
    VkShaderFloatControlsIndependence = 0;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL:
    VkShaderFloatControlsIndependence = 1;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE:
    VkShaderFloatControlsIndependence = 2;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR : VkShaderFloatControlsIndependence = 0 ;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR:
    VkShaderFloatControlsIndependence = 1;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR:
    VkShaderFloatControlsIndependence = 2;
pub const VkShaderFloatControlsIndependence_VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM:
    VkShaderFloatControlsIndependence = 2147483647;
pub type VkShaderFloatControlsIndependence = ::std::os::raw::c_uint;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE:
    VkSamplerReductionMode = 0;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MIN: VkSamplerReductionMode = 1;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX: VkSamplerReductionMode = 2;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM:
    VkSamplerReductionMode = 1000521000;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT:
    VkSamplerReductionMode = 0;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MIN_EXT: VkSamplerReductionMode = 1;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX_EXT: VkSamplerReductionMode = 2;
pub const VkSamplerReductionMode_VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: VkSamplerReductionMode =
    2147483647;
pub type VkSamplerReductionMode = ::std::os::raw::c_uint;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_BINARY: VkSemaphoreType = 0;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_TIMELINE: VkSemaphoreType = 1;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_BINARY_KHR: VkSemaphoreType = 0;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_TIMELINE_KHR: VkSemaphoreType = 1;
pub const VkSemaphoreType_VK_SEMAPHORE_TYPE_MAX_ENUM: VkSemaphoreType = 2147483647;
pub type VkSemaphoreType = ::std::os::raw::c_uint;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_NONE: VkResolveModeFlagBits = 0;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: VkResolveModeFlagBits = 1;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_AVERAGE_BIT: VkResolveModeFlagBits = 2;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MIN_BIT: VkResolveModeFlagBits = 4;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MAX_BIT: VkResolveModeFlagBits = 8;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID:
    VkResolveModeFlagBits = 16;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_NONE_KHR: VkResolveModeFlagBits = 0;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: VkResolveModeFlagBits = 1;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_AVERAGE_BIT_KHR: VkResolveModeFlagBits = 2;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MIN_BIT_KHR: VkResolveModeFlagBits = 4;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_MAX_BIT_KHR: VkResolveModeFlagBits = 8;
pub const VkResolveModeFlagBits_VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: VkResolveModeFlagBits =
    2147483647;
pub type VkResolveModeFlagBits = ::std::os::raw::c_uint;
pub type VkResolveModeFlags = VkFlags;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT:
    VkDescriptorBindingFlagBits = 1;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT:
    VkDescriptorBindingFlagBits = 2;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT:
    VkDescriptorBindingFlagBits = 4;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT:
    VkDescriptorBindingFlagBits = 8;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT:
    VkDescriptorBindingFlagBits = 1;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT:
    VkDescriptorBindingFlagBits = 2;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT:
    VkDescriptorBindingFlagBits = 4;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT:
    VkDescriptorBindingFlagBits = 8;
pub const VkDescriptorBindingFlagBits_VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM:
    VkDescriptorBindingFlagBits = 2147483647;
pub type VkDescriptorBindingFlagBits = ::std::os::raw::c_uint;
pub type VkDescriptorBindingFlags = VkFlags;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_ANY_BIT: VkSemaphoreWaitFlagBits = 1;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_ANY_BIT_KHR: VkSemaphoreWaitFlagBits = 1;
pub const VkSemaphoreWaitFlagBits_VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: VkSemaphoreWaitFlagBits =
    2147483647;
pub type VkSemaphoreWaitFlagBits = ::std::os::raw::c_uint;
pub type VkSemaphoreWaitFlags = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer16BitAccess: VkBool32,
    pub uniformAndStorageBuffer16BitAccess: VkBool32,
    pub storagePushConstant16: VkBool32,
    pub storageInputOutput16: VkBool32,
    pub multiview: VkBool32,
    pub multiviewGeometryShader: VkBool32,
    pub multiviewTessellationShader: VkBool32,
    pub variablePointersStorageBuffer: VkBool32,
    pub variablePointers: VkBool32,
    pub protectedMemory: VkBool32,
    pub samplerYcbcrConversion: VkBool32,
    pub shaderDrawParameters: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan11Features"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan11Features>() - 64usize];
    ["Alignment of VkPhysicalDeviceVulkan11Features"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan11Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::storageBuffer16BitAccess"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        storageBuffer16BitAccess
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::uniformAndStorageBuffer16BitAccess"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        uniformAndStorageBuffer16BitAccess
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::storagePushConstant16"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, storagePushConstant16) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::storageInputOutput16"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, storageInputOutput16) - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::multiview"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, multiview) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::multiviewGeometryShader"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        multiviewGeometryShader
    ) - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::multiviewTessellationShader"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        multiviewTessellationShader
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::variablePointersStorageBuffer"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        variablePointersStorageBuffer
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::variablePointers"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, variablePointers) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::protectedMemory"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, protectedMemory) - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::samplerYcbcrConversion"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Features,
        samplerYcbcrConversion
    ) - 56usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Features::shaderDrawParameters"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Features, shaderDrawParameters) - 60usize];
};
impl Default for VkPhysicalDeviceVulkan11Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan11Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceUUID: [u8; 16usize],
    pub driverUUID: [u8; 16usize],
    pub deviceLUID: [u8; 8usize],
    pub deviceNodeMask: u32,
    pub deviceLUIDValid: VkBool32,
    pub subgroupSize: u32,
    pub subgroupSupportedStages: VkShaderStageFlags,
    pub subgroupSupportedOperations: VkSubgroupFeatureFlags,
    pub subgroupQuadOperationsInAllStages: VkBool32,
    pub pointClippingBehavior: VkPointClippingBehavior,
    pub maxMultiviewViewCount: u32,
    pub maxMultiviewInstanceIndex: u32,
    pub protectedNoFault: VkBool32,
    pub maxPerSetDescriptors: u32,
    pub maxMemoryAllocationSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan11Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan11Properties>() - 112usize];
    ["Alignment of VkPhysicalDeviceVulkan11Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan11Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceUUID"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceUUID) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::driverUUID"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, driverUUID) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceLUID"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceLUID) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceNodeMask"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceNodeMask) - 56usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::deviceLUIDValid"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, deviceLUIDValid) - 60usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, subgroupSize) - 64usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupSupportedStages"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        subgroupSupportedStages
    ) - 68usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupSupportedOperations"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        subgroupSupportedOperations
    )
        - 72usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::subgroupQuadOperationsInAllStages"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        subgroupQuadOperationsInAllStages
    )
        - 76usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::pointClippingBehavior"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        pointClippingBehavior
    ) - 80usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxMultiviewViewCount"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxMultiviewViewCount
    ) - 84usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxMultiviewInstanceIndex"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxMultiviewInstanceIndex
    ) - 88usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::protectedNoFault"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan11Properties, protectedNoFault) - 92usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxPerSetDescriptors"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxPerSetDescriptors
    ) - 96usize];
    ["Offset of field: VkPhysicalDeviceVulkan11Properties::maxMemoryAllocationSize"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan11Properties,
        maxMemoryAllocationSize
    ) - 104usize];
};
impl Default for VkPhysicalDeviceVulkan11Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub samplerMirrorClampToEdge: VkBool32,
    pub drawIndirectCount: VkBool32,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
    pub descriptorIndexing: VkBool32,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
    pub samplerFilterMinmax: VkBool32,
    pub scalarBlockLayout: VkBool32,
    pub imagelessFramebuffer: VkBool32,
    pub uniformBufferStandardLayout: VkBool32,
    pub shaderSubgroupExtendedTypes: VkBool32,
    pub separateDepthStencilLayouts: VkBool32,
    pub hostQueryReset: VkBool32,
    pub timelineSemaphore: VkBool32,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    pub shaderOutputViewportIndex: VkBool32,
    pub shaderOutputLayer: VkBool32,
    pub subgroupBroadcastDynamicId: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan12Features"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan12Features>() - 208usize];
    ["Alignment of VkPhysicalDeviceVulkan12Features"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan12Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::samplerMirrorClampToEdge"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        samplerMirrorClampToEdge
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::drawIndirectCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, drawIndirectCount) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::storageBuffer8BitAccess"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        storageBuffer8BitAccess
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::uniformAndStorageBuffer8BitAccess"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        uniformAndStorageBuffer8BitAccess
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::storagePushConstant8"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, storagePushConstant8) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderBufferInt64Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderBufferInt64Atomics
    ) - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderSharedInt64Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderSharedInt64Atomics
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderFloat16"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, shaderFloat16) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderInt8"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, shaderInt8) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorIndexing"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, descriptorIndexing) - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderInputAttachmentArrayDynamicIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderInputAttachmentArrayDynamicIndexing) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderUniformTexelBufferArrayDynamicIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderUniformTexelBufferArrayDynamicIndexing) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageTexelBufferArrayDynamicIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageTexelBufferArrayDynamicIndexing) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderUniformBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderUniformBufferArrayNonUniformIndexing) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderSampledImageArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderSampledImageArrayNonUniformIndexing) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageBufferArrayNonUniformIndexing) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageImageArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageImageArrayNonUniformIndexing) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderInputAttachmentArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderInputAttachmentArrayNonUniformIndexing) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderUniformTexelBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderUniformTexelBufferArrayNonUniformIndexing) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderStorageTexelBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , shaderStorageTexelBufferArrayNonUniformIndexing) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingUniformBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingUniformBufferUpdateAfterBind) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingSampledImageUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingSampledImageUpdateAfterBind) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingStorageImageUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingStorageImageUpdateAfterBind) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingStorageBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingStorageBufferUpdateAfterBind) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingUniformTexelBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingUniformTexelBufferUpdateAfterBind) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingStorageTexelBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingStorageTexelBufferUpdateAfterBind) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingUpdateUnusedWhilePending"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingUpdateUnusedWhilePending) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingPartiallyBound"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        descriptorBindingPartiallyBound
    )
        - 124usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::descriptorBindingVariableDescriptorCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , descriptorBindingVariableDescriptorCount) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        runtimeDescriptorArray
    ) - 132usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::samplerFilterMinmax"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, samplerFilterMinmax) - 136usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::scalarBlockLayout"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, scalarBlockLayout) - 140usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::imagelessFramebuffer"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, imagelessFramebuffer) - 144usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::uniformBufferStandardLayout"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        uniformBufferStandardLayout
    )
        - 148usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderSubgroupExtendedTypes"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderSubgroupExtendedTypes
    )
        - 152usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::separateDepthStencilLayouts"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        separateDepthStencilLayouts
    )
        - 156usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::hostQueryReset"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, hostQueryReset) - 160usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::timelineSemaphore"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, timelineSemaphore) - 164usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::bufferDeviceAddress"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, bufferDeviceAddress) - 168usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::bufferDeviceAddressCaptureReplay"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        bufferDeviceAddressCaptureReplay
    )
        - 172usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::bufferDeviceAddressMultiDevice"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        bufferDeviceAddressMultiDevice
    )
        - 176usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::vulkanMemoryModel"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, vulkanMemoryModel) - 180usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::vulkanMemoryModelDeviceScope"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        vulkanMemoryModelDeviceScope
    )
        - 184usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::vulkanMemoryModelAvailabilityVisibilityChains"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Features , vulkanMemoryModelAvailabilityVisibilityChains) - 188usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderOutputViewportIndex"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        shaderOutputViewportIndex
    ) - 192usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::shaderOutputLayer"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Features, shaderOutputLayer) - 196usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Features::subgroupBroadcastDynamicId"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Features,
        subgroupBroadcastDynamicId
    ) - 200usize];
};
impl Default for VkPhysicalDeviceVulkan12Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkConformanceVersion {
    pub major: u8,
    pub minor: u8,
    pub subminor: u8,
    pub patch: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkConformanceVersion"][::std::mem::size_of::<VkConformanceVersion>() - 4usize];
    ["Alignment of VkConformanceVersion"][::std::mem::align_of::<VkConformanceVersion>() - 1usize];
    ["Offset of field: VkConformanceVersion::major"]
        [::std::mem::offset_of!(VkConformanceVersion, major) - 0usize];
    ["Offset of field: VkConformanceVersion::minor"]
        [::std::mem::offset_of!(VkConformanceVersion, minor) - 1usize];
    ["Offset of field: VkConformanceVersion::subminor"]
        [::std::mem::offset_of!(VkConformanceVersion, subminor) - 2usize];
    ["Offset of field: VkConformanceVersion::patch"]
        [::std::mem::offset_of!(VkConformanceVersion, patch) - 3usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan12Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::std::os::raw::c_char; 256usize],
    pub driverInfo: [::std::os::raw::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
    pub maxTimelineSemaphoreValueDifference: u64,
    pub framebufferIntegerColorSampleCounts: VkSampleCountFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan12Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan12Properties>() - 736usize];
    ["Alignment of VkPhysicalDeviceVulkan12Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan12Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::driverID"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, driverID) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::driverName"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, driverName) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::driverInfo"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, driverInfo) - 276usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::conformanceVersion"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, conformanceVersion) - 532usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::denormBehaviorIndependence"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        denormBehaviorIndependence
    )
        - 536usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::roundingModeIndependence"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        roundingModeIndependence
    ) - 540usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat16"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSignedZeroInfNanPreserveFloat16) - 544usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat32"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSignedZeroInfNanPreserveFloat32) - 548usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSignedZeroInfNanPreserveFloat64"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSignedZeroInfNanPreserveFloat64) - 552usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormPreserveFloat16
    )
        - 556usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormPreserveFloat32
    )
        - 560usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormPreserveFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormPreserveFloat64
    )
        - 564usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormFlushToZeroFloat16
    )
        - 568usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormFlushToZeroFloat32
    )
        - 572usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderDenormFlushToZeroFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderDenormFlushToZeroFloat64
    )
        - 576usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTEFloat16
    )
        - 580usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTEFloat32
    )
        - 584usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTEFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTEFloat64
    )
        - 588usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTZFloat16
    )
        - 592usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTZFloat32
    )
        - 596usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderRoundingModeRTZFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        shaderRoundingModeRTZFloat64
    )
        - 600usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxUpdateAfterBindDescriptorsInAllPools"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxUpdateAfterBindDescriptorsInAllPools) - 604usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderUniformBufferArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderUniformBufferArrayNonUniformIndexingNative) - 608usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderSampledImageArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderSampledImageArrayNonUniformIndexingNative) - 612usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderStorageBufferArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderStorageBufferArrayNonUniformIndexingNative) - 616usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderStorageImageArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderStorageImageArrayNonUniformIndexingNative) - 620usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::shaderInputAttachmentArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , shaderInputAttachmentArrayNonUniformIndexingNative) - 624usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::robustBufferAccessUpdateAfterBind"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        robustBufferAccessUpdateAfterBind
    )
        - 628usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::quadDivergentImplicitLod"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        quadDivergentImplicitLod
    ) - 632usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindSamplers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindSamplers) - 636usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindUniformBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindUniformBuffers) - 640usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindStorageBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindStorageBuffers) - 644usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindSampledImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindSampledImages) - 648usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindStorageImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindStorageImages) - 652usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageDescriptorUpdateAfterBindInputAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxPerStageDescriptorUpdateAfterBindInputAttachments) - 656usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxPerStageUpdateAfterBindResources"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        maxPerStageUpdateAfterBindResources
    )
        - 660usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindSamplers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindSamplers) - 664usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindUniformBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindUniformBuffers) - 668usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) - 672usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindStorageBuffers) - 676usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) - 680usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindSampledImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindSampledImages) - 684usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindStorageImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindStorageImages) - 688usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxDescriptorSetUpdateAfterBindInputAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan12Properties , maxDescriptorSetUpdateAfterBindInputAttachments) - 692usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::supportedDepthResolveModes"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        supportedDepthResolveModes
    )
        - 696usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::supportedStencilResolveModes"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        supportedStencilResolveModes
    )
        - 700usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::independentResolveNone"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        independentResolveNone
    ) - 704usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::independentResolve"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan12Properties, independentResolve) - 708usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::filterMinmaxSingleComponentFormats"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        filterMinmaxSingleComponentFormats
    )
        - 712usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::filterMinmaxImageComponentMapping"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        filterMinmaxImageComponentMapping
    )
        - 716usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::maxTimelineSemaphoreValueDifference"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        maxTimelineSemaphoreValueDifference
    )
        - 720usize];
    ["Offset of field: VkPhysicalDeviceVulkan12Properties::framebufferIntegerColorSampleCounts"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan12Properties,
        framebufferIntegerColorSampleCounts
    )
        - 728usize];
};
impl Default for VkPhysicalDeviceVulkan12Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageFormatListCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageFormatListCreateInfo"]
        [::std::mem::size_of::<VkImageFormatListCreateInfo>() - 32usize];
    ["Alignment of VkImageFormatListCreateInfo"]
        [::std::mem::align_of::<VkImageFormatListCreateInfo>() - 8usize];
    ["Offset of field: VkImageFormatListCreateInfo::sType"]
        [::std::mem::offset_of!(VkImageFormatListCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageFormatListCreateInfo::pNext"]
        [::std::mem::offset_of!(VkImageFormatListCreateInfo, pNext) - 8usize];
    ["Offset of field: VkImageFormatListCreateInfo::viewFormatCount"]
        [::std::mem::offset_of!(VkImageFormatListCreateInfo, viewFormatCount) - 16usize];
    ["Offset of field: VkImageFormatListCreateInfo::pViewFormats"]
        [::std::mem::offset_of!(VkImageFormatListCreateInfo, pViewFormats) - 24usize];
};
impl Default for VkImageFormatListCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkAttachmentDescriptionFlags,
    pub format: VkFormat,
    pub samples: VkSampleCountFlagBits,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub stencilLoadOp: VkAttachmentLoadOp,
    pub stencilStoreOp: VkAttachmentStoreOp,
    pub initialLayout: VkImageLayout,
    pub finalLayout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentDescription2"]
        [::std::mem::size_of::<VkAttachmentDescription2>() - 56usize];
    ["Alignment of VkAttachmentDescription2"]
        [::std::mem::align_of::<VkAttachmentDescription2>() - 8usize];
    ["Offset of field: VkAttachmentDescription2::sType"]
        [::std::mem::offset_of!(VkAttachmentDescription2, sType) - 0usize];
    ["Offset of field: VkAttachmentDescription2::pNext"]
        [::std::mem::offset_of!(VkAttachmentDescription2, pNext) - 8usize];
    ["Offset of field: VkAttachmentDescription2::flags"]
        [::std::mem::offset_of!(VkAttachmentDescription2, flags) - 16usize];
    ["Offset of field: VkAttachmentDescription2::format"]
        [::std::mem::offset_of!(VkAttachmentDescription2, format) - 20usize];
    ["Offset of field: VkAttachmentDescription2::samples"]
        [::std::mem::offset_of!(VkAttachmentDescription2, samples) - 24usize];
    ["Offset of field: VkAttachmentDescription2::loadOp"]
        [::std::mem::offset_of!(VkAttachmentDescription2, loadOp) - 28usize];
    ["Offset of field: VkAttachmentDescription2::storeOp"]
        [::std::mem::offset_of!(VkAttachmentDescription2, storeOp) - 32usize];
    ["Offset of field: VkAttachmentDescription2::stencilLoadOp"]
        [::std::mem::offset_of!(VkAttachmentDescription2, stencilLoadOp) - 36usize];
    ["Offset of field: VkAttachmentDescription2::stencilStoreOp"]
        [::std::mem::offset_of!(VkAttachmentDescription2, stencilStoreOp) - 40usize];
    ["Offset of field: VkAttachmentDescription2::initialLayout"]
        [::std::mem::offset_of!(VkAttachmentDescription2, initialLayout) - 44usize];
    ["Offset of field: VkAttachmentDescription2::finalLayout"]
        [::std::mem::offset_of!(VkAttachmentDescription2, finalLayout) - 48usize];
};
impl Default for VkAttachmentDescription2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReference2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachment: u32,
    pub layout: VkImageLayout,
    pub aspectMask: VkImageAspectFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentReference2"][::std::mem::size_of::<VkAttachmentReference2>() - 32usize];
    ["Alignment of VkAttachmentReference2"]
        [::std::mem::align_of::<VkAttachmentReference2>() - 8usize];
    ["Offset of field: VkAttachmentReference2::sType"]
        [::std::mem::offset_of!(VkAttachmentReference2, sType) - 0usize];
    ["Offset of field: VkAttachmentReference2::pNext"]
        [::std::mem::offset_of!(VkAttachmentReference2, pNext) - 8usize];
    ["Offset of field: VkAttachmentReference2::attachment"]
        [::std::mem::offset_of!(VkAttachmentReference2, attachment) - 16usize];
    ["Offset of field: VkAttachmentReference2::layout"]
        [::std::mem::offset_of!(VkAttachmentReference2, layout) - 20usize];
    ["Offset of field: VkAttachmentReference2::aspectMask"]
        [::std::mem::offset_of!(VkAttachmentReference2, aspectMask) - 24usize];
};
impl Default for VkAttachmentReference2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescription2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSubpassDescriptionFlags,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub viewMask: u32,
    pub inputAttachmentCount: u32,
    pub pInputAttachments: *const VkAttachmentReference2,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkAttachmentReference2,
    pub pResolveAttachments: *const VkAttachmentReference2,
    pub pDepthStencilAttachment: *const VkAttachmentReference2,
    pub preserveAttachmentCount: u32,
    pub pPreserveAttachments: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDescription2"][::std::mem::size_of::<VkSubpassDescription2>() - 88usize];
    ["Alignment of VkSubpassDescription2"]
        [::std::mem::align_of::<VkSubpassDescription2>() - 8usize];
    ["Offset of field: VkSubpassDescription2::sType"]
        [::std::mem::offset_of!(VkSubpassDescription2, sType) - 0usize];
    ["Offset of field: VkSubpassDescription2::pNext"]
        [::std::mem::offset_of!(VkSubpassDescription2, pNext) - 8usize];
    ["Offset of field: VkSubpassDescription2::flags"]
        [::std::mem::offset_of!(VkSubpassDescription2, flags) - 16usize];
    ["Offset of field: VkSubpassDescription2::pipelineBindPoint"]
        [::std::mem::offset_of!(VkSubpassDescription2, pipelineBindPoint) - 20usize];
    ["Offset of field: VkSubpassDescription2::viewMask"]
        [::std::mem::offset_of!(VkSubpassDescription2, viewMask) - 24usize];
    ["Offset of field: VkSubpassDescription2::inputAttachmentCount"]
        [::std::mem::offset_of!(VkSubpassDescription2, inputAttachmentCount) - 28usize];
    ["Offset of field: VkSubpassDescription2::pInputAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription2, pInputAttachments) - 32usize];
    ["Offset of field: VkSubpassDescription2::colorAttachmentCount"]
        [::std::mem::offset_of!(VkSubpassDescription2, colorAttachmentCount) - 40usize];
    ["Offset of field: VkSubpassDescription2::pColorAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription2, pColorAttachments) - 48usize];
    ["Offset of field: VkSubpassDescription2::pResolveAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription2, pResolveAttachments) - 56usize];
    ["Offset of field: VkSubpassDescription2::pDepthStencilAttachment"]
        [::std::mem::offset_of!(VkSubpassDescription2, pDepthStencilAttachment) - 64usize];
    ["Offset of field: VkSubpassDescription2::preserveAttachmentCount"]
        [::std::mem::offset_of!(VkSubpassDescription2, preserveAttachmentCount) - 72usize];
    ["Offset of field: VkSubpassDescription2::pPreserveAttachments"]
        [::std::mem::offset_of!(VkSubpassDescription2, pPreserveAttachments) - 80usize];
};
impl Default for VkSubpassDescription2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDependency2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubpass: u32,
    pub dstSubpass: u32,
    pub srcStageMask: VkPipelineStageFlags,
    pub dstStageMask: VkPipelineStageFlags,
    pub srcAccessMask: VkAccessFlags,
    pub dstAccessMask: VkAccessFlags,
    pub dependencyFlags: VkDependencyFlags,
    pub viewOffset: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDependency2"][::std::mem::size_of::<VkSubpassDependency2>() - 48usize];
    ["Alignment of VkSubpassDependency2"][::std::mem::align_of::<VkSubpassDependency2>() - 8usize];
    ["Offset of field: VkSubpassDependency2::sType"]
        [::std::mem::offset_of!(VkSubpassDependency2, sType) - 0usize];
    ["Offset of field: VkSubpassDependency2::pNext"]
        [::std::mem::offset_of!(VkSubpassDependency2, pNext) - 8usize];
    ["Offset of field: VkSubpassDependency2::srcSubpass"]
        [::std::mem::offset_of!(VkSubpassDependency2, srcSubpass) - 16usize];
    ["Offset of field: VkSubpassDependency2::dstSubpass"]
        [::std::mem::offset_of!(VkSubpassDependency2, dstSubpass) - 20usize];
    ["Offset of field: VkSubpassDependency2::srcStageMask"]
        [::std::mem::offset_of!(VkSubpassDependency2, srcStageMask) - 24usize];
    ["Offset of field: VkSubpassDependency2::dstStageMask"]
        [::std::mem::offset_of!(VkSubpassDependency2, dstStageMask) - 28usize];
    ["Offset of field: VkSubpassDependency2::srcAccessMask"]
        [::std::mem::offset_of!(VkSubpassDependency2, srcAccessMask) - 32usize];
    ["Offset of field: VkSubpassDependency2::dstAccessMask"]
        [::std::mem::offset_of!(VkSubpassDependency2, dstAccessMask) - 36usize];
    ["Offset of field: VkSubpassDependency2::dependencyFlags"]
        [::std::mem::offset_of!(VkSubpassDependency2, dependencyFlags) - 40usize];
    ["Offset of field: VkSubpassDependency2::viewOffset"]
        [::std::mem::offset_of!(VkSubpassDependency2, viewOffset) - 44usize];
};
impl Default for VkSubpassDependency2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreateInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderPassCreateFlags,
    pub attachmentCount: u32,
    pub pAttachments: *const VkAttachmentDescription2,
    pub subpassCount: u32,
    pub pSubpasses: *const VkSubpassDescription2,
    pub dependencyCount: u32,
    pub pDependencies: *const VkSubpassDependency2,
    pub correlatedViewMaskCount: u32,
    pub pCorrelatedViewMasks: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreateInfo2"][::std::mem::size_of::<VkRenderPassCreateInfo2>() - 80usize];
    ["Alignment of VkRenderPassCreateInfo2"]
        [::std::mem::align_of::<VkRenderPassCreateInfo2>() - 8usize];
    ["Offset of field: VkRenderPassCreateInfo2::sType"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, sType) - 0usize];
    ["Offset of field: VkRenderPassCreateInfo2::pNext"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, pNext) - 8usize];
    ["Offset of field: VkRenderPassCreateInfo2::flags"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, flags) - 16usize];
    ["Offset of field: VkRenderPassCreateInfo2::attachmentCount"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, attachmentCount) - 20usize];
    ["Offset of field: VkRenderPassCreateInfo2::pAttachments"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, pAttachments) - 24usize];
    ["Offset of field: VkRenderPassCreateInfo2::subpassCount"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, subpassCount) - 32usize];
    ["Offset of field: VkRenderPassCreateInfo2::pSubpasses"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, pSubpasses) - 40usize];
    ["Offset of field: VkRenderPassCreateInfo2::dependencyCount"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, dependencyCount) - 48usize];
    ["Offset of field: VkRenderPassCreateInfo2::pDependencies"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, pDependencies) - 56usize];
    ["Offset of field: VkRenderPassCreateInfo2::correlatedViewMaskCount"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, correlatedViewMaskCount) - 64usize];
    ["Offset of field: VkRenderPassCreateInfo2::pCorrelatedViewMasks"]
        [::std::mem::offset_of!(VkRenderPassCreateInfo2, pCorrelatedViewMasks) - 72usize];
};
impl Default for VkRenderPassCreateInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub contents: VkSubpassContents,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassBeginInfo"][::std::mem::size_of::<VkSubpassBeginInfo>() - 24usize];
    ["Alignment of VkSubpassBeginInfo"][::std::mem::align_of::<VkSubpassBeginInfo>() - 8usize];
    ["Offset of field: VkSubpassBeginInfo::sType"]
        [::std::mem::offset_of!(VkSubpassBeginInfo, sType) - 0usize];
    ["Offset of field: VkSubpassBeginInfo::pNext"]
        [::std::mem::offset_of!(VkSubpassBeginInfo, pNext) - 8usize];
    ["Offset of field: VkSubpassBeginInfo::contents"]
        [::std::mem::offset_of!(VkSubpassBeginInfo, contents) - 16usize];
};
impl Default for VkSubpassBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassEndInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassEndInfo"][::std::mem::size_of::<VkSubpassEndInfo>() - 16usize];
    ["Alignment of VkSubpassEndInfo"][::std::mem::align_of::<VkSubpassEndInfo>() - 8usize];
    ["Offset of field: VkSubpassEndInfo::sType"]
        [::std::mem::offset_of!(VkSubpassEndInfo, sType) - 0usize];
    ["Offset of field: VkSubpassEndInfo::pNext"]
        [::std::mem::offset_of!(VkSubpassEndInfo, pNext) - 8usize];
};
impl Default for VkSubpassEndInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice8BitStorageFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageBuffer8BitAccess: VkBool32,
    pub uniformAndStorageBuffer8BitAccess: VkBool32,
    pub storagePushConstant8: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevice8BitStorageFeatures"]
        [::std::mem::size_of::<VkPhysicalDevice8BitStorageFeatures>() - 32usize];
    ["Alignment of VkPhysicalDevice8BitStorageFeatures"]
        [::std::mem::align_of::<VkPhysicalDevice8BitStorageFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDevice8BitStorageFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevice8BitStorageFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::storageBuffer8BitAccess"][::std::mem::offset_of!(
        VkPhysicalDevice8BitStorageFeatures,
        storageBuffer8BitAccess
    ) - 16usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::uniformAndStorageBuffer8BitAccess"][::std::mem::offset_of!(
        VkPhysicalDevice8BitStorageFeatures,
        uniformAndStorageBuffer8BitAccess
    )
        - 20usize];
    ["Offset of field: VkPhysicalDevice8BitStorageFeatures::storagePushConstant8"][::std::mem::offset_of!(
        VkPhysicalDevice8BitStorageFeatures,
        storagePushConstant8
    ) - 24usize];
};
impl Default for VkPhysicalDevice8BitStorageFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDriverProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub driverID: VkDriverId,
    pub driverName: [::std::os::raw::c_char; 256usize],
    pub driverInfo: [::std::os::raw::c_char; 256usize],
    pub conformanceVersion: VkConformanceVersion,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDriverProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceDriverProperties>() - 536usize];
    ["Alignment of VkPhysicalDeviceDriverProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceDriverProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDriverProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDriverProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::driverID"]
        [::std::mem::offset_of!(VkPhysicalDeviceDriverProperties, driverID) - 16usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::driverName"]
        [::std::mem::offset_of!(VkPhysicalDeviceDriverProperties, driverName) - 20usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::driverInfo"]
        [::std::mem::offset_of!(VkPhysicalDeviceDriverProperties, driverInfo) - 276usize];
    ["Offset of field: VkPhysicalDeviceDriverProperties::conformanceVersion"]
        [::std::mem::offset_of!(VkPhysicalDeviceDriverProperties, conformanceVersion) - 532usize];
};
impl Default for VkPhysicalDeviceDriverProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferInt64Atomics: VkBool32,
    pub shaderSharedInt64Atomics: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicInt64Features"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderAtomicInt64Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicInt64Features"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderAtomicInt64Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderAtomicInt64Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderAtomicInt64Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::shaderBufferInt64Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicInt64Features,
        shaderBufferInt64Atomics
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicInt64Features::shaderSharedInt64Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicInt64Features,
        shaderSharedInt64Atomics
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceShaderAtomicInt64Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderFloat16: VkBool32,
    pub shaderInt8: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderFloat16Int8Features"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderFloat16Int8Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderFloat16Int8Features"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderFloat16Int8Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderFloat16Int8Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderFloat16Int8Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::shaderFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderFloat16Int8Features,
        shaderFloat16
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderFloat16Int8Features::shaderInt8"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderFloat16Int8Features, shaderInt8) - 20usize];
};
impl Default for VkPhysicalDeviceShaderFloat16Int8Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFloatControlsProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    pub roundingModeIndependence: VkShaderFloatControlsIndependence,
    pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    pub shaderDenormPreserveFloat16: VkBool32,
    pub shaderDenormPreserveFloat32: VkBool32,
    pub shaderDenormPreserveFloat64: VkBool32,
    pub shaderDenormFlushToZeroFloat16: VkBool32,
    pub shaderDenormFlushToZeroFloat32: VkBool32,
    pub shaderDenormFlushToZeroFloat64: VkBool32,
    pub shaderRoundingModeRTEFloat16: VkBool32,
    pub shaderRoundingModeRTEFloat32: VkBool32,
    pub shaderRoundingModeRTEFloat64: VkBool32,
    pub shaderRoundingModeRTZFloat16: VkBool32,
    pub shaderRoundingModeRTZFloat32: VkBool32,
    pub shaderRoundingModeRTZFloat64: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFloatControlsProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceFloatControlsProperties>() - 88usize];
    ["Alignment of VkPhysicalDeviceFloatControlsProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceFloatControlsProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFloatControlsProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFloatControlsProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::denormBehaviorIndependence"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        denormBehaviorIndependence
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::roundingModeIndependence"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        roundingModeIndependence
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat16"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFloatControlsProperties , shaderSignedZeroInfNanPreserveFloat16) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat32"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFloatControlsProperties , shaderSignedZeroInfNanPreserveFloat32) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderSignedZeroInfNanPreserveFloat64"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFloatControlsProperties , shaderSignedZeroInfNanPreserveFloat64) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormPreserveFloat16
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormPreserveFloat32
    )
        - 40usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormPreserveFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormPreserveFloat64
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormFlushToZeroFloat16
    )
        - 48usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormFlushToZeroFloat32
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderDenormFlushToZeroFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderDenormFlushToZeroFloat64
    )
        - 56usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTEFloat16
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTEFloat32
    )
        - 64usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTEFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTEFloat64
    )
        - 68usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat16"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTZFloat16
    )
        - 72usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat32"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTZFloat32
    )
        - 76usize];
    ["Offset of field: VkPhysicalDeviceFloatControlsProperties::shaderRoundingModeRTZFloat64"][::std::mem::offset_of!(
        VkPhysicalDeviceFloatControlsProperties,
        shaderRoundingModeRTZFloat64
    )
        - 80usize];
};
impl Default for VkPhysicalDeviceFloatControlsProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub bindingCount: u32,
    pub pBindingFlags: *const VkDescriptorBindingFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutBindingFlagsCreateInfo"]
        [::std::mem::size_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>() - 32usize];
    ["Alignment of VkDescriptorSetLayoutBindingFlagsCreateInfo"]
        [::std::mem::align_of::<VkDescriptorSetLayoutBindingFlagsCreateInfo>() - 8usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::sType"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutBindingFlagsCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutBindingFlagsCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::bindingCount"][::std::mem::offset_of!(
        VkDescriptorSetLayoutBindingFlagsCreateInfo,
        bindingCount
    ) - 16usize];
    ["Offset of field: VkDescriptorSetLayoutBindingFlagsCreateInfo::pBindingFlags"][::std::mem::offset_of!(
        VkDescriptorSetLayoutBindingFlagsCreateInfo,
        pBindingFlags
    ) - 24usize];
};
impl Default for VkDescriptorSetLayoutBindingFlagsCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
    pub descriptorBindingPartiallyBound: VkBool32,
    pub descriptorBindingVariableDescriptorCount: VkBool32,
    pub runtimeDescriptorArray: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorIndexingFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceDescriptorIndexingFeatures>() - 96usize];
    ["Alignment of VkPhysicalDeviceDescriptorIndexingFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceDescriptorIndexingFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderInputAttachmentArrayDynamicIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderInputAttachmentArrayDynamicIndexing) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformTexelBufferArrayDynamicIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderUniformTexelBufferArrayDynamicIndexing) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageTexelBufferArrayDynamicIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageTexelBufferArrayDynamicIndexing) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderUniformBufferArrayNonUniformIndexing) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderSampledImageArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderSampledImageArrayNonUniformIndexing) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageBufferArrayNonUniformIndexing) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageImageArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageImageArrayNonUniformIndexing) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderInputAttachmentArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderInputAttachmentArrayNonUniformIndexing) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderUniformTexelBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderUniformTexelBufferArrayNonUniformIndexing) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::shaderStorageTexelBufferArrayNonUniformIndexing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , shaderStorageTexelBufferArrayNonUniformIndexing) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUniformBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingUniformBufferUpdateAfterBind) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingSampledImageUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingSampledImageUpdateAfterBind) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageImageUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingStorageImageUpdateAfterBind) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingStorageBufferUpdateAfterBind) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUniformTexelBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingUniformTexelBufferUpdateAfterBind) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingStorageTexelBufferUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingStorageTexelBufferUpdateAfterBind) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingUpdateUnusedWhilePending"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingUpdateUnusedWhilePending) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingPartiallyBound"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingPartiallyBound) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingVariableDescriptorCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingFeatures , descriptorBindingVariableDescriptorCount) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingFeatures::runtimeDescriptorArray"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorIndexingFeatures,
        runtimeDescriptorArray
    )
        - 92usize];
};
impl Default for VkPhysicalDeviceDescriptorIndexingFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxUpdateAfterBindDescriptorsInAllPools: u32,
    pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    pub robustBufferAccessUpdateAfterBind: VkBool32,
    pub quadDivergentImplicitLod: VkBool32,
    pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    pub maxPerStageUpdateAfterBindResources: u32,
    pub maxDescriptorSetUpdateAfterBindSamplers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
    pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
    pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorIndexingProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceDescriptorIndexingProperties>() - 112usize];
    ["Alignment of VkPhysicalDeviceDescriptorIndexingProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceDescriptorIndexingProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorIndexingProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxUpdateAfterBindDescriptorsInAllPools"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxUpdateAfterBindDescriptorsInAllPools) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderUniformBufferArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderUniformBufferArrayNonUniformIndexingNative) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderSampledImageArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderSampledImageArrayNonUniformIndexingNative) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderStorageBufferArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderStorageBufferArrayNonUniformIndexingNative) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderStorageImageArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderStorageImageArrayNonUniformIndexingNative) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::shaderInputAttachmentArrayNonUniformIndexingNative"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , shaderInputAttachmentArrayNonUniformIndexingNative) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::robustBufferAccessUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , robustBufferAccessUpdateAfterBind) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::quadDivergentImplicitLod"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorIndexingProperties,
        quadDivergentImplicitLod
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindSamplers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindSamplers) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindUniformBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindUniformBuffers) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindStorageBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindStorageBuffers) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindSampledImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindSampledImages) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindStorageImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindStorageImages) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindInputAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageDescriptorUpdateAfterBindInputAttachments) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageUpdateAfterBindResources"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxPerStageUpdateAfterBindResources) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindSamplers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindSamplers) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindUniformBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindUniformBuffers) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindUniformBuffersDynamic) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindStorageBuffers) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindStorageBuffersDynamic) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindSampledImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindSampledImages) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindStorageImages) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindInputAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorIndexingProperties , maxDescriptorSetUpdateAfterBindInputAttachments) - 104usize] ;
};
impl Default for VkPhysicalDeviceDescriptorIndexingProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorSetCount: u32,
    pub pDescriptorCounts: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetVariableDescriptorCountAllocateInfo"]
        [::std::mem::size_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>() - 32usize];
    ["Alignment of VkDescriptorSetVariableDescriptorCountAllocateInfo"]
        [::std::mem::align_of::<VkDescriptorSetVariableDescriptorCountAllocateInfo>() - 8usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::sType"][::std::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        sType
    ) - 0usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::pNext"][::std::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        pNext
    ) - 8usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::descriptorSetCount"][::std::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        descriptorSetCount
    )
        - 16usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountAllocateInfo::pDescriptorCounts"][::std::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountAllocateInfo,
        pDescriptorCounts
    )
        - 24usize];
};
impl Default for VkDescriptorSetVariableDescriptorCountAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVariableDescriptorCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetVariableDescriptorCountLayoutSupport"]
        [::std::mem::size_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>() - 24usize];
    ["Alignment of VkDescriptorSetVariableDescriptorCountLayoutSupport"]
        [::std::mem::align_of::<VkDescriptorSetVariableDescriptorCountLayoutSupport>() - 8usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountLayoutSupport::sType"][::std::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountLayoutSupport,
        sType
    ) - 0usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountLayoutSupport::pNext"][::std::mem::offset_of!(
        VkDescriptorSetVariableDescriptorCountLayoutSupport,
        pNext
    ) - 8usize];
    ["Offset of field: VkDescriptorSetVariableDescriptorCountLayoutSupport::maxVariableDescriptorCount"] [:: std :: mem :: offset_of ! (VkDescriptorSetVariableDescriptorCountLayoutSupport , maxVariableDescriptorCount) - 16usize] ;
};
impl Default for VkDescriptorSetVariableDescriptorCountLayoutSupport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassDescriptionDepthStencilResolve {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub depthResolveMode: VkResolveModeFlagBits,
    pub stencilResolveMode: VkResolveModeFlagBits,
    pub pDepthStencilResolveAttachment: *const VkAttachmentReference2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassDescriptionDepthStencilResolve"]
        [::std::mem::size_of::<VkSubpassDescriptionDepthStencilResolve>() - 32usize];
    ["Alignment of VkSubpassDescriptionDepthStencilResolve"]
        [::std::mem::align_of::<VkSubpassDescriptionDepthStencilResolve>() - 8usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::sType"]
        [::std::mem::offset_of!(VkSubpassDescriptionDepthStencilResolve, sType) - 0usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::pNext"]
        [::std::mem::offset_of!(VkSubpassDescriptionDepthStencilResolve, pNext) - 8usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::depthResolveMode"][::std::mem::offset_of!(
        VkSubpassDescriptionDepthStencilResolve,
        depthResolveMode
    ) - 16usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::stencilResolveMode"][::std::mem::offset_of!(
        VkSubpassDescriptionDepthStencilResolve,
        stencilResolveMode
    ) - 20usize];
    ["Offset of field: VkSubpassDescriptionDepthStencilResolve::pDepthStencilResolveAttachment"][::std::mem::offset_of!(
        VkSubpassDescriptionDepthStencilResolve,
        pDepthStencilResolveAttachment
    )
        - 24usize];
};
impl Default for VkSubpassDescriptionDepthStencilResolve {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedDepthResolveModes: VkResolveModeFlags,
    pub supportedStencilResolveModes: VkResolveModeFlags,
    pub independentResolveNone: VkBool32,
    pub independentResolve: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthStencilResolveProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceDepthStencilResolveProperties>() - 32usize];
    ["Alignment of VkPhysicalDeviceDepthStencilResolveProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceDepthStencilResolveProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthStencilResolveProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthStencilResolveProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::supportedDepthResolveModes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDepthStencilResolveProperties , supportedDepthResolveModes) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::supportedStencilResolveModes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDepthStencilResolveProperties , supportedStencilResolveModes) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::independentResolveNone"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthStencilResolveProperties,
        independentResolveNone
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceDepthStencilResolveProperties::independentResolve"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthStencilResolveProperties,
        independentResolve
    )
        - 28usize];
};
impl Default for VkPhysicalDeviceDepthStencilResolveProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub scalarBlockLayout: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceScalarBlockLayoutFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceScalarBlockLayoutFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceScalarBlockLayoutFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceScalarBlockLayoutFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceScalarBlockLayoutFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceScalarBlockLayoutFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceScalarBlockLayoutFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceScalarBlockLayoutFeatures::scalarBlockLayout"][::std::mem::offset_of!(
        VkPhysicalDeviceScalarBlockLayoutFeatures,
        scalarBlockLayout
    ) - 16usize];
};
impl Default for VkPhysicalDeviceScalarBlockLayoutFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageStencilUsageCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stencilUsage: VkImageUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageStencilUsageCreateInfo"]
        [::std::mem::size_of::<VkImageStencilUsageCreateInfo>() - 24usize];
    ["Alignment of VkImageStencilUsageCreateInfo"]
        [::std::mem::align_of::<VkImageStencilUsageCreateInfo>() - 8usize];
    ["Offset of field: VkImageStencilUsageCreateInfo::sType"]
        [::std::mem::offset_of!(VkImageStencilUsageCreateInfo, sType) - 0usize];
    ["Offset of field: VkImageStencilUsageCreateInfo::pNext"]
        [::std::mem::offset_of!(VkImageStencilUsageCreateInfo, pNext) - 8usize];
    ["Offset of field: VkImageStencilUsageCreateInfo::stencilUsage"]
        [::std::mem::offset_of!(VkImageStencilUsageCreateInfo, stencilUsage) - 16usize];
};
impl Default for VkImageStencilUsageCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerReductionModeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub reductionMode: VkSamplerReductionMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerReductionModeCreateInfo"]
        [::std::mem::size_of::<VkSamplerReductionModeCreateInfo>() - 24usize];
    ["Alignment of VkSamplerReductionModeCreateInfo"]
        [::std::mem::align_of::<VkSamplerReductionModeCreateInfo>() - 8usize];
    ["Offset of field: VkSamplerReductionModeCreateInfo::sType"]
        [::std::mem::offset_of!(VkSamplerReductionModeCreateInfo, sType) - 0usize];
    ["Offset of field: VkSamplerReductionModeCreateInfo::pNext"]
        [::std::mem::offset_of!(VkSamplerReductionModeCreateInfo, pNext) - 8usize];
    ["Offset of field: VkSamplerReductionModeCreateInfo::reductionMode"]
        [::std::mem::offset_of!(VkSamplerReductionModeCreateInfo, reductionMode) - 16usize];
};
impl Default for VkSamplerReductionModeCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub filterMinmaxSingleComponentFormats: VkBool32,
    pub filterMinmaxImageComponentMapping: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSamplerFilterMinmaxProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceSamplerFilterMinmaxProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceSamplerFilterMinmaxProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSamplerFilterMinmaxProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSamplerFilterMinmaxProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::filterMinmaxSingleComponentFormats"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSamplerFilterMinmaxProperties , filterMinmaxSingleComponentFormats) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceSamplerFilterMinmaxProperties::filterMinmaxImageComponentMapping"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSamplerFilterMinmaxProperties , filterMinmaxImageComponentMapping) - 20usize] ;
};
impl Default for VkPhysicalDeviceSamplerFilterMinmaxProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vulkanMemoryModel: VkBool32,
    pub vulkanMemoryModelDeviceScope: VkBool32,
    pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkanMemoryModelFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>() - 32usize];
    ["Alignment of VkPhysicalDeviceVulkanMemoryModelFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkanMemoryModelFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkanMemoryModelFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkanMemoryModelFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModel"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkanMemoryModelFeatures,
        vulkanMemoryModel
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModelDeviceScope"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkanMemoryModelFeatures,
        vulkanMemoryModelDeviceScope
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkanMemoryModelFeatures::vulkanMemoryModelAvailabilityVisibilityChains"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkanMemoryModelFeatures , vulkanMemoryModelAvailabilityVisibilityChains) - 24usize] ;
};
impl Default for VkPhysicalDeviceVulkanMemoryModelFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imagelessFramebuffer: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImagelessFramebufferFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceImagelessFramebufferFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceImagelessFramebufferFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceImagelessFramebufferFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImagelessFramebufferFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImagelessFramebufferFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImagelessFramebufferFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImagelessFramebufferFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImagelessFramebufferFeatures::imagelessFramebuffer"][::std::mem::offset_of!(
        VkPhysicalDeviceImagelessFramebufferFeatures,
        imagelessFramebuffer
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceImagelessFramebufferFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCreateFlags,
    pub usage: VkImageUsageFlags,
    pub width: u32,
    pub height: u32,
    pub layerCount: u32,
    pub viewFormatCount: u32,
    pub pViewFormats: *const VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferAttachmentImageInfo"]
        [::std::mem::size_of::<VkFramebufferAttachmentImageInfo>() - 48usize];
    ["Alignment of VkFramebufferAttachmentImageInfo"]
        [::std::mem::align_of::<VkFramebufferAttachmentImageInfo>() - 8usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::sType"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, sType) - 0usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::pNext"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, pNext) - 8usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::flags"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, flags) - 16usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::usage"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, usage) - 20usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::width"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, width) - 24usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::height"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, height) - 28usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::layerCount"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, layerCount) - 32usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::viewFormatCount"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, viewFormatCount) - 36usize];
    ["Offset of field: VkFramebufferAttachmentImageInfo::pViewFormats"]
        [::std::mem::offset_of!(VkFramebufferAttachmentImageInfo, pViewFormats) - 40usize];
};
impl Default for VkFramebufferAttachmentImageInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferAttachmentsCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentImageInfoCount: u32,
    pub pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferAttachmentsCreateInfo"]
        [::std::mem::size_of::<VkFramebufferAttachmentsCreateInfo>() - 32usize];
    ["Alignment of VkFramebufferAttachmentsCreateInfo"]
        [::std::mem::align_of::<VkFramebufferAttachmentsCreateInfo>() - 8usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::sType"]
        [::std::mem::offset_of!(VkFramebufferAttachmentsCreateInfo, sType) - 0usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::pNext"]
        [::std::mem::offset_of!(VkFramebufferAttachmentsCreateInfo, pNext) - 8usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::attachmentImageInfoCount"][::std::mem::offset_of!(
        VkFramebufferAttachmentsCreateInfo,
        attachmentImageInfoCount
    ) - 16usize];
    ["Offset of field: VkFramebufferAttachmentsCreateInfo::pAttachmentImageInfos"][::std::mem::offset_of!(
        VkFramebufferAttachmentsCreateInfo,
        pAttachmentImageInfos
    ) - 24usize];
};
impl Default for VkFramebufferAttachmentsCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassAttachmentBeginInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentCount: u32,
    pub pAttachments: *const VkImageView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassAttachmentBeginInfo"]
        [::std::mem::size_of::<VkRenderPassAttachmentBeginInfo>() - 32usize];
    ["Alignment of VkRenderPassAttachmentBeginInfo"]
        [::std::mem::align_of::<VkRenderPassAttachmentBeginInfo>() - 8usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::sType"]
        [::std::mem::offset_of!(VkRenderPassAttachmentBeginInfo, sType) - 0usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::pNext"]
        [::std::mem::offset_of!(VkRenderPassAttachmentBeginInfo, pNext) - 8usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::attachmentCount"]
        [::std::mem::offset_of!(VkRenderPassAttachmentBeginInfo, attachmentCount) - 16usize];
    ["Offset of field: VkRenderPassAttachmentBeginInfo::pAttachments"]
        [::std::mem::offset_of!(VkRenderPassAttachmentBeginInfo, pAttachments) - 24usize];
};
impl Default for VkRenderPassAttachmentBeginInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub uniformBufferStandardLayout: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceUniformBufferStandardLayoutFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceUniformBufferStandardLayoutFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceUniformBufferStandardLayoutFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceUniformBufferStandardLayoutFeatures::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceUniformBufferStandardLayoutFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceUniformBufferStandardLayoutFeatures::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceUniformBufferStandardLayoutFeatures,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceUniformBufferStandardLayoutFeatures::uniformBufferStandardLayout"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceUniformBufferStandardLayoutFeatures , uniformBufferStandardLayout) - 16usize] ;
};
impl Default for VkPhysicalDeviceUniformBufferStandardLayoutFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupExtendedTypes: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::shaderSubgroupExtendedTypes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures , shaderSubgroupExtendedTypes) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub separateDepthStencilLayouts: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures::separateDepthStencilLayouts"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures , separateDepthStencilLayouts) - 16usize] ;
};
impl Default for VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentReferenceStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stencilLayout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentReferenceStencilLayout"]
        [::std::mem::size_of::<VkAttachmentReferenceStencilLayout>() - 24usize];
    ["Alignment of VkAttachmentReferenceStencilLayout"]
        [::std::mem::align_of::<VkAttachmentReferenceStencilLayout>() - 8usize];
    ["Offset of field: VkAttachmentReferenceStencilLayout::sType"]
        [::std::mem::offset_of!(VkAttachmentReferenceStencilLayout, sType) - 0usize];
    ["Offset of field: VkAttachmentReferenceStencilLayout::pNext"]
        [::std::mem::offset_of!(VkAttachmentReferenceStencilLayout, pNext) - 8usize];
    ["Offset of field: VkAttachmentReferenceStencilLayout::stencilLayout"]
        [::std::mem::offset_of!(VkAttachmentReferenceStencilLayout, stencilLayout) - 16usize];
};
impl Default for VkAttachmentReferenceStencilLayout {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentDescriptionStencilLayout {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stencilInitialLayout: VkImageLayout,
    pub stencilFinalLayout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentDescriptionStencilLayout"]
        [::std::mem::size_of::<VkAttachmentDescriptionStencilLayout>() - 24usize];
    ["Alignment of VkAttachmentDescriptionStencilLayout"]
        [::std::mem::align_of::<VkAttachmentDescriptionStencilLayout>() - 8usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::sType"]
        [::std::mem::offset_of!(VkAttachmentDescriptionStencilLayout, sType) - 0usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::pNext"]
        [::std::mem::offset_of!(VkAttachmentDescriptionStencilLayout, pNext) - 8usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::stencilInitialLayout"][::std::mem::offset_of!(
        VkAttachmentDescriptionStencilLayout,
        stencilInitialLayout
    ) - 16usize];
    ["Offset of field: VkAttachmentDescriptionStencilLayout::stencilFinalLayout"][::std::mem::offset_of!(
        VkAttachmentDescriptionStencilLayout,
        stencilFinalLayout
    ) - 20usize];
};
impl Default for VkAttachmentDescriptionStencilLayout {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHostQueryResetFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hostQueryReset: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHostQueryResetFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceHostQueryResetFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceHostQueryResetFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceHostQueryResetFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceHostQueryResetFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostQueryResetFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHostQueryResetFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostQueryResetFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceHostQueryResetFeatures::hostQueryReset"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostQueryResetFeatures, hostQueryReset) - 16usize];
};
impl Default for VkPhysicalDeviceHostQueryResetFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub timelineSemaphore: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTimelineSemaphoreFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceTimelineSemaphoreFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreFeatures::timelineSemaphore"][::std::mem::offset_of!(
        VkPhysicalDeviceTimelineSemaphoreFeatures,
        timelineSemaphore
    ) - 16usize];
};
impl Default for VkPhysicalDeviceTimelineSemaphoreFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTimelineSemaphoreValueDifference: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTimelineSemaphoreProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceTimelineSemaphoreProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceTimelineSemaphoreProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceTimelineSemaphoreProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTimelineSemaphoreProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTimelineSemaphoreProperties::maxTimelineSemaphoreValueDifference"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTimelineSemaphoreProperties , maxTimelineSemaphoreValueDifference) - 16usize] ;
};
impl Default for VkPhysicalDeviceTimelineSemaphoreProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreTypeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphoreType: VkSemaphoreType,
    pub initialValue: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreTypeCreateInfo"]
        [::std::mem::size_of::<VkSemaphoreTypeCreateInfo>() - 32usize];
    ["Alignment of VkSemaphoreTypeCreateInfo"]
        [::std::mem::align_of::<VkSemaphoreTypeCreateInfo>() - 8usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::sType"]
        [::std::mem::offset_of!(VkSemaphoreTypeCreateInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::pNext"]
        [::std::mem::offset_of!(VkSemaphoreTypeCreateInfo, pNext) - 8usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::semaphoreType"]
        [::std::mem::offset_of!(VkSemaphoreTypeCreateInfo, semaphoreType) - 16usize];
    ["Offset of field: VkSemaphoreTypeCreateInfo::initialValue"]
        [::std::mem::offset_of!(VkSemaphoreTypeCreateInfo, initialValue) - 24usize];
};
impl Default for VkSemaphoreTypeCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTimelineSemaphoreSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreValueCount: u32,
    pub pWaitSemaphoreValues: *const u64,
    pub signalSemaphoreValueCount: u32,
    pub pSignalSemaphoreValues: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTimelineSemaphoreSubmitInfo"]
        [::std::mem::size_of::<VkTimelineSemaphoreSubmitInfo>() - 48usize];
    ["Alignment of VkTimelineSemaphoreSubmitInfo"]
        [::std::mem::align_of::<VkTimelineSemaphoreSubmitInfo>() - 8usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::sType"]
        [::std::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, sType) - 0usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::pNext"]
        [::std::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, pNext) - 8usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::waitSemaphoreValueCount"]
        [::std::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, waitSemaphoreValueCount) - 16usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::pWaitSemaphoreValues"]
        [::std::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, pWaitSemaphoreValues) - 24usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::signalSemaphoreValueCount"][::std::mem::offset_of!(
        VkTimelineSemaphoreSubmitInfo,
        signalSemaphoreValueCount
    ) - 32usize];
    ["Offset of field: VkTimelineSemaphoreSubmitInfo::pSignalSemaphoreValues"]
        [::std::mem::offset_of!(VkTimelineSemaphoreSubmitInfo, pSignalSemaphoreValues) - 40usize];
};
impl Default for VkTimelineSemaphoreSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreWaitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSemaphoreWaitFlags,
    pub semaphoreCount: u32,
    pub pSemaphores: *const VkSemaphore,
    pub pValues: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreWaitInfo"][::std::mem::size_of::<VkSemaphoreWaitInfo>() - 40usize];
    ["Alignment of VkSemaphoreWaitInfo"][::std::mem::align_of::<VkSemaphoreWaitInfo>() - 8usize];
    ["Offset of field: VkSemaphoreWaitInfo::sType"]
        [::std::mem::offset_of!(VkSemaphoreWaitInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreWaitInfo::pNext"]
        [::std::mem::offset_of!(VkSemaphoreWaitInfo, pNext) - 8usize];
    ["Offset of field: VkSemaphoreWaitInfo::flags"]
        [::std::mem::offset_of!(VkSemaphoreWaitInfo, flags) - 16usize];
    ["Offset of field: VkSemaphoreWaitInfo::semaphoreCount"]
        [::std::mem::offset_of!(VkSemaphoreWaitInfo, semaphoreCount) - 20usize];
    ["Offset of field: VkSemaphoreWaitInfo::pSemaphores"]
        [::std::mem::offset_of!(VkSemaphoreWaitInfo, pSemaphores) - 24usize];
    ["Offset of field: VkSemaphoreWaitInfo::pValues"]
        [::std::mem::offset_of!(VkSemaphoreWaitInfo, pValues) - 32usize];
};
impl Default for VkSemaphoreWaitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreSignalInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreSignalInfo"][::std::mem::size_of::<VkSemaphoreSignalInfo>() - 32usize];
    ["Alignment of VkSemaphoreSignalInfo"]
        [::std::mem::align_of::<VkSemaphoreSignalInfo>() - 8usize];
    ["Offset of field: VkSemaphoreSignalInfo::sType"]
        [::std::mem::offset_of!(VkSemaphoreSignalInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreSignalInfo::pNext"]
        [::std::mem::offset_of!(VkSemaphoreSignalInfo, pNext) - 8usize];
    ["Offset of field: VkSemaphoreSignalInfo::semaphore"]
        [::std::mem::offset_of!(VkSemaphoreSignalInfo, semaphore) - 16usize];
    ["Offset of field: VkSemaphoreSignalInfo::value"]
        [::std::mem::offset_of!(VkSemaphoreSignalInfo, value) - 24usize];
};
impl Default for VkSemaphoreSignalInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBufferDeviceAddressFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>() - 32usize];
    ["Alignment of VkPhysicalDeviceBufferDeviceAddressFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddress"][::std::mem::offset_of!(
        VkPhysicalDeviceBufferDeviceAddressFeatures,
        bufferDeviceAddress
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddressCaptureReplay"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeatures , bufferDeviceAddressCaptureReplay) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddressMultiDevice"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeatures , bufferDeviceAddressMultiDevice) - 24usize] ;
};
impl Default for VkPhysicalDeviceBufferDeviceAddressFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferDeviceAddressInfo"]
        [::std::mem::size_of::<VkBufferDeviceAddressInfo>() - 24usize];
    ["Alignment of VkBufferDeviceAddressInfo"]
        [::std::mem::align_of::<VkBufferDeviceAddressInfo>() - 8usize];
    ["Offset of field: VkBufferDeviceAddressInfo::sType"]
        [::std::mem::offset_of!(VkBufferDeviceAddressInfo, sType) - 0usize];
    ["Offset of field: VkBufferDeviceAddressInfo::pNext"]
        [::std::mem::offset_of!(VkBufferDeviceAddressInfo, pNext) - 8usize];
    ["Offset of field: VkBufferDeviceAddressInfo::buffer"]
        [::std::mem::offset_of!(VkBufferDeviceAddressInfo, buffer) - 16usize];
};
impl Default for VkBufferDeviceAddressInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureAddress: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferOpaqueCaptureAddressCreateInfo"]
        [::std::mem::size_of::<VkBufferOpaqueCaptureAddressCreateInfo>() - 24usize];
    ["Alignment of VkBufferOpaqueCaptureAddressCreateInfo"]
        [::std::mem::align_of::<VkBufferOpaqueCaptureAddressCreateInfo>() - 8usize];
    ["Offset of field: VkBufferOpaqueCaptureAddressCreateInfo::sType"]
        [::std::mem::offset_of!(VkBufferOpaqueCaptureAddressCreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferOpaqueCaptureAddressCreateInfo::pNext"]
        [::std::mem::offset_of!(VkBufferOpaqueCaptureAddressCreateInfo, pNext) - 8usize];
    ["Offset of field: VkBufferOpaqueCaptureAddressCreateInfo::opaqueCaptureAddress"][::std::mem::offset_of!(
        VkBufferOpaqueCaptureAddressCreateInfo,
        opaqueCaptureAddress
    ) - 16usize];
};
impl Default for VkBufferOpaqueCaptureAddressCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureAddress: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryOpaqueCaptureAddressAllocateInfo"]
        [::std::mem::size_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>() - 24usize];
    ["Alignment of VkMemoryOpaqueCaptureAddressAllocateInfo"]
        [::std::mem::align_of::<VkMemoryOpaqueCaptureAddressAllocateInfo>() - 8usize];
    ["Offset of field: VkMemoryOpaqueCaptureAddressAllocateInfo::sType"]
        [::std::mem::offset_of!(VkMemoryOpaqueCaptureAddressAllocateInfo, sType) - 0usize];
    ["Offset of field: VkMemoryOpaqueCaptureAddressAllocateInfo::pNext"]
        [::std::mem::offset_of!(VkMemoryOpaqueCaptureAddressAllocateInfo, pNext) - 8usize];
    ["Offset of field: VkMemoryOpaqueCaptureAddressAllocateInfo::opaqueCaptureAddress"][::std::mem::offset_of!(
        VkMemoryOpaqueCaptureAddressAllocateInfo,
        opaqueCaptureAddress
    )
        - 16usize];
};
impl Default for VkMemoryOpaqueCaptureAddressAllocateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceMemoryOpaqueCaptureAddressInfo"]
        [::std::mem::size_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>() - 24usize];
    ["Alignment of VkDeviceMemoryOpaqueCaptureAddressInfo"]
        [::std::mem::align_of::<VkDeviceMemoryOpaqueCaptureAddressInfo>() - 8usize];
    ["Offset of field: VkDeviceMemoryOpaqueCaptureAddressInfo::sType"]
        [::std::mem::offset_of!(VkDeviceMemoryOpaqueCaptureAddressInfo, sType) - 0usize];
    ["Offset of field: VkDeviceMemoryOpaqueCaptureAddressInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceMemoryOpaqueCaptureAddressInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceMemoryOpaqueCaptureAddressInfo::memory"]
        [::std::mem::offset_of!(VkDeviceMemoryOpaqueCaptureAddressInfo, memory) - 16usize];
};
impl Default for VkDeviceMemoryOpaqueCaptureAddressInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDrawIndirectCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCreateRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo),
>;
pub type PFN_vkResetQueryPool = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
pub type PFN_vkGetSemaphoreCounterValue = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64) -> VkResult,
>;
pub type PFN_vkWaitSemaphores = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphore = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo) -> VkResult,
>;
pub type PFN_vkGetBufferDeviceAddress = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
unsafe extern "system" {
    pub fn vkCmdDrawIndirectCount(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawIndexedIndirectCount(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCreateRenderPass2(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdBeginRenderPass2(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdNextSubpass2(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndRenderPass2(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
unsafe extern "system" {
    pub fn vkResetQueryPool(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
unsafe extern "system" {
    pub fn vkGetSemaphoreCounterValue(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkWaitSemaphores(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkSignalSemaphore(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetBufferDeviceAddress(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
unsafe extern "system" {
    pub fn vkGetBufferOpaqueCaptureAddress(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> u64;
}
unsafe extern "system" {
    pub fn vkGetDeviceMemoryOpaqueCaptureAddress(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64;
}
pub type VkFlags64 = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPrivateDataSlot_T {
    _unused: [u8; 0],
}
pub type VkPrivateDataSlot = *mut VkPrivateDataSlot_T;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT:
    VkPipelineCreationFeedbackFlagBits = 1;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT : VkPipelineCreationFeedbackFlagBits = 2 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT : VkPipelineCreationFeedbackFlagBits = 4 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT:
    VkPipelineCreationFeedbackFlagBits = 1;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT : VkPipelineCreationFeedbackFlagBits = 2 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT : VkPipelineCreationFeedbackFlagBits = 4 ;
pub const VkPipelineCreationFeedbackFlagBits_VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM:
    VkPipelineCreationFeedbackFlagBits = 2147483647;
pub type VkPipelineCreationFeedbackFlagBits = ::std::os::raw::c_uint;
pub type VkPipelineCreationFeedbackFlags = VkFlags;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_VALIDATION_BIT: VkToolPurposeFlagBits = 1;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_PROFILING_BIT: VkToolPurposeFlagBits = 2;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_TRACING_BIT: VkToolPurposeFlagBits = 4;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT: VkToolPurposeFlagBits = 8;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT: VkToolPurposeFlagBits = 16;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: VkToolPurposeFlagBits = 32;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: VkToolPurposeFlagBits = 64;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: VkToolPurposeFlagBits = 1;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_PROFILING_BIT_EXT: VkToolPurposeFlagBits = 2;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_TRACING_BIT_EXT: VkToolPurposeFlagBits = 4;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: VkToolPurposeFlagBits =
    8;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: VkToolPurposeFlagBits =
    16;
pub const VkToolPurposeFlagBits_VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM: VkToolPurposeFlagBits =
    2147483647;
pub type VkToolPurposeFlagBits = ::std::os::raw::c_uint;
pub type VkToolPurposeFlags = VkFlags;
pub type VkPrivateDataSlotCreateFlags = VkFlags;
pub type VkPipelineStageFlags2 = VkFlags64;
pub type VkPipelineStageFlagBits2 = VkFlags64;
pub const VK_PIPELINE_STAGE_2_NONE: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_HOST_BIT: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_COPY_BIT: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT: VkPipelineStageFlagBits2 = 137438953472;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT: VkPipelineStageFlagBits2 =
    274877906944;
pub const VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR: VkPipelineStageFlagBits2 = 67108864;
pub const VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR: VkPipelineStageFlagBits2 = 134217728;
pub const VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2 =
    137438953472;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2 =
    274877906944;
pub const VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2 = 16777216;
pub const VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2 = 262144;
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2 = 131072;
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_EXT: VkPipelineStageFlagBits2 = 131072;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2 =
    4194304;
pub const VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2 = 4194304;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2 =
    33554432;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2 =
    33554432;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2 = 8388608;
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 524288;
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 1048576;
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = 524288;
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_EXT: VkPipelineStageFlagBits2 = 1048576;
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 = 549755813888;
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2 = 549755813888;
pub const VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2 = 1099511627776;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR: VkPipelineStageFlagBits2 =
    268435456;
pub const VK_PIPELINE_STAGE_2_MICROMAP_BUILD_BIT_EXT: VkPipelineStageFlagBits2 = 1073741824;
pub const VK_PIPELINE_STAGE_2_CLUSTER_CULLING_SHADER_BIT_HUAWEI: VkPipelineStageFlagBits2 =
    2199023255552;
pub const VK_PIPELINE_STAGE_2_OPTICAL_FLOW_BIT_NV: VkPipelineStageFlagBits2 = 536870912;
pub const VK_PIPELINE_STAGE_2_CONVERT_COOPERATIVE_VECTOR_MATRIX_BIT_NV: VkPipelineStageFlagBits2 =
    17592186044416;
pub type VkAccessFlags2 = VkFlags64;
pub type VkAccessFlagBits2 = VkFlags64;
pub const VK_ACCESS_2_NONE: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_TRANSFER_READ_BIT: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_HOST_READ_BIT: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_WRITE_BIT: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_MEMORY_READ_BIT: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR: VkAccessFlagBits2 = 34359738368;
pub const VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR: VkAccessFlagBits2 = 68719476736;
pub const VK_ACCESS_2_VIDEO_ENCODE_READ_BIT_KHR: VkAccessFlagBits2 = 137438953472;
pub const VK_ACCESS_2_VIDEO_ENCODE_WRITE_BIT_KHR: VkAccessFlagBits2 = 274877906944;
pub const VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2 = 33554432;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2 = 67108864;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2 = 134217728;
pub const VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2 = 1048576;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2 = 131072;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2 = 262144;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_EXT: VkAccessFlagBits2 = 131072;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_EXT: VkAccessFlagBits2 = 262144;
pub const VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2 = 16777216;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2 = 524288;
pub const VK_ACCESS_2_DESCRIPTOR_BUFFER_READ_BIT_EXT: VkAccessFlagBits2 = 2199023255552;
pub const VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2 = 549755813888;
pub const VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR: VkAccessFlagBits2 = 1099511627776;
pub const VK_ACCESS_2_MICROMAP_READ_BIT_EXT: VkAccessFlagBits2 = 17592186044416;
pub const VK_ACCESS_2_MICROMAP_WRITE_BIT_EXT: VkAccessFlagBits2 = 35184372088832;
pub const VK_ACCESS_2_OPTICAL_FLOW_READ_BIT_NV: VkAccessFlagBits2 = 4398046511104;
pub const VK_ACCESS_2_OPTICAL_FLOW_WRITE_BIT_NV: VkAccessFlagBits2 = 8796093022208;
pub const VkSubmitFlagBits_VK_SUBMIT_PROTECTED_BIT: VkSubmitFlagBits = 1;
pub const VkSubmitFlagBits_VK_SUBMIT_PROTECTED_BIT_KHR: VkSubmitFlagBits = 1;
pub const VkSubmitFlagBits_VK_SUBMIT_FLAG_BITS_MAX_ENUM: VkSubmitFlagBits = 2147483647;
pub type VkSubmitFlagBits = ::std::os::raw::c_uint;
pub type VkSubmitFlags = VkFlags;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT:
    VkRenderingFlagBits = 1;
pub const VkRenderingFlagBits_VK_RENDERING_SUSPENDING_BIT: VkRenderingFlagBits = 2;
pub const VkRenderingFlagBits_VK_RENDERING_RESUMING_BIT: VkRenderingFlagBits = 4;
pub const VkRenderingFlagBits_VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT: VkRenderingFlagBits = 8;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_INLINE_BIT_KHR: VkRenderingFlagBits = 16;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR:
    VkRenderingFlagBits = 1;
pub const VkRenderingFlagBits_VK_RENDERING_SUSPENDING_BIT_KHR: VkRenderingFlagBits = 2;
pub const VkRenderingFlagBits_VK_RENDERING_RESUMING_BIT_KHR: VkRenderingFlagBits = 4;
pub const VkRenderingFlagBits_VK_RENDERING_CONTENTS_INLINE_BIT_EXT: VkRenderingFlagBits = 16;
pub const VkRenderingFlagBits_VK_RENDERING_FLAG_BITS_MAX_ENUM: VkRenderingFlagBits = 2147483647;
pub type VkRenderingFlagBits = ::std::os::raw::c_uint;
pub type VkRenderingFlags = VkFlags;
pub type VkFormatFeatureFlags2 = VkFlags64;
pub type VkFormatFeatureFlagBits2 = VkFlags64;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT:
    VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT:
    VkFormatFeatureFlagBits2 = 524288;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT:
    VkFormatFeatureFlagBits2 = 1048576;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT : VkFormatFeatureFlagBits2 = 2097152 ;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 =
    2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 =
    4294967296;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT: VkFormatFeatureFlagBits2 =
    8589934592;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT: VkFormatFeatureFlagBits2 = 70368744177664;
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_OUTPUT_BIT_KHR: VkFormatFeatureFlagBits2 = 33554432;
pub const VK_FORMAT_FEATURE_2_VIDEO_DECODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = 67108864;
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR:
    VkFormatFeatureFlagBits2 = 536870912;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits2 = 16777216;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 =
    1073741824;
pub const VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT: VkFormatFeatureFlagBits2 =
    70368744177664;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_INPUT_BIT_KHR: VkFormatFeatureFlagBits2 = 134217728;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_DPB_BIT_KHR: VkFormatFeatureFlagBits2 = 268435456;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR:
    VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR : VkFormatFeatureFlagBits2 = 524288 ;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR : VkFormatFeatureFlagBits2 = 1048576 ;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR : VkFormatFeatureFlagBits2 = 2097152 ;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 =
    2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 =
    4294967296;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR: VkFormatFeatureFlagBits2 =
    8589934592;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_RADIUS_BUFFER_BIT_NV:
    VkFormatFeatureFlagBits2 = 2251799813685248;
pub const VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV: VkFormatFeatureFlagBits2 =
    274877906944;
pub const VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 17179869184;
pub const VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 34359738368;
pub const VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM: VkFormatFeatureFlagBits2 = 68719476736;
pub const VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM: VkFormatFeatureFlagBits2 = 137438953472;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_IMAGE_BIT_NV: VkFormatFeatureFlagBits2 = 1099511627776;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_VECTOR_BIT_NV: VkFormatFeatureFlagBits2 = 2199023255552;
pub const VK_FORMAT_FEATURE_2_OPTICAL_FLOW_COST_BIT_NV: VkFormatFeatureFlagBits2 = 4398046511104;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR:
    VkFormatFeatureFlagBits2 = 562949953421312;
pub const VK_FORMAT_FEATURE_2_VIDEO_ENCODE_EMPHASIS_MAP_BIT_KHR: VkFormatFeatureFlagBits2 =
    1125899906842624;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan13Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustImageAccess: VkBool32,
    pub inlineUniformBlock: VkBool32,
    pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
    pub pipelineCreationCacheControl: VkBool32,
    pub privateData: VkBool32,
    pub shaderDemoteToHelperInvocation: VkBool32,
    pub shaderTerminateInvocation: VkBool32,
    pub subgroupSizeControl: VkBool32,
    pub computeFullSubgroups: VkBool32,
    pub synchronization2: VkBool32,
    pub textureCompressionASTC_HDR: VkBool32,
    pub shaderZeroInitializeWorkgroupMemory: VkBool32,
    pub dynamicRendering: VkBool32,
    pub shaderIntegerDotProduct: VkBool32,
    pub maintenance4: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan13Features"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan13Features>() - 80usize];
    ["Alignment of VkPhysicalDeviceVulkan13Features"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan13Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::robustImageAccess"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, robustImageAccess) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::inlineUniformBlock"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, inlineUniformBlock) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::descriptorBindingInlineUniformBlockUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Features , descriptorBindingInlineUniformBlockUpdateAfterBind) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Features::pipelineCreationCacheControl"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        pipelineCreationCacheControl
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::privateData"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, privateData) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderDemoteToHelperInvocation"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderDemoteToHelperInvocation
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderTerminateInvocation"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderTerminateInvocation
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::subgroupSizeControl"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, subgroupSizeControl) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::computeFullSubgroups"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, computeFullSubgroups) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::synchronization2"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, synchronization2) - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::textureCompressionASTC_HDR"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        textureCompressionASTC_HDR
    ) - 56usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderZeroInitializeWorkgroupMemory"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderZeroInitializeWorkgroupMemory
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::dynamicRendering"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, dynamicRendering) - 64usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::shaderIntegerDotProduct"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Features,
        shaderIntegerDotProduct
    ) - 68usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Features::maintenance4"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Features, maintenance4) - 72usize];
};
impl Default for VkPhysicalDeviceVulkan13Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan13Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxComputeWorkgroupSubgroups: u32,
    pub requiredSubgroupSizeStages: VkShaderStageFlags,
    pub maxInlineUniformBlockSize: u32,
    pub maxPerStageDescriptorInlineUniformBlocks: u32,
    pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    pub maxDescriptorSetInlineUniformBlocks: u32,
    pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
    pub maxInlineUniformTotalSize: u32,
    pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct8BitSignedAccelerated: VkBool32,
    pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct16BitSignedAccelerated: VkBool32,
    pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct32BitSignedAccelerated: VkBool32,
    pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct64BitSignedAccelerated: VkBool32,
    pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
    pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub maxBufferSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan13Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan13Properties>() - 216usize];
    ["Alignment of VkPhysicalDeviceVulkan13Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan13Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::minSubgroupSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, minSubgroupSize) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxSubgroupSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, maxSubgroupSize) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxComputeWorkgroupSubgroups"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxComputeWorkgroupSubgroups
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::requiredSubgroupSizeStages"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        requiredSubgroupSizeStages
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxInlineUniformBlockSize"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxInlineUniformBlockSize
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxPerStageDescriptorInlineUniformBlocks"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , maxPerStageDescriptorInlineUniformBlocks) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxDescriptorSetInlineUniformBlocks"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxDescriptorSetInlineUniformBlocks
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxDescriptorSetUpdateAfterBindInlineUniformBlocks"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , maxDescriptorSetUpdateAfterBindInlineUniformBlocks) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxInlineUniformTotalSize"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan13Properties,
        maxInlineUniformTotalSize
    ) - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct8BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct8BitUnsignedAccelerated) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct8BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct8BitSignedAccelerated) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct8BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct8BitMixedSignednessAccelerated) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct4x8BitPackedUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct4x8BitPackedUnsignedAccelerated) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct4x8BitPackedSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct4x8BitPackedSignedAccelerated) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct4x8BitPackedMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct4x8BitPackedMixedSignednessAccelerated) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct16BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct16BitUnsignedAccelerated) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct16BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct16BitSignedAccelerated) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct16BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct16BitMixedSignednessAccelerated) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct32BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct32BitUnsignedAccelerated) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct32BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct32BitSignedAccelerated) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct32BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct32BitMixedSignednessAccelerated) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct64BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct64BitUnsignedAccelerated) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct64BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct64BitSignedAccelerated) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProduct64BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProduct64BitMixedSignednessAccelerated) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating8BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating8BitSignedAccelerated) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) - 124usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) - 132usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) - 136usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) - 140usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating16BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating16BitSignedAccelerated) - 144usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) - 148usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) - 152usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating32BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating32BitSignedAccelerated) - 156usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) - 160usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) - 164usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating64BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating64BitSignedAccelerated) - 168usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) - 172usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::storageTexelBufferOffsetAlignmentBytes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , storageTexelBufferOffsetAlignmentBytes) - 176usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::storageTexelBufferOffsetSingleTexelAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , storageTexelBufferOffsetSingleTexelAlignment) - 184usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::uniformTexelBufferOffsetAlignmentBytes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , uniformTexelBufferOffsetAlignmentBytes) - 192usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::uniformTexelBufferOffsetSingleTexelAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan13Properties , uniformTexelBufferOffsetSingleTexelAlignment) - 200usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan13Properties::maxBufferSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan13Properties, maxBufferSize) - 208usize];
};
impl Default for VkPhysicalDeviceVulkan13Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPipelineCreationFeedback {
    pub flags: VkPipelineCreationFeedbackFlags,
    pub duration: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreationFeedback"]
        [::std::mem::size_of::<VkPipelineCreationFeedback>() - 16usize];
    ["Alignment of VkPipelineCreationFeedback"]
        [::std::mem::align_of::<VkPipelineCreationFeedback>() - 8usize];
    ["Offset of field: VkPipelineCreationFeedback::flags"]
        [::std::mem::offset_of!(VkPipelineCreationFeedback, flags) - 0usize];
    ["Offset of field: VkPipelineCreationFeedback::duration"]
        [::std::mem::offset_of!(VkPipelineCreationFeedback, duration) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreationFeedbackCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pPipelineCreationFeedback: *mut VkPipelineCreationFeedback,
    pub pipelineStageCreationFeedbackCount: u32,
    pub pPipelineStageCreationFeedbacks: *mut VkPipelineCreationFeedback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreationFeedbackCreateInfo"]
        [::std::mem::size_of::<VkPipelineCreationFeedbackCreateInfo>() - 40usize];
    ["Alignment of VkPipelineCreationFeedbackCreateInfo"]
        [::std::mem::align_of::<VkPipelineCreationFeedbackCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineCreationFeedbackCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineCreationFeedbackCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pPipelineCreationFeedback"][::std::mem::offset_of!(
        VkPipelineCreationFeedbackCreateInfo,
        pPipelineCreationFeedback
    )
        - 16usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pipelineStageCreationFeedbackCount"][::std::mem::offset_of!(
        VkPipelineCreationFeedbackCreateInfo,
        pipelineStageCreationFeedbackCount
    )
        - 24usize];
    ["Offset of field: VkPipelineCreationFeedbackCreateInfo::pPipelineStageCreationFeedbacks"][::std::mem::offset_of!(
        VkPipelineCreationFeedbackCreateInfo,
        pPipelineStageCreationFeedbacks
    )
        - 32usize];
};
impl Default for VkPipelineCreationFeedbackCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderTerminateInvocationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderTerminateInvocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderTerminateInvocationFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderTerminateInvocationFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderTerminateInvocationFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderTerminateInvocationFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderTerminateInvocationFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderTerminateInvocationFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderTerminateInvocationFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderTerminateInvocationFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderTerminateInvocationFeatures::shaderTerminateInvocation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderTerminateInvocationFeatures , shaderTerminateInvocation) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderTerminateInvocationFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceToolProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub version: [::std::os::raw::c_char; 256usize],
    pub purposes: VkToolPurposeFlags,
    pub description: [::std::os::raw::c_char; 256usize],
    pub layer: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceToolProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceToolProperties>() - 1048usize];
    ["Alignment of VkPhysicalDeviceToolProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceToolProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceToolProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceToolProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::name"]
        [::std::mem::offset_of!(VkPhysicalDeviceToolProperties, name) - 16usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::version"]
        [::std::mem::offset_of!(VkPhysicalDeviceToolProperties, version) - 272usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::purposes"]
        [::std::mem::offset_of!(VkPhysicalDeviceToolProperties, purposes) - 528usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::description"]
        [::std::mem::offset_of!(VkPhysicalDeviceToolProperties, description) - 532usize];
    ["Offset of field: VkPhysicalDeviceToolProperties::layer"]
        [::std::mem::offset_of!(VkPhysicalDeviceToolProperties, layer) - 788usize];
};
impl Default for VkPhysicalDeviceToolProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderDemoteToHelperInvocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures::shaderDemoteToHelperInvocation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures , shaderDemoteToHelperInvocation) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePrivateDataFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub privateData: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePrivateDataFeatures"]
        [::std::mem::size_of::<VkPhysicalDevicePrivateDataFeatures>() - 24usize];
    ["Alignment of VkPhysicalDevicePrivateDataFeatures"]
        [::std::mem::align_of::<VkPhysicalDevicePrivateDataFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDevicePrivateDataFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePrivateDataFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePrivateDataFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePrivateDataFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePrivateDataFeatures::privateData"]
        [::std::mem::offset_of!(VkPhysicalDevicePrivateDataFeatures, privateData) - 16usize];
};
impl Default for VkPhysicalDevicePrivateDataFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDevicePrivateDataCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub privateDataSlotRequestCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDevicePrivateDataCreateInfo"]
        [::std::mem::size_of::<VkDevicePrivateDataCreateInfo>() - 24usize];
    ["Alignment of VkDevicePrivateDataCreateInfo"]
        [::std::mem::align_of::<VkDevicePrivateDataCreateInfo>() - 8usize];
    ["Offset of field: VkDevicePrivateDataCreateInfo::sType"]
        [::std::mem::offset_of!(VkDevicePrivateDataCreateInfo, sType) - 0usize];
    ["Offset of field: VkDevicePrivateDataCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDevicePrivateDataCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDevicePrivateDataCreateInfo::privateDataSlotRequestCount"][::std::mem::offset_of!(
        VkDevicePrivateDataCreateInfo,
        privateDataSlotRequestCount
    ) - 16usize];
};
impl Default for VkDevicePrivateDataCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPrivateDataSlotCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPrivateDataSlotCreateFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPrivateDataSlotCreateInfo"]
        [::std::mem::size_of::<VkPrivateDataSlotCreateInfo>() - 24usize];
    ["Alignment of VkPrivateDataSlotCreateInfo"]
        [::std::mem::align_of::<VkPrivateDataSlotCreateInfo>() - 8usize];
    ["Offset of field: VkPrivateDataSlotCreateInfo::sType"]
        [::std::mem::offset_of!(VkPrivateDataSlotCreateInfo, sType) - 0usize];
    ["Offset of field: VkPrivateDataSlotCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPrivateDataSlotCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPrivateDataSlotCreateInfo::flags"]
        [::std::mem::offset_of!(VkPrivateDataSlotCreateInfo, flags) - 16usize];
};
impl Default for VkPrivateDataSlotCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineCreationCacheControlFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineCreationCacheControl: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineCreationCacheControlFeatures"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineCreationCacheControlFeatures>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineCreationCacheControlFeatures"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineCreationCacheControlFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineCreationCacheControlFeatures::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineCreationCacheControlFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineCreationCacheControlFeatures::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineCreationCacheControlFeatures,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineCreationCacheControlFeatures::pipelineCreationCacheControl"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineCreationCacheControlFeatures , pipelineCreationCacheControl) - 16usize] ;
};
impl Default for VkPhysicalDevicePipelineCreationCacheControlFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryBarrier2"][::std::mem::size_of::<VkMemoryBarrier2>() - 48usize];
    ["Alignment of VkMemoryBarrier2"][::std::mem::align_of::<VkMemoryBarrier2>() - 8usize];
    ["Offset of field: VkMemoryBarrier2::sType"]
        [::std::mem::offset_of!(VkMemoryBarrier2, sType) - 0usize];
    ["Offset of field: VkMemoryBarrier2::pNext"]
        [::std::mem::offset_of!(VkMemoryBarrier2, pNext) - 8usize];
    ["Offset of field: VkMemoryBarrier2::srcStageMask"]
        [::std::mem::offset_of!(VkMemoryBarrier2, srcStageMask) - 16usize];
    ["Offset of field: VkMemoryBarrier2::srcAccessMask"]
        [::std::mem::offset_of!(VkMemoryBarrier2, srcAccessMask) - 24usize];
    ["Offset of field: VkMemoryBarrier2::dstStageMask"]
        [::std::mem::offset_of!(VkMemoryBarrier2, dstStageMask) - 32usize];
    ["Offset of field: VkMemoryBarrier2::dstAccessMask"]
        [::std::mem::offset_of!(VkMemoryBarrier2, dstAccessMask) - 40usize];
};
impl Default for VkMemoryBarrier2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferMemoryBarrier2"][::std::mem::size_of::<VkBufferMemoryBarrier2>() - 80usize];
    ["Alignment of VkBufferMemoryBarrier2"]
        [::std::mem::align_of::<VkBufferMemoryBarrier2>() - 8usize];
    ["Offset of field: VkBufferMemoryBarrier2::sType"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, sType) - 0usize];
    ["Offset of field: VkBufferMemoryBarrier2::pNext"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, pNext) - 8usize];
    ["Offset of field: VkBufferMemoryBarrier2::srcStageMask"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, srcStageMask) - 16usize];
    ["Offset of field: VkBufferMemoryBarrier2::srcAccessMask"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, srcAccessMask) - 24usize];
    ["Offset of field: VkBufferMemoryBarrier2::dstStageMask"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, dstStageMask) - 32usize];
    ["Offset of field: VkBufferMemoryBarrier2::dstAccessMask"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, dstAccessMask) - 40usize];
    ["Offset of field: VkBufferMemoryBarrier2::srcQueueFamilyIndex"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, srcQueueFamilyIndex) - 48usize];
    ["Offset of field: VkBufferMemoryBarrier2::dstQueueFamilyIndex"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, dstQueueFamilyIndex) - 52usize];
    ["Offset of field: VkBufferMemoryBarrier2::buffer"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, buffer) - 56usize];
    ["Offset of field: VkBufferMemoryBarrier2::offset"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, offset) - 64usize];
    ["Offset of field: VkBufferMemoryBarrier2::size"]
        [::std::mem::offset_of!(VkBufferMemoryBarrier2, size) - 72usize];
};
impl Default for VkBufferMemoryBarrier2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageMemoryBarrier2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcStageMask: VkPipelineStageFlags2,
    pub srcAccessMask: VkAccessFlags2,
    pub dstStageMask: VkPipelineStageFlags2,
    pub dstAccessMask: VkAccessFlags2,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub srcQueueFamilyIndex: u32,
    pub dstQueueFamilyIndex: u32,
    pub image: VkImage,
    pub subresourceRange: VkImageSubresourceRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageMemoryBarrier2"][::std::mem::size_of::<VkImageMemoryBarrier2>() - 96usize];
    ["Alignment of VkImageMemoryBarrier2"]
        [::std::mem::align_of::<VkImageMemoryBarrier2>() - 8usize];
    ["Offset of field: VkImageMemoryBarrier2::sType"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, sType) - 0usize];
    ["Offset of field: VkImageMemoryBarrier2::pNext"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, pNext) - 8usize];
    ["Offset of field: VkImageMemoryBarrier2::srcStageMask"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, srcStageMask) - 16usize];
    ["Offset of field: VkImageMemoryBarrier2::srcAccessMask"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, srcAccessMask) - 24usize];
    ["Offset of field: VkImageMemoryBarrier2::dstStageMask"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, dstStageMask) - 32usize];
    ["Offset of field: VkImageMemoryBarrier2::dstAccessMask"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, dstAccessMask) - 40usize];
    ["Offset of field: VkImageMemoryBarrier2::oldLayout"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, oldLayout) - 48usize];
    ["Offset of field: VkImageMemoryBarrier2::newLayout"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, newLayout) - 52usize];
    ["Offset of field: VkImageMemoryBarrier2::srcQueueFamilyIndex"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, srcQueueFamilyIndex) - 56usize];
    ["Offset of field: VkImageMemoryBarrier2::dstQueueFamilyIndex"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, dstQueueFamilyIndex) - 60usize];
    ["Offset of field: VkImageMemoryBarrier2::image"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, image) - 64usize];
    ["Offset of field: VkImageMemoryBarrier2::subresourceRange"]
        [::std::mem::offset_of!(VkImageMemoryBarrier2, subresourceRange) - 72usize];
};
impl Default for VkImageMemoryBarrier2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDependencyInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dependencyFlags: VkDependencyFlags,
    pub memoryBarrierCount: u32,
    pub pMemoryBarriers: *const VkMemoryBarrier2,
    pub bufferMemoryBarrierCount: u32,
    pub pBufferMemoryBarriers: *const VkBufferMemoryBarrier2,
    pub imageMemoryBarrierCount: u32,
    pub pImageMemoryBarriers: *const VkImageMemoryBarrier2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDependencyInfo"][::std::mem::size_of::<VkDependencyInfo>() - 64usize];
    ["Alignment of VkDependencyInfo"][::std::mem::align_of::<VkDependencyInfo>() - 8usize];
    ["Offset of field: VkDependencyInfo::sType"]
        [::std::mem::offset_of!(VkDependencyInfo, sType) - 0usize];
    ["Offset of field: VkDependencyInfo::pNext"]
        [::std::mem::offset_of!(VkDependencyInfo, pNext) - 8usize];
    ["Offset of field: VkDependencyInfo::dependencyFlags"]
        [::std::mem::offset_of!(VkDependencyInfo, dependencyFlags) - 16usize];
    ["Offset of field: VkDependencyInfo::memoryBarrierCount"]
        [::std::mem::offset_of!(VkDependencyInfo, memoryBarrierCount) - 20usize];
    ["Offset of field: VkDependencyInfo::pMemoryBarriers"]
        [::std::mem::offset_of!(VkDependencyInfo, pMemoryBarriers) - 24usize];
    ["Offset of field: VkDependencyInfo::bufferMemoryBarrierCount"]
        [::std::mem::offset_of!(VkDependencyInfo, bufferMemoryBarrierCount) - 32usize];
    ["Offset of field: VkDependencyInfo::pBufferMemoryBarriers"]
        [::std::mem::offset_of!(VkDependencyInfo, pBufferMemoryBarriers) - 40usize];
    ["Offset of field: VkDependencyInfo::imageMemoryBarrierCount"]
        [::std::mem::offset_of!(VkDependencyInfo, imageMemoryBarrierCount) - 48usize];
    ["Offset of field: VkDependencyInfo::pImageMemoryBarriers"]
        [::std::mem::offset_of!(VkDependencyInfo, pImageMemoryBarriers) - 56usize];
};
impl Default for VkDependencyInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub value: u64,
    pub stageMask: VkPipelineStageFlags2,
    pub deviceIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreSubmitInfo"][::std::mem::size_of::<VkSemaphoreSubmitInfo>() - 48usize];
    ["Alignment of VkSemaphoreSubmitInfo"]
        [::std::mem::align_of::<VkSemaphoreSubmitInfo>() - 8usize];
    ["Offset of field: VkSemaphoreSubmitInfo::sType"]
        [::std::mem::offset_of!(VkSemaphoreSubmitInfo, sType) - 0usize];
    ["Offset of field: VkSemaphoreSubmitInfo::pNext"]
        [::std::mem::offset_of!(VkSemaphoreSubmitInfo, pNext) - 8usize];
    ["Offset of field: VkSemaphoreSubmitInfo::semaphore"]
        [::std::mem::offset_of!(VkSemaphoreSubmitInfo, semaphore) - 16usize];
    ["Offset of field: VkSemaphoreSubmitInfo::value"]
        [::std::mem::offset_of!(VkSemaphoreSubmitInfo, value) - 24usize];
    ["Offset of field: VkSemaphoreSubmitInfo::stageMask"]
        [::std::mem::offset_of!(VkSemaphoreSubmitInfo, stageMask) - 32usize];
    ["Offset of field: VkSemaphoreSubmitInfo::deviceIndex"]
        [::std::mem::offset_of!(VkSemaphoreSubmitInfo, deviceIndex) - 40usize];
};
impl Default for VkSemaphoreSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferSubmitInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub commandBuffer: VkCommandBuffer,
    pub deviceMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferSubmitInfo"]
        [::std::mem::size_of::<VkCommandBufferSubmitInfo>() - 32usize];
    ["Alignment of VkCommandBufferSubmitInfo"]
        [::std::mem::align_of::<VkCommandBufferSubmitInfo>() - 8usize];
    ["Offset of field: VkCommandBufferSubmitInfo::sType"]
        [::std::mem::offset_of!(VkCommandBufferSubmitInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferSubmitInfo::pNext"]
        [::std::mem::offset_of!(VkCommandBufferSubmitInfo, pNext) - 8usize];
    ["Offset of field: VkCommandBufferSubmitInfo::commandBuffer"]
        [::std::mem::offset_of!(VkCommandBufferSubmitInfo, commandBuffer) - 16usize];
    ["Offset of field: VkCommandBufferSubmitInfo::deviceMask"]
        [::std::mem::offset_of!(VkCommandBufferSubmitInfo, deviceMask) - 24usize];
};
impl Default for VkCommandBufferSubmitInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubmitInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSubmitFlags,
    pub waitSemaphoreInfoCount: u32,
    pub pWaitSemaphoreInfos: *const VkSemaphoreSubmitInfo,
    pub commandBufferInfoCount: u32,
    pub pCommandBufferInfos: *const VkCommandBufferSubmitInfo,
    pub signalSemaphoreInfoCount: u32,
    pub pSignalSemaphoreInfos: *const VkSemaphoreSubmitInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubmitInfo2"][::std::mem::size_of::<VkSubmitInfo2>() - 64usize];
    ["Alignment of VkSubmitInfo2"][::std::mem::align_of::<VkSubmitInfo2>() - 8usize];
    ["Offset of field: VkSubmitInfo2::sType"]
        [::std::mem::offset_of!(VkSubmitInfo2, sType) - 0usize];
    ["Offset of field: VkSubmitInfo2::pNext"]
        [::std::mem::offset_of!(VkSubmitInfo2, pNext) - 8usize];
    ["Offset of field: VkSubmitInfo2::flags"]
        [::std::mem::offset_of!(VkSubmitInfo2, flags) - 16usize];
    ["Offset of field: VkSubmitInfo2::waitSemaphoreInfoCount"]
        [::std::mem::offset_of!(VkSubmitInfo2, waitSemaphoreInfoCount) - 20usize];
    ["Offset of field: VkSubmitInfo2::pWaitSemaphoreInfos"]
        [::std::mem::offset_of!(VkSubmitInfo2, pWaitSemaphoreInfos) - 24usize];
    ["Offset of field: VkSubmitInfo2::commandBufferInfoCount"]
        [::std::mem::offset_of!(VkSubmitInfo2, commandBufferInfoCount) - 32usize];
    ["Offset of field: VkSubmitInfo2::pCommandBufferInfos"]
        [::std::mem::offset_of!(VkSubmitInfo2, pCommandBufferInfos) - 40usize];
    ["Offset of field: VkSubmitInfo2::signalSemaphoreInfoCount"]
        [::std::mem::offset_of!(VkSubmitInfo2, signalSemaphoreInfoCount) - 48usize];
    ["Offset of field: VkSubmitInfo2::pSignalSemaphoreInfos"]
        [::std::mem::offset_of!(VkSubmitInfo2, pSignalSemaphoreInfos) - 56usize];
};
impl Default for VkSubmitInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSynchronization2Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub synchronization2: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSynchronization2Features"]
        [::std::mem::size_of::<VkPhysicalDeviceSynchronization2Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceSynchronization2Features"]
        [::std::mem::align_of::<VkPhysicalDeviceSynchronization2Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSynchronization2Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSynchronization2Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSynchronization2Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSynchronization2Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSynchronization2Features::synchronization2"][::std::mem::offset_of!(
        VkPhysicalDeviceSynchronization2Features,
        synchronization2
    ) - 16usize];
};
impl Default for VkPhysicalDeviceSynchronization2Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderZeroInitializeWorkgroupMemory: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures::shaderZeroInitializeWorkgroupMemory"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures , shaderZeroInitializeWorkgroupMemory) - 16usize] ;
};
impl Default for VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageRobustnessFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustImageAccess: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageRobustnessFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceImageRobustnessFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageRobustnessFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceImageRobustnessFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageRobustnessFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageRobustnessFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageRobustnessFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageRobustnessFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageRobustnessFeatures::robustImageAccess"][::std::mem::offset_of!(
        VkPhysicalDeviceImageRobustnessFeatures,
        robustImageAccess
    ) - 16usize];
};
impl Default for VkPhysicalDeviceImageRobustnessFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcOffset: VkDeviceSize,
    pub dstOffset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCopy2"][::std::mem::size_of::<VkBufferCopy2>() - 40usize];
    ["Alignment of VkBufferCopy2"][::std::mem::align_of::<VkBufferCopy2>() - 8usize];
    ["Offset of field: VkBufferCopy2::sType"]
        [::std::mem::offset_of!(VkBufferCopy2, sType) - 0usize];
    ["Offset of field: VkBufferCopy2::pNext"]
        [::std::mem::offset_of!(VkBufferCopy2, pNext) - 8usize];
    ["Offset of field: VkBufferCopy2::srcOffset"]
        [::std::mem::offset_of!(VkBufferCopy2, srcOffset) - 16usize];
    ["Offset of field: VkBufferCopy2::dstOffset"]
        [::std::mem::offset_of!(VkBufferCopy2, dstOffset) - 24usize];
    ["Offset of field: VkBufferCopy2::size"][::std::mem::offset_of!(VkBufferCopy2, size) - 32usize];
};
impl Default for VkBufferCopy2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyBufferInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcBuffer: VkBuffer,
    pub dstBuffer: VkBuffer,
    pub regionCount: u32,
    pub pRegions: *const VkBufferCopy2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyBufferInfo2"][::std::mem::size_of::<VkCopyBufferInfo2>() - 48usize];
    ["Alignment of VkCopyBufferInfo2"][::std::mem::align_of::<VkCopyBufferInfo2>() - 8usize];
    ["Offset of field: VkCopyBufferInfo2::sType"]
        [::std::mem::offset_of!(VkCopyBufferInfo2, sType) - 0usize];
    ["Offset of field: VkCopyBufferInfo2::pNext"]
        [::std::mem::offset_of!(VkCopyBufferInfo2, pNext) - 8usize];
    ["Offset of field: VkCopyBufferInfo2::srcBuffer"]
        [::std::mem::offset_of!(VkCopyBufferInfo2, srcBuffer) - 16usize];
    ["Offset of field: VkCopyBufferInfo2::dstBuffer"]
        [::std::mem::offset_of!(VkCopyBufferInfo2, dstBuffer) - 24usize];
    ["Offset of field: VkCopyBufferInfo2::regionCount"]
        [::std::mem::offset_of!(VkCopyBufferInfo2, regionCount) - 32usize];
    ["Offset of field: VkCopyBufferInfo2::pRegions"]
        [::std::mem::offset_of!(VkCopyBufferInfo2, pRegions) - 40usize];
};
impl Default for VkCopyBufferInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCopy2"][::std::mem::size_of::<VkImageCopy2>() - 88usize];
    ["Alignment of VkImageCopy2"][::std::mem::align_of::<VkImageCopy2>() - 8usize];
    ["Offset of field: VkImageCopy2::sType"][::std::mem::offset_of!(VkImageCopy2, sType) - 0usize];
    ["Offset of field: VkImageCopy2::pNext"][::std::mem::offset_of!(VkImageCopy2, pNext) - 8usize];
    ["Offset of field: VkImageCopy2::srcSubresource"]
        [::std::mem::offset_of!(VkImageCopy2, srcSubresource) - 16usize];
    ["Offset of field: VkImageCopy2::srcOffset"]
        [::std::mem::offset_of!(VkImageCopy2, srcOffset) - 32usize];
    ["Offset of field: VkImageCopy2::dstSubresource"]
        [::std::mem::offset_of!(VkImageCopy2, dstSubresource) - 44usize];
    ["Offset of field: VkImageCopy2::dstOffset"]
        [::std::mem::offset_of!(VkImageCopy2, dstOffset) - 60usize];
    ["Offset of field: VkImageCopy2::extent"]
        [::std::mem::offset_of!(VkImageCopy2, extent) - 72usize];
};
impl Default for VkImageCopy2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageCopy2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageInfo2"][::std::mem::size_of::<VkCopyImageInfo2>() - 56usize];
    ["Alignment of VkCopyImageInfo2"][::std::mem::align_of::<VkCopyImageInfo2>() - 8usize];
    ["Offset of field: VkCopyImageInfo2::sType"]
        [::std::mem::offset_of!(VkCopyImageInfo2, sType) - 0usize];
    ["Offset of field: VkCopyImageInfo2::pNext"]
        [::std::mem::offset_of!(VkCopyImageInfo2, pNext) - 8usize];
    ["Offset of field: VkCopyImageInfo2::srcImage"]
        [::std::mem::offset_of!(VkCopyImageInfo2, srcImage) - 16usize];
    ["Offset of field: VkCopyImageInfo2::srcImageLayout"]
        [::std::mem::offset_of!(VkCopyImageInfo2, srcImageLayout) - 24usize];
    ["Offset of field: VkCopyImageInfo2::dstImage"]
        [::std::mem::offset_of!(VkCopyImageInfo2, dstImage) - 32usize];
    ["Offset of field: VkCopyImageInfo2::dstImageLayout"]
        [::std::mem::offset_of!(VkCopyImageInfo2, dstImageLayout) - 40usize];
    ["Offset of field: VkCopyImageInfo2::regionCount"]
        [::std::mem::offset_of!(VkCopyImageInfo2, regionCount) - 44usize];
    ["Offset of field: VkCopyImageInfo2::pRegions"]
        [::std::mem::offset_of!(VkCopyImageInfo2, pRegions) - 48usize];
};
impl Default for VkCopyImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferImageCopy2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub bufferOffset: VkDeviceSize,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferImageCopy2"][::std::mem::size_of::<VkBufferImageCopy2>() - 72usize];
    ["Alignment of VkBufferImageCopy2"][::std::mem::align_of::<VkBufferImageCopy2>() - 8usize];
    ["Offset of field: VkBufferImageCopy2::sType"]
        [::std::mem::offset_of!(VkBufferImageCopy2, sType) - 0usize];
    ["Offset of field: VkBufferImageCopy2::pNext"]
        [::std::mem::offset_of!(VkBufferImageCopy2, pNext) - 8usize];
    ["Offset of field: VkBufferImageCopy2::bufferOffset"]
        [::std::mem::offset_of!(VkBufferImageCopy2, bufferOffset) - 16usize];
    ["Offset of field: VkBufferImageCopy2::bufferRowLength"]
        [::std::mem::offset_of!(VkBufferImageCopy2, bufferRowLength) - 24usize];
    ["Offset of field: VkBufferImageCopy2::bufferImageHeight"]
        [::std::mem::offset_of!(VkBufferImageCopy2, bufferImageHeight) - 28usize];
    ["Offset of field: VkBufferImageCopy2::imageSubresource"]
        [::std::mem::offset_of!(VkBufferImageCopy2, imageSubresource) - 32usize];
    ["Offset of field: VkBufferImageCopy2::imageOffset"]
        [::std::mem::offset_of!(VkBufferImageCopy2, imageOffset) - 48usize];
    ["Offset of field: VkBufferImageCopy2::imageExtent"]
        [::std::mem::offset_of!(VkBufferImageCopy2, imageExtent) - 60usize];
};
impl Default for VkBufferImageCopy2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyBufferToImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcBuffer: VkBuffer,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkBufferImageCopy2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyBufferToImageInfo2"]
        [::std::mem::size_of::<VkCopyBufferToImageInfo2>() - 48usize];
    ["Alignment of VkCopyBufferToImageInfo2"]
        [::std::mem::align_of::<VkCopyBufferToImageInfo2>() - 8usize];
    ["Offset of field: VkCopyBufferToImageInfo2::sType"]
        [::std::mem::offset_of!(VkCopyBufferToImageInfo2, sType) - 0usize];
    ["Offset of field: VkCopyBufferToImageInfo2::pNext"]
        [::std::mem::offset_of!(VkCopyBufferToImageInfo2, pNext) - 8usize];
    ["Offset of field: VkCopyBufferToImageInfo2::srcBuffer"]
        [::std::mem::offset_of!(VkCopyBufferToImageInfo2, srcBuffer) - 16usize];
    ["Offset of field: VkCopyBufferToImageInfo2::dstImage"]
        [::std::mem::offset_of!(VkCopyBufferToImageInfo2, dstImage) - 24usize];
    ["Offset of field: VkCopyBufferToImageInfo2::dstImageLayout"]
        [::std::mem::offset_of!(VkCopyBufferToImageInfo2, dstImageLayout) - 32usize];
    ["Offset of field: VkCopyBufferToImageInfo2::regionCount"]
        [::std::mem::offset_of!(VkCopyBufferToImageInfo2, regionCount) - 36usize];
    ["Offset of field: VkCopyBufferToImageInfo2::pRegions"]
        [::std::mem::offset_of!(VkCopyBufferToImageInfo2, pRegions) - 40usize];
};
impl Default for VkCopyBufferToImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyImageToBufferInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstBuffer: VkBuffer,
    pub regionCount: u32,
    pub pRegions: *const VkBufferImageCopy2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageToBufferInfo2"]
        [::std::mem::size_of::<VkCopyImageToBufferInfo2>() - 56usize];
    ["Alignment of VkCopyImageToBufferInfo2"]
        [::std::mem::align_of::<VkCopyImageToBufferInfo2>() - 8usize];
    ["Offset of field: VkCopyImageToBufferInfo2::sType"]
        [::std::mem::offset_of!(VkCopyImageToBufferInfo2, sType) - 0usize];
    ["Offset of field: VkCopyImageToBufferInfo2::pNext"]
        [::std::mem::offset_of!(VkCopyImageToBufferInfo2, pNext) - 8usize];
    ["Offset of field: VkCopyImageToBufferInfo2::srcImage"]
        [::std::mem::offset_of!(VkCopyImageToBufferInfo2, srcImage) - 16usize];
    ["Offset of field: VkCopyImageToBufferInfo2::srcImageLayout"]
        [::std::mem::offset_of!(VkCopyImageToBufferInfo2, srcImageLayout) - 24usize];
    ["Offset of field: VkCopyImageToBufferInfo2::dstBuffer"]
        [::std::mem::offset_of!(VkCopyImageToBufferInfo2, dstBuffer) - 32usize];
    ["Offset of field: VkCopyImageToBufferInfo2::regionCount"]
        [::std::mem::offset_of!(VkCopyImageToBufferInfo2, regionCount) - 40usize];
    ["Offset of field: VkCopyImageToBufferInfo2::pRegions"]
        [::std::mem::offset_of!(VkCopyImageToBufferInfo2, pRegions) - 48usize];
};
impl Default for VkCopyImageToBufferInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageBlit2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffsets: [VkOffset3D; 2usize],
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffsets: [VkOffset3D; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageBlit2"][::std::mem::size_of::<VkImageBlit2>() - 96usize];
    ["Alignment of VkImageBlit2"][::std::mem::align_of::<VkImageBlit2>() - 8usize];
    ["Offset of field: VkImageBlit2::sType"][::std::mem::offset_of!(VkImageBlit2, sType) - 0usize];
    ["Offset of field: VkImageBlit2::pNext"][::std::mem::offset_of!(VkImageBlit2, pNext) - 8usize];
    ["Offset of field: VkImageBlit2::srcSubresource"]
        [::std::mem::offset_of!(VkImageBlit2, srcSubresource) - 16usize];
    ["Offset of field: VkImageBlit2::srcOffsets"]
        [::std::mem::offset_of!(VkImageBlit2, srcOffsets) - 32usize];
    ["Offset of field: VkImageBlit2::dstSubresource"]
        [::std::mem::offset_of!(VkImageBlit2, dstSubresource) - 56usize];
    ["Offset of field: VkImageBlit2::dstOffsets"]
        [::std::mem::offset_of!(VkImageBlit2, dstOffsets) - 72usize];
};
impl Default for VkImageBlit2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBlitImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageBlit2,
    pub filter: VkFilter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBlitImageInfo2"][::std::mem::size_of::<VkBlitImageInfo2>() - 64usize];
    ["Alignment of VkBlitImageInfo2"][::std::mem::align_of::<VkBlitImageInfo2>() - 8usize];
    ["Offset of field: VkBlitImageInfo2::sType"]
        [::std::mem::offset_of!(VkBlitImageInfo2, sType) - 0usize];
    ["Offset of field: VkBlitImageInfo2::pNext"]
        [::std::mem::offset_of!(VkBlitImageInfo2, pNext) - 8usize];
    ["Offset of field: VkBlitImageInfo2::srcImage"]
        [::std::mem::offset_of!(VkBlitImageInfo2, srcImage) - 16usize];
    ["Offset of field: VkBlitImageInfo2::srcImageLayout"]
        [::std::mem::offset_of!(VkBlitImageInfo2, srcImageLayout) - 24usize];
    ["Offset of field: VkBlitImageInfo2::dstImage"]
        [::std::mem::offset_of!(VkBlitImageInfo2, dstImage) - 32usize];
    ["Offset of field: VkBlitImageInfo2::dstImageLayout"]
        [::std::mem::offset_of!(VkBlitImageInfo2, dstImageLayout) - 40usize];
    ["Offset of field: VkBlitImageInfo2::regionCount"]
        [::std::mem::offset_of!(VkBlitImageInfo2, regionCount) - 44usize];
    ["Offset of field: VkBlitImageInfo2::pRegions"]
        [::std::mem::offset_of!(VkBlitImageInfo2, pRegions) - 48usize];
    ["Offset of field: VkBlitImageInfo2::filter"]
        [::std::mem::offset_of!(VkBlitImageInfo2, filter) - 56usize];
};
impl Default for VkBlitImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageResolve2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSubresource: VkImageSubresourceLayers,
    pub srcOffset: VkOffset3D,
    pub dstSubresource: VkImageSubresourceLayers,
    pub dstOffset: VkOffset3D,
    pub extent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageResolve2"][::std::mem::size_of::<VkImageResolve2>() - 88usize];
    ["Alignment of VkImageResolve2"][::std::mem::align_of::<VkImageResolve2>() - 8usize];
    ["Offset of field: VkImageResolve2::sType"]
        [::std::mem::offset_of!(VkImageResolve2, sType) - 0usize];
    ["Offset of field: VkImageResolve2::pNext"]
        [::std::mem::offset_of!(VkImageResolve2, pNext) - 8usize];
    ["Offset of field: VkImageResolve2::srcSubresource"]
        [::std::mem::offset_of!(VkImageResolve2, srcSubresource) - 16usize];
    ["Offset of field: VkImageResolve2::srcOffset"]
        [::std::mem::offset_of!(VkImageResolve2, srcOffset) - 32usize];
    ["Offset of field: VkImageResolve2::dstSubresource"]
        [::std::mem::offset_of!(VkImageResolve2, dstSubresource) - 44usize];
    ["Offset of field: VkImageResolve2::dstOffset"]
        [::std::mem::offset_of!(VkImageResolve2, dstOffset) - 60usize];
    ["Offset of field: VkImageResolve2::extent"]
        [::std::mem::offset_of!(VkImageResolve2, extent) - 72usize];
};
impl Default for VkImageResolve2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkResolveImageInfo2 {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageResolve2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkResolveImageInfo2"][::std::mem::size_of::<VkResolveImageInfo2>() - 56usize];
    ["Alignment of VkResolveImageInfo2"][::std::mem::align_of::<VkResolveImageInfo2>() - 8usize];
    ["Offset of field: VkResolveImageInfo2::sType"]
        [::std::mem::offset_of!(VkResolveImageInfo2, sType) - 0usize];
    ["Offset of field: VkResolveImageInfo2::pNext"]
        [::std::mem::offset_of!(VkResolveImageInfo2, pNext) - 8usize];
    ["Offset of field: VkResolveImageInfo2::srcImage"]
        [::std::mem::offset_of!(VkResolveImageInfo2, srcImage) - 16usize];
    ["Offset of field: VkResolveImageInfo2::srcImageLayout"]
        [::std::mem::offset_of!(VkResolveImageInfo2, srcImageLayout) - 24usize];
    ["Offset of field: VkResolveImageInfo2::dstImage"]
        [::std::mem::offset_of!(VkResolveImageInfo2, dstImage) - 32usize];
    ["Offset of field: VkResolveImageInfo2::dstImageLayout"]
        [::std::mem::offset_of!(VkResolveImageInfo2, dstImageLayout) - 40usize];
    ["Offset of field: VkResolveImageInfo2::regionCount"]
        [::std::mem::offset_of!(VkResolveImageInfo2, regionCount) - 44usize];
    ["Offset of field: VkResolveImageInfo2::pRegions"]
        [::std::mem::offset_of!(VkResolveImageInfo2, pRegions) - 48usize];
};
impl Default for VkResolveImageInfo2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subgroupSizeControl: VkBool32,
    pub computeFullSubgroups: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubgroupSizeControlFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceSubgroupSizeControlFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::subgroupSizeControl"][::std::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlFeatures,
        subgroupSizeControl
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlFeatures::computeFullSubgroups"][::std::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlFeatures,
        computeFullSubgroups
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceSubgroupSizeControlFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubgroupSizeControlProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minSubgroupSize: u32,
    pub maxSubgroupSize: u32,
    pub maxComputeWorkgroupSubgroups: u32,
    pub requiredSubgroupSizeStages: VkShaderStageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubgroupSizeControlProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceSubgroupSizeControlProperties>() - 32usize];
    ["Alignment of VkPhysicalDeviceSubgroupSizeControlProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceSubgroupSizeControlProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubgroupSizeControlProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::minSubgroupSize"][::std::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlProperties,
        minSubgroupSize
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::maxSubgroupSize"][::std::mem::offset_of!(
        VkPhysicalDeviceSubgroupSizeControlProperties,
        maxSubgroupSize
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::maxComputeWorkgroupSubgroups"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSubgroupSizeControlProperties , maxComputeWorkgroupSubgroups) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceSubgroupSizeControlProperties::requiredSubgroupSizeStages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSubgroupSizeControlProperties , requiredSubgroupSizeStages) - 28usize] ;
};
impl Default for VkPhysicalDeviceSubgroupSizeControlProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub requiredSubgroupSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"]
        [::std::mem::size_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo>() - 24usize];
    ["Alignment of VkPipelineShaderStageRequiredSubgroupSizeCreateInfo"]
        [::std::mem::align_of::<VkPipelineShaderStageRequiredSubgroupSizeCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::sType"][::std::mem::offset_of!(
        VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::pNext"][::std::mem::offset_of!(
        VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::requiredSubgroupSize"] [:: std :: mem :: offset_of ! (VkPipelineShaderStageRequiredSubgroupSizeCreateInfo , requiredSubgroupSize) - 16usize] ;
};
impl Default for VkPipelineShaderStageRequiredSubgroupSizeCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub inlineUniformBlock: VkBool32,
    pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInlineUniformBlockFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceInlineUniformBlockFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceInlineUniformBlockFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceInlineUniformBlockFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::inlineUniformBlock"][::std::mem::offset_of!(
        VkPhysicalDeviceInlineUniformBlockFeatures,
        inlineUniformBlock
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockFeatures::descriptorBindingInlineUniformBlockUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockFeatures , descriptorBindingInlineUniformBlockUpdateAfterBind) - 20usize] ;
};
impl Default for VkPhysicalDeviceInlineUniformBlockFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInlineUniformBlockProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxInlineUniformBlockSize: u32,
    pub maxPerStageDescriptorInlineUniformBlocks: u32,
    pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    pub maxDescriptorSetInlineUniformBlocks: u32,
    pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInlineUniformBlockProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceInlineUniformBlockProperties>() - 40usize];
    ["Alignment of VkPhysicalDeviceInlineUniformBlockProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceInlineUniformBlockProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceInlineUniformBlockProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxInlineUniformBlockSize"][::std::mem::offset_of!(
        VkPhysicalDeviceInlineUniformBlockProperties,
        maxInlineUniformBlockSize
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxPerStageDescriptorInlineUniformBlocks"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxPerStageDescriptorInlineUniformBlocks) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxDescriptorSetInlineUniformBlocks"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxDescriptorSetInlineUniformBlocks) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceInlineUniformBlockProperties::maxDescriptorSetUpdateAfterBindInlineUniformBlocks"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceInlineUniformBlockProperties , maxDescriptorSetUpdateAfterBindInlineUniformBlocks) - 32usize] ;
};
impl Default for VkPhysicalDeviceInlineUniformBlockProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetInlineUniformBlock {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dataSize: u32,
    pub pData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetInlineUniformBlock"]
        [::std::mem::size_of::<VkWriteDescriptorSetInlineUniformBlock>() - 32usize];
    ["Alignment of VkWriteDescriptorSetInlineUniformBlock"]
        [::std::mem::align_of::<VkWriteDescriptorSetInlineUniformBlock>() - 8usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::sType"]
        [::std::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::pNext"]
        [::std::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, pNext) - 8usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::dataSize"]
        [::std::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, dataSize) - 16usize];
    ["Offset of field: VkWriteDescriptorSetInlineUniformBlock::pData"]
        [::std::mem::offset_of!(VkWriteDescriptorSetInlineUniformBlock, pData) - 24usize];
};
impl Default for VkWriteDescriptorSetInlineUniformBlock {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxInlineUniformBlockBindings: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorPoolInlineUniformBlockCreateInfo"]
        [::std::mem::size_of::<VkDescriptorPoolInlineUniformBlockCreateInfo>() - 24usize];
    ["Alignment of VkDescriptorPoolInlineUniformBlockCreateInfo"]
        [::std::mem::align_of::<VkDescriptorPoolInlineUniformBlockCreateInfo>() - 8usize];
    ["Offset of field: VkDescriptorPoolInlineUniformBlockCreateInfo::sType"]
        [::std::mem::offset_of!(VkDescriptorPoolInlineUniformBlockCreateInfo, sType) - 0usize];
    ["Offset of field: VkDescriptorPoolInlineUniformBlockCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDescriptorPoolInlineUniformBlockCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDescriptorPoolInlineUniformBlockCreateInfo::maxInlineUniformBlockBindings"] [:: std :: mem :: offset_of ! (VkDescriptorPoolInlineUniformBlockCreateInfo , maxInlineUniformBlockBindings) - 16usize] ;
};
impl Default for VkDescriptorPoolInlineUniformBlockCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub textureCompressionASTC_HDR: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTextureCompressionASTCHDRFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceTextureCompressionASTCHDRFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceTextureCompressionASTCHDRFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTextureCompressionASTCHDRFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTextureCompressionASTCHDRFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTextureCompressionASTCHDRFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTextureCompressionASTCHDRFeatures::textureCompressionASTC_HDR"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTextureCompressionASTCHDRFeatures , textureCompressionASTC_HDR) - 16usize] ;
};
impl Default for VkPhysicalDeviceTextureCompressionASTCHDRFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingAttachmentInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
    pub resolveMode: VkResolveModeFlagBits,
    pub resolveImageView: VkImageView,
    pub resolveImageLayout: VkImageLayout,
    pub loadOp: VkAttachmentLoadOp,
    pub storeOp: VkAttachmentStoreOp,
    pub clearValue: VkClearValue,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingAttachmentInfo"]
        [::std::mem::size_of::<VkRenderingAttachmentInfo>() - 72usize];
    ["Alignment of VkRenderingAttachmentInfo"]
        [::std::mem::align_of::<VkRenderingAttachmentInfo>() - 8usize];
    ["Offset of field: VkRenderingAttachmentInfo::sType"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, sType) - 0usize];
    ["Offset of field: VkRenderingAttachmentInfo::pNext"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, pNext) - 8usize];
    ["Offset of field: VkRenderingAttachmentInfo::imageView"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, imageView) - 16usize];
    ["Offset of field: VkRenderingAttachmentInfo::imageLayout"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, imageLayout) - 24usize];
    ["Offset of field: VkRenderingAttachmentInfo::resolveMode"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, resolveMode) - 28usize];
    ["Offset of field: VkRenderingAttachmentInfo::resolveImageView"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, resolveImageView) - 32usize];
    ["Offset of field: VkRenderingAttachmentInfo::resolveImageLayout"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, resolveImageLayout) - 40usize];
    ["Offset of field: VkRenderingAttachmentInfo::loadOp"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, loadOp) - 44usize];
    ["Offset of field: VkRenderingAttachmentInfo::storeOp"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, storeOp) - 48usize];
    ["Offset of field: VkRenderingAttachmentInfo::clearValue"]
        [::std::mem::offset_of!(VkRenderingAttachmentInfo, clearValue) - 52usize];
};
impl Default for VkRenderingAttachmentInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderingFlags,
    pub renderArea: VkRect2D,
    pub layerCount: u32,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachments: *const VkRenderingAttachmentInfo,
    pub pDepthAttachment: *const VkRenderingAttachmentInfo,
    pub pStencilAttachment: *const VkRenderingAttachmentInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingInfo"][::std::mem::size_of::<VkRenderingInfo>() - 72usize];
    ["Alignment of VkRenderingInfo"][::std::mem::align_of::<VkRenderingInfo>() - 8usize];
    ["Offset of field: VkRenderingInfo::sType"]
        [::std::mem::offset_of!(VkRenderingInfo, sType) - 0usize];
    ["Offset of field: VkRenderingInfo::pNext"]
        [::std::mem::offset_of!(VkRenderingInfo, pNext) - 8usize];
    ["Offset of field: VkRenderingInfo::flags"]
        [::std::mem::offset_of!(VkRenderingInfo, flags) - 16usize];
    ["Offset of field: VkRenderingInfo::renderArea"]
        [::std::mem::offset_of!(VkRenderingInfo, renderArea) - 20usize];
    ["Offset of field: VkRenderingInfo::layerCount"]
        [::std::mem::offset_of!(VkRenderingInfo, layerCount) - 36usize];
    ["Offset of field: VkRenderingInfo::viewMask"]
        [::std::mem::offset_of!(VkRenderingInfo, viewMask) - 40usize];
    ["Offset of field: VkRenderingInfo::colorAttachmentCount"]
        [::std::mem::offset_of!(VkRenderingInfo, colorAttachmentCount) - 44usize];
    ["Offset of field: VkRenderingInfo::pColorAttachments"]
        [::std::mem::offset_of!(VkRenderingInfo, pColorAttachments) - 48usize];
    ["Offset of field: VkRenderingInfo::pDepthAttachment"]
        [::std::mem::offset_of!(VkRenderingInfo, pDepthAttachment) - 56usize];
    ["Offset of field: VkRenderingInfo::pStencilAttachment"]
        [::std::mem::offset_of!(VkRenderingInfo, pStencilAttachment) - 64usize];
};
impl Default for VkRenderingInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRenderingCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRenderingCreateInfo"]
        [::std::mem::size_of::<VkPipelineRenderingCreateInfo>() - 40usize];
    ["Alignment of VkPipelineRenderingCreateInfo"]
        [::std::mem::align_of::<VkPipelineRenderingCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineRenderingCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineRenderingCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::viewMask"]
        [::std::mem::offset_of!(VkPipelineRenderingCreateInfo, viewMask) - 16usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::colorAttachmentCount"]
        [::std::mem::offset_of!(VkPipelineRenderingCreateInfo, colorAttachmentCount) - 20usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::pColorAttachmentFormats"]
        [::std::mem::offset_of!(VkPipelineRenderingCreateInfo, pColorAttachmentFormats) - 24usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::depthAttachmentFormat"]
        [::std::mem::offset_of!(VkPipelineRenderingCreateInfo, depthAttachmentFormat) - 32usize];
    ["Offset of field: VkPipelineRenderingCreateInfo::stencilAttachmentFormat"]
        [::std::mem::offset_of!(VkPipelineRenderingCreateInfo, stencilAttachmentFormat) - 36usize];
};
impl Default for VkPipelineRenderingCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDynamicRenderingFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dynamicRendering: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDynamicRenderingFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceDynamicRenderingFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceDynamicRenderingFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceDynamicRenderingFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDynamicRenderingFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDynamicRenderingFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingFeatures::dynamicRendering"][::std::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingFeatures,
        dynamicRendering
    ) - 16usize];
};
impl Default for VkPhysicalDeviceDynamicRenderingFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceRenderingInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkRenderingFlags,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
    pub rasterizationSamples: VkSampleCountFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceRenderingInfo"]
        [::std::mem::size_of::<VkCommandBufferInheritanceRenderingInfo>() - 56usize];
    ["Alignment of VkCommandBufferInheritanceRenderingInfo"]
        [::std::mem::align_of::<VkCommandBufferInheritanceRenderingInfo>() - 8usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::sType"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, sType) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::pNext"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, pNext) - 8usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::flags"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, flags) - 16usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::viewMask"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceRenderingInfo, viewMask) - 20usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::colorAttachmentCount"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        colorAttachmentCount
    ) - 24usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::pColorAttachmentFormats"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        pColorAttachmentFormats
    )
        - 32usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::depthAttachmentFormat"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        depthAttachmentFormat
    )
        - 40usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::stencilAttachmentFormat"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        stencilAttachmentFormat
    )
        - 44usize];
    ["Offset of field: VkCommandBufferInheritanceRenderingInfo::rasterizationSamples"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderingInfo,
        rasterizationSamples
    ) - 48usize];
};
impl Default for VkCommandBufferInheritanceRenderingInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerDotProductFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderIntegerDotProduct: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderIntegerDotProductFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderIntegerDotProductFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderIntegerDotProductFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderIntegerDotProductFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderIntegerDotProductFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderIntegerDotProductFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductFeatures::shaderIntegerDotProduct"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerDotProductFeatures,
        shaderIntegerDotProduct
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceShaderIntegerDotProductFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerDotProductProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct8BitSignedAccelerated: VkBool32,
    pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct16BitSignedAccelerated: VkBool32,
    pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct32BitSignedAccelerated: VkBool32,
    pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
    pub integerDotProduct64BitSignedAccelerated: VkBool32,
    pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderIntegerDotProductProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderIntegerDotProductProperties>() - 136usize];
    ["Alignment of VkPhysicalDeviceShaderIntegerDotProductProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderIntegerDotProductProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderIntegerDotProductProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderIntegerDotProductProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct8BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct8BitUnsignedAccelerated) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct8BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct8BitSignedAccelerated) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct8BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct8BitMixedSignednessAccelerated) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct4x8BitPackedUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct4x8BitPackedUnsignedAccelerated) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct4x8BitPackedSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct4x8BitPackedSignedAccelerated) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct4x8BitPackedMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct4x8BitPackedMixedSignednessAccelerated) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct16BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct16BitUnsignedAccelerated) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct16BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct16BitSignedAccelerated) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct16BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct16BitMixedSignednessAccelerated) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct32BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct32BitUnsignedAccelerated) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct32BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct32BitSignedAccelerated) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct32BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct32BitMixedSignednessAccelerated) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct64BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct64BitUnsignedAccelerated) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct64BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct64BitSignedAccelerated) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProduct64BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProduct64BitMixedSignednessAccelerated) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating8BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating8BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating8BitSignedAccelerated) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating16BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating16BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating16BitSignedAccelerated) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating32BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating32BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating32BitSignedAccelerated) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating64BitUnsignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) - 124usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating64BitSignedAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating64BitSignedAccelerated) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceShaderIntegerDotProductProperties::integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerDotProductProperties , integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) - 132usize] ;
};
impl Default for VkPhysicalDeviceShaderIntegerDotProductProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTexelBufferAlignmentProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentProperties>() - 48usize];
    ["Alignment of VkPhysicalDeviceTexelBufferAlignmentProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::storageTexelBufferOffsetAlignmentBytes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , storageTexelBufferOffsetAlignmentBytes) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::storageTexelBufferOffsetSingleTexelAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , storageTexelBufferOffsetSingleTexelAlignment) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::uniformTexelBufferOffsetAlignmentBytes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , uniformTexelBufferOffsetAlignmentBytes) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentProperties::uniformTexelBufferOffsetSingleTexelAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTexelBufferAlignmentProperties , uniformTexelBufferOffsetSingleTexelAlignment) - 40usize] ;
};
impl Default for VkPhysicalDeviceTexelBufferAlignmentProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFormatProperties3 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub linearTilingFeatures: VkFormatFeatureFlags2,
    pub optimalTilingFeatures: VkFormatFeatureFlags2,
    pub bufferFeatures: VkFormatFeatureFlags2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFormatProperties3"][::std::mem::size_of::<VkFormatProperties3>() - 40usize];
    ["Alignment of VkFormatProperties3"][::std::mem::align_of::<VkFormatProperties3>() - 8usize];
    ["Offset of field: VkFormatProperties3::sType"]
        [::std::mem::offset_of!(VkFormatProperties3, sType) - 0usize];
    ["Offset of field: VkFormatProperties3::pNext"]
        [::std::mem::offset_of!(VkFormatProperties3, pNext) - 8usize];
    ["Offset of field: VkFormatProperties3::linearTilingFeatures"]
        [::std::mem::offset_of!(VkFormatProperties3, linearTilingFeatures) - 16usize];
    ["Offset of field: VkFormatProperties3::optimalTilingFeatures"]
        [::std::mem::offset_of!(VkFormatProperties3, optimalTilingFeatures) - 24usize];
    ["Offset of field: VkFormatProperties3::bufferFeatures"]
        [::std::mem::offset_of!(VkFormatProperties3, bufferFeatures) - 32usize];
};
impl Default for VkFormatProperties3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance4Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maintenance4: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance4Features"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance4Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceMaintenance4Features"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance4Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance4Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance4Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Features::maintenance4"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance4Features, maintenance4) - 16usize];
};
impl Default for VkPhysicalDeviceMaintenance4Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance4Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxBufferSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance4Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance4Properties>() - 24usize];
    ["Alignment of VkPhysicalDeviceMaintenance4Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance4Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance4Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance4Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance4Properties::maxBufferSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance4Properties, maxBufferSize) - 16usize];
};
impl Default for VkPhysicalDeviceMaintenance4Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceBufferMemoryRequirements {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pCreateInfo: *const VkBufferCreateInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceBufferMemoryRequirements"]
        [::std::mem::size_of::<VkDeviceBufferMemoryRequirements>() - 24usize];
    ["Alignment of VkDeviceBufferMemoryRequirements"]
        [::std::mem::align_of::<VkDeviceBufferMemoryRequirements>() - 8usize];
    ["Offset of field: VkDeviceBufferMemoryRequirements::sType"]
        [::std::mem::offset_of!(VkDeviceBufferMemoryRequirements, sType) - 0usize];
    ["Offset of field: VkDeviceBufferMemoryRequirements::pNext"]
        [::std::mem::offset_of!(VkDeviceBufferMemoryRequirements, pNext) - 8usize];
    ["Offset of field: VkDeviceBufferMemoryRequirements::pCreateInfo"]
        [::std::mem::offset_of!(VkDeviceBufferMemoryRequirements, pCreateInfo) - 16usize];
};
impl Default for VkDeviceBufferMemoryRequirements {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceImageMemoryRequirements {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pCreateInfo: *const VkImageCreateInfo,
    pub planeAspect: VkImageAspectFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceImageMemoryRequirements"]
        [::std::mem::size_of::<VkDeviceImageMemoryRequirements>() - 32usize];
    ["Alignment of VkDeviceImageMemoryRequirements"]
        [::std::mem::align_of::<VkDeviceImageMemoryRequirements>() - 8usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::sType"]
        [::std::mem::offset_of!(VkDeviceImageMemoryRequirements, sType) - 0usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::pNext"]
        [::std::mem::offset_of!(VkDeviceImageMemoryRequirements, pNext) - 8usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::pCreateInfo"]
        [::std::mem::offset_of!(VkDeviceImageMemoryRequirements, pCreateInfo) - 16usize];
    ["Offset of field: VkDeviceImageMemoryRequirements::planeAspect"]
        [::std::mem::offset_of!(VkDeviceImageMemoryRequirements, planeAspect) - 24usize];
};
impl Default for VkDeviceImageMemoryRequirements {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceToolProperties = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult,
>;
pub type PFN_vkCreatePrivateDataSlot = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPrivateDataSlot = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSetPrivateData = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult,
>;
pub type PFN_vkGetPrivateData = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    ),
>;
pub type PFN_vkCmdSetEvent2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdResetEvent2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    ),
>;
pub type PFN_vkCmdWaitEvents2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdPipelineBarrier2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pDependencyInfo: *const VkDependencyInfo),
>;
pub type PFN_vkCmdWriteTimestamp2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkQueueSubmit2 = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyBuffer2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyBufferInfo: *const VkCopyBufferInfo2),
>;
pub type PFN_vkCmdCopyImage2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyImageInfo: *const VkCopyImageInfo2),
>;
pub type PFN_vkCmdCopyBufferToImage2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    ),
>;
pub type PFN_vkCmdBlitImage2 = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pBlitImageInfo: *const VkBlitImageInfo2),
>;
pub type PFN_vkCmdResolveImage2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    ),
>;
pub type PFN_vkCmdBeginRendering = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pRenderingInfo: *const VkRenderingInfo),
>;
pub type PFN_vkCmdEndRendering =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdSetCullMode = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags),
>;
pub type PFN_vkCmdSetFrontFace = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace),
>;
pub type PFN_vkCmdSetPrimitiveTopology = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology),
>;
pub type PFN_vkCmdSetViewportWithCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissorWithCount = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdSetDepthTestEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthWriteEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthCompareOp = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp),
>;
pub type PFN_vkCmdSetDepthBoundsTestEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilTestEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilOp = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    ),
>;
pub type PFN_vkCmdSetRasterizerDiscardEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthBiasEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32),
>;
pub type PFN_vkCmdSetPrimitiveRestartEnable = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32),
>;
pub type PFN_vkGetDeviceBufferMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageSparseMemoryRequirements = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceToolProperties(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreatePrivateDataSlot(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyPrivateDataSlot(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkSetPrivateData(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPrivateData(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetEvent2(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdResetEvent2(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    );
}
unsafe extern "system" {
    pub fn vkCmdWaitEvents2(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPipelineBarrier2(
        commandBuffer: VkCommandBuffer,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdWriteTimestamp2(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    );
}
unsafe extern "system" {
    pub fn vkQueueSubmit2(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdCopyBuffer2(
        commandBuffer: VkCommandBuffer,
        pCopyBufferInfo: *const VkCopyBufferInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyImage2(commandBuffer: VkCommandBuffer, pCopyImageInfo: *const VkCopyImageInfo2);
}
unsafe extern "system" {
    pub fn vkCmdCopyBufferToImage2(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyImageToBuffer2(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdBlitImage2(commandBuffer: VkCommandBuffer, pBlitImageInfo: *const VkBlitImageInfo2);
}
unsafe extern "system" {
    pub fn vkCmdResolveImage2(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdBeginRendering(
        commandBuffer: VkCommandBuffer,
        pRenderingInfo: *const VkRenderingInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndRendering(commandBuffer: VkCommandBuffer);
}
unsafe extern "system" {
    pub fn vkCmdSetCullMode(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
}
unsafe extern "system" {
    pub fn vkCmdSetFrontFace(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
}
unsafe extern "system" {
    pub fn vkCmdSetPrimitiveTopology(
        commandBuffer: VkCommandBuffer,
        primitiveTopology: VkPrimitiveTopology,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetViewportWithCount(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetScissorWithCount(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindVertexBuffers2(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDepthTestEnable(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthWriteEnable(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthCompareOp(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthBoundsTestEnable(
        commandBuffer: VkCommandBuffer,
        depthBoundsTestEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetStencilTestEnable(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetStencilOp(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetRasterizerDiscardEnable(
        commandBuffer: VkCommandBuffer,
        rasterizerDiscardEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDepthBiasEnable(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetPrimitiveRestartEnable(
        commandBuffer: VkCommandBuffer,
        primitiveRestartEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceBufferMemoryRequirements(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceImageMemoryRequirements(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceImageSparseMemoryRequirements(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT : VkPipelineRobustnessBufferBehavior = 0 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED:
    VkPipelineRobustnessBufferBehavior = 1;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS : VkPipelineRobustnessBufferBehavior = 2 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2 : VkPipelineRobustnessBufferBehavior = 3 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT : VkPipelineRobustnessBufferBehavior = 0 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT:
    VkPipelineRobustnessBufferBehavior = 1;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT : VkPipelineRobustnessBufferBehavior = 2 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT : VkPipelineRobustnessBufferBehavior = 3 ;
pub const VkPipelineRobustnessBufferBehavior_VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM:
    VkPipelineRobustnessBufferBehavior = 2147483647;
pub type VkPipelineRobustnessBufferBehavior = ::std::os::raw::c_uint;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT:
    VkPipelineRobustnessImageBehavior = 0;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED:
    VkPipelineRobustnessImageBehavior = 1;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS : VkPipelineRobustnessImageBehavior = 2 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2 : VkPipelineRobustnessImageBehavior = 3 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT : VkPipelineRobustnessImageBehavior = 0 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT:
    VkPipelineRobustnessImageBehavior = 1;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT : VkPipelineRobustnessImageBehavior = 2 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT : VkPipelineRobustnessImageBehavior = 3 ;
pub const VkPipelineRobustnessImageBehavior_VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM:
    VkPipelineRobustnessImageBehavior = 2147483647;
pub type VkPipelineRobustnessImageBehavior = ::std::os::raw::c_uint;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_LOW: VkQueueGlobalPriority = 128;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MEDIUM: VkQueueGlobalPriority = 256;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_HIGH: VkQueueGlobalPriority = 512;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_REALTIME: VkQueueGlobalPriority = 1024;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: VkQueueGlobalPriority = 128;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: VkQueueGlobalPriority = 256;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: VkQueueGlobalPriority = 512;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: VkQueueGlobalPriority = 1024;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR: VkQueueGlobalPriority = 128;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR: VkQueueGlobalPriority = 256;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR: VkQueueGlobalPriority = 512;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR: VkQueueGlobalPriority = 1024;
pub const VkQueueGlobalPriority_VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM: VkQueueGlobalPriority =
    2147483647;
pub type VkQueueGlobalPriority = ::std::os::raw::c_uint;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_DEFAULT: VkLineRasterizationMode = 0;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR: VkLineRasterizationMode =
    1;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_BRESENHAM: VkLineRasterizationMode = 2;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH:
    VkLineRasterizationMode = 3;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: VkLineRasterizationMode =
    0;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT:
    VkLineRasterizationMode = 1;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT:
    VkLineRasterizationMode = 2;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT:
    VkLineRasterizationMode = 3;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_DEFAULT_KHR: VkLineRasterizationMode =
    0;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR:
    VkLineRasterizationMode = 1;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR:
    VkLineRasterizationMode = 2;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR:
    VkLineRasterizationMode = 3;
pub const VkLineRasterizationMode_VK_LINE_RASTERIZATION_MODE_MAX_ENUM: VkLineRasterizationMode =
    2147483647;
pub type VkLineRasterizationMode = ::std::os::raw::c_uint;
pub const VkMemoryUnmapFlagBits_VK_MEMORY_UNMAP_RESERVE_BIT_EXT: VkMemoryUnmapFlagBits = 1;
pub const VkMemoryUnmapFlagBits_VK_MEMORY_UNMAP_FLAG_BITS_MAX_ENUM: VkMemoryUnmapFlagBits =
    2147483647;
pub type VkMemoryUnmapFlagBits = ::std::os::raw::c_uint;
pub type VkMemoryUnmapFlags = VkFlags;
pub type VkPipelineCreateFlags2 = VkFlags64;
pub type VkPipelineCreateFlagBits2 = VkFlags64;
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT: VkPipelineCreateFlagBits2 = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT: VkPipelineCreateFlagBits2 = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT: VkPipelineCreateFlagBits2 = 4;
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: VkPipelineCreateFlagBits2 = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT: VkPipelineCreateFlagBits2 = 16;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: VkPipelineCreateFlagBits2 =
    256;
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT: VkPipelineCreateFlagBits2 = 512;
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT: VkPipelineCreateFlagBits2 = 134217728;
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT: VkPipelineCreateFlagBits2 = 1073741824;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_BUILT_IN_PRIMITIVES_BIT_KHR:
    VkPipelineCreateFlagBits2 = 4096;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_SPHERES_AND_LINEAR_SWEPT_SPHERES_BIT_NV:
    VkPipelineCreateFlagBits2 = 8589934592;
pub const VK_PIPELINE_CREATE_2_ENABLE_LEGACY_DITHERING_BIT_EXT: VkPipelineCreateFlagBits2 =
    17179869184;
pub const VK_PIPELINE_CREATE_2_DISABLE_OPTIMIZATION_BIT_KHR: VkPipelineCreateFlagBits2 = 1;
pub const VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR: VkPipelineCreateFlagBits2 = 2;
pub const VK_PIPELINE_CREATE_2_DERIVATIVE_BIT_KHR: VkPipelineCreateFlagBits2 = 4;
pub const VK_PIPELINE_CREATE_2_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: VkPipelineCreateFlagBits2 = 8;
pub const VK_PIPELINE_CREATE_2_DISPATCH_BASE_BIT_KHR: VkPipelineCreateFlagBits2 = 16;
pub const VK_PIPELINE_CREATE_2_DEFER_COMPILE_BIT_NV: VkPipelineCreateFlagBits2 = 32;
pub const VK_PIPELINE_CREATE_2_CAPTURE_STATISTICS_BIT_KHR: VkPipelineCreateFlagBits2 = 64;
pub const VK_PIPELINE_CREATE_2_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: VkPipelineCreateFlagBits2 =
    128;
pub const VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR:
    VkPipelineCreateFlagBits2 = 256;
pub const VK_PIPELINE_CREATE_2_EARLY_RETURN_ON_FAILURE_BIT_KHR: VkPipelineCreateFlagBits2 = 512;
pub const VK_PIPELINE_CREATE_2_LINK_TIME_OPTIMIZATION_BIT_EXT: VkPipelineCreateFlagBits2 = 1024;
pub const VK_PIPELINE_CREATE_2_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT:
    VkPipelineCreateFlagBits2 = 8388608;
pub const VK_PIPELINE_CREATE_2_LIBRARY_BIT_KHR: VkPipelineCreateFlagBits2 = 2048;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: VkPipelineCreateFlagBits2 = 4096;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SKIP_AABBS_BIT_KHR: VkPipelineCreateFlagBits2 = 8192;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits2 = 16384;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits2 = 32768;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: VkPipelineCreateFlagBits2 =
    65536;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR:
    VkPipelineCreateFlagBits2 = 131072;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR:
    VkPipelineCreateFlagBits2 = 524288;
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_NV: VkPipelineCreateFlagBits2 = 262144;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_ALLOW_MOTION_BIT_NV: VkPipelineCreateFlagBits2 = 1048576;
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR:
    VkPipelineCreateFlagBits2 = 2097152;
pub const VK_PIPELINE_CREATE_2_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT:
    VkPipelineCreateFlagBits2 = 4194304;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT: VkPipelineCreateFlagBits2 =
    16777216;
pub const VK_PIPELINE_CREATE_2_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: VkPipelineCreateFlagBits2 =
    33554432;
pub const VK_PIPELINE_CREATE_2_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT:
    VkPipelineCreateFlagBits2 = 67108864;
pub const VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT: VkPipelineCreateFlagBits2 = 134217728;
pub const VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT: VkPipelineCreateFlagBits2 =
    1073741824;
pub const VK_PIPELINE_CREATE_2_RAY_TRACING_DISPLACEMENT_MICROMAP_BIT_NV: VkPipelineCreateFlagBits2 =
    268435456;
pub const VK_PIPELINE_CREATE_2_DESCRIPTOR_BUFFER_BIT_EXT: VkPipelineCreateFlagBits2 = 536870912;
pub const VK_PIPELINE_CREATE_2_DISALLOW_OPACITY_MICROMAP_BIT_ARM: VkPipelineCreateFlagBits2 =
    137438953472;
pub const VK_PIPELINE_CREATE_2_CAPTURE_DATA_BIT_KHR: VkPipelineCreateFlagBits2 = 2147483648;
pub const VK_PIPELINE_CREATE_2_INDIRECT_BINDABLE_BIT_EXT: VkPipelineCreateFlagBits2 = 274877906944;
pub type VkBufferUsageFlags2 = VkFlags64;
pub type VkBufferUsageFlagBits2 = VkFlags64;
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT: VkBufferUsageFlagBits2 = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT: VkBufferUsageFlagBits2 = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits2 = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT: VkBufferUsageFlagBits2 = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT: VkBufferUsageFlagBits2 = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT: VkBufferUsageFlagBits2 = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT: VkBufferUsageFlagBits2 = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT: VkBufferUsageFlagBits2 = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT: VkBufferUsageFlagBits2 = 256;
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT: VkBufferUsageFlagBits2 = 131072;
pub const VK_BUFFER_USAGE_2_TRANSFER_SRC_BIT_KHR: VkBufferUsageFlagBits2 = 1;
pub const VK_BUFFER_USAGE_2_TRANSFER_DST_BIT_KHR: VkBufferUsageFlagBits2 = 2;
pub const VK_BUFFER_USAGE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 4;
pub const VK_BUFFER_USAGE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 8;
pub const VK_BUFFER_USAGE_2_UNIFORM_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 16;
pub const VK_BUFFER_USAGE_2_STORAGE_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 32;
pub const VK_BUFFER_USAGE_2_INDEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 64;
pub const VK_BUFFER_USAGE_2_VERTEX_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 128;
pub const VK_BUFFER_USAGE_2_INDIRECT_BUFFER_BIT_KHR: VkBufferUsageFlagBits2 = 256;
pub const VK_BUFFER_USAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkBufferUsageFlagBits2 = 512;
pub const VK_BUFFER_USAGE_2_SHADER_BINDING_TABLE_BIT_KHR: VkBufferUsageFlagBits2 = 1024;
pub const VK_BUFFER_USAGE_2_RAY_TRACING_BIT_NV: VkBufferUsageFlagBits2 = 1024;
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 2048;
pub const VK_BUFFER_USAGE_2_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 =
    4096;
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_SRC_BIT_KHR: VkBufferUsageFlagBits2 = 8192;
pub const VK_BUFFER_USAGE_2_VIDEO_DECODE_DST_BIT_KHR: VkBufferUsageFlagBits2 = 16384;
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_DST_BIT_KHR: VkBufferUsageFlagBits2 = 32768;
pub const VK_BUFFER_USAGE_2_VIDEO_ENCODE_SRC_BIT_KHR: VkBufferUsageFlagBits2 = 65536;
pub const VK_BUFFER_USAGE_2_SHADER_DEVICE_ADDRESS_BIT_KHR: VkBufferUsageFlagBits2 = 131072;
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR:
    VkBufferUsageFlagBits2 = 524288;
pub const VK_BUFFER_USAGE_2_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: VkBufferUsageFlagBits2 =
    1048576;
pub const VK_BUFFER_USAGE_2_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 2097152;
pub const VK_BUFFER_USAGE_2_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 4194304;
pub const VK_BUFFER_USAGE_2_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 =
    67108864;
pub const VK_BUFFER_USAGE_2_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT: VkBufferUsageFlagBits2 =
    8388608;
pub const VK_BUFFER_USAGE_2_MICROMAP_STORAGE_BIT_EXT: VkBufferUsageFlagBits2 = 16777216;
pub const VK_BUFFER_USAGE_2_PREPROCESS_BUFFER_BIT_EXT: VkBufferUsageFlagBits2 = 2147483648;
pub const VkHostImageCopyFlagBits_VK_HOST_IMAGE_COPY_MEMCPY: VkHostImageCopyFlagBits = 1;
pub const VkHostImageCopyFlagBits_VK_HOST_IMAGE_COPY_MEMCPY_EXT: VkHostImageCopyFlagBits = 1;
pub const VkHostImageCopyFlagBits_VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM: VkHostImageCopyFlagBits =
    2147483647;
pub type VkHostImageCopyFlagBits = ::std::os::raw::c_uint;
pub type VkHostImageCopyFlags = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan14Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub globalPriorityQuery: VkBool32,
    pub shaderSubgroupRotate: VkBool32,
    pub shaderSubgroupRotateClustered: VkBool32,
    pub shaderFloatControls2: VkBool32,
    pub shaderExpectAssume: VkBool32,
    pub rectangularLines: VkBool32,
    pub bresenhamLines: VkBool32,
    pub smoothLines: VkBool32,
    pub stippledRectangularLines: VkBool32,
    pub stippledBresenhamLines: VkBool32,
    pub stippledSmoothLines: VkBool32,
    pub vertexAttributeInstanceRateDivisor: VkBool32,
    pub vertexAttributeInstanceRateZeroDivisor: VkBool32,
    pub indexTypeUint8: VkBool32,
    pub dynamicRenderingLocalRead: VkBool32,
    pub maintenance5: VkBool32,
    pub maintenance6: VkBool32,
    pub pipelineProtectedAccess: VkBool32,
    pub pipelineRobustness: VkBool32,
    pub hostImageCopy: VkBool32,
    pub pushDescriptor: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan14Features"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan14Features>() - 104usize];
    ["Alignment of VkPhysicalDeviceVulkan14Features"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan14Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::globalPriorityQuery"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, globalPriorityQuery) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderSubgroupRotate"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, shaderSubgroupRotate) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderSubgroupRotateClustered"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        shaderSubgroupRotateClustered
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderFloatControls2"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, shaderFloatControls2) - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::shaderExpectAssume"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, shaderExpectAssume) - 32usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::rectangularLines"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, rectangularLines) - 36usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::bresenhamLines"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, bresenhamLines) - 40usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::smoothLines"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, smoothLines) - 44usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::stippledRectangularLines"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        stippledRectangularLines
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::stippledBresenhamLines"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        stippledBresenhamLines
    ) - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::stippledSmoothLines"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, stippledSmoothLines) - 56usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::vertexAttributeInstanceRateDivisor"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        vertexAttributeInstanceRateDivisor
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::vertexAttributeInstanceRateZeroDivisor"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        vertexAttributeInstanceRateZeroDivisor
    )
        - 64usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::indexTypeUint8"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, indexTypeUint8) - 68usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::dynamicRenderingLocalRead"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        dynamicRenderingLocalRead
    ) - 72usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::maintenance5"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, maintenance5) - 76usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::maintenance6"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, maintenance6) - 80usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pipelineProtectedAccess"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Features,
        pipelineProtectedAccess
    ) - 84usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pipelineRobustness"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, pipelineRobustness) - 88usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::hostImageCopy"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, hostImageCopy) - 92usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Features::pushDescriptor"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Features, pushDescriptor) - 96usize];
};
impl Default for VkPhysicalDeviceVulkan14Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVulkan14Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub lineSubPixelPrecisionBits: u32,
    pub maxVertexAttribDivisor: u32,
    pub supportsNonZeroFirstInstance: VkBool32,
    pub maxPushDescriptors: u32,
    pub dynamicRenderingLocalReadDepthStencilAttachments: VkBool32,
    pub dynamicRenderingLocalReadMultisampledAttachments: VkBool32,
    pub earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32,
    pub earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32,
    pub depthStencilSwizzleOneSupport: VkBool32,
    pub polygonModePointSize: VkBool32,
    pub nonStrictSinglePixelWideLinesUseParallelogram: VkBool32,
    pub nonStrictWideLinesUseParallelogram: VkBool32,
    pub blockTexelViewCompatibleMultipleLayers: VkBool32,
    pub maxCombinedImageSamplerDescriptorCount: u32,
    pub fragmentShadingRateClampCombinerInputs: VkBool32,
    pub defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessImages: VkPipelineRobustnessImageBehavior,
    pub copySrcLayoutCount: u32,
    pub pCopySrcLayouts: *mut VkImageLayout,
    pub copyDstLayoutCount: u32,
    pub pCopyDstLayouts: *mut VkImageLayout,
    pub optimalTilingLayoutUUID: [u8; 16usize],
    pub identicalMemoryTypeRequirements: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVulkan14Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceVulkan14Properties>() - 144usize];
    ["Alignment of VkPhysicalDeviceVulkan14Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceVulkan14Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::lineSubPixelPrecisionBits"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        lineSubPixelPrecisionBits
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::maxVertexAttribDivisor"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        maxVertexAttribDivisor
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::supportsNonZeroFirstInstance"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        supportsNonZeroFirstInstance
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::maxPushDescriptors"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, maxPushDescriptors) - 28usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::dynamicRenderingLocalReadDepthStencilAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , dynamicRenderingLocalReadDepthStencilAttachments) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::dynamicRenderingLocalReadMultisampledAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , dynamicRenderingLocalReadMultisampledAttachments) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::earlyFragmentMultisampleCoverageAfterSampleCounting"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , earlyFragmentMultisampleCoverageAfterSampleCounting) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::earlyFragmentSampleMaskTestBeforeSampleCounting"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , earlyFragmentSampleMaskTestBeforeSampleCounting) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::depthStencilSwizzleOneSupport"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        depthStencilSwizzleOneSupport
    )
        - 48usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::polygonModePointSize"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        polygonModePointSize
    ) - 52usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::nonStrictSinglePixelWideLinesUseParallelogram"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , nonStrictSinglePixelWideLinesUseParallelogram) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::nonStrictWideLinesUseParallelogram"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        nonStrictWideLinesUseParallelogram
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::blockTexelViewCompatibleMultipleLayers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , blockTexelViewCompatibleMultipleLayers) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::maxCombinedImageSamplerDescriptorCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , maxCombinedImageSamplerDescriptorCount) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::fragmentShadingRateClampCombinerInputs"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVulkan14Properties , fragmentShadingRateClampCombinerInputs) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessStorageBuffers"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessStorageBuffers
    )
        - 76usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessUniformBuffers"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessUniformBuffers
    )
        - 80usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessVertexInputs"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessVertexInputs
    )
        - 84usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::defaultRobustnessImages"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        defaultRobustnessImages
    ) - 88usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::copySrcLayoutCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, copySrcLayoutCount) - 92usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::pCopySrcLayouts"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, pCopySrcLayouts) - 96usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::copyDstLayoutCount"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, copyDstLayoutCount) - 104usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::pCopyDstLayouts"]
        [::std::mem::offset_of!(VkPhysicalDeviceVulkan14Properties, pCopyDstLayouts) - 112usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::optimalTilingLayoutUUID"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        optimalTilingLayoutUUID
    ) - 120usize];
    ["Offset of field: VkPhysicalDeviceVulkan14Properties::identicalMemoryTypeRequirements"][::std::mem::offset_of!(
        VkPhysicalDeviceVulkan14Properties,
        identicalMemoryTypeRequirements
    )
        - 136usize];
};
impl Default for VkPhysicalDeviceVulkan14Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueGlobalPriorityCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub globalPriority: VkQueueGlobalPriority,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueGlobalPriorityCreateInfo"]
        [::std::mem::size_of::<VkDeviceQueueGlobalPriorityCreateInfo>() - 24usize];
    ["Alignment of VkDeviceQueueGlobalPriorityCreateInfo"]
        [::std::mem::align_of::<VkDeviceQueueGlobalPriorityCreateInfo>() - 8usize];
    ["Offset of field: VkDeviceQueueGlobalPriorityCreateInfo::sType"]
        [::std::mem::offset_of!(VkDeviceQueueGlobalPriorityCreateInfo, sType) - 0usize];
    ["Offset of field: VkDeviceQueueGlobalPriorityCreateInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceQueueGlobalPriorityCreateInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceQueueGlobalPriorityCreateInfo::globalPriority"]
        [::std::mem::offset_of!(VkDeviceQueueGlobalPriorityCreateInfo, globalPriority) - 16usize];
};
impl Default for VkDeviceQueueGlobalPriorityCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGlobalPriorityQueryFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub globalPriorityQuery: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGlobalPriorityQueryFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceGlobalPriorityQueryFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceGlobalPriorityQueryFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceGlobalPriorityQueryFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceGlobalPriorityQueryFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceGlobalPriorityQueryFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceGlobalPriorityQueryFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceGlobalPriorityQueryFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceGlobalPriorityQueryFeatures::globalPriorityQuery"][::std::mem::offset_of!(
        VkPhysicalDeviceGlobalPriorityQueryFeatures,
        globalPriorityQuery
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceGlobalPriorityQueryFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyGlobalPriorityProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub priorityCount: u32,
    pub priorities: [VkQueueGlobalPriority; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyGlobalPriorityProperties"]
        [::std::mem::size_of::<VkQueueFamilyGlobalPriorityProperties>() - 88usize];
    ["Alignment of VkQueueFamilyGlobalPriorityProperties"]
        [::std::mem::align_of::<VkQueueFamilyGlobalPriorityProperties>() - 8usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::sType"]
        [::std::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, sType) - 0usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::pNext"]
        [::std::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, pNext) - 8usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::priorityCount"]
        [::std::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, priorityCount) - 16usize];
    ["Offset of field: VkQueueFamilyGlobalPriorityProperties::priorities"]
        [::std::mem::offset_of!(VkQueueFamilyGlobalPriorityProperties, priorities) - 20usize];
};
impl Default for VkQueueFamilyGlobalPriorityProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupRotateFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupRotate: VkBool32,
    pub shaderSubgroupRotateClustered: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSubgroupRotateFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderSubgroupRotateFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderSubgroupRotateFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderSubgroupRotateFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderSubgroupRotateFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderSubgroupRotateFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::shaderSubgroupRotate"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupRotateFeatures,
        shaderSubgroupRotate
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupRotateFeatures::shaderSubgroupRotateClustered"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderSubgroupRotateFeatures , shaderSubgroupRotateClustered) - 20usize] ;
};
impl Default for VkPhysicalDeviceShaderSubgroupRotateFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderFloatControls2Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderFloatControls2: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderFloatControls2Features"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderFloatControls2Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderFloatControls2Features"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderFloatControls2Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderFloatControls2Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderFloatControls2Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderFloatControls2Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderFloatControls2Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderFloatControls2Features::shaderFloatControls2"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderFloatControls2Features,
        shaderFloatControls2
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceShaderFloatControls2Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderExpectAssumeFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderExpectAssume: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderExpectAssumeFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderExpectAssumeFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderExpectAssumeFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderExpectAssumeFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderExpectAssumeFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderExpectAssumeFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderExpectAssumeFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderExpectAssumeFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderExpectAssumeFeatures::shaderExpectAssume"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderExpectAssumeFeatures,
        shaderExpectAssume
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceShaderExpectAssumeFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rectangularLines: VkBool32,
    pub bresenhamLines: VkBool32,
    pub smoothLines: VkBool32,
    pub stippledRectangularLines: VkBool32,
    pub stippledBresenhamLines: VkBool32,
    pub stippledSmoothLines: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLineRasterizationFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceLineRasterizationFeatures>() - 40usize];
    ["Alignment of VkPhysicalDeviceLineRasterizationFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceLineRasterizationFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLineRasterizationFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLineRasterizationFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::rectangularLines"][::std::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        rectangularLines
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::bresenhamLines"][::std::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        bresenhamLines
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::smoothLines"]
        [::std::mem::offset_of!(VkPhysicalDeviceLineRasterizationFeatures, smoothLines) - 24usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::stippledRectangularLines"][::std::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        stippledRectangularLines
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::stippledBresenhamLines"][::std::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        stippledBresenhamLines
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationFeatures::stippledSmoothLines"][::std::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationFeatures,
        stippledSmoothLines
    )
        - 36usize];
};
impl Default for VkPhysicalDeviceLineRasterizationFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLineRasterizationProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub lineSubPixelPrecisionBits: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLineRasterizationProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceLineRasterizationProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceLineRasterizationProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceLineRasterizationProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLineRasterizationProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLineRasterizationProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLineRasterizationProperties::lineSubPixelPrecisionBits"][::std::mem::offset_of!(
        VkPhysicalDeviceLineRasterizationProperties,
        lineSubPixelPrecisionBits
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceLineRasterizationProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationLineStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub lineRasterizationMode: VkLineRasterizationMode,
    pub stippledLineEnable: VkBool32,
    pub lineStippleFactor: u32,
    pub lineStipplePattern: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationLineStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineRasterizationLineStateCreateInfo>() - 32usize];
    ["Alignment of VkPipelineRasterizationLineStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineRasterizationLineStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineRasterizationLineStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineRasterizationLineStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::lineRasterizationMode"][::std::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        lineRasterizationMode
    )
        - 16usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::stippledLineEnable"][::std::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        stippledLineEnable
    )
        - 20usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::lineStippleFactor"][::std::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        lineStippleFactor
    ) - 24usize];
    ["Offset of field: VkPipelineRasterizationLineStateCreateInfo::lineStipplePattern"][::std::mem::offset_of!(
        VkPipelineRasterizationLineStateCreateInfo,
        lineStipplePattern
    )
        - 28usize];
};
impl Default for VkPipelineRasterizationLineStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVertexAttribDivisor: u32,
    pub supportsNonZeroFirstInstance: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeDivisorProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorProperties>() - 24usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeDivisorProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::maxVertexAttribDivisor"][::std::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeDivisorProperties,
        maxVertexAttribDivisor
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorProperties::supportsNonZeroFirstInstance"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorProperties , supportsNonZeroFirstInstance) - 20usize] ;
};
impl Default for VkPhysicalDeviceVertexAttributeDivisorProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVertexInputBindingDivisorDescription {
    pub binding: u32,
    pub divisor: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputBindingDivisorDescription"]
        [::std::mem::size_of::<VkVertexInputBindingDivisorDescription>() - 8usize];
    ["Alignment of VkVertexInputBindingDivisorDescription"]
        [::std::mem::align_of::<VkVertexInputBindingDivisorDescription>() - 4usize];
    ["Offset of field: VkVertexInputBindingDivisorDescription::binding"]
        [::std::mem::offset_of!(VkVertexInputBindingDivisorDescription, binding) - 0usize];
    ["Offset of field: VkVertexInputBindingDivisorDescription::divisor"]
        [::std::mem::offset_of!(VkVertexInputBindingDivisorDescription, divisor) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineVertexInputDivisorStateCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexBindingDivisorCount: u32,
    pub pVertexBindingDivisors: *const VkVertexInputBindingDivisorDescription,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineVertexInputDivisorStateCreateInfo"]
        [::std::mem::size_of::<VkPipelineVertexInputDivisorStateCreateInfo>() - 32usize];
    ["Alignment of VkPipelineVertexInputDivisorStateCreateInfo"]
        [::std::mem::align_of::<VkPipelineVertexInputDivisorStateCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineVertexInputDivisorStateCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineVertexInputDivisorStateCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::vertexBindingDivisorCount"][::std::mem::offset_of!(
        VkPipelineVertexInputDivisorStateCreateInfo,
        vertexBindingDivisorCount
    )
        - 16usize];
    ["Offset of field: VkPipelineVertexInputDivisorStateCreateInfo::pVertexBindingDivisors"][::std::mem::offset_of!(
        VkPipelineVertexInputDivisorStateCreateInfo,
        pVertexBindingDivisors
    )
        - 24usize];
};
impl Default for VkPipelineVertexInputDivisorStateCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vertexAttributeInstanceRateDivisor: VkBool32,
    pub vertexAttributeInstanceRateZeroDivisor: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeDivisorFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeDivisorFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVertexAttributeDivisorFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::vertexAttributeInstanceRateDivisor"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorFeatures , vertexAttributeInstanceRateDivisor) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorFeatures::vertexAttributeInstanceRateZeroDivisor"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorFeatures , vertexAttributeInstanceRateZeroDivisor) - 20usize] ;
};
impl Default for VkPhysicalDeviceVertexAttributeDivisorFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceIndexTypeUint8Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub indexTypeUint8: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceIndexTypeUint8Features"]
        [::std::mem::size_of::<VkPhysicalDeviceIndexTypeUint8Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceIndexTypeUint8Features"]
        [::std::mem::align_of::<VkPhysicalDeviceIndexTypeUint8Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceIndexTypeUint8Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceIndexTypeUint8Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceIndexTypeUint8Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceIndexTypeUint8Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceIndexTypeUint8Features::indexTypeUint8"]
        [::std::mem::offset_of!(VkPhysicalDeviceIndexTypeUint8Features, indexTypeUint8) - 16usize];
};
impl Default for VkPhysicalDeviceIndexTypeUint8Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryMapInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkMemoryMapFlags,
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryMapInfo"][::std::mem::size_of::<VkMemoryMapInfo>() - 48usize];
    ["Alignment of VkMemoryMapInfo"][::std::mem::align_of::<VkMemoryMapInfo>() - 8usize];
    ["Offset of field: VkMemoryMapInfo::sType"]
        [::std::mem::offset_of!(VkMemoryMapInfo, sType) - 0usize];
    ["Offset of field: VkMemoryMapInfo::pNext"]
        [::std::mem::offset_of!(VkMemoryMapInfo, pNext) - 8usize];
    ["Offset of field: VkMemoryMapInfo::flags"]
        [::std::mem::offset_of!(VkMemoryMapInfo, flags) - 16usize];
    ["Offset of field: VkMemoryMapInfo::memory"]
        [::std::mem::offset_of!(VkMemoryMapInfo, memory) - 24usize];
    ["Offset of field: VkMemoryMapInfo::offset"]
        [::std::mem::offset_of!(VkMemoryMapInfo, offset) - 32usize];
    ["Offset of field: VkMemoryMapInfo::size"]
        [::std::mem::offset_of!(VkMemoryMapInfo, size) - 40usize];
};
impl Default for VkMemoryMapInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryUnmapInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkMemoryUnmapFlags,
    pub memory: VkDeviceMemory,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryUnmapInfo"][::std::mem::size_of::<VkMemoryUnmapInfo>() - 32usize];
    ["Alignment of VkMemoryUnmapInfo"][::std::mem::align_of::<VkMemoryUnmapInfo>() - 8usize];
    ["Offset of field: VkMemoryUnmapInfo::sType"]
        [::std::mem::offset_of!(VkMemoryUnmapInfo, sType) - 0usize];
    ["Offset of field: VkMemoryUnmapInfo::pNext"]
        [::std::mem::offset_of!(VkMemoryUnmapInfo, pNext) - 8usize];
    ["Offset of field: VkMemoryUnmapInfo::flags"]
        [::std::mem::offset_of!(VkMemoryUnmapInfo, flags) - 16usize];
    ["Offset of field: VkMemoryUnmapInfo::memory"]
        [::std::mem::offset_of!(VkMemoryUnmapInfo, memory) - 24usize];
};
impl Default for VkMemoryUnmapInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance5Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maintenance5: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance5Features"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance5Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceMaintenance5Features"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance5Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance5Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance5Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Features::maintenance5"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance5Features, maintenance5) - 16usize];
};
impl Default for VkPhysicalDeviceMaintenance5Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance5Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32,
    pub earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32,
    pub depthStencilSwizzleOneSupport: VkBool32,
    pub polygonModePointSize: VkBool32,
    pub nonStrictSinglePixelWideLinesUseParallelogram: VkBool32,
    pub nonStrictWideLinesUseParallelogram: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance5Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance5Properties>() - 40usize];
    ["Alignment of VkPhysicalDeviceMaintenance5Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance5Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance5Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance5Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::earlyFragmentMultisampleCoverageAfterSampleCounting"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , earlyFragmentMultisampleCoverageAfterSampleCounting) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::earlyFragmentSampleMaskTestBeforeSampleCounting"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , earlyFragmentSampleMaskTestBeforeSampleCounting) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::depthStencilSwizzleOneSupport"][::std::mem::offset_of!(
        VkPhysicalDeviceMaintenance5Properties,
        depthStencilSwizzleOneSupport
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::polygonModePointSize"][::std::mem::offset_of!(
        VkPhysicalDeviceMaintenance5Properties,
        polygonModePointSize
    ) - 28usize];
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::nonStrictSinglePixelWideLinesUseParallelogram"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , nonStrictSinglePixelWideLinesUseParallelogram) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance5Properties::nonStrictWideLinesUseParallelogram"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance5Properties , nonStrictWideLinesUseParallelogram) - 36usize] ;
};
impl Default for VkPhysicalDeviceMaintenance5Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingAreaInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewMask: u32,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentFormats: *const VkFormat,
    pub depthAttachmentFormat: VkFormat,
    pub stencilAttachmentFormat: VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingAreaInfo"][::std::mem::size_of::<VkRenderingAreaInfo>() - 40usize];
    ["Alignment of VkRenderingAreaInfo"][::std::mem::align_of::<VkRenderingAreaInfo>() - 8usize];
    ["Offset of field: VkRenderingAreaInfo::sType"]
        [::std::mem::offset_of!(VkRenderingAreaInfo, sType) - 0usize];
    ["Offset of field: VkRenderingAreaInfo::pNext"]
        [::std::mem::offset_of!(VkRenderingAreaInfo, pNext) - 8usize];
    ["Offset of field: VkRenderingAreaInfo::viewMask"]
        [::std::mem::offset_of!(VkRenderingAreaInfo, viewMask) - 16usize];
    ["Offset of field: VkRenderingAreaInfo::colorAttachmentCount"]
        [::std::mem::offset_of!(VkRenderingAreaInfo, colorAttachmentCount) - 20usize];
    ["Offset of field: VkRenderingAreaInfo::pColorAttachmentFormats"]
        [::std::mem::offset_of!(VkRenderingAreaInfo, pColorAttachmentFormats) - 24usize];
    ["Offset of field: VkRenderingAreaInfo::depthAttachmentFormat"]
        [::std::mem::offset_of!(VkRenderingAreaInfo, depthAttachmentFormat) - 32usize];
    ["Offset of field: VkRenderingAreaInfo::stencilAttachmentFormat"]
        [::std::mem::offset_of!(VkRenderingAreaInfo, stencilAttachmentFormat) - 36usize];
};
impl Default for VkRenderingAreaInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSubresource2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageSubresource: VkImageSubresource,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSubresource2"][::std::mem::size_of::<VkImageSubresource2>() - 32usize];
    ["Alignment of VkImageSubresource2"][::std::mem::align_of::<VkImageSubresource2>() - 8usize];
    ["Offset of field: VkImageSubresource2::sType"]
        [::std::mem::offset_of!(VkImageSubresource2, sType) - 0usize];
    ["Offset of field: VkImageSubresource2::pNext"]
        [::std::mem::offset_of!(VkImageSubresource2, pNext) - 8usize];
    ["Offset of field: VkImageSubresource2::imageSubresource"]
        [::std::mem::offset_of!(VkImageSubresource2, imageSubresource) - 16usize];
};
impl Default for VkImageSubresource2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceImageSubresourceInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pCreateInfo: *const VkImageCreateInfo,
    pub pSubresource: *const VkImageSubresource2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceImageSubresourceInfo"]
        [::std::mem::size_of::<VkDeviceImageSubresourceInfo>() - 32usize];
    ["Alignment of VkDeviceImageSubresourceInfo"]
        [::std::mem::align_of::<VkDeviceImageSubresourceInfo>() - 8usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::sType"]
        [::std::mem::offset_of!(VkDeviceImageSubresourceInfo, sType) - 0usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::pNext"]
        [::std::mem::offset_of!(VkDeviceImageSubresourceInfo, pNext) - 8usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::pCreateInfo"]
        [::std::mem::offset_of!(VkDeviceImageSubresourceInfo, pCreateInfo) - 16usize];
    ["Offset of field: VkDeviceImageSubresourceInfo::pSubresource"]
        [::std::mem::offset_of!(VkDeviceImageSubresourceInfo, pSubresource) - 24usize];
};
impl Default for VkDeviceImageSubresourceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubresourceLayout2 {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subresourceLayout: VkSubresourceLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubresourceLayout2"][::std::mem::size_of::<VkSubresourceLayout2>() - 56usize];
    ["Alignment of VkSubresourceLayout2"][::std::mem::align_of::<VkSubresourceLayout2>() - 8usize];
    ["Offset of field: VkSubresourceLayout2::sType"]
        [::std::mem::offset_of!(VkSubresourceLayout2, sType) - 0usize];
    ["Offset of field: VkSubresourceLayout2::pNext"]
        [::std::mem::offset_of!(VkSubresourceLayout2, pNext) - 8usize];
    ["Offset of field: VkSubresourceLayout2::subresourceLayout"]
        [::std::mem::offset_of!(VkSubresourceLayout2, subresourceLayout) - 16usize];
};
impl Default for VkSubresourceLayout2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreateFlags2CreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreateFlags2CreateInfo"]
        [::std::mem::size_of::<VkPipelineCreateFlags2CreateInfo>() - 24usize];
    ["Alignment of VkPipelineCreateFlags2CreateInfo"]
        [::std::mem::align_of::<VkPipelineCreateFlags2CreateInfo>() - 8usize];
    ["Offset of field: VkPipelineCreateFlags2CreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineCreateFlags2CreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineCreateFlags2CreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineCreateFlags2CreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineCreateFlags2CreateInfo::flags"]
        [::std::mem::offset_of!(VkPipelineCreateFlags2CreateInfo, flags) - 16usize];
};
impl Default for VkPipelineCreateFlags2CreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferUsageFlags2CreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub usage: VkBufferUsageFlags2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferUsageFlags2CreateInfo"]
        [::std::mem::size_of::<VkBufferUsageFlags2CreateInfo>() - 24usize];
    ["Alignment of VkBufferUsageFlags2CreateInfo"]
        [::std::mem::align_of::<VkBufferUsageFlags2CreateInfo>() - 8usize];
    ["Offset of field: VkBufferUsageFlags2CreateInfo::sType"]
        [::std::mem::offset_of!(VkBufferUsageFlags2CreateInfo, sType) - 0usize];
    ["Offset of field: VkBufferUsageFlags2CreateInfo::pNext"]
        [::std::mem::offset_of!(VkBufferUsageFlags2CreateInfo, pNext) - 8usize];
    ["Offset of field: VkBufferUsageFlags2CreateInfo::usage"]
        [::std::mem::offset_of!(VkBufferUsageFlags2CreateInfo, usage) - 16usize];
};
impl Default for VkBufferUsageFlags2CreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePushDescriptorProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxPushDescriptors: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePushDescriptorProperties"]
        [::std::mem::size_of::<VkPhysicalDevicePushDescriptorProperties>() - 24usize];
    ["Alignment of VkPhysicalDevicePushDescriptorProperties"]
        [::std::mem::align_of::<VkPhysicalDevicePushDescriptorProperties>() - 8usize];
    ["Offset of field: VkPhysicalDevicePushDescriptorProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePushDescriptorProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePushDescriptorProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePushDescriptorProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePushDescriptorProperties::maxPushDescriptors"][::std::mem::offset_of!(
        VkPhysicalDevicePushDescriptorProperties,
        maxPushDescriptors
    ) - 16usize];
};
impl Default for VkPhysicalDevicePushDescriptorProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDynamicRenderingLocalReadFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dynamicRenderingLocalRead: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDynamicRenderingLocalReadFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceDynamicRenderingLocalReadFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceDynamicRenderingLocalReadFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceDynamicRenderingLocalReadFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingLocalReadFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDynamicRenderingLocalReadFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingLocalReadFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDynamicRenderingLocalReadFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingLocalReadFeatures::dynamicRenderingLocalRead"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDynamicRenderingLocalReadFeatures , dynamicRenderingLocalRead) - 16usize] ;
};
impl Default for VkPhysicalDeviceDynamicRenderingLocalReadFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingAttachmentLocationInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentLocations: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingAttachmentLocationInfo"]
        [::std::mem::size_of::<VkRenderingAttachmentLocationInfo>() - 32usize];
    ["Alignment of VkRenderingAttachmentLocationInfo"]
        [::std::mem::align_of::<VkRenderingAttachmentLocationInfo>() - 8usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::sType"]
        [::std::mem::offset_of!(VkRenderingAttachmentLocationInfo, sType) - 0usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::pNext"]
        [::std::mem::offset_of!(VkRenderingAttachmentLocationInfo, pNext) - 8usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::colorAttachmentCount"]
        [::std::mem::offset_of!(VkRenderingAttachmentLocationInfo, colorAttachmentCount) - 16usize];
    ["Offset of field: VkRenderingAttachmentLocationInfo::pColorAttachmentLocations"][::std::mem::offset_of!(
        VkRenderingAttachmentLocationInfo,
        pColorAttachmentLocations
    ) - 24usize];
};
impl Default for VkRenderingAttachmentLocationInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingInputAttachmentIndexInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentInputIndices: *const u32,
    pub pDepthInputAttachmentIndex: *const u32,
    pub pStencilInputAttachmentIndex: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingInputAttachmentIndexInfo"]
        [::std::mem::size_of::<VkRenderingInputAttachmentIndexInfo>() - 48usize];
    ["Alignment of VkRenderingInputAttachmentIndexInfo"]
        [::std::mem::align_of::<VkRenderingInputAttachmentIndexInfo>() - 8usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::sType"]
        [::std::mem::offset_of!(VkRenderingInputAttachmentIndexInfo, sType) - 0usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pNext"]
        [::std::mem::offset_of!(VkRenderingInputAttachmentIndexInfo, pNext) - 8usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::colorAttachmentCount"][::std::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        colorAttachmentCount
    ) - 16usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pColorAttachmentInputIndices"][::std::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        pColorAttachmentInputIndices
    )
        - 24usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pDepthInputAttachmentIndex"][::std::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        pDepthInputAttachmentIndex
    )
        - 32usize];
    ["Offset of field: VkRenderingInputAttachmentIndexInfo::pStencilInputAttachmentIndex"][::std::mem::offset_of!(
        VkRenderingInputAttachmentIndexInfo,
        pStencilInputAttachmentIndex
    )
        - 40usize];
};
impl Default for VkRenderingInputAttachmentIndexInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance6Features {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maintenance6: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance6Features"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance6Features>() - 24usize];
    ["Alignment of VkPhysicalDeviceMaintenance6Features"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance6Features>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Features::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance6Features, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Features::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance6Features, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Features::maintenance6"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance6Features, maintenance6) - 16usize];
};
impl Default for VkPhysicalDeviceMaintenance6Features {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance6Properties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub blockTexelViewCompatibleMultipleLayers: VkBool32,
    pub maxCombinedImageSamplerDescriptorCount: u32,
    pub fragmentShadingRateClampCombinerInputs: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance6Properties"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance6Properties>() - 32usize];
    ["Alignment of VkPhysicalDeviceMaintenance6Properties"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance6Properties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance6Properties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance6Properties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::blockTexelViewCompatibleMultipleLayers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance6Properties , blockTexelViewCompatibleMultipleLayers) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::maxCombinedImageSamplerDescriptorCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance6Properties , maxCombinedImageSamplerDescriptorCount) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance6Properties::fragmentShadingRateClampCombinerInputs"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance6Properties , fragmentShadingRateClampCombinerInputs) - 24usize] ;
};
impl Default for VkPhysicalDeviceMaintenance6Properties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindMemoryStatus {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pResult: *mut VkResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindMemoryStatus"][::std::mem::size_of::<VkBindMemoryStatus>() - 24usize];
    ["Alignment of VkBindMemoryStatus"][::std::mem::align_of::<VkBindMemoryStatus>() - 8usize];
    ["Offset of field: VkBindMemoryStatus::sType"]
        [::std::mem::offset_of!(VkBindMemoryStatus, sType) - 0usize];
    ["Offset of field: VkBindMemoryStatus::pNext"]
        [::std::mem::offset_of!(VkBindMemoryStatus, pNext) - 8usize];
    ["Offset of field: VkBindMemoryStatus::pResult"]
        [::std::mem::offset_of!(VkBindMemoryStatus, pResult) - 16usize];
};
impl Default for VkBindMemoryStatus {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindDescriptorSetsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub firstSet: u32,
    pub descriptorSetCount: u32,
    pub pDescriptorSets: *const VkDescriptorSet,
    pub dynamicOffsetCount: u32,
    pub pDynamicOffsets: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindDescriptorSetsInfo"]
        [::std::mem::size_of::<VkBindDescriptorSetsInfo>() - 64usize];
    ["Alignment of VkBindDescriptorSetsInfo"]
        [::std::mem::align_of::<VkBindDescriptorSetsInfo>() - 8usize];
    ["Offset of field: VkBindDescriptorSetsInfo::sType"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, sType) - 0usize];
    ["Offset of field: VkBindDescriptorSetsInfo::pNext"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, pNext) - 8usize];
    ["Offset of field: VkBindDescriptorSetsInfo::stageFlags"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, stageFlags) - 16usize];
    ["Offset of field: VkBindDescriptorSetsInfo::layout"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, layout) - 24usize];
    ["Offset of field: VkBindDescriptorSetsInfo::firstSet"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, firstSet) - 32usize];
    ["Offset of field: VkBindDescriptorSetsInfo::descriptorSetCount"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, descriptorSetCount) - 36usize];
    ["Offset of field: VkBindDescriptorSetsInfo::pDescriptorSets"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, pDescriptorSets) - 40usize];
    ["Offset of field: VkBindDescriptorSetsInfo::dynamicOffsetCount"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, dynamicOffsetCount) - 48usize];
    ["Offset of field: VkBindDescriptorSetsInfo::pDynamicOffsets"]
        [::std::mem::offset_of!(VkBindDescriptorSetsInfo, pDynamicOffsets) - 56usize];
};
impl Default for VkBindDescriptorSetsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPushConstantsInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub layout: VkPipelineLayout,
    pub stageFlags: VkShaderStageFlags,
    pub offset: u32,
    pub size: u32,
    pub pValues: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushConstantsInfo"][::std::mem::size_of::<VkPushConstantsInfo>() - 48usize];
    ["Alignment of VkPushConstantsInfo"][::std::mem::align_of::<VkPushConstantsInfo>() - 8usize];
    ["Offset of field: VkPushConstantsInfo::sType"]
        [::std::mem::offset_of!(VkPushConstantsInfo, sType) - 0usize];
    ["Offset of field: VkPushConstantsInfo::pNext"]
        [::std::mem::offset_of!(VkPushConstantsInfo, pNext) - 8usize];
    ["Offset of field: VkPushConstantsInfo::layout"]
        [::std::mem::offset_of!(VkPushConstantsInfo, layout) - 16usize];
    ["Offset of field: VkPushConstantsInfo::stageFlags"]
        [::std::mem::offset_of!(VkPushConstantsInfo, stageFlags) - 24usize];
    ["Offset of field: VkPushConstantsInfo::offset"]
        [::std::mem::offset_of!(VkPushConstantsInfo, offset) - 28usize];
    ["Offset of field: VkPushConstantsInfo::size"]
        [::std::mem::offset_of!(VkPushConstantsInfo, size) - 32usize];
    ["Offset of field: VkPushConstantsInfo::pValues"]
        [::std::mem::offset_of!(VkPushConstantsInfo, pValues) - 40usize];
};
impl Default for VkPushConstantsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPushDescriptorSetInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub set: u32,
    pub descriptorWriteCount: u32,
    pub pDescriptorWrites: *const VkWriteDescriptorSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushDescriptorSetInfo"][::std::mem::size_of::<VkPushDescriptorSetInfo>() - 48usize];
    ["Alignment of VkPushDescriptorSetInfo"]
        [::std::mem::align_of::<VkPushDescriptorSetInfo>() - 8usize];
    ["Offset of field: VkPushDescriptorSetInfo::sType"]
        [::std::mem::offset_of!(VkPushDescriptorSetInfo, sType) - 0usize];
    ["Offset of field: VkPushDescriptorSetInfo::pNext"]
        [::std::mem::offset_of!(VkPushDescriptorSetInfo, pNext) - 8usize];
    ["Offset of field: VkPushDescriptorSetInfo::stageFlags"]
        [::std::mem::offset_of!(VkPushDescriptorSetInfo, stageFlags) - 16usize];
    ["Offset of field: VkPushDescriptorSetInfo::layout"]
        [::std::mem::offset_of!(VkPushDescriptorSetInfo, layout) - 24usize];
    ["Offset of field: VkPushDescriptorSetInfo::set"]
        [::std::mem::offset_of!(VkPushDescriptorSetInfo, set) - 32usize];
    ["Offset of field: VkPushDescriptorSetInfo::descriptorWriteCount"]
        [::std::mem::offset_of!(VkPushDescriptorSetInfo, descriptorWriteCount) - 36usize];
    ["Offset of field: VkPushDescriptorSetInfo::pDescriptorWrites"]
        [::std::mem::offset_of!(VkPushDescriptorSetInfo, pDescriptorWrites) - 40usize];
};
impl Default for VkPushDescriptorSetInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPushDescriptorSetWithTemplateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
    pub layout: VkPipelineLayout,
    pub set: u32,
    pub pData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPushDescriptorSetWithTemplateInfo"]
        [::std::mem::size_of::<VkPushDescriptorSetWithTemplateInfo>() - 48usize];
    ["Alignment of VkPushDescriptorSetWithTemplateInfo"]
        [::std::mem::align_of::<VkPushDescriptorSetWithTemplateInfo>() - 8usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::sType"]
        [::std::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, sType) - 0usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::pNext"]
        [::std::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, pNext) - 8usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::descriptorUpdateTemplate"][::std::mem::offset_of!(
        VkPushDescriptorSetWithTemplateInfo,
        descriptorUpdateTemplate
    ) - 16usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::layout"]
        [::std::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, layout) - 24usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::set"]
        [::std::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, set) - 32usize];
    ["Offset of field: VkPushDescriptorSetWithTemplateInfo::pData"]
        [::std::mem::offset_of!(VkPushDescriptorSetWithTemplateInfo, pData) - 40usize];
};
impl Default for VkPushDescriptorSetWithTemplateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineProtectedAccessFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineProtectedAccess: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineProtectedAccessFeatures"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineProtectedAccessFeatures>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineProtectedAccessFeatures"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineProtectedAccessFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineProtectedAccessFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineProtectedAccessFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineProtectedAccessFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineProtectedAccessFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineProtectedAccessFeatures::pipelineProtectedAccess"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineProtectedAccessFeatures,
        pipelineProtectedAccess
    )
        - 16usize];
};
impl Default for VkPhysicalDevicePipelineProtectedAccessFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineRobustnessFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineRobustness: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineRobustnessFeatures"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineRobustnessFeatures>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineRobustnessFeatures"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineRobustnessFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineRobustnessFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineRobustnessFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessFeatures::pipelineRobustness"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineRobustnessFeatures,
        pipelineRobustness
    )
        - 16usize];
};
impl Default for VkPhysicalDevicePipelineRobustnessFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineRobustnessProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior,
    pub defaultRobustnessImages: VkPipelineRobustnessImageBehavior,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineRobustnessProperties"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineRobustnessProperties>() - 32usize];
    ["Alignment of VkPhysicalDevicePipelineRobustnessProperties"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineRobustnessProperties>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineRobustnessProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineRobustnessProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessStorageBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineRobustnessProperties , defaultRobustnessStorageBuffers) - 16usize] ;
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessUniformBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineRobustnessProperties , defaultRobustnessUniformBuffers) - 20usize] ;
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessVertexInputs"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineRobustnessProperties , defaultRobustnessVertexInputs) - 24usize] ;
    ["Offset of field: VkPhysicalDevicePipelineRobustnessProperties::defaultRobustnessImages"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineRobustnessProperties,
        defaultRobustnessImages
    )
        - 28usize];
};
impl Default for VkPhysicalDevicePipelineRobustnessProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRobustnessCreateInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub storageBuffers: VkPipelineRobustnessBufferBehavior,
    pub uniformBuffers: VkPipelineRobustnessBufferBehavior,
    pub vertexInputs: VkPipelineRobustnessBufferBehavior,
    pub images: VkPipelineRobustnessImageBehavior,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRobustnessCreateInfo"]
        [::std::mem::size_of::<VkPipelineRobustnessCreateInfo>() - 32usize];
    ["Alignment of VkPipelineRobustnessCreateInfo"]
        [::std::mem::align_of::<VkPipelineRobustnessCreateInfo>() - 8usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::sType"]
        [::std::mem::offset_of!(VkPipelineRobustnessCreateInfo, sType) - 0usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::pNext"]
        [::std::mem::offset_of!(VkPipelineRobustnessCreateInfo, pNext) - 8usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::storageBuffers"]
        [::std::mem::offset_of!(VkPipelineRobustnessCreateInfo, storageBuffers) - 16usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::uniformBuffers"]
        [::std::mem::offset_of!(VkPipelineRobustnessCreateInfo, uniformBuffers) - 20usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::vertexInputs"]
        [::std::mem::offset_of!(VkPipelineRobustnessCreateInfo, vertexInputs) - 24usize];
    ["Offset of field: VkPipelineRobustnessCreateInfo::images"]
        [::std::mem::offset_of!(VkPipelineRobustnessCreateInfo, images) - 28usize];
};
impl Default for VkPipelineRobustnessCreateInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHostImageCopyFeatures {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hostImageCopy: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHostImageCopyFeatures"]
        [::std::mem::size_of::<VkPhysicalDeviceHostImageCopyFeatures>() - 24usize];
    ["Alignment of VkPhysicalDeviceHostImageCopyFeatures"]
        [::std::mem::align_of::<VkPhysicalDeviceHostImageCopyFeatures>() - 8usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyFeatures::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostImageCopyFeatures, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyFeatures::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostImageCopyFeatures, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyFeatures::hostImageCopy"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostImageCopyFeatures, hostImageCopy) - 16usize];
};
impl Default for VkPhysicalDeviceHostImageCopyFeatures {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHostImageCopyProperties {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub copySrcLayoutCount: u32,
    pub pCopySrcLayouts: *mut VkImageLayout,
    pub copyDstLayoutCount: u32,
    pub pCopyDstLayouts: *mut VkImageLayout,
    pub optimalTilingLayoutUUID: [u8; 16usize],
    pub identicalMemoryTypeRequirements: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHostImageCopyProperties"]
        [::std::mem::size_of::<VkPhysicalDeviceHostImageCopyProperties>() - 72usize];
    ["Alignment of VkPhysicalDeviceHostImageCopyProperties"]
        [::std::mem::align_of::<VkPhysicalDeviceHostImageCopyProperties>() - 8usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostImageCopyProperties, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceHostImageCopyProperties, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::copySrcLayoutCount"][::std::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        copySrcLayoutCount
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::pCopySrcLayouts"][::std::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        pCopySrcLayouts
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::copyDstLayoutCount"][::std::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        copyDstLayoutCount
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::pCopyDstLayouts"][::std::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        pCopyDstLayouts
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::optimalTilingLayoutUUID"][::std::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        optimalTilingLayoutUUID
    )
        - 48usize];
    ["Offset of field: VkPhysicalDeviceHostImageCopyProperties::identicalMemoryTypeRequirements"][::std::mem::offset_of!(
        VkPhysicalDeviceHostImageCopyProperties,
        identicalMemoryTypeRequirements
    )
        - 64usize];
};
impl Default for VkPhysicalDeviceHostImageCopyProperties {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryToImageCopy {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pHostPointer: *const ::std::os::raw::c_void,
    pub memoryRowLength: u32,
    pub memoryImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryToImageCopy"][::std::mem::size_of::<VkMemoryToImageCopy>() - 72usize];
    ["Alignment of VkMemoryToImageCopy"][::std::mem::align_of::<VkMemoryToImageCopy>() - 8usize];
    ["Offset of field: VkMemoryToImageCopy::sType"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, sType) - 0usize];
    ["Offset of field: VkMemoryToImageCopy::pNext"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, pNext) - 8usize];
    ["Offset of field: VkMemoryToImageCopy::pHostPointer"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, pHostPointer) - 16usize];
    ["Offset of field: VkMemoryToImageCopy::memoryRowLength"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, memoryRowLength) - 24usize];
    ["Offset of field: VkMemoryToImageCopy::memoryImageHeight"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, memoryImageHeight) - 28usize];
    ["Offset of field: VkMemoryToImageCopy::imageSubresource"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, imageSubresource) - 32usize];
    ["Offset of field: VkMemoryToImageCopy::imageOffset"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, imageOffset) - 48usize];
    ["Offset of field: VkMemoryToImageCopy::imageExtent"]
        [::std::mem::offset_of!(VkMemoryToImageCopy, imageExtent) - 60usize];
};
impl Default for VkMemoryToImageCopy {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageToMemoryCopy {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pHostPointer: *mut ::std::os::raw::c_void,
    pub memoryRowLength: u32,
    pub memoryImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageToMemoryCopy"][::std::mem::size_of::<VkImageToMemoryCopy>() - 72usize];
    ["Alignment of VkImageToMemoryCopy"][::std::mem::align_of::<VkImageToMemoryCopy>() - 8usize];
    ["Offset of field: VkImageToMemoryCopy::sType"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, sType) - 0usize];
    ["Offset of field: VkImageToMemoryCopy::pNext"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, pNext) - 8usize];
    ["Offset of field: VkImageToMemoryCopy::pHostPointer"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, pHostPointer) - 16usize];
    ["Offset of field: VkImageToMemoryCopy::memoryRowLength"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, memoryRowLength) - 24usize];
    ["Offset of field: VkImageToMemoryCopy::memoryImageHeight"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, memoryImageHeight) - 28usize];
    ["Offset of field: VkImageToMemoryCopy::imageSubresource"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, imageSubresource) - 32usize];
    ["Offset of field: VkImageToMemoryCopy::imageOffset"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, imageOffset) - 48usize];
    ["Offset of field: VkImageToMemoryCopy::imageExtent"]
        [::std::mem::offset_of!(VkImageToMemoryCopy, imageExtent) - 60usize];
};
impl Default for VkImageToMemoryCopy {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMemoryToImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkHostImageCopyFlags,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkMemoryToImageCopy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToImageInfo"][::std::mem::size_of::<VkCopyMemoryToImageInfo>() - 48usize];
    ["Alignment of VkCopyMemoryToImageInfo"]
        [::std::mem::align_of::<VkCopyMemoryToImageInfo>() - 8usize];
    ["Offset of field: VkCopyMemoryToImageInfo::sType"]
        [::std::mem::offset_of!(VkCopyMemoryToImageInfo, sType) - 0usize];
    ["Offset of field: VkCopyMemoryToImageInfo::pNext"]
        [::std::mem::offset_of!(VkCopyMemoryToImageInfo, pNext) - 8usize];
    ["Offset of field: VkCopyMemoryToImageInfo::flags"]
        [::std::mem::offset_of!(VkCopyMemoryToImageInfo, flags) - 16usize];
    ["Offset of field: VkCopyMemoryToImageInfo::dstImage"]
        [::std::mem::offset_of!(VkCopyMemoryToImageInfo, dstImage) - 24usize];
    ["Offset of field: VkCopyMemoryToImageInfo::dstImageLayout"]
        [::std::mem::offset_of!(VkCopyMemoryToImageInfo, dstImageLayout) - 32usize];
    ["Offset of field: VkCopyMemoryToImageInfo::regionCount"]
        [::std::mem::offset_of!(VkCopyMemoryToImageInfo, regionCount) - 36usize];
    ["Offset of field: VkCopyMemoryToImageInfo::pRegions"]
        [::std::mem::offset_of!(VkCopyMemoryToImageInfo, pRegions) - 40usize];
};
impl Default for VkCopyMemoryToImageInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyImageToMemoryInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkHostImageCopyFlags,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageToMemoryCopy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageToMemoryInfo"][::std::mem::size_of::<VkCopyImageToMemoryInfo>() - 48usize];
    ["Alignment of VkCopyImageToMemoryInfo"]
        [::std::mem::align_of::<VkCopyImageToMemoryInfo>() - 8usize];
    ["Offset of field: VkCopyImageToMemoryInfo::sType"]
        [::std::mem::offset_of!(VkCopyImageToMemoryInfo, sType) - 0usize];
    ["Offset of field: VkCopyImageToMemoryInfo::pNext"]
        [::std::mem::offset_of!(VkCopyImageToMemoryInfo, pNext) - 8usize];
    ["Offset of field: VkCopyImageToMemoryInfo::flags"]
        [::std::mem::offset_of!(VkCopyImageToMemoryInfo, flags) - 16usize];
    ["Offset of field: VkCopyImageToMemoryInfo::srcImage"]
        [::std::mem::offset_of!(VkCopyImageToMemoryInfo, srcImage) - 24usize];
    ["Offset of field: VkCopyImageToMemoryInfo::srcImageLayout"]
        [::std::mem::offset_of!(VkCopyImageToMemoryInfo, srcImageLayout) - 32usize];
    ["Offset of field: VkCopyImageToMemoryInfo::regionCount"]
        [::std::mem::offset_of!(VkCopyImageToMemoryInfo, regionCount) - 36usize];
    ["Offset of field: VkCopyImageToMemoryInfo::pRegions"]
        [::std::mem::offset_of!(VkCopyImageToMemoryInfo, pRegions) - 40usize];
};
impl Default for VkCopyImageToMemoryInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyImageToImageInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkHostImageCopyFlags,
    pub srcImage: VkImage,
    pub srcImageLayout: VkImageLayout,
    pub dstImage: VkImage,
    pub dstImageLayout: VkImageLayout,
    pub regionCount: u32,
    pub pRegions: *const VkImageCopy2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyImageToImageInfo"][::std::mem::size_of::<VkCopyImageToImageInfo>() - 64usize];
    ["Alignment of VkCopyImageToImageInfo"]
        [::std::mem::align_of::<VkCopyImageToImageInfo>() - 8usize];
    ["Offset of field: VkCopyImageToImageInfo::sType"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, sType) - 0usize];
    ["Offset of field: VkCopyImageToImageInfo::pNext"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, pNext) - 8usize];
    ["Offset of field: VkCopyImageToImageInfo::flags"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, flags) - 16usize];
    ["Offset of field: VkCopyImageToImageInfo::srcImage"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, srcImage) - 24usize];
    ["Offset of field: VkCopyImageToImageInfo::srcImageLayout"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, srcImageLayout) - 32usize];
    ["Offset of field: VkCopyImageToImageInfo::dstImage"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, dstImage) - 40usize];
    ["Offset of field: VkCopyImageToImageInfo::dstImageLayout"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, dstImageLayout) - 48usize];
    ["Offset of field: VkCopyImageToImageInfo::regionCount"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, regionCount) - 52usize];
    ["Offset of field: VkCopyImageToImageInfo::pRegions"]
        [::std::mem::offset_of!(VkCopyImageToImageInfo, pRegions) - 56usize];
};
impl Default for VkCopyImageToImageInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHostImageLayoutTransitionInfo {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub oldLayout: VkImageLayout,
    pub newLayout: VkImageLayout,
    pub subresourceRange: VkImageSubresourceRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHostImageLayoutTransitionInfo"]
        [::std::mem::size_of::<VkHostImageLayoutTransitionInfo>() - 56usize];
    ["Alignment of VkHostImageLayoutTransitionInfo"]
        [::std::mem::align_of::<VkHostImageLayoutTransitionInfo>() - 8usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::sType"]
        [::std::mem::offset_of!(VkHostImageLayoutTransitionInfo, sType) - 0usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::pNext"]
        [::std::mem::offset_of!(VkHostImageLayoutTransitionInfo, pNext) - 8usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::image"]
        [::std::mem::offset_of!(VkHostImageLayoutTransitionInfo, image) - 16usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::oldLayout"]
        [::std::mem::offset_of!(VkHostImageLayoutTransitionInfo, oldLayout) - 24usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::newLayout"]
        [::std::mem::offset_of!(VkHostImageLayoutTransitionInfo, newLayout) - 28usize];
    ["Offset of field: VkHostImageLayoutTransitionInfo::subresourceRange"]
        [::std::mem::offset_of!(VkHostImageLayoutTransitionInfo, subresourceRange) - 32usize];
};
impl Default for VkHostImageLayoutTransitionInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubresourceHostMemcpySize {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubresourceHostMemcpySize"]
        [::std::mem::size_of::<VkSubresourceHostMemcpySize>() - 24usize];
    ["Alignment of VkSubresourceHostMemcpySize"]
        [::std::mem::align_of::<VkSubresourceHostMemcpySize>() - 8usize];
    ["Offset of field: VkSubresourceHostMemcpySize::sType"]
        [::std::mem::offset_of!(VkSubresourceHostMemcpySize, sType) - 0usize];
    ["Offset of field: VkSubresourceHostMemcpySize::pNext"]
        [::std::mem::offset_of!(VkSubresourceHostMemcpySize, pNext) - 8usize];
    ["Offset of field: VkSubresourceHostMemcpySize::size"]
        [::std::mem::offset_of!(VkSubresourceHostMemcpySize, size) - 16usize];
};
impl Default for VkSubresourceHostMemcpySize {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHostImageCopyDevicePerformanceQuery {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub optimalDeviceAccess: VkBool32,
    pub identicalMemoryLayout: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHostImageCopyDevicePerformanceQuery"]
        [::std::mem::size_of::<VkHostImageCopyDevicePerformanceQuery>() - 24usize];
    ["Alignment of VkHostImageCopyDevicePerformanceQuery"]
        [::std::mem::align_of::<VkHostImageCopyDevicePerformanceQuery>() - 8usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::sType"]
        [::std::mem::offset_of!(VkHostImageCopyDevicePerformanceQuery, sType) - 0usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::pNext"]
        [::std::mem::offset_of!(VkHostImageCopyDevicePerformanceQuery, pNext) - 8usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::optimalDeviceAccess"][::std::mem::offset_of!(
        VkHostImageCopyDevicePerformanceQuery,
        optimalDeviceAccess
    ) - 16usize];
    ["Offset of field: VkHostImageCopyDevicePerformanceQuery::identicalMemoryLayout"][::std::mem::offset_of!(
        VkHostImageCopyDevicePerformanceQuery,
        identicalMemoryLayout
    ) - 20usize];
};
impl Default for VkHostImageCopyDevicePerformanceQuery {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetLineStipple = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
pub type PFN_vkMapMemory2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfo,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory2 = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pMemoryUnmapInfo: *const VkMemoryUnmapInfo) -> VkResult,
>;
pub type PFN_vkCmdBindIndexBuffer2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkGetRenderingAreaGranularity = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pRenderingAreaInfo: *const VkRenderingAreaInfo,
        pGranularity: *mut VkExtent2D,
    ),
>;
pub type PFN_vkGetDeviceImageSubresourceLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageSubresourceInfo,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout2 = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type PFN_vkCmdPushDescriptorSet = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplate = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdSetRenderingAttachmentLocations = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pLocationInfo: *const VkRenderingAttachmentLocationInfo,
    ),
>;
pub type PFN_vkCmdSetRenderingInputAttachmentIndices = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInputAttachmentIndexInfo: *const VkRenderingInputAttachmentIndexInfo,
    ),
>;
pub type PFN_vkCmdBindDescriptorSets2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBindDescriptorSetsInfo: *const VkBindDescriptorSetsInfo,
    ),
>;
pub type PFN_vkCmdPushConstants2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pPushConstantsInfo: *const VkPushConstantsInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSet2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetInfo: *const VkPushDescriptorSetInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplate2 = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetWithTemplateInfo: *const VkPushDescriptorSetWithTemplateInfo,
    ),
>;
pub type PFN_vkCopyMemoryToImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCopyMemoryToImageInfo: *const VkCopyMemoryToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToMemory = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCopyImageToMemoryInfo: *const VkCopyImageToMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToImage = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCopyImageToImageInfo: *const VkCopyImageToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkTransitionImageLayout = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        transitionCount: u32,
        pTransitions: *const VkHostImageLayoutTransitionInfo,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCmdSetLineStipple(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    );
}
unsafe extern "system" {
    pub fn vkMapMemory2(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfo,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkUnmapMemory2(device: VkDevice, pMemoryUnmapInfo: *const VkMemoryUnmapInfo)
        -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdBindIndexBuffer2(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        indexType: VkIndexType,
    );
}
unsafe extern "system" {
    pub fn vkGetRenderingAreaGranularity(
        device: VkDevice,
        pRenderingAreaInfo: *const VkRenderingAreaInfo,
        pGranularity: *mut VkExtent2D,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceImageSubresourceLayout(
        device: VkDevice,
        pInfo: *const VkDeviceImageSubresourceInfo,
        pLayout: *mut VkSubresourceLayout2,
    );
}
unsafe extern "system" {
    pub fn vkGetImageSubresourceLayout2(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSet(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSetWithTemplate(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetRenderingAttachmentLocations(
        commandBuffer: VkCommandBuffer,
        pLocationInfo: *const VkRenderingAttachmentLocationInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetRenderingInputAttachmentIndices(
        commandBuffer: VkCommandBuffer,
        pInputAttachmentIndexInfo: *const VkRenderingInputAttachmentIndexInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindDescriptorSets2(
        commandBuffer: VkCommandBuffer,
        pBindDescriptorSetsInfo: *const VkBindDescriptorSetsInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushConstants2(
        commandBuffer: VkCommandBuffer,
        pPushConstantsInfo: *const VkPushConstantsInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSet2(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetInfo: *const VkPushDescriptorSetInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSetWithTemplate2(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetWithTemplateInfo: *const VkPushDescriptorSetWithTemplateInfo,
    );
}
unsafe extern "system" {
    pub fn vkCopyMemoryToImage(
        device: VkDevice,
        pCopyMemoryToImageInfo: *const VkCopyMemoryToImageInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyImageToMemory(
        device: VkDevice,
        pCopyImageToMemoryInfo: *const VkCopyImageToMemoryInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyImageToImage(
        device: VkDevice,
        pCopyImageToImageInfo: *const VkCopyImageToImageInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkTransitionImageLayout(
        device: VkDevice,
        transitionCount: u32,
        pTransitions: *const VkHostImageLayoutTransitionInfo,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceKHR_T {
    _unused: [u8; 0],
}
pub type VkSurfaceKHR = *mut VkSurfaceKHR_T;
pub const VkPresentModeKHR_VK_PRESENT_MODE_IMMEDIATE_KHR: VkPresentModeKHR = 0;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAILBOX_KHR: VkPresentModeKHR = 1;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_KHR: VkPresentModeKHR = 2;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_RELAXED_KHR: VkPresentModeKHR = 3;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: VkPresentModeKHR = 1000111000;
pub const VkPresentModeKHR_VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: VkPresentModeKHR =
    1000111001;
pub const VkPresentModeKHR_VK_PRESENT_MODE_FIFO_LATEST_READY_EXT: VkPresentModeKHR = 1000361000;
pub const VkPresentModeKHR_VK_PRESENT_MODE_MAX_ENUM_KHR: VkPresentModeKHR = 2147483647;
pub type VkPresentModeKHR = ::std::os::raw::c_uint;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR = 0;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104001;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: VkColorSpaceKHR = 1000104002;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: VkColorSpaceKHR = 1000104003;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: VkColorSpaceKHR = 1000104004;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_LINEAR_EXT: VkColorSpaceKHR = 1000104005;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT709_NONLINEAR_EXT: VkColorSpaceKHR = 1000104006;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_BT2020_LINEAR_EXT: VkColorSpaceKHR = 1000104007;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_ST2084_EXT: VkColorSpaceKHR = 1000104008;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DOLBYVISION_EXT: VkColorSpaceKHR = 1000104009;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_HDR10_HLG_EXT: VkColorSpaceKHR = 1000104010;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: VkColorSpaceKHR = 1000104011;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104012;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_PASS_THROUGH_EXT: VkColorSpaceKHR = 1000104013;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: VkColorSpaceKHR = 1000104014;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: VkColorSpaceKHR = 1000213000;
pub const VkColorSpaceKHR_VK_COLORSPACE_SRGB_NONLINEAR_KHR: VkColorSpaceKHR = 0;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: VkColorSpaceKHR = 1000104003;
pub const VkColorSpaceKHR_VK_COLOR_SPACE_MAX_ENUM_KHR: VkColorSpaceKHR = 2147483647;
pub type VkColorSpaceKHR = ::std::os::raw::c_uint;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 1;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 2;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 4;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 8;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 16;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 32;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 64 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR : VkSurfaceTransformFlagBitsKHR = 128 ;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR:
    VkSurfaceTransformFlagBitsKHR = 256;
pub const VkSurfaceTransformFlagBitsKHR_VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR:
    VkSurfaceTransformFlagBitsKHR = 2147483647;
pub type VkSurfaceTransformFlagBitsKHR = ::std::os::raw::c_uint;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 1;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 2;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 4;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR:
    VkCompositeAlphaFlagBitsKHR = 8;
pub const VkCompositeAlphaFlagBitsKHR_VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR:
    VkCompositeAlphaFlagBitsKHR = 2147483647;
pub type VkCompositeAlphaFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkCompositeAlphaFlagsKHR = VkFlags;
pub type VkSurfaceTransformFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilitiesKHR {
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilitiesKHR"]
        [::std::mem::size_of::<VkSurfaceCapabilitiesKHR>() - 52usize];
    ["Alignment of VkSurfaceCapabilitiesKHR"]
        [::std::mem::align_of::<VkSurfaceCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::minImageCount"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, minImageCount) - 0usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::maxImageCount"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, maxImageCount) - 4usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::currentExtent"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, currentExtent) - 8usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::minImageExtent"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, minImageExtent) - 16usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::maxImageExtent"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, maxImageExtent) - 24usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::maxImageArrayLayers"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, maxImageArrayLayers) - 32usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::supportedTransforms"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, supportedTransforms) - 36usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::currentTransform"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, currentTransform) - 40usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::supportedCompositeAlpha"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, supportedCompositeAlpha) - 44usize];
    ["Offset of field: VkSurfaceCapabilitiesKHR::supportedUsageFlags"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesKHR, supportedUsageFlags) - 48usize];
};
impl Default for VkSurfaceCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormatKHR {
    pub format: VkFormat,
    pub colorSpace: VkColorSpaceKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceFormatKHR"][::std::mem::size_of::<VkSurfaceFormatKHR>() - 8usize];
    ["Alignment of VkSurfaceFormatKHR"][::std::mem::align_of::<VkSurfaceFormatKHR>() - 4usize];
    ["Offset of field: VkSurfaceFormatKHR::format"]
        [::std::mem::offset_of!(VkSurfaceFormatKHR, format) - 0usize];
    ["Offset of field: VkSurfaceFormatKHR::colorSpace"]
        [::std::mem::offset_of!(VkSurfaceFormatKHR, colorSpace) - 4usize];
};
impl Default for VkSurfaceFormatKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDestroySurfaceKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        surface: VkSurfaceKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        surface: VkSurfaceKHR,
        pSupported: *mut VkBool32,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormatKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pPresentModeCount: *mut u32,
        pPresentModes: *mut VkPresentModeKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkDestroySurfaceKHR(
        instance: VkInstance,
        surface: VkSurfaceKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceSupportKHR(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        surface: VkSurfaceKHR,
        pSupported: *mut VkBool32,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceFormatsKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormatKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSurfacePresentModesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pPresentModeCount: *mut u32,
        pPresentModes: *mut VkPresentModeKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainKHR_T {
    _unused: [u8; 0],
}
pub type VkSwapchainKHR = *mut VkSwapchainKHR_T;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 1;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 2;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR:
    VkSwapchainCreateFlagBitsKHR = 4;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT:
    VkSwapchainCreateFlagBitsKHR = 8;
pub const VkSwapchainCreateFlagBitsKHR_VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR:
    VkSwapchainCreateFlagBitsKHR = 2147483647;
pub type VkSwapchainCreateFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkSwapchainCreateFlagsKHR = VkFlags;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 1;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 2;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR:
    VkDeviceGroupPresentModeFlagBitsKHR = 4;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR : VkDeviceGroupPresentModeFlagBitsKHR = 8 ;
pub const VkDeviceGroupPresentModeFlagBitsKHR_VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR : VkDeviceGroupPresentModeFlagBitsKHR = 2147483647 ;
pub type VkDeviceGroupPresentModeFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkSwapchainCreateFlagsKHR,
    pub surface: VkSurfaceKHR,
    pub minImageCount: u32,
    pub imageFormat: VkFormat,
    pub imageColorSpace: VkColorSpaceKHR,
    pub imageExtent: VkExtent2D,
    pub imageArrayLayers: u32,
    pub imageUsage: VkImageUsageFlags,
    pub imageSharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
    pub preTransform: VkSurfaceTransformFlagBitsKHR,
    pub compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    pub presentMode: VkPresentModeKHR,
    pub clipped: VkBool32,
    pub oldSwapchain: VkSwapchainKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainCreateInfoKHR"]
        [::std::mem::size_of::<VkSwapchainCreateInfoKHR>() - 104usize];
    ["Alignment of VkSwapchainCreateInfoKHR"]
        [::std::mem::align_of::<VkSwapchainCreateInfoKHR>() - 8usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::flags"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, flags) - 16usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::surface"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, surface) - 24usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::minImageCount"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, minImageCount) - 32usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageFormat"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, imageFormat) - 36usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageColorSpace"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, imageColorSpace) - 40usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageExtent"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, imageExtent) - 44usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageArrayLayers"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, imageArrayLayers) - 52usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageUsage"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, imageUsage) - 56usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::imageSharingMode"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, imageSharingMode) - 60usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::queueFamilyIndexCount"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, queueFamilyIndexCount) - 64usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::pQueueFamilyIndices"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, pQueueFamilyIndices) - 72usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::preTransform"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, preTransform) - 80usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::compositeAlpha"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, compositeAlpha) - 84usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::presentMode"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, presentMode) - 88usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::clipped"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, clipped) - 92usize];
    ["Offset of field: VkSwapchainCreateInfoKHR::oldSwapchain"]
        [::std::mem::offset_of!(VkSwapchainCreateInfoKHR, oldSwapchain) - 96usize];
};
impl Default for VkSwapchainCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub waitSemaphoreCount: u32,
    pub pWaitSemaphores: *const VkSemaphore,
    pub swapchainCount: u32,
    pub pSwapchains: *const VkSwapchainKHR,
    pub pImageIndices: *const u32,
    pub pResults: *mut VkResult,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentInfoKHR"][::std::mem::size_of::<VkPresentInfoKHR>() - 64usize];
    ["Alignment of VkPresentInfoKHR"][::std::mem::align_of::<VkPresentInfoKHR>() - 8usize];
    ["Offset of field: VkPresentInfoKHR::sType"]
        [::std::mem::offset_of!(VkPresentInfoKHR, sType) - 0usize];
    ["Offset of field: VkPresentInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPresentInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPresentInfoKHR::waitSemaphoreCount"]
        [::std::mem::offset_of!(VkPresentInfoKHR, waitSemaphoreCount) - 16usize];
    ["Offset of field: VkPresentInfoKHR::pWaitSemaphores"]
        [::std::mem::offset_of!(VkPresentInfoKHR, pWaitSemaphores) - 24usize];
    ["Offset of field: VkPresentInfoKHR::swapchainCount"]
        [::std::mem::offset_of!(VkPresentInfoKHR, swapchainCount) - 32usize];
    ["Offset of field: VkPresentInfoKHR::pSwapchains"]
        [::std::mem::offset_of!(VkPresentInfoKHR, pSwapchains) - 40usize];
    ["Offset of field: VkPresentInfoKHR::pImageIndices"]
        [::std::mem::offset_of!(VkPresentInfoKHR, pImageIndices) - 48usize];
    ["Offset of field: VkPresentInfoKHR::pResults"]
        [::std::mem::offset_of!(VkPresentInfoKHR, pResults) - 56usize];
};
impl Default for VkPresentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageSwapchainCreateInfoKHR"]
        [::std::mem::size_of::<VkImageSwapchainCreateInfoKHR>() - 24usize];
    ["Alignment of VkImageSwapchainCreateInfoKHR"]
        [::std::mem::align_of::<VkImageSwapchainCreateInfoKHR>() - 8usize];
    ["Offset of field: VkImageSwapchainCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkImageSwapchainCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkImageSwapchainCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkImageSwapchainCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkImageSwapchainCreateInfoKHR::swapchain"]
        [::std::mem::offset_of!(VkImageSwapchainCreateInfoKHR, swapchain) - 16usize];
};
impl Default for VkImageSwapchainCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindImageMemorySwapchainInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub imageIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindImageMemorySwapchainInfoKHR"]
        [::std::mem::size_of::<VkBindImageMemorySwapchainInfoKHR>() - 32usize];
    ["Alignment of VkBindImageMemorySwapchainInfoKHR"]
        [::std::mem::align_of::<VkBindImageMemorySwapchainInfoKHR>() - 8usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::sType"]
        [::std::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, sType) - 0usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::pNext"]
        [::std::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, pNext) - 8usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::swapchain"]
        [::std::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, swapchain) - 16usize];
    ["Offset of field: VkBindImageMemorySwapchainInfoKHR::imageIndex"]
        [::std::mem::offset_of!(VkBindImageMemorySwapchainInfoKHR, imageIndex) - 24usize];
};
impl Default for VkBindImageMemorySwapchainInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAcquireNextImageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub timeout: u64,
    pub semaphore: VkSemaphore,
    pub fence: VkFence,
    pub deviceMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAcquireNextImageInfoKHR"]
        [::std::mem::size_of::<VkAcquireNextImageInfoKHR>() - 56usize];
    ["Alignment of VkAcquireNextImageInfoKHR"]
        [::std::mem::align_of::<VkAcquireNextImageInfoKHR>() - 8usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::sType"]
        [::std::mem::offset_of!(VkAcquireNextImageInfoKHR, sType) - 0usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::pNext"]
        [::std::mem::offset_of!(VkAcquireNextImageInfoKHR, pNext) - 8usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::swapchain"]
        [::std::mem::offset_of!(VkAcquireNextImageInfoKHR, swapchain) - 16usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::timeout"]
        [::std::mem::offset_of!(VkAcquireNextImageInfoKHR, timeout) - 24usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::semaphore"]
        [::std::mem::offset_of!(VkAcquireNextImageInfoKHR, semaphore) - 32usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::fence"]
        [::std::mem::offset_of!(VkAcquireNextImageInfoKHR, fence) - 40usize];
    ["Offset of field: VkAcquireNextImageInfoKHR::deviceMask"]
        [::std::mem::offset_of!(VkAcquireNextImageInfoKHR, deviceMask) - 48usize];
};
impl Default for VkAcquireNextImageInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentMask: [u32; 32usize],
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupPresentCapabilitiesKHR"]
        [::std::mem::size_of::<VkDeviceGroupPresentCapabilitiesKHR>() - 152usize];
    ["Alignment of VkDeviceGroupPresentCapabilitiesKHR"]
        [::std::mem::align_of::<VkDeviceGroupPresentCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::presentMask"]
        [::std::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, presentMask) - 16usize];
    ["Offset of field: VkDeviceGroupPresentCapabilitiesKHR::modes"]
        [::std::mem::offset_of!(VkDeviceGroupPresentCapabilitiesKHR, modes) - 144usize];
};
impl Default for VkDeviceGroupPresentCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pDeviceMasks: *const u32,
    pub mode: VkDeviceGroupPresentModeFlagBitsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupPresentInfoKHR"]
        [::std::mem::size_of::<VkDeviceGroupPresentInfoKHR>() - 40usize];
    ["Alignment of VkDeviceGroupPresentInfoKHR"]
        [::std::mem::align_of::<VkDeviceGroupPresentInfoKHR>() - 8usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::sType"]
        [::std::mem::offset_of!(VkDeviceGroupPresentInfoKHR, sType) - 0usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupPresentInfoKHR, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::swapchainCount"]
        [::std::mem::offset_of!(VkDeviceGroupPresentInfoKHR, swapchainCount) - 16usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::pDeviceMasks"]
        [::std::mem::offset_of!(VkDeviceGroupPresentInfoKHR, pDeviceMasks) - 24usize];
    ["Offset of field: VkDeviceGroupPresentInfoKHR::mode"]
        [::std::mem::offset_of!(VkDeviceGroupPresentInfoKHR, mode) - 32usize];
};
impl Default for VkDeviceGroupPresentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub modes: VkDeviceGroupPresentModeFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceGroupSwapchainCreateInfoKHR"]
        [::std::mem::size_of::<VkDeviceGroupSwapchainCreateInfoKHR>() - 24usize];
    ["Alignment of VkDeviceGroupSwapchainCreateInfoKHR"]
        [::std::mem::align_of::<VkDeviceGroupSwapchainCreateInfoKHR>() - 8usize];
    ["Offset of field: VkDeviceGroupSwapchainCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkDeviceGroupSwapchainCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkDeviceGroupSwapchainCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkDeviceGroupSwapchainCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkDeviceGroupSwapchainCreateInfoKHR::modes"]
        [::std::mem::offset_of!(VkDeviceGroupSwapchainCreateInfoKHR, modes) - 16usize];
};
impl Default for VkDeviceGroupSwapchainCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateSwapchainKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroySwapchainKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetSwapchainImagesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImageKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
pub type PFN_vkQueuePresentKHR = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDeviceGroupSurfacePresentModesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        surface: VkSurfaceKHR,
        pModes: *mut VkDeviceGroupPresentModeFlagsKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDevicePresentRectanglesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pRectCount: *mut u32,
        pRects: *mut VkRect2D,
    ) -> VkResult,
>;
pub type PFN_vkAcquireNextImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAcquireInfo: *const VkAcquireNextImageInfoKHR,
        pImageIndex: *mut u32,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCreateSwapchainKHR(
        device: VkDevice,
        pCreateInfo: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchain: *mut VkSwapchainKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroySwapchainKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetSwapchainImagesKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSwapchainImageCount: *mut u32,
        pSwapchainImages: *mut VkImage,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkAcquireNextImageKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        timeout: u64,
        semaphore: VkSemaphore,
        fence: VkFence,
        pImageIndex: *mut u32,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: *const VkPresentInfoKHR) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDeviceGroupPresentCapabilitiesKHR(
        device: VkDevice,
        pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDeviceGroupSurfacePresentModesKHR(
        device: VkDevice,
        surface: VkSurfaceKHR,
        pModes: *mut VkDeviceGroupPresentModeFlagsKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDevicePresentRectanglesKHR(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pRectCount: *mut u32,
        pRects: *mut VkRect2D,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkAcquireNextImage2KHR(
        device: VkDevice,
        pAcquireInfo: *const VkAcquireNextImageInfoKHR,
        pImageIndex: *mut u32,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayKHR_T {
    _unused: [u8; 0],
}
pub type VkDisplayKHR = *mut VkDisplayKHR_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeKHR_T {
    _unused: [u8; 0],
}
pub type VkDisplayModeKHR = *mut VkDisplayModeKHR_T;
pub type VkDisplayModeCreateFlagsKHR = VkFlags;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 1;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 2;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 4;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 8;
pub const VkDisplayPlaneAlphaFlagBitsKHR_VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR:
    VkDisplayPlaneAlphaFlagBitsKHR = 2147483647;
pub type VkDisplayPlaneAlphaFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDisplayModeParametersKHR {
    pub visibleRegion: VkExtent2D,
    pub refreshRate: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeParametersKHR"]
        [::std::mem::size_of::<VkDisplayModeParametersKHR>() - 12usize];
    ["Alignment of VkDisplayModeParametersKHR"]
        [::std::mem::align_of::<VkDisplayModeParametersKHR>() - 4usize];
    ["Offset of field: VkDisplayModeParametersKHR::visibleRegion"]
        [::std::mem::offset_of!(VkDisplayModeParametersKHR, visibleRegion) - 0usize];
    ["Offset of field: VkDisplayModeParametersKHR::refreshRate"]
        [::std::mem::offset_of!(VkDisplayModeParametersKHR, refreshRate) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDisplayModeCreateFlagsKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeCreateInfoKHR"]
        [::std::mem::size_of::<VkDisplayModeCreateInfoKHR>() - 32usize];
    ["Alignment of VkDisplayModeCreateInfoKHR"]
        [::std::mem::align_of::<VkDisplayModeCreateInfoKHR>() - 8usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkDisplayModeCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkDisplayModeCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::flags"]
        [::std::mem::offset_of!(VkDisplayModeCreateInfoKHR, flags) - 16usize];
    ["Offset of field: VkDisplayModeCreateInfoKHR::parameters"]
        [::std::mem::offset_of!(VkDisplayModeCreateInfoKHR, parameters) - 20usize];
};
impl Default for VkDisplayModeCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModePropertiesKHR {
    pub displayMode: VkDisplayModeKHR,
    pub parameters: VkDisplayModeParametersKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModePropertiesKHR"]
        [::std::mem::size_of::<VkDisplayModePropertiesKHR>() - 24usize];
    ["Alignment of VkDisplayModePropertiesKHR"]
        [::std::mem::align_of::<VkDisplayModePropertiesKHR>() - 8usize];
    ["Offset of field: VkDisplayModePropertiesKHR::displayMode"]
        [::std::mem::offset_of!(VkDisplayModePropertiesKHR, displayMode) - 0usize];
    ["Offset of field: VkDisplayModePropertiesKHR::parameters"]
        [::std::mem::offset_of!(VkDisplayModePropertiesKHR, parameters) - 8usize];
};
impl Default for VkDisplayModePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDisplayPlaneCapabilitiesKHR {
    pub supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    pub minSrcPosition: VkOffset2D,
    pub maxSrcPosition: VkOffset2D,
    pub minSrcExtent: VkExtent2D,
    pub maxSrcExtent: VkExtent2D,
    pub minDstPosition: VkOffset2D,
    pub maxDstPosition: VkOffset2D,
    pub minDstExtent: VkExtent2D,
    pub maxDstExtent: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneCapabilitiesKHR"]
        [::std::mem::size_of::<VkDisplayPlaneCapabilitiesKHR>() - 68usize];
    ["Alignment of VkDisplayPlaneCapabilitiesKHR"]
        [::std::mem::align_of::<VkDisplayPlaneCapabilitiesKHR>() - 4usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::supportedAlpha"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, supportedAlpha) - 0usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minSrcPosition"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minSrcPosition) - 4usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxSrcPosition"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxSrcPosition) - 12usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minSrcExtent"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minSrcExtent) - 20usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxSrcExtent"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxSrcExtent) - 28usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minDstPosition"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minDstPosition) - 36usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxDstPosition"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxDstPosition) - 44usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::minDstExtent"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, minDstExtent) - 52usize];
    ["Offset of field: VkDisplayPlaneCapabilitiesKHR::maxDstExtent"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilitiesKHR, maxDstExtent) - 60usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlanePropertiesKHR {
    pub currentDisplay: VkDisplayKHR,
    pub currentStackIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlanePropertiesKHR"]
        [::std::mem::size_of::<VkDisplayPlanePropertiesKHR>() - 16usize];
    ["Alignment of VkDisplayPlanePropertiesKHR"]
        [::std::mem::align_of::<VkDisplayPlanePropertiesKHR>() - 8usize];
    ["Offset of field: VkDisplayPlanePropertiesKHR::currentDisplay"]
        [::std::mem::offset_of!(VkDisplayPlanePropertiesKHR, currentDisplay) - 0usize];
    ["Offset of field: VkDisplayPlanePropertiesKHR::currentStackIndex"]
        [::std::mem::offset_of!(VkDisplayPlanePropertiesKHR, currentStackIndex) - 8usize];
};
impl Default for VkDisplayPlanePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPropertiesKHR {
    pub display: VkDisplayKHR,
    pub displayName: *const ::std::os::raw::c_char,
    pub physicalDimensions: VkExtent2D,
    pub physicalResolution: VkExtent2D,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub planeReorderPossible: VkBool32,
    pub persistentContent: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPropertiesKHR"][::std::mem::size_of::<VkDisplayPropertiesKHR>() - 48usize];
    ["Alignment of VkDisplayPropertiesKHR"]
        [::std::mem::align_of::<VkDisplayPropertiesKHR>() - 8usize];
    ["Offset of field: VkDisplayPropertiesKHR::display"]
        [::std::mem::offset_of!(VkDisplayPropertiesKHR, display) - 0usize];
    ["Offset of field: VkDisplayPropertiesKHR::displayName"]
        [::std::mem::offset_of!(VkDisplayPropertiesKHR, displayName) - 8usize];
    ["Offset of field: VkDisplayPropertiesKHR::physicalDimensions"]
        [::std::mem::offset_of!(VkDisplayPropertiesKHR, physicalDimensions) - 16usize];
    ["Offset of field: VkDisplayPropertiesKHR::physicalResolution"]
        [::std::mem::offset_of!(VkDisplayPropertiesKHR, physicalResolution) - 24usize];
    ["Offset of field: VkDisplayPropertiesKHR::supportedTransforms"]
        [::std::mem::offset_of!(VkDisplayPropertiesKHR, supportedTransforms) - 32usize];
    ["Offset of field: VkDisplayPropertiesKHR::planeReorderPossible"]
        [::std::mem::offset_of!(VkDisplayPropertiesKHR, planeReorderPossible) - 36usize];
    ["Offset of field: VkDisplayPropertiesKHR::persistentContent"]
        [::std::mem::offset_of!(VkDisplayPropertiesKHR, persistentContent) - 40usize];
};
impl Default for VkDisplayPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplaySurfaceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDisplaySurfaceCreateFlagsKHR,
    pub displayMode: VkDisplayModeKHR,
    pub planeIndex: u32,
    pub planeStackIndex: u32,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub globalAlpha: f32,
    pub alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    pub imageExtent: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplaySurfaceCreateInfoKHR"]
        [::std::mem::size_of::<VkDisplaySurfaceCreateInfoKHR>() - 64usize];
    ["Alignment of VkDisplaySurfaceCreateInfoKHR"]
        [::std::mem::align_of::<VkDisplaySurfaceCreateInfoKHR>() - 8usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::flags"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, flags) - 16usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::displayMode"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, displayMode) - 24usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::planeIndex"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, planeIndex) - 32usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::planeStackIndex"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, planeStackIndex) - 36usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::transform"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, transform) - 40usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::globalAlpha"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, globalAlpha) - 44usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::alphaMode"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, alphaMode) - 48usize];
    ["Offset of field: VkDisplaySurfaceCreateInfoKHR::imageExtent"]
        [::std::mem::offset_of!(VkDisplaySurfaceCreateInfoKHR, imageExtent) - 52usize];
};
impl Default for VkDisplaySurfaceCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlanePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        planeIndex: u32,
        pDisplayCount: *mut u32,
        pDisplays: *mut VkDisplayKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayModeKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pCreateInfo: *const VkDisplayModeCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pMode: *mut VkDisplayModeKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        mode: VkDisplayModeKHR,
        planeIndex: u32,
        pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateDisplayPlaneSurfaceKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPropertiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlanePropertiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDisplayPlaneSupportedDisplaysKHR(
        physicalDevice: VkPhysicalDevice,
        planeIndex: u32,
        pDisplayCount: *mut u32,
        pDisplays: *mut VkDisplayKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDisplayModePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModePropertiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateDisplayModeKHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pCreateInfo: *const VkDisplayModeCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pMode: *mut VkDisplayModeKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDisplayPlaneCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        mode: VkDisplayModeKHR,
        planeIndex: u32,
        pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateDisplayPlaneSurfaceKHR(
        instance: VkInstance,
        pCreateInfo: *const VkDisplaySurfaceCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPresentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcRect: VkRect2D,
    pub dstRect: VkRect2D,
    pub persistent: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPresentInfoKHR"][::std::mem::size_of::<VkDisplayPresentInfoKHR>() - 56usize];
    ["Alignment of VkDisplayPresentInfoKHR"]
        [::std::mem::align_of::<VkDisplayPresentInfoKHR>() - 8usize];
    ["Offset of field: VkDisplayPresentInfoKHR::sType"]
        [::std::mem::offset_of!(VkDisplayPresentInfoKHR, sType) - 0usize];
    ["Offset of field: VkDisplayPresentInfoKHR::pNext"]
        [::std::mem::offset_of!(VkDisplayPresentInfoKHR, pNext) - 8usize];
    ["Offset of field: VkDisplayPresentInfoKHR::srcRect"]
        [::std::mem::offset_of!(VkDisplayPresentInfoKHR, srcRect) - 16usize];
    ["Offset of field: VkDisplayPresentInfoKHR::dstRect"]
        [::std::mem::offset_of!(VkDisplayPresentInfoKHR, dstRect) - 32usize];
    ["Offset of field: VkDisplayPresentInfoKHR::persistent"]
        [::std::mem::offset_of!(VkDisplayPresentInfoKHR, persistent) - 48usize];
};
impl Default for VkDisplayPresentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateSharedSwapchainsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchainCount: u32,
        pCreateInfos: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchains: *mut VkSwapchainKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCreateSharedSwapchainsKHR(
        device: VkDevice,
        swapchainCount: u32,
        pCreateInfos: *const VkSwapchainCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pSwapchains: *mut VkSwapchainKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoSessionKHR_T {
    _unused: [u8; 0],
}
pub type VkVideoSessionKHR = *mut VkVideoSessionKHR_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoSessionParametersKHR_T {
    _unused: [u8; 0],
}
pub type VkVideoSessionParametersKHR = *mut VkVideoSessionParametersKHR_T;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_ERROR_KHR: VkQueryResultStatusKHR = -1;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_NOT_READY_KHR: VkQueryResultStatusKHR = 0;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_COMPLETE_KHR: VkQueryResultStatusKHR = 1;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR:
    VkQueryResultStatusKHR = -1000299000;
pub const VkQueryResultStatusKHR_VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR: VkQueryResultStatusKHR =
    2147483647;
pub type VkQueryResultStatusKHR = ::std::os::raw::c_int;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_NONE_KHR:
    VkVideoCodecOperationFlagBitsKHR = 0;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 65536;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 131072;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 1;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 2;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 4;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_ENCODE_AV1_BIT_KHR:
    VkVideoCodecOperationFlagBitsKHR = 262144;
pub const VkVideoCodecOperationFlagBitsKHR_VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoCodecOperationFlagBitsKHR = 2147483647;
pub type VkVideoCodecOperationFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoCodecOperationFlagsKHR = VkFlags;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 0;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 1;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 2;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 4;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 8;
pub const VkVideoChromaSubsamplingFlagBitsKHR_VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoChromaSubsamplingFlagBitsKHR = 2147483647;
pub type VkVideoChromaSubsamplingFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoChromaSubsamplingFlagsKHR = VkFlags;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 0;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 1;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 4;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR:
    VkVideoComponentBitDepthFlagBitsKHR = 16;
pub const VkVideoComponentBitDepthFlagBitsKHR_VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR : VkVideoComponentBitDepthFlagBitsKHR = 2147483647 ;
pub type VkVideoComponentBitDepthFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoComponentBitDepthFlagsKHR = VkFlags;
pub const VkVideoCapabilityFlagBitsKHR_VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR:
    VkVideoCapabilityFlagBitsKHR = 1;
pub const VkVideoCapabilityFlagBitsKHR_VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR:
    VkVideoCapabilityFlagBitsKHR = 2;
pub const VkVideoCapabilityFlagBitsKHR_VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoCapabilityFlagBitsKHR = 2147483647;
pub type VkVideoCapabilityFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoCapabilityFlagsKHR = VkFlags;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR:
    VkVideoSessionCreateFlagBitsKHR = 1;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 2 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR:
    VkVideoSessionCreateFlagBitsKHR = 4;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_QUANTIZATION_DELTA_MAP_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 8 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_EMPHASIS_MAP_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 16 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_INLINE_SESSION_PARAMETERS_BIT_KHR : VkVideoSessionCreateFlagBitsKHR = 32 ;
pub const VkVideoSessionCreateFlagBitsKHR_VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoSessionCreateFlagBitsKHR = 2147483647;
pub type VkVideoSessionCreateFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoSessionCreateFlagsKHR = VkFlags;
pub const VkVideoSessionParametersCreateFlagBitsKHR_VK_VIDEO_SESSION_PARAMETERS_CREATE_QUANTIZATION_MAP_COMPATIBLE_BIT_KHR : VkVideoSessionParametersCreateFlagBitsKHR = 1 ;
pub const VkVideoSessionParametersCreateFlagBitsKHR_VK_VIDEO_SESSION_PARAMETERS_CREATE_FLAG_BITS_MAX_ENUM_KHR : VkVideoSessionParametersCreateFlagBitsKHR = 2147483647 ;
pub type VkVideoSessionParametersCreateFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoSessionParametersCreateFlagsKHR = VkFlags;
pub type VkVideoBeginCodingFlagsKHR = VkFlags;
pub type VkVideoEndCodingFlagsKHR = VkFlags;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR:
    VkVideoCodingControlFlagBitsKHR = 1;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR:
    VkVideoCodingControlFlagBitsKHR = 2;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR:
    VkVideoCodingControlFlagBitsKHR = 4;
pub const VkVideoCodingControlFlagBitsKHR_VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoCodingControlFlagBitsKHR = 2147483647;
pub type VkVideoCodingControlFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoCodingControlFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyQueryResultStatusPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub queryResultStatusSupport: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyQueryResultStatusPropertiesKHR"]
        [::std::mem::size_of::<VkQueueFamilyQueryResultStatusPropertiesKHR>() - 24usize];
    ["Alignment of VkQueueFamilyQueryResultStatusPropertiesKHR"]
        [::std::mem::align_of::<VkQueueFamilyQueryResultStatusPropertiesKHR>() - 8usize];
    ["Offset of field: VkQueueFamilyQueryResultStatusPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkQueueFamilyQueryResultStatusPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkQueueFamilyQueryResultStatusPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkQueueFamilyQueryResultStatusPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkQueueFamilyQueryResultStatusPropertiesKHR::queryResultStatusSupport"][::std::mem::offset_of!(
        VkQueueFamilyQueryResultStatusPropertiesKHR,
        queryResultStatusSupport
    )
        - 16usize];
};
impl Default for VkQueueFamilyQueryResultStatusPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyVideoPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub videoCodecOperations: VkVideoCodecOperationFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyVideoPropertiesKHR"]
        [::std::mem::size_of::<VkQueueFamilyVideoPropertiesKHR>() - 24usize];
    ["Alignment of VkQueueFamilyVideoPropertiesKHR"]
        [::std::mem::align_of::<VkQueueFamilyVideoPropertiesKHR>() - 8usize];
    ["Offset of field: VkQueueFamilyVideoPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkQueueFamilyVideoPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkQueueFamilyVideoPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkQueueFamilyVideoPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkQueueFamilyVideoPropertiesKHR::videoCodecOperations"]
        [::std::mem::offset_of!(VkQueueFamilyVideoPropertiesKHR, videoCodecOperations) - 16usize];
};
impl Default for VkQueueFamilyVideoPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub videoCodecOperation: VkVideoCodecOperationFlagBitsKHR,
    pub chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR,
    pub lumaBitDepth: VkVideoComponentBitDepthFlagsKHR,
    pub chromaBitDepth: VkVideoComponentBitDepthFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoProfileInfoKHR"][::std::mem::size_of::<VkVideoProfileInfoKHR>() - 32usize];
    ["Alignment of VkVideoProfileInfoKHR"]
        [::std::mem::align_of::<VkVideoProfileInfoKHR>() - 8usize];
    ["Offset of field: VkVideoProfileInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoProfileInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoProfileInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoProfileInfoKHR::videoCodecOperation"]
        [::std::mem::offset_of!(VkVideoProfileInfoKHR, videoCodecOperation) - 16usize];
    ["Offset of field: VkVideoProfileInfoKHR::chromaSubsampling"]
        [::std::mem::offset_of!(VkVideoProfileInfoKHR, chromaSubsampling) - 20usize];
    ["Offset of field: VkVideoProfileInfoKHR::lumaBitDepth"]
        [::std::mem::offset_of!(VkVideoProfileInfoKHR, lumaBitDepth) - 24usize];
    ["Offset of field: VkVideoProfileInfoKHR::chromaBitDepth"]
        [::std::mem::offset_of!(VkVideoProfileInfoKHR, chromaBitDepth) - 28usize];
};
impl Default for VkVideoProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoProfileListInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub profileCount: u32,
    pub pProfiles: *const VkVideoProfileInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoProfileListInfoKHR"]
        [::std::mem::size_of::<VkVideoProfileListInfoKHR>() - 32usize];
    ["Alignment of VkVideoProfileListInfoKHR"]
        [::std::mem::align_of::<VkVideoProfileListInfoKHR>() - 8usize];
    ["Offset of field: VkVideoProfileListInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoProfileListInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoProfileListInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoProfileListInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoProfileListInfoKHR::profileCount"]
        [::std::mem::offset_of!(VkVideoProfileListInfoKHR, profileCount) - 16usize];
    ["Offset of field: VkVideoProfileListInfoKHR::pProfiles"]
        [::std::mem::offset_of!(VkVideoProfileListInfoKHR, pProfiles) - 24usize];
};
impl Default for VkVideoProfileListInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoCapabilityFlagsKHR,
    pub minBitstreamBufferOffsetAlignment: VkDeviceSize,
    pub minBitstreamBufferSizeAlignment: VkDeviceSize,
    pub pictureAccessGranularity: VkExtent2D,
    pub minCodedExtent: VkExtent2D,
    pub maxCodedExtent: VkExtent2D,
    pub maxDpbSlots: u32,
    pub maxActiveReferencePictures: u32,
    pub stdHeaderVersion: VkExtensionProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoCapabilitiesKHR"][::std::mem::size_of::<VkVideoCapabilitiesKHR>() - 336usize];
    ["Alignment of VkVideoCapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoCapabilitiesKHR::flags"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, flags) - 16usize];
    ["Offset of field: VkVideoCapabilitiesKHR::minBitstreamBufferOffsetAlignment"][::std::mem::offset_of!(
        VkVideoCapabilitiesKHR,
        minBitstreamBufferOffsetAlignment
    ) - 24usize];
    ["Offset of field: VkVideoCapabilitiesKHR::minBitstreamBufferSizeAlignment"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, minBitstreamBufferSizeAlignment) - 32usize];
    ["Offset of field: VkVideoCapabilitiesKHR::pictureAccessGranularity"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, pictureAccessGranularity) - 40usize];
    ["Offset of field: VkVideoCapabilitiesKHR::minCodedExtent"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, minCodedExtent) - 48usize];
    ["Offset of field: VkVideoCapabilitiesKHR::maxCodedExtent"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, maxCodedExtent) - 56usize];
    ["Offset of field: VkVideoCapabilitiesKHR::maxDpbSlots"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, maxDpbSlots) - 64usize];
    ["Offset of field: VkVideoCapabilitiesKHR::maxActiveReferencePictures"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, maxActiveReferencePictures) - 68usize];
    ["Offset of field: VkVideoCapabilitiesKHR::stdHeaderVersion"]
        [::std::mem::offset_of!(VkVideoCapabilitiesKHR, stdHeaderVersion) - 72usize];
};
impl Default for VkVideoCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVideoFormatInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageUsage: VkImageUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoFormatInfoKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceVideoFormatInfoKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceVideoFormatInfoKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceVideoFormatInfoKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoFormatInfoKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoFormatInfoKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoFormatInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoFormatInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoFormatInfoKHR::imageUsage"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoFormatInfoKHR, imageUsage) - 16usize];
};
impl Default for VkPhysicalDeviceVideoFormatInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoFormatPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub format: VkFormat,
    pub componentMapping: VkComponentMapping,
    pub imageCreateFlags: VkImageCreateFlags,
    pub imageType: VkImageType,
    pub imageTiling: VkImageTiling,
    pub imageUsageFlags: VkImageUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatPropertiesKHR"]
        [::std::mem::size_of::<VkVideoFormatPropertiesKHR>() - 56usize];
    ["Alignment of VkVideoFormatPropertiesKHR"]
        [::std::mem::align_of::<VkVideoFormatPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::format"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, format) - 16usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::componentMapping"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, componentMapping) - 20usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageCreateFlags"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, imageCreateFlags) - 36usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageType"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, imageType) - 40usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageTiling"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, imageTiling) - 44usize];
    ["Offset of field: VkVideoFormatPropertiesKHR::imageUsageFlags"]
        [::std::mem::offset_of!(VkVideoFormatPropertiesKHR, imageUsageFlags) - 48usize];
};
impl Default for VkVideoFormatPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoPictureResourceInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub codedOffset: VkOffset2D,
    pub codedExtent: VkExtent2D,
    pub baseArrayLayer: u32,
    pub imageViewBinding: VkImageView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoPictureResourceInfoKHR"]
        [::std::mem::size_of::<VkVideoPictureResourceInfoKHR>() - 48usize];
    ["Alignment of VkVideoPictureResourceInfoKHR"]
        [::std::mem::align_of::<VkVideoPictureResourceInfoKHR>() - 8usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoPictureResourceInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoPictureResourceInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::codedOffset"]
        [::std::mem::offset_of!(VkVideoPictureResourceInfoKHR, codedOffset) - 16usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::codedExtent"]
        [::std::mem::offset_of!(VkVideoPictureResourceInfoKHR, codedExtent) - 24usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::baseArrayLayer"]
        [::std::mem::offset_of!(VkVideoPictureResourceInfoKHR, baseArrayLayer) - 32usize];
    ["Offset of field: VkVideoPictureResourceInfoKHR::imageViewBinding"]
        [::std::mem::offset_of!(VkVideoPictureResourceInfoKHR, imageViewBinding) - 40usize];
};
impl Default for VkVideoPictureResourceInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoReferenceSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub slotIndex: i32,
    pub pPictureResource: *const VkVideoPictureResourceInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoReferenceSlotInfoKHR"]
        [::std::mem::size_of::<VkVideoReferenceSlotInfoKHR>() - 32usize];
    ["Alignment of VkVideoReferenceSlotInfoKHR"]
        [::std::mem::align_of::<VkVideoReferenceSlotInfoKHR>() - 8usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoReferenceSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoReferenceSlotInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::slotIndex"]
        [::std::mem::offset_of!(VkVideoReferenceSlotInfoKHR, slotIndex) - 16usize];
    ["Offset of field: VkVideoReferenceSlotInfoKHR::pPictureResource"]
        [::std::mem::offset_of!(VkVideoReferenceSlotInfoKHR, pPictureResource) - 24usize];
};
impl Default for VkVideoReferenceSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoSessionMemoryRequirementsKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryBindIndex: u32,
    pub memoryRequirements: VkMemoryRequirements,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionMemoryRequirementsKHR"]
        [::std::mem::size_of::<VkVideoSessionMemoryRequirementsKHR>() - 48usize];
    ["Alignment of VkVideoSessionMemoryRequirementsKHR"]
        [::std::mem::align_of::<VkVideoSessionMemoryRequirementsKHR>() - 8usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::sType"]
        [::std::mem::offset_of!(VkVideoSessionMemoryRequirementsKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::pNext"]
        [::std::mem::offset_of!(VkVideoSessionMemoryRequirementsKHR, pNext) - 8usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::memoryBindIndex"]
        [::std::mem::offset_of!(VkVideoSessionMemoryRequirementsKHR, memoryBindIndex) - 16usize];
    ["Offset of field: VkVideoSessionMemoryRequirementsKHR::memoryRequirements"]
        [::std::mem::offset_of!(VkVideoSessionMemoryRequirementsKHR, memoryRequirements) - 24usize];
};
impl Default for VkVideoSessionMemoryRequirementsKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindVideoSessionMemoryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memoryBindIndex: u32,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub memorySize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindVideoSessionMemoryInfoKHR"]
        [::std::mem::size_of::<VkBindVideoSessionMemoryInfoKHR>() - 48usize];
    ["Alignment of VkBindVideoSessionMemoryInfoKHR"]
        [::std::mem::align_of::<VkBindVideoSessionMemoryInfoKHR>() - 8usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::sType"]
        [::std::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, sType) - 0usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::pNext"]
        [::std::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, pNext) - 8usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memoryBindIndex"]
        [::std::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memoryBindIndex) - 16usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memory"]
        [::std::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memory) - 24usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memoryOffset"]
        [::std::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memoryOffset) - 32usize];
    ["Offset of field: VkBindVideoSessionMemoryInfoKHR::memorySize"]
        [::std::mem::offset_of!(VkBindVideoSessionMemoryInfoKHR, memorySize) - 40usize];
};
impl Default for VkBindVideoSessionMemoryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoSessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub queueFamilyIndex: u32,
    pub flags: VkVideoSessionCreateFlagsKHR,
    pub pVideoProfile: *const VkVideoProfileInfoKHR,
    pub pictureFormat: VkFormat,
    pub maxCodedExtent: VkExtent2D,
    pub referencePictureFormat: VkFormat,
    pub maxDpbSlots: u32,
    pub maxActiveReferencePictures: u32,
    pub pStdHeaderVersion: *const VkExtensionProperties,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoSessionCreateInfoKHR>() - 64usize];
    ["Alignment of VkVideoSessionCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoSessionCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::queueFamilyIndex"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, queueFamilyIndex) - 16usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, flags) - 20usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pVideoProfile"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, pVideoProfile) - 24usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pictureFormat"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, pictureFormat) - 32usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::maxCodedExtent"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, maxCodedExtent) - 36usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::referencePictureFormat"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, referencePictureFormat) - 44usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::maxDpbSlots"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, maxDpbSlots) - 48usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::maxActiveReferencePictures"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, maxActiveReferencePictures) - 52usize];
    ["Offset of field: VkVideoSessionCreateInfoKHR::pStdHeaderVersion"]
        [::std::mem::offset_of!(VkVideoSessionCreateInfoKHR, pStdHeaderVersion) - 56usize];
};
impl Default for VkVideoSessionCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoSessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoSessionParametersCreateFlagsKHR,
    pub videoSessionParametersTemplate: VkVideoSessionParametersKHR,
    pub videoSession: VkVideoSessionKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionParametersCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoSessionParametersCreateInfoKHR>() - 40usize];
    ["Alignment of VkVideoSessionParametersCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoSessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::videoSessionParametersTemplate"][::std::mem::offset_of!(
        VkVideoSessionParametersCreateInfoKHR,
        videoSessionParametersTemplate
    )
        - 24usize];
    ["Offset of field: VkVideoSessionParametersCreateInfoKHR::videoSession"]
        [::std::mem::offset_of!(VkVideoSessionParametersCreateInfoKHR, videoSession) - 32usize];
};
impl Default for VkVideoSessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoSessionParametersUpdateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub updateSequenceCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoSessionParametersUpdateInfoKHR"]
        [::std::mem::size_of::<VkVideoSessionParametersUpdateInfoKHR>() - 24usize];
    ["Alignment of VkVideoSessionParametersUpdateInfoKHR"]
        [::std::mem::align_of::<VkVideoSessionParametersUpdateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoSessionParametersUpdateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoSessionParametersUpdateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoSessionParametersUpdateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoSessionParametersUpdateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoSessionParametersUpdateInfoKHR::updateSequenceCount"][::std::mem::offset_of!(
        VkVideoSessionParametersUpdateInfoKHR,
        updateSequenceCount
    ) - 16usize];
};
impl Default for VkVideoSessionParametersUpdateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoBeginCodingInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoBeginCodingFlagsKHR,
    pub videoSession: VkVideoSessionKHR,
    pub videoSessionParameters: VkVideoSessionParametersKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoBeginCodingInfoKHR"]
        [::std::mem::size_of::<VkVideoBeginCodingInfoKHR>() - 56usize];
    ["Alignment of VkVideoBeginCodingInfoKHR"]
        [::std::mem::align_of::<VkVideoBeginCodingInfoKHR>() - 8usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoBeginCodingInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoBeginCodingInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoBeginCodingInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::videoSession"]
        [::std::mem::offset_of!(VkVideoBeginCodingInfoKHR, videoSession) - 24usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::videoSessionParameters"]
        [::std::mem::offset_of!(VkVideoBeginCodingInfoKHR, videoSessionParameters) - 32usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::referenceSlotCount"]
        [::std::mem::offset_of!(VkVideoBeginCodingInfoKHR, referenceSlotCount) - 40usize];
    ["Offset of field: VkVideoBeginCodingInfoKHR::pReferenceSlots"]
        [::std::mem::offset_of!(VkVideoBeginCodingInfoKHR, pReferenceSlots) - 48usize];
};
impl Default for VkVideoBeginCodingInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEndCodingInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoEndCodingFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEndCodingInfoKHR"][::std::mem::size_of::<VkVideoEndCodingInfoKHR>() - 24usize];
    ["Alignment of VkVideoEndCodingInfoKHR"]
        [::std::mem::align_of::<VkVideoEndCodingInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEndCodingInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEndCodingInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEndCodingInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEndCodingInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEndCodingInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoEndCodingInfoKHR, flags) - 16usize];
};
impl Default for VkVideoEndCodingInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoCodingControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoCodingControlFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoCodingControlInfoKHR"]
        [::std::mem::size_of::<VkVideoCodingControlInfoKHR>() - 24usize];
    ["Alignment of VkVideoCodingControlInfoKHR"]
        [::std::mem::align_of::<VkVideoCodingControlInfoKHR>() - 8usize];
    ["Offset of field: VkVideoCodingControlInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoCodingControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoCodingControlInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoCodingControlInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoCodingControlInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoCodingControlInfoKHR, flags) - 16usize];
};
impl Default for VkVideoCodingControlInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pVideoProfile: *const VkVideoProfileInfoKHR,
        pCapabilities: *mut VkVideoCapabilitiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pVideoFormatInfo: *const VkPhysicalDeviceVideoFormatInfoKHR,
        pVideoFormatPropertyCount: *mut u32,
        pVideoFormatProperties: *mut VkVideoFormatPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateVideoSessionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSession: *mut VkVideoSessionKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyVideoSessionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetVideoSessionMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pMemoryRequirementsCount: *mut u32,
        pMemoryRequirements: *mut VkVideoSessionMemoryRequirementsKHR,
    ) -> VkResult,
>;
pub type PFN_vkBindVideoSessionMemoryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        bindSessionMemoryInfoCount: u32,
        pBindSessionMemoryInfos: *const VkBindVideoSessionMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCreateVideoSessionParametersKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionParametersCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSessionParameters: *mut VkVideoSessionParametersKHR,
    ) -> VkResult,
>;
pub type PFN_vkUpdateVideoSessionParametersKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pUpdateInfo: *const VkVideoSessionParametersUpdateInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyVideoSessionParametersKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBeginVideoCodingKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkVideoBeginCodingInfoKHR,
    ),
>;
pub type PFN_vkCmdEndVideoCodingKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pEndCodingInfo: *const VkVideoEndCodingInfoKHR,
    ),
>;
pub type PFN_vkCmdControlVideoCodingKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCodingControlInfo: *const VkVideoCodingControlInfoKHR,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceVideoCapabilitiesKHR(
        physicalDevice: VkPhysicalDevice,
        pVideoProfile: *const VkVideoProfileInfoKHR,
        pCapabilities: *mut VkVideoCapabilitiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pVideoFormatInfo: *const VkPhysicalDeviceVideoFormatInfoKHR,
        pVideoFormatPropertyCount: *mut u32,
        pVideoFormatProperties: *mut VkVideoFormatPropertiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateVideoSessionKHR(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSession: *mut VkVideoSessionKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyVideoSessionKHR(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetVideoSessionMemoryRequirementsKHR(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        pMemoryRequirementsCount: *mut u32,
        pMemoryRequirements: *mut VkVideoSessionMemoryRequirementsKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkBindVideoSessionMemoryKHR(
        device: VkDevice,
        videoSession: VkVideoSessionKHR,
        bindSessionMemoryInfoCount: u32,
        pBindSessionMemoryInfos: *const VkBindVideoSessionMemoryInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateVideoSessionParametersKHR(
        device: VkDevice,
        pCreateInfo: *const VkVideoSessionParametersCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pVideoSessionParameters: *mut VkVideoSessionParametersKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkUpdateVideoSessionParametersKHR(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pUpdateInfo: *const VkVideoSessionParametersUpdateInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyVideoSessionParametersKHR(
        device: VkDevice,
        videoSessionParameters: VkVideoSessionParametersKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCmdBeginVideoCodingKHR(
        commandBuffer: VkCommandBuffer,
        pBeginInfo: *const VkVideoBeginCodingInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndVideoCodingKHR(
        commandBuffer: VkCommandBuffer,
        pEndCodingInfo: *const VkVideoEndCodingInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdControlVideoCodingKHR(
        commandBuffer: VkCommandBuffer,
        pCodingControlInfo: *const VkVideoCodingControlInfoKHR,
    );
}
pub const VkVideoDecodeCapabilityFlagBitsKHR_VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR : VkVideoDecodeCapabilityFlagBitsKHR = 1 ;
pub const VkVideoDecodeCapabilityFlagBitsKHR_VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR : VkVideoDecodeCapabilityFlagBitsKHR = 2 ;
pub const VkVideoDecodeCapabilityFlagBitsKHR_VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoDecodeCapabilityFlagBitsKHR = 2147483647;
pub type VkVideoDecodeCapabilityFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoDecodeCapabilityFlagsKHR = VkFlags;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_DEFAULT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 0;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 1;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 2;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 4;
pub const VkVideoDecodeUsageFlagBitsKHR_VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoDecodeUsageFlagBitsKHR = 2147483647;
pub type VkVideoDecodeUsageFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoDecodeUsageFlagsKHR = VkFlags;
pub type VkVideoDecodeFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoDecodeCapabilityFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeCapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoDecodeCapabilitiesKHR>() - 24usize];
    ["Alignment of VkVideoDecodeCapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoDecodeCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeCapabilitiesKHR::flags"]
        [::std::mem::offset_of!(VkVideoDecodeCapabilitiesKHR, flags) - 16usize];
};
impl Default for VkVideoDecodeCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeUsageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub videoUsageHints: VkVideoDecodeUsageFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeUsageInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeUsageInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeUsageInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeUsageInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeUsageInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeUsageInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeUsageInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeUsageInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeUsageInfoKHR::videoUsageHints"]
        [::std::mem::offset_of!(VkVideoDecodeUsageInfoKHR, videoUsageHints) - 16usize];
};
impl Default for VkVideoDecodeUsageInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoDecodeFlagsKHR,
    pub srcBuffer: VkBuffer,
    pub srcBufferOffset: VkDeviceSize,
    pub srcBufferRange: VkDeviceSize,
    pub dstPictureResource: VkVideoPictureResourceInfoKHR,
    pub pSetupReferenceSlot: *const VkVideoReferenceSlotInfoKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeInfoKHR"][::std::mem::size_of::<VkVideoDecodeInfoKHR>() - 120usize];
    ["Alignment of VkVideoDecodeInfoKHR"][::std::mem::align_of::<VkVideoDecodeInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoDecodeInfoKHR::srcBuffer"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, srcBuffer) - 24usize];
    ["Offset of field: VkVideoDecodeInfoKHR::srcBufferOffset"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, srcBufferOffset) - 32usize];
    ["Offset of field: VkVideoDecodeInfoKHR::srcBufferRange"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, srcBufferRange) - 40usize];
    ["Offset of field: VkVideoDecodeInfoKHR::dstPictureResource"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, dstPictureResource) - 48usize];
    ["Offset of field: VkVideoDecodeInfoKHR::pSetupReferenceSlot"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, pSetupReferenceSlot) - 96usize];
    ["Offset of field: VkVideoDecodeInfoKHR::referenceSlotCount"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, referenceSlotCount) - 104usize];
    ["Offset of field: VkVideoDecodeInfoKHR::pReferenceSlots"]
        [::std::mem::offset_of!(VkVideoDecodeInfoKHR, pReferenceSlots) - 112usize];
};
impl Default for VkVideoDecodeInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDecodeVideoKHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pDecodeInfo: *const VkVideoDecodeInfoKHR),
>;
unsafe extern "system" {
    pub fn vkCmdDecodeVideoKHR(
        commandBuffer: VkCommandBuffer,
        pDecodeInfo: *const VkVideoDecodeInfoKHR,
    );
}
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME:
    StdVideoH264ChromaFormatIdc = 0;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_420:
    StdVideoH264ChromaFormatIdc = 1;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_422:
    StdVideoH264ChromaFormatIdc = 2;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_444:
    StdVideoH264ChromaFormatIdc = 3;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID:
    StdVideoH264ChromaFormatIdc = 2147483647;
pub const StdVideoH264ChromaFormatIdc_STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM:
    StdVideoH264ChromaFormatIdc = 2147483647;
pub type StdVideoH264ChromaFormatIdc = ::std::os::raw::c_uint;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_BASELINE: StdVideoH264ProfileIdc = 66;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_MAIN: StdVideoH264ProfileIdc = 77;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_HIGH: StdVideoH264ProfileIdc = 100;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE:
    StdVideoH264ProfileIdc = 244;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_INVALID: StdVideoH264ProfileIdc =
    2147483647;
pub const StdVideoH264ProfileIdc_STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM: StdVideoH264ProfileIdc =
    2147483647;
pub type StdVideoH264ProfileIdc = ::std::os::raw::c_uint;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_0: StdVideoH264LevelIdc = 0;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_1: StdVideoH264LevelIdc = 1;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_2: StdVideoH264LevelIdc = 2;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_1_3: StdVideoH264LevelIdc = 3;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_2_0: StdVideoH264LevelIdc = 4;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_2_1: StdVideoH264LevelIdc = 5;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_2_2: StdVideoH264LevelIdc = 6;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_3_0: StdVideoH264LevelIdc = 7;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_3_1: StdVideoH264LevelIdc = 8;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_3_2: StdVideoH264LevelIdc = 9;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_4_0: StdVideoH264LevelIdc = 10;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_4_1: StdVideoH264LevelIdc = 11;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_4_2: StdVideoH264LevelIdc = 12;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_5_0: StdVideoH264LevelIdc = 13;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_5_1: StdVideoH264LevelIdc = 14;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_5_2: StdVideoH264LevelIdc = 15;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_6_0: StdVideoH264LevelIdc = 16;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_6_1: StdVideoH264LevelIdc = 17;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_6_2: StdVideoH264LevelIdc = 18;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_INVALID: StdVideoH264LevelIdc = 2147483647;
pub const StdVideoH264LevelIdc_STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM: StdVideoH264LevelIdc = 2147483647;
pub type StdVideoH264LevelIdc = ::std::os::raw::c_uint;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_0: StdVideoH264PocType = 0;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_1: StdVideoH264PocType = 1;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_2: StdVideoH264PocType = 2;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_INVALID: StdVideoH264PocType = 2147483647;
pub const StdVideoH264PocType_STD_VIDEO_H264_POC_TYPE_MAX_ENUM: StdVideoH264PocType = 2147483647;
pub type StdVideoH264PocType = ::std::os::raw::c_uint;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED:
    StdVideoH264AspectRatioIdc = 0;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE:
    StdVideoH264AspectRatioIdc = 1;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11:
    StdVideoH264AspectRatioIdc = 2;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11:
    StdVideoH264AspectRatioIdc = 3;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11:
    StdVideoH264AspectRatioIdc = 4;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33:
    StdVideoH264AspectRatioIdc = 5;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11:
    StdVideoH264AspectRatioIdc = 6;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11:
    StdVideoH264AspectRatioIdc = 7;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11:
    StdVideoH264AspectRatioIdc = 8;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33:
    StdVideoH264AspectRatioIdc = 9;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11:
    StdVideoH264AspectRatioIdc = 10;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11:
    StdVideoH264AspectRatioIdc = 11;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33:
    StdVideoH264AspectRatioIdc = 12;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99:
    StdVideoH264AspectRatioIdc = 13;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3:
    StdVideoH264AspectRatioIdc = 14;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2:
    StdVideoH264AspectRatioIdc = 15;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1:
    StdVideoH264AspectRatioIdc = 16;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR:
    StdVideoH264AspectRatioIdc = 255;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID:
    StdVideoH264AspectRatioIdc = 2147483647;
pub const StdVideoH264AspectRatioIdc_STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM:
    StdVideoH264AspectRatioIdc = 2147483647;
pub type StdVideoH264AspectRatioIdc = ::std::os::raw::c_uint;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT:
    StdVideoH264WeightedBipredIdc = 0;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT:
    StdVideoH264WeightedBipredIdc = 1;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT:
    StdVideoH264WeightedBipredIdc = 2;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID:
    StdVideoH264WeightedBipredIdc = 2147483647;
pub const StdVideoH264WeightedBipredIdc_STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM:
    StdVideoH264WeightedBipredIdc = 2147483647;
pub type StdVideoH264WeightedBipredIdc = ::std::os::raw::c_uint;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT : StdVideoH264ModificationOfPicNumsIdc = 0 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD : StdVideoH264ModificationOfPicNumsIdc = 1 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM : StdVideoH264ModificationOfPicNumsIdc = 2 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END:
    StdVideoH264ModificationOfPicNumsIdc = 3;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID : StdVideoH264ModificationOfPicNumsIdc = 2147483647 ;
pub const StdVideoH264ModificationOfPicNumsIdc_STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM : StdVideoH264ModificationOfPicNumsIdc = 2147483647 ;
pub type StdVideoH264ModificationOfPicNumsIdc = ::std::os::raw::c_uint;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END:
    StdVideoH264MemMgmtControlOp = 0;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM:
    StdVideoH264MemMgmtControlOp = 1;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM:
    StdVideoH264MemMgmtControlOp = 2;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM:
    StdVideoH264MemMgmtControlOp = 3;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX : StdVideoH264MemMgmtControlOp = 4 ;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL:
    StdVideoH264MemMgmtControlOp = 5;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM : StdVideoH264MemMgmtControlOp = 6 ;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID:
    StdVideoH264MemMgmtControlOp = 2147483647;
pub const StdVideoH264MemMgmtControlOp_STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM:
    StdVideoH264MemMgmtControlOp = 2147483647;
pub type StdVideoH264MemMgmtControlOp = ::std::os::raw::c_uint;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_0: StdVideoH264CabacInitIdc = 0;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_1: StdVideoH264CabacInitIdc = 1;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_2: StdVideoH264CabacInitIdc = 2;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_INVALID: StdVideoH264CabacInitIdc =
    2147483647;
pub const StdVideoH264CabacInitIdc_STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM:
    StdVideoH264CabacInitIdc = 2147483647;
pub type StdVideoH264CabacInitIdc = ::std::os::raw::c_uint;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED : StdVideoH264DisableDeblockingFilterIdc = 0 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED : StdVideoH264DisableDeblockingFilterIdc = 1 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL : StdVideoH264DisableDeblockingFilterIdc = 2 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID : StdVideoH264DisableDeblockingFilterIdc = 2147483647 ;
pub const StdVideoH264DisableDeblockingFilterIdc_STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM : StdVideoH264DisableDeblockingFilterIdc = 2147483647 ;
pub type StdVideoH264DisableDeblockingFilterIdc = ::std::os::raw::c_uint;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_P: StdVideoH264SliceType = 0;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_B: StdVideoH264SliceType = 1;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_I: StdVideoH264SliceType = 2;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_INVALID: StdVideoH264SliceType =
    2147483647;
pub const StdVideoH264SliceType_STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM: StdVideoH264SliceType =
    2147483647;
pub type StdVideoH264SliceType = ::std::os::raw::c_uint;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_P: StdVideoH264PictureType = 0;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_B: StdVideoH264PictureType = 1;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_I: StdVideoH264PictureType = 2;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_IDR: StdVideoH264PictureType = 5;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_INVALID: StdVideoH264PictureType =
    2147483647;
pub const StdVideoH264PictureType_STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM: StdVideoH264PictureType =
    2147483647;
pub type StdVideoH264PictureType = ::std::os::raw::c_uint;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS:
    StdVideoH264NonVclNaluType = 0;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS:
    StdVideoH264NonVclNaluType = 1;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD:
    StdVideoH264NonVclNaluType = 2;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX:
    StdVideoH264NonVclNaluType = 3;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE:
    StdVideoH264NonVclNaluType = 4;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM:
    StdVideoH264NonVclNaluType = 5;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED:
    StdVideoH264NonVclNaluType = 6;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID:
    StdVideoH264NonVclNaluType = 2147483647;
pub const StdVideoH264NonVclNaluType_STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM:
    StdVideoH264NonVclNaluType = 2147483647;
pub type StdVideoH264NonVclNaluType = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH264SpsVuiFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SpsVuiFlags"][::std::mem::size_of::<StdVideoH264SpsVuiFlags>() - 4usize];
    ["Alignment of StdVideoH264SpsVuiFlags"]
        [::std::mem::align_of::<StdVideoH264SpsVuiFlags>() - 4usize];
};
impl StdVideoH264SpsVuiFlags {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn aspect_ratio_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_aspect_ratio_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_appropriate_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_appropriate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_appropriate_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_appropriate_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_signal_type_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_signal_type_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_signal_type_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_signal_type_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_full_range_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_full_range_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_full_range_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_full_range_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn color_description_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn color_description_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_color_description_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn chroma_loc_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_loc_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_loc_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_loc_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixed_frame_rate_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_frame_rate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixed_frame_rate_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fixed_frame_rate_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bitstream_restriction_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bitstream_restriction_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn nal_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nal_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nal_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_nal_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vcl_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vcl_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vcl_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vcl_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        overscan_info_present_flag: u32,
        overscan_appropriate_flag: u32,
        video_signal_type_present_flag: u32,
        video_full_range_flag: u32,
        color_description_present_flag: u32,
        chroma_loc_info_present_flag: u32,
        timing_info_present_flag: u32,
        fixed_frame_rate_flag: u32,
        bitstream_restriction_flag: u32,
        nal_hrd_parameters_present_flag: u32,
        vcl_hrd_parameters_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overscan_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_info_present_flag) };
            overscan_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let overscan_appropriate_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_appropriate_flag) };
            overscan_appropriate_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let video_signal_type_present_flag: u32 =
                unsafe { ::std::mem::transmute(video_signal_type_present_flag) };
            video_signal_type_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let video_full_range_flag: u32 =
                unsafe { ::std::mem::transmute(video_full_range_flag) };
            video_full_range_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let color_description_present_flag: u32 =
                unsafe { ::std::mem::transmute(color_description_present_flag) };
            color_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let chroma_loc_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(chroma_loc_info_present_flag) };
            chroma_loc_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(timing_info_present_flag) };
            timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fixed_frame_rate_flag: u32 =
                unsafe { ::std::mem::transmute(fixed_frame_rate_flag) };
            fixed_frame_rate_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::std::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let nal_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(nal_hrd_parameters_present_flag) };
            nal_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let vcl_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vcl_hrd_parameters_present_flag) };
            vcl_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH264HrdParameters {
    pub cpb_cnt_minus1: u8,
    pub bit_rate_scale: u8,
    pub cpb_size_scale: u8,
    pub reserved1: u8,
    pub bit_rate_value_minus1: [u32; 32usize],
    pub cpb_size_value_minus1: [u32; 32usize],
    pub cbr_flag: [u8; 32usize],
    pub initial_cpb_removal_delay_length_minus1: u32,
    pub cpb_removal_delay_length_minus1: u32,
    pub dpb_output_delay_length_minus1: u32,
    pub time_offset_length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264HrdParameters"]
        [::std::mem::size_of::<StdVideoH264HrdParameters>() - 308usize];
    ["Alignment of StdVideoH264HrdParameters"]
        [::std::mem::align_of::<StdVideoH264HrdParameters>() - 4usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_cnt_minus1"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, cpb_cnt_minus1) - 0usize];
    ["Offset of field: StdVideoH264HrdParameters::bit_rate_scale"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, bit_rate_scale) - 1usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_size_scale"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, cpb_size_scale) - 2usize];
    ["Offset of field: StdVideoH264HrdParameters::reserved1"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, reserved1) - 3usize];
    ["Offset of field: StdVideoH264HrdParameters::bit_rate_value_minus1"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, bit_rate_value_minus1) - 4usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_size_value_minus1"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, cpb_size_value_minus1) - 132usize];
    ["Offset of field: StdVideoH264HrdParameters::cbr_flag"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, cbr_flag) - 260usize];
    ["Offset of field: StdVideoH264HrdParameters::initial_cpb_removal_delay_length_minus1"][::std::mem::offset_of!(
        StdVideoH264HrdParameters,
        initial_cpb_removal_delay_length_minus1
    )
        - 292usize];
    ["Offset of field: StdVideoH264HrdParameters::cpb_removal_delay_length_minus1"][::std::mem::offset_of!(
        StdVideoH264HrdParameters,
        cpb_removal_delay_length_minus1
    ) - 296usize];
    ["Offset of field: StdVideoH264HrdParameters::dpb_output_delay_length_minus1"][::std::mem::offset_of!(
        StdVideoH264HrdParameters,
        dpb_output_delay_length_minus1
    ) - 300usize];
    ["Offset of field: StdVideoH264HrdParameters::time_offset_length"]
        [::std::mem::offset_of!(StdVideoH264HrdParameters, time_offset_length) - 304usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH264SequenceParameterSetVui {
    pub flags: StdVideoH264SpsVuiFlags,
    pub aspect_ratio_idc: StdVideoH264AspectRatioIdc,
    pub sar_width: u16,
    pub sar_height: u16,
    pub video_format: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coefficients: u8,
    pub num_units_in_tick: u32,
    pub time_scale: u32,
    pub max_num_reorder_frames: u8,
    pub max_dec_frame_buffering: u8,
    pub chroma_sample_loc_type_top_field: u8,
    pub chroma_sample_loc_type_bottom_field: u8,
    pub reserved1: u32,
    pub pHrdParameters: *const StdVideoH264HrdParameters,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SequenceParameterSetVui"]
        [::std::mem::size_of::<StdVideoH264SequenceParameterSetVui>() - 40usize];
    ["Alignment of StdVideoH264SequenceParameterSetVui"]
        [::std::mem::align_of::<StdVideoH264SequenceParameterSetVui>() - 8usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::flags"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, flags) - 0usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::aspect_ratio_idc"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, aspect_ratio_idc) - 4usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::sar_width"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, sar_width) - 8usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::sar_height"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, sar_height) - 10usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::video_format"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, video_format) - 12usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::colour_primaries"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, colour_primaries) - 13usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::transfer_characteristics"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        transfer_characteristics
    ) - 14usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::matrix_coefficients"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        matrix_coefficients
    ) - 15usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::num_units_in_tick"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, num_units_in_tick) - 16usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::time_scale"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, time_scale) - 20usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::max_num_reorder_frames"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        max_num_reorder_frames
    ) - 24usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::max_dec_frame_buffering"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        max_dec_frame_buffering
    ) - 25usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::chroma_sample_loc_type_top_field"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        chroma_sample_loc_type_top_field
    )
        - 26usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::chroma_sample_loc_type_bottom_field"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSetVui,
        chroma_sample_loc_type_bottom_field
    )
        - 27usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::reserved1"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, reserved1) - 28usize];
    ["Offset of field: StdVideoH264SequenceParameterSetVui::pHrdParameters"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSetVui, pHrdParameters) - 32usize];
};
impl Default for StdVideoH264SequenceParameterSetVui {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH264SpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SpsFlags"][::std::mem::size_of::<StdVideoH264SpsFlags>() - 4usize];
    ["Alignment of StdVideoH264SpsFlags"][::std::mem::align_of::<StdVideoH264SpsFlags>() - 4usize];
};
impl StdVideoH264SpsFlags {
    #[inline]
    pub fn constraint_set0_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set0_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set0_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set1_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set1_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set1_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set1_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set2_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set2_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set2_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set2_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set3_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set3_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set3_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set3_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set4_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set4_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set4_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set4_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constraint_set5_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constraint_set5_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constraint_set5_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constraint_set5_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn direct_8x8_inference_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_8x8_inference_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn direct_8x8_inference_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_direct_8x8_inference_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mb_adaptive_frame_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mb_adaptive_frame_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mb_adaptive_frame_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mb_adaptive_frame_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_mbs_only_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_mbs_only_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_mbs_only_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_mbs_only_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_pic_order_always_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_pic_order_always_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_pic_order_always_zero_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_pic_order_always_zero_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn separate_colour_plane_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_separate_colour_plane_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn gaps_in_frame_num_value_allowed_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gaps_in_frame_num_value_allowed_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn gaps_in_frame_num_value_allowed_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_gaps_in_frame_num_value_allowed_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn qpprime_y_zero_transform_bypass_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qpprime_y_zero_transform_bypass_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn qpprime_y_zero_transform_bypass_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_qpprime_y_zero_transform_bypass_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_cropping_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_cropping_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_cropping_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_cropping_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn seq_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seq_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn seq_scaling_matrix_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_seq_scaling_matrix_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        constraint_set0_flag: u32,
        constraint_set1_flag: u32,
        constraint_set2_flag: u32,
        constraint_set3_flag: u32,
        constraint_set4_flag: u32,
        constraint_set5_flag: u32,
        direct_8x8_inference_flag: u32,
        mb_adaptive_frame_field_flag: u32,
        frame_mbs_only_flag: u32,
        delta_pic_order_always_zero_flag: u32,
        separate_colour_plane_flag: u32,
        gaps_in_frame_num_value_allowed_flag: u32,
        qpprime_y_zero_transform_bypass_flag: u32,
        frame_cropping_flag: u32,
        seq_scaling_matrix_present_flag: u32,
        vui_parameters_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let constraint_set0_flag: u32 = unsafe { ::std::mem::transmute(constraint_set0_flag) };
            constraint_set0_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let constraint_set1_flag: u32 = unsafe { ::std::mem::transmute(constraint_set1_flag) };
            constraint_set1_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let constraint_set2_flag: u32 = unsafe { ::std::mem::transmute(constraint_set2_flag) };
            constraint_set2_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let constraint_set3_flag: u32 = unsafe { ::std::mem::transmute(constraint_set3_flag) };
            constraint_set3_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let constraint_set4_flag: u32 = unsafe { ::std::mem::transmute(constraint_set4_flag) };
            constraint_set4_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let constraint_set5_flag: u32 = unsafe { ::std::mem::transmute(constraint_set5_flag) };
            constraint_set5_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let direct_8x8_inference_flag: u32 =
                unsafe { ::std::mem::transmute(direct_8x8_inference_flag) };
            direct_8x8_inference_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let mb_adaptive_frame_field_flag: u32 =
                unsafe { ::std::mem::transmute(mb_adaptive_frame_field_flag) };
            mb_adaptive_frame_field_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let frame_mbs_only_flag: u32 = unsafe { ::std::mem::transmute(frame_mbs_only_flag) };
            frame_mbs_only_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let delta_pic_order_always_zero_flag: u32 =
                unsafe { ::std::mem::transmute(delta_pic_order_always_zero_flag) };
            delta_pic_order_always_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::std::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let gaps_in_frame_num_value_allowed_flag: u32 =
                unsafe { ::std::mem::transmute(gaps_in_frame_num_value_allowed_flag) };
            gaps_in_frame_num_value_allowed_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let qpprime_y_zero_transform_bypass_flag: u32 =
                unsafe { ::std::mem::transmute(qpprime_y_zero_transform_bypass_flag) };
            qpprime_y_zero_transform_bypass_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let frame_cropping_flag: u32 = unsafe { ::std::mem::transmute(frame_cropping_flag) };
            frame_cropping_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let seq_scaling_matrix_present_flag: u32 =
                unsafe { ::std::mem::transmute(seq_scaling_matrix_present_flag) };
            seq_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let vui_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_parameters_present_flag) };
            vui_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH264ScalingLists {
    pub scaling_list_present_mask: u16,
    pub use_default_scaling_matrix_mask: u16,
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264ScalingLists"]
        [::std::mem::size_of::<StdVideoH264ScalingLists>() - 484usize];
    ["Alignment of StdVideoH264ScalingLists"]
        [::std::mem::align_of::<StdVideoH264ScalingLists>() - 2usize];
    ["Offset of field: StdVideoH264ScalingLists::scaling_list_present_mask"]
        [::std::mem::offset_of!(StdVideoH264ScalingLists, scaling_list_present_mask) - 0usize];
    ["Offset of field: StdVideoH264ScalingLists::use_default_scaling_matrix_mask"][::std::mem::offset_of!(
        StdVideoH264ScalingLists,
        use_default_scaling_matrix_mask
    ) - 2usize];
    ["Offset of field: StdVideoH264ScalingLists::ScalingList4x4"]
        [::std::mem::offset_of!(StdVideoH264ScalingLists, ScalingList4x4) - 4usize];
    ["Offset of field: StdVideoH264ScalingLists::ScalingList8x8"]
        [::std::mem::offset_of!(StdVideoH264ScalingLists, ScalingList8x8) - 100usize];
};
impl Default for StdVideoH264ScalingLists {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH264SequenceParameterSet {
    pub flags: StdVideoH264SpsFlags,
    pub profile_idc: StdVideoH264ProfileIdc,
    pub level_idc: StdVideoH264LevelIdc,
    pub chroma_format_idc: StdVideoH264ChromaFormatIdc,
    pub seq_parameter_set_id: u8,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub log2_max_frame_num_minus4: u8,
    pub pic_order_cnt_type: StdVideoH264PocType,
    pub offset_for_non_ref_pic: i32,
    pub offset_for_top_to_bottom_field: i32,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
    pub num_ref_frames_in_pic_order_cnt_cycle: u8,
    pub max_num_ref_frames: u8,
    pub reserved1: u8,
    pub pic_width_in_mbs_minus1: u32,
    pub pic_height_in_map_units_minus1: u32,
    pub frame_crop_left_offset: u32,
    pub frame_crop_right_offset: u32,
    pub frame_crop_top_offset: u32,
    pub frame_crop_bottom_offset: u32,
    pub reserved2: u32,
    pub pOffsetForRefFrame: *const i32,
    pub pScalingLists: *const StdVideoH264ScalingLists,
    pub pSequenceParameterSetVui: *const StdVideoH264SequenceParameterSetVui,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264SequenceParameterSet"]
        [::std::mem::size_of::<StdVideoH264SequenceParameterSet>() - 88usize];
    ["Alignment of StdVideoH264SequenceParameterSet"]
        [::std::mem::align_of::<StdVideoH264SequenceParameterSet>() - 8usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::flags"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::profile_idc"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, profile_idc) - 4usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::level_idc"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, level_idc) - 8usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::chroma_format_idc"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, chroma_format_idc) - 12usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::seq_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, seq_parameter_set_id) - 16usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::bit_depth_luma_minus8"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, bit_depth_luma_minus8) - 17usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::bit_depth_chroma_minus8"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        bit_depth_chroma_minus8
    ) - 18usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::log2_max_frame_num_minus4"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        log2_max_frame_num_minus4
    ) - 19usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pic_order_cnt_type"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, pic_order_cnt_type) - 20usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::offset_for_non_ref_pic"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        offset_for_non_ref_pic
    ) - 24usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::offset_for_top_to_bottom_field"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        offset_for_top_to_bottom_field
    )
        - 28usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::log2_max_pic_order_cnt_lsb_minus4"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        log2_max_pic_order_cnt_lsb_minus4
    )
        - 32usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::num_ref_frames_in_pic_order_cnt_cycle"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        num_ref_frames_in_pic_order_cnt_cycle
    )
        - 33usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::max_num_ref_frames"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, max_num_ref_frames) - 34usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::reserved1"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, reserved1) - 35usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pic_width_in_mbs_minus1"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        pic_width_in_mbs_minus1
    ) - 36usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pic_height_in_map_units_minus1"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        pic_height_in_map_units_minus1
    )
        - 40usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_left_offset"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        frame_crop_left_offset
    ) - 44usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_right_offset"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        frame_crop_right_offset
    ) - 48usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_top_offset"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, frame_crop_top_offset) - 52usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::frame_crop_bottom_offset"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        frame_crop_bottom_offset
    ) - 56usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::reserved2"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, reserved2) - 60usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pOffsetForRefFrame"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, pOffsetForRefFrame) - 64usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pScalingLists"]
        [::std::mem::offset_of!(StdVideoH264SequenceParameterSet, pScalingLists) - 72usize];
    ["Offset of field: StdVideoH264SequenceParameterSet::pSequenceParameterSetVui"][::std::mem::offset_of!(
        StdVideoH264SequenceParameterSet,
        pSequenceParameterSetVui
    ) - 80usize];
};
impl Default for StdVideoH264SequenceParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH264PpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264PpsFlags"][::std::mem::size_of::<StdVideoH264PpsFlags>() - 4usize];
    ["Alignment of StdVideoH264PpsFlags"][::std::mem::align_of::<StdVideoH264PpsFlags>() - 4usize];
};
impl StdVideoH264PpsFlags {
    #[inline]
    pub fn transform_8x8_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_8x8_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_8x8_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_8x8_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn redundant_pic_cnt_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_redundant_pic_cnt_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn redundant_pic_cnt_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_redundant_pic_cnt_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constrained_intra_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constrained_intra_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_control_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_control_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weighted_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weighted_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bottom_field_pic_order_in_frame_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_pic_order_in_frame_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bottom_field_pic_order_in_frame_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bottom_field_pic_order_in_frame_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn entropy_coding_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn entropy_coding_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_entropy_coding_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pic_scaling_matrix_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_scaling_matrix_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pic_scaling_matrix_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pic_scaling_matrix_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        transform_8x8_mode_flag: u32,
        redundant_pic_cnt_present_flag: u32,
        constrained_intra_pred_flag: u32,
        deblocking_filter_control_present_flag: u32,
        weighted_pred_flag: u32,
        bottom_field_pic_order_in_frame_present_flag: u32,
        entropy_coding_mode_flag: u32,
        pic_scaling_matrix_present_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let transform_8x8_mode_flag: u32 =
                unsafe { ::std::mem::transmute(transform_8x8_mode_flag) };
            transform_8x8_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let redundant_pic_cnt_present_flag: u32 =
                unsafe { ::std::mem::transmute(redundant_pic_cnt_present_flag) };
            redundant_pic_cnt_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bottom_field_pic_order_in_frame_present_flag: u32 =
                unsafe { ::std::mem::transmute(bottom_field_pic_order_in_frame_present_flag) };
            bottom_field_pic_order_in_frame_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let entropy_coding_mode_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_mode_flag) };
            entropy_coding_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pic_scaling_matrix_present_flag: u32 =
                unsafe { ::std::mem::transmute(pic_scaling_matrix_present_flag) };
            pic_scaling_matrix_present_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH264PictureParameterSet {
    pub flags: StdVideoH264PpsFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub weighted_bipred_idc: StdVideoH264WeightedBipredIdc,
    pub pic_init_qp_minus26: i8,
    pub pic_init_qs_minus26: i8,
    pub chroma_qp_index_offset: i8,
    pub second_chroma_qp_index_offset: i8,
    pub pScalingLists: *const StdVideoH264ScalingLists,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH264PictureParameterSet"]
        [::std::mem::size_of::<StdVideoH264PictureParameterSet>() - 24usize];
    ["Alignment of StdVideoH264PictureParameterSet"]
        [::std::mem::align_of::<StdVideoH264PictureParameterSet>() - 8usize];
    ["Offset of field: StdVideoH264PictureParameterSet::flags"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH264PictureParameterSet::seq_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, seq_parameter_set_id) - 4usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pic_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, pic_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoH264PictureParameterSet::num_ref_idx_l0_default_active_minus1"][::std::mem::offset_of!(
        StdVideoH264PictureParameterSet,
        num_ref_idx_l0_default_active_minus1
    )
        - 6usize];
    ["Offset of field: StdVideoH264PictureParameterSet::num_ref_idx_l1_default_active_minus1"][::std::mem::offset_of!(
        StdVideoH264PictureParameterSet,
        num_ref_idx_l1_default_active_minus1
    )
        - 7usize];
    ["Offset of field: StdVideoH264PictureParameterSet::weighted_bipred_idc"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, weighted_bipred_idc) - 8usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pic_init_qp_minus26"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, pic_init_qp_minus26) - 12usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pic_init_qs_minus26"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, pic_init_qs_minus26) - 13usize];
    ["Offset of field: StdVideoH264PictureParameterSet::chroma_qp_index_offset"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, chroma_qp_index_offset) - 14usize];
    ["Offset of field: StdVideoH264PictureParameterSet::second_chroma_qp_index_offset"][::std::mem::offset_of!(
        StdVideoH264PictureParameterSet,
        second_chroma_qp_index_offset
    )
        - 15usize];
    ["Offset of field: StdVideoH264PictureParameterSet::pScalingLists"]
        [::std::mem::offset_of!(StdVideoH264PictureParameterSet, pScalingLists) - 16usize];
};
impl Default for StdVideoH264PictureParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH264WeightTableFlags {
    pub luma_weight_l0_flag: u32,
    pub chroma_weight_l0_flag: u32,
    pub luma_weight_l1_flag: u32,
    pub chroma_weight_l1_flag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264WeightTableFlags"]
        [::std::mem::size_of::<StdVideoEncodeH264WeightTableFlags>() - 16usize];
    ["Alignment of StdVideoEncodeH264WeightTableFlags"]
        [::std::mem::align_of::<StdVideoEncodeH264WeightTableFlags>() - 4usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::luma_weight_l0_flag"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTableFlags, luma_weight_l0_flag) - 0usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::chroma_weight_l0_flag"][::std::mem::offset_of!(
        StdVideoEncodeH264WeightTableFlags,
        chroma_weight_l0_flag
    ) - 4usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::luma_weight_l1_flag"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTableFlags, luma_weight_l1_flag) - 8usize];
    ["Offset of field: StdVideoEncodeH264WeightTableFlags::chroma_weight_l1_flag"][::std::mem::offset_of!(
        StdVideoEncodeH264WeightTableFlags,
        chroma_weight_l1_flag
    ) - 12usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH264WeightTable {
    pub flags: StdVideoEncodeH264WeightTableFlags,
    pub luma_log2_weight_denom: u8,
    pub chroma_log2_weight_denom: u8,
    pub luma_weight_l0: [i8; 32usize],
    pub luma_offset_l0: [i8; 32usize],
    pub chroma_weight_l0: [[i8; 2usize]; 32usize],
    pub chroma_offset_l0: [[i8; 2usize]; 32usize],
    pub luma_weight_l1: [i8; 32usize],
    pub luma_offset_l1: [i8; 32usize],
    pub chroma_weight_l1: [[i8; 2usize]; 32usize],
    pub chroma_offset_l1: [[i8; 2usize]; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264WeightTable"]
        [::std::mem::size_of::<StdVideoEncodeH264WeightTable>() - 404usize];
    ["Alignment of StdVideoEncodeH264WeightTable"]
        [::std::mem::align_of::<StdVideoEncodeH264WeightTable>() - 4usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_log2_weight_denom"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_log2_weight_denom) - 16usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_log2_weight_denom"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_log2_weight_denom) - 17usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_weight_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_weight_l0) - 18usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_offset_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_offset_l0) - 50usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_weight_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_weight_l0) - 82usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_offset_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_offset_l0) - 146usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_weight_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_weight_l1) - 210usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::luma_offset_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, luma_offset_l1) - 242usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_weight_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_weight_l1) - 274usize];
    ["Offset of field: StdVideoEncodeH264WeightTable::chroma_offset_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH264WeightTable, chroma_offset_l1) - 338usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH264SliceHeaderFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264SliceHeaderFlags"]
        [::std::mem::size_of::<StdVideoEncodeH264SliceHeaderFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264SliceHeaderFlags"]
        [::std::mem::align_of::<StdVideoEncodeH264SliceHeaderFlags>() - 4usize];
};
impl StdVideoEncodeH264SliceHeaderFlags {
    #[inline]
    pub fn direct_spatial_mv_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_spatial_mv_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn direct_spatial_mv_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_direct_spatial_mv_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn num_ref_idx_active_override_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_num_ref_idx_active_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn num_ref_idx_active_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_num_ref_idx_active_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        direct_spatial_mv_pred_flag: u32,
        num_ref_idx_active_override_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let direct_spatial_mv_pred_flag: u32 =
                unsafe { ::std::mem::transmute(direct_spatial_mv_pred_flag) };
            direct_spatial_mv_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let num_ref_idx_active_override_flag: u32 =
                unsafe { ::std::mem::transmute(num_ref_idx_active_override_flag) };
            num_ref_idx_active_override_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH264PictureInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264PictureInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeH264PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264PictureInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeH264PictureInfoFlags>() - 4usize];
};
impl StdVideoEncodeH264PictureInfoFlags {
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IdrPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IdrPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn no_output_of_prior_pics_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_output_of_prior_pics_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn no_output_of_prior_pics_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_no_output_of_prior_pics_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn long_term_reference_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_term_reference_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn long_term_reference_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_long_term_reference_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn adaptive_ref_pic_marking_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_adaptive_ref_pic_marking_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn adaptive_ref_pic_marking_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_adaptive_ref_pic_marking_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                27u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                27u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        IdrPicFlag: u32,
        is_reference: u32,
        no_output_of_prior_pics_flag: u32,
        long_term_reference_flag: u32,
        adaptive_ref_pic_marking_mode_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::std::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_reference: u32 = unsafe { ::std::mem::transmute(is_reference) };
            is_reference as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let no_output_of_prior_pics_flag: u32 =
                unsafe { ::std::mem::transmute(no_output_of_prior_pics_flag) };
            no_output_of_prior_pics_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let long_term_reference_flag: u32 =
                unsafe { ::std::mem::transmute(long_term_reference_flag) };
            long_term_reference_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let adaptive_ref_pic_marking_mode_flag: u32 =
                unsafe { ::std::mem::transmute(adaptive_ref_pic_marking_mode_flag) };
            adaptive_ref_pic_marking_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeH264ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264ReferenceInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeH264ReferenceInfoFlags>() - 4usize];
};
impl StdVideoEncodeH264ReferenceInfoFlags {
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        used_for_long_term_reference: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::std::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceListsInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceListsInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeH264ReferenceListsInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH264ReferenceListsInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeH264ReferenceListsInfoFlags>() - 4usize];
};
impl StdVideoEncodeH264ReferenceListsInfoFlags {
    #[inline]
    pub fn ref_pic_list_modification_flag_l0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l0_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l0_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ref_pic_list_modification_flag_l1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l1_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l1_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ref_pic_list_modification_flag_l0: u32,
        ref_pic_list_modification_flag_l1: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ref_pic_list_modification_flag_l0: u32 =
                unsafe { ::std::mem::transmute(ref_pic_list_modification_flag_l0) };
            ref_pic_list_modification_flag_l0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ref_pic_list_modification_flag_l1: u32 =
                unsafe { ::std::mem::transmute(ref_pic_list_modification_flag_l1) };
            ref_pic_list_modification_flag_l1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH264RefListModEntry {
    pub modification_of_pic_nums_idc: StdVideoH264ModificationOfPicNumsIdc,
    pub abs_diff_pic_num_minus1: u16,
    pub long_term_pic_num: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264RefListModEntry"]
        [::std::mem::size_of::<StdVideoEncodeH264RefListModEntry>() - 8usize];
    ["Alignment of StdVideoEncodeH264RefListModEntry"]
        [::std::mem::align_of::<StdVideoEncodeH264RefListModEntry>() - 4usize];
    ["Offset of field: StdVideoEncodeH264RefListModEntry::modification_of_pic_nums_idc"][::std::mem::offset_of!(
        StdVideoEncodeH264RefListModEntry,
        modification_of_pic_nums_idc
    )
        - 0usize];
    ["Offset of field: StdVideoEncodeH264RefListModEntry::abs_diff_pic_num_minus1"][::std::mem::offset_of!(
        StdVideoEncodeH264RefListModEntry,
        abs_diff_pic_num_minus1
    ) - 4usize];
    ["Offset of field: StdVideoEncodeH264RefListModEntry::long_term_pic_num"]
        [::std::mem::offset_of!(StdVideoEncodeH264RefListModEntry, long_term_pic_num) - 6usize];
};
impl Default for StdVideoEncodeH264RefListModEntry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH264RefPicMarkingEntry {
    pub memory_management_control_operation: StdVideoH264MemMgmtControlOp,
    pub difference_of_pic_nums_minus1: u16,
    pub long_term_pic_num: u16,
    pub long_term_frame_idx: u16,
    pub max_long_term_frame_idx_plus1: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264RefPicMarkingEntry"]
        [::std::mem::size_of::<StdVideoEncodeH264RefPicMarkingEntry>() - 12usize];
    ["Alignment of StdVideoEncodeH264RefPicMarkingEntry"]
        [::std::mem::align_of::<StdVideoEncodeH264RefPicMarkingEntry>() - 4usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::memory_management_control_operation"] [:: std :: mem :: offset_of ! (StdVideoEncodeH264RefPicMarkingEntry , memory_management_control_operation) - 0usize] ;
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::difference_of_pic_nums_minus1"][::std::mem::offset_of!(
        StdVideoEncodeH264RefPicMarkingEntry,
        difference_of_pic_nums_minus1
    )
        - 4usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::long_term_pic_num"]
        [::std::mem::offset_of!(StdVideoEncodeH264RefPicMarkingEntry, long_term_pic_num) - 6usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::long_term_frame_idx"][::std::mem::offset_of!(
        StdVideoEncodeH264RefPicMarkingEntry,
        long_term_frame_idx
    ) - 8usize];
    ["Offset of field: StdVideoEncodeH264RefPicMarkingEntry::max_long_term_frame_idx_plus1"][::std::mem::offset_of!(
        StdVideoEncodeH264RefPicMarkingEntry,
        max_long_term_frame_idx_plus1
    )
        - 10usize];
};
impl Default for StdVideoEncodeH264RefPicMarkingEntry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceListsInfo {
    pub flags: StdVideoEncodeH264ReferenceListsInfoFlags,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub RefPicList0: [u8; 32usize],
    pub RefPicList1: [u8; 32usize],
    pub refList0ModOpCount: u8,
    pub refList1ModOpCount: u8,
    pub refPicMarkingOpCount: u8,
    pub reserved1: [u8; 7usize],
    pub pRefList0ModOperations: *const StdVideoEncodeH264RefListModEntry,
    pub pRefList1ModOperations: *const StdVideoEncodeH264RefListModEntry,
    pub pRefPicMarkingOperations: *const StdVideoEncodeH264RefPicMarkingEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceListsInfo"]
        [::std::mem::size_of::<StdVideoEncodeH264ReferenceListsInfo>() - 104usize];
    ["Alignment of StdVideoEncodeH264ReferenceListsInfo"]
        [::std::mem::align_of::<StdVideoEncodeH264ReferenceListsInfo>() - 8usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::num_ref_idx_l0_active_minus1"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        num_ref_idx_l0_active_minus1
    )
        - 4usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::num_ref_idx_l1_active_minus1"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        num_ref_idx_l1_active_minus1
    )
        - 5usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::RefPicList0"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, RefPicList0) - 6usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::RefPicList1"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, RefPicList1) - 38usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::refList0ModOpCount"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        refList0ModOpCount
    ) - 70usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::refList1ModOpCount"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        refList1ModOpCount
    ) - 71usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::refPicMarkingOpCount"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        refPicMarkingOpCount
    ) - 72usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceListsInfo, reserved1) - 73usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::pRefList0ModOperations"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        pRefList0ModOperations
    ) - 80usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::pRefList1ModOperations"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        pRefList1ModOperations
    ) - 88usize];
    ["Offset of field: StdVideoEncodeH264ReferenceListsInfo::pRefPicMarkingOperations"][::std::mem::offset_of!(
        StdVideoEncodeH264ReferenceListsInfo,
        pRefPicMarkingOperations
    )
        - 96usize];
};
impl Default for StdVideoEncodeH264ReferenceListsInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH264PictureInfo {
    pub flags: StdVideoEncodeH264PictureInfoFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub idr_pic_id: u16,
    pub primary_pic_type: StdVideoH264PictureType,
    pub frame_num: u32,
    pub PicOrderCnt: i32,
    pub temporal_id: u8,
    pub reserved1: [u8; 3usize],
    pub pRefLists: *const StdVideoEncodeH264ReferenceListsInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264PictureInfo"]
        [::std::mem::size_of::<StdVideoEncodeH264PictureInfo>() - 32usize];
    ["Alignment of StdVideoEncodeH264PictureInfo"]
        [::std::mem::align_of::<StdVideoEncodeH264PictureInfo>() - 8usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::seq_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, seq_parameter_set_id) - 4usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::pic_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, pic_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::idr_pic_id"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, idr_pic_id) - 6usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::primary_pic_type"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, primary_pic_type) - 8usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::frame_num"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, frame_num) - 12usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::PicOrderCnt"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, PicOrderCnt) - 16usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::temporal_id"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, temporal_id) - 20usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, reserved1) - 21usize];
    ["Offset of field: StdVideoEncodeH264PictureInfo::pRefLists"]
        [::std::mem::offset_of!(StdVideoEncodeH264PictureInfo, pRefLists) - 24usize];
};
impl Default for StdVideoEncodeH264PictureInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH264ReferenceInfo {
    pub flags: StdVideoEncodeH264ReferenceInfoFlags,
    pub primary_pic_type: StdVideoH264PictureType,
    pub FrameNum: u32,
    pub PicOrderCnt: i32,
    pub long_term_pic_num: u16,
    pub long_term_frame_idx: u16,
    pub temporal_id: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264ReferenceInfo"]
        [::std::mem::size_of::<StdVideoEncodeH264ReferenceInfo>() - 24usize];
    ["Alignment of StdVideoEncodeH264ReferenceInfo"]
        [::std::mem::align_of::<StdVideoEncodeH264ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::primary_pic_type"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, primary_pic_type) - 4usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::FrameNum"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, FrameNum) - 8usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::PicOrderCnt"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, PicOrderCnt) - 12usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::long_term_pic_num"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, long_term_pic_num) - 16usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::long_term_frame_idx"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, long_term_frame_idx) - 18usize];
    ["Offset of field: StdVideoEncodeH264ReferenceInfo::temporal_id"]
        [::std::mem::offset_of!(StdVideoEncodeH264ReferenceInfo, temporal_id) - 20usize];
};
impl Default for StdVideoEncodeH264ReferenceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH264SliceHeader {
    pub flags: StdVideoEncodeH264SliceHeaderFlags,
    pub first_mb_in_slice: u32,
    pub slice_type: StdVideoH264SliceType,
    pub slice_alpha_c0_offset_div2: i8,
    pub slice_beta_offset_div2: i8,
    pub slice_qp_delta: i8,
    pub reserved1: u8,
    pub cabac_init_idc: StdVideoH264CabacInitIdc,
    pub disable_deblocking_filter_idc: StdVideoH264DisableDeblockingFilterIdc,
    pub pWeightTable: *const StdVideoEncodeH264WeightTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH264SliceHeader"]
        [::std::mem::size_of::<StdVideoEncodeH264SliceHeader>() - 32usize];
    ["Alignment of StdVideoEncodeH264SliceHeader"]
        [::std::mem::align_of::<StdVideoEncodeH264SliceHeader>() - 8usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::first_mb_in_slice"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, first_mb_in_slice) - 4usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_type"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, slice_type) - 8usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_alpha_c0_offset_div2"][::std::mem::offset_of!(
        StdVideoEncodeH264SliceHeader,
        slice_alpha_c0_offset_div2
    ) - 12usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_beta_offset_div2"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, slice_beta_offset_div2) - 13usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::slice_qp_delta"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, slice_qp_delta) - 14usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, reserved1) - 15usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::cabac_init_idc"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, cabac_init_idc) - 16usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::disable_deblocking_filter_idc"][::std::mem::offset_of!(
        StdVideoEncodeH264SliceHeader,
        disable_deblocking_filter_idc
    ) - 20usize];
    ["Offset of field: StdVideoEncodeH264SliceHeader::pWeightTable"]
        [::std::mem::offset_of!(StdVideoEncodeH264SliceHeader, pWeightTable) - 24usize];
};
impl Default for StdVideoEncodeH264SliceHeader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 8 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 16 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 32 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 64 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 128 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 256 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_MB_QP_DIFF_WRAPAROUND_BIT_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 512 ;
pub const VkVideoEncodeH264CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH264CapabilityFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeH264CapabilityFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH264CapabilityFlagsKHR = VkFlags;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 1 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 2 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 4 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 8 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 16 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR:
    VkVideoEncodeH264StdFlagBitsKHR = 32;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 64 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 128 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 256 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 512 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 1024 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 2048 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 4096 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 8192 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 16384 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 32768 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 65536 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 131072 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR:
    VkVideoEncodeH264StdFlagBitsKHR = 524288;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR : VkVideoEncodeH264StdFlagBitsKHR = 1048576 ;
pub const VkVideoEncodeH264StdFlagBitsKHR_VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeH264StdFlagBitsKHR = 2147483647;
pub type VkVideoEncodeH264StdFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH264StdFlagsKHR = VkFlags;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 1 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 2 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 4 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 8 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 16 ;
pub const VkVideoEncodeH264RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH264RateControlFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeH264RateControlFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH264RateControlFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoEncodeH264CapabilityFlagsKHR,
    pub maxLevelIdc: StdVideoH264LevelIdc,
    pub maxSliceCount: u32,
    pub maxPPictureL0ReferenceCount: u32,
    pub maxBPictureL0ReferenceCount: u32,
    pub maxL1ReferenceCount: u32,
    pub maxTemporalLayerCount: u32,
    pub expectDyadicTemporalLayerPattern: VkBool32,
    pub minQp: i32,
    pub maxQp: i32,
    pub prefersGopRemainingFrames: VkBool32,
    pub requiresGopRemainingFrames: VkBool32,
    pub stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264CapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264CapabilitiesKHR>() - 72usize];
    ["Alignment of VkVideoEncodeH264CapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264CapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxLevelIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxLevelIdc) - 20usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxSliceCount"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxSliceCount) - 24usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxPPictureL0ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        maxPPictureL0ReferenceCount
    ) - 28usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxBPictureL0ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        maxBPictureL0ReferenceCount
    ) - 32usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxL1ReferenceCount"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxL1ReferenceCount) - 36usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxTemporalLayerCount"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxTemporalLayerCount) - 40usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::expectDyadicTemporalLayerPattern"][::std::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        expectDyadicTemporalLayerPattern
    )
        - 44usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::minQp"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, minQp) - 48usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::maxQp"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, maxQp) - 52usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::prefersGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        prefersGopRemainingFrames
    ) - 56usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::requiresGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeH264CapabilitiesKHR,
        requiresGopRemainingFrames
    ) - 60usize];
    ["Offset of field: VkVideoEncodeH264CapabilitiesKHR::stdSyntaxFlags"]
        [::std::mem::offset_of!(VkVideoEncodeH264CapabilitiesKHR, stdSyntaxFlags) - 64usize];
};
impl Default for VkVideoEncodeH264CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVideoEncodeH264QpKHR {
    pub qpI: i32,
    pub qpP: i32,
    pub qpB: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264QpKHR"][::std::mem::size_of::<VkVideoEncodeH264QpKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH264QpKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264QpKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264QpKHR::qpI"]
        [::std::mem::offset_of!(VkVideoEncodeH264QpKHR, qpI) - 0usize];
    ["Offset of field: VkVideoEncodeH264QpKHR::qpP"]
        [::std::mem::offset_of!(VkVideoEncodeH264QpKHR, qpP) - 4usize];
    ["Offset of field: VkVideoEncodeH264QpKHR::qpB"]
        [::std::mem::offset_of!(VkVideoEncodeH264QpKHR, qpB) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264QualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR,
    pub preferredGopFrameCount: u32,
    pub preferredIdrPeriod: u32,
    pub preferredConsecutiveBFrameCount: u32,
    pub preferredTemporalLayerCount: u32,
    pub preferredConstantQp: VkVideoEncodeH264QpKHR,
    pub preferredMaxL0ReferenceCount: u32,
    pub preferredMaxL1ReferenceCount: u32,
    pub preferredStdEntropyCodingModeFlag: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264QualityLevelPropertiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264QualityLevelPropertiesKHR>() - 64usize];
    ["Alignment of VkVideoEncodeH264QualityLevelPropertiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264QualityLevelPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264QualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264QualityLevelPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredRateControlFlags"][::std::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredRateControlFlags
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredGopFrameCount"][::std::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredGopFrameCount
    )
        - 20usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredIdrPeriod"][::std::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredIdrPeriod
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredConsecutiveBFrameCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeH264QualityLevelPropertiesKHR , preferredConsecutiveBFrameCount) - 28usize] ;
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredTemporalLayerCount"][::std::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredTemporalLayerCount
    )
        - 32usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredConstantQp"][::std::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredConstantQp
    )
        - 36usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredMaxL0ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredMaxL0ReferenceCount
    )
        - 48usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredMaxL1ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH264QualityLevelPropertiesKHR,
        preferredMaxL1ReferenceCount
    )
        - 52usize];
    ["Offset of field: VkVideoEncodeH264QualityLevelPropertiesKHR::preferredStdEntropyCodingModeFlag"] [:: std :: mem :: offset_of ! (VkVideoEncodeH264QualityLevelPropertiesKHR , preferredStdEntropyCodingModeFlag) - 56usize] ;
};
impl Default for VkVideoEncodeH264QualityLevelPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264SessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useMaxLevelIdc: VkBool32,
    pub maxLevelIdc: StdVideoH264LevelIdc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264SessionCreateInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264SessionCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264SessionCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::useMaxLevelIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, useMaxLevelIdc) - 16usize];
    ["Offset of field: VkVideoEncodeH264SessionCreateInfoKHR::maxLevelIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionCreateInfoKHR, maxLevelIdc) - 20usize];
};
impl Default for VkVideoEncodeH264SessionCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH264SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH264PictureParameterSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersAddInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264SessionParametersAddInfoKHR>() - 48usize];
    ["Alignment of VkVideoEncodeH264SessionParametersAddInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264SessionParametersAddInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::stdSPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::pStdSPSs"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, pStdSPSs) - 24usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::stdPPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 32usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersAddInfoKHR::pStdPPSs"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersAddInfoKHR, pStdPPSs) - 40usize];
};
impl Default for VkVideoEncodeH264SessionParametersAddInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoEncodeH264SessionParametersAddInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264SessionParametersCreateInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH264SessionParametersCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264SessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::maxStdSPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::maxStdPPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 20usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersCreateInfoKHR::pParametersAddInfo"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 24usize];
};
impl Default for VkVideoEncodeH264SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersGetInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub writeStdSPS: VkBool32,
    pub writeStdPPS: VkBool32,
    pub stdSPSId: u32,
    pub stdPPSId: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersGetInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264SessionParametersGetInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH264SessionParametersGetInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264SessionParametersGetInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::writeStdSPS"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersGetInfoKHR,
        writeStdSPS
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::writeStdPPS"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersGetInfoKHR,
        writeStdPPS
    ) - 20usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::stdSPSId"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, stdSPSId) - 24usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersGetInfoKHR::stdPPSId"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersGetInfoKHR, stdPPSId) - 28usize];
};
impl Default for VkVideoEncodeH264SessionParametersGetInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264SessionParametersFeedbackInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hasStdSPSOverrides: VkBool32,
    pub hasStdPPSOverrides: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264SessionParametersFeedbackInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264SessionParametersFeedbackInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264SessionParametersFeedbackInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264SessionParametersFeedbackInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersFeedbackInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264SessionParametersFeedbackInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::hasStdSPSOverrides"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersFeedbackInfoKHR,
        hasStdSPSOverrides
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH264SessionParametersFeedbackInfoKHR::hasStdPPSOverrides"][::std::mem::offset_of!(
        VkVideoEncodeH264SessionParametersFeedbackInfoKHR,
        hasStdPPSOverrides
    )
        - 20usize];
};
impl Default for VkVideoEncodeH264SessionParametersFeedbackInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264NaluSliceInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub constantQp: i32,
    pub pStdSliceHeader: *const StdVideoEncodeH264SliceHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264NaluSliceInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264NaluSliceInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH264NaluSliceInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264NaluSliceInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::constantQp"]
        [::std::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, constantQp) - 16usize];
    ["Offset of field: VkVideoEncodeH264NaluSliceInfoKHR::pStdSliceHeader"]
        [::std::mem::offset_of!(VkVideoEncodeH264NaluSliceInfoKHR, pStdSliceHeader) - 24usize];
};
impl Default for VkVideoEncodeH264NaluSliceInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub naluSliceEntryCount: u32,
    pub pNaluSliceEntries: *const VkVideoEncodeH264NaluSliceInfoKHR,
    pub pStdPictureInfo: *const StdVideoEncodeH264PictureInfo,
    pub generatePrefixNalu: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264PictureInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264PictureInfoKHR>() - 48usize];
    ["Alignment of VkVideoEncodeH264PictureInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264PictureInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::naluSliceEntryCount"]
        [::std::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, naluSliceEntryCount) - 16usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::pNaluSliceEntries"]
        [::std::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, pNaluSliceEntries) - 24usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::pStdPictureInfo"]
        [::std::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, pStdPictureInfo) - 32usize];
    ["Offset of field: VkVideoEncodeH264PictureInfoKHR::generatePrefixNalu"]
        [::std::mem::offset_of!(VkVideoEncodeH264PictureInfoKHR, generatePrefixNalu) - 40usize];
};
impl Default for VkVideoEncodeH264PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoEncodeH264ReferenceInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264DpbSlotInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264DpbSlotInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264DpbSlotInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264DpbSlotInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264DpbSlotInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264DpbSlotInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264DpbSlotInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264DpbSlotInfoKHR::pStdReferenceInfo"]
        [::std::mem::offset_of!(VkVideoEncodeH264DpbSlotInfoKHR, pStdReferenceInfo) - 16usize];
};
impl Default for VkVideoEncodeH264DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfileIdc: StdVideoH264ProfileIdc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264ProfileInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264ProfileInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264ProfileInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264ProfileInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264ProfileInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264ProfileInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264ProfileInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264ProfileInfoKHR::stdProfileIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH264ProfileInfoKHR, stdProfileIdc) - 16usize];
};
impl Default for VkVideoEncodeH264ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264RateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoEncodeH264RateControlFlagsKHR,
    pub gopFrameCount: u32,
    pub idrPeriod: u32,
    pub consecutiveBFrameCount: u32,
    pub temporalLayerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264RateControlInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264RateControlInfoKHR>() - 40usize];
    ["Alignment of VkVideoEncodeH264RateControlInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264RateControlInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::gopFrameCount"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, gopFrameCount) - 20usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::idrPeriod"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, idrPeriod) - 24usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::consecutiveBFrameCount"][::std::mem::offset_of!(
        VkVideoEncodeH264RateControlInfoKHR,
        consecutiveBFrameCount
    ) - 28usize];
    ["Offset of field: VkVideoEncodeH264RateControlInfoKHR::temporalLayerCount"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlInfoKHR, temporalLayerCount) - 32usize];
};
impl Default for VkVideoEncodeH264RateControlInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVideoEncodeH264FrameSizeKHR {
    pub frameISize: u32,
    pub framePSize: u32,
    pub frameBSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264FrameSizeKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264FrameSizeKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH264FrameSizeKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264FrameSizeKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH264FrameSizeKHR::frameISize"]
        [::std::mem::offset_of!(VkVideoEncodeH264FrameSizeKHR, frameISize) - 0usize];
    ["Offset of field: VkVideoEncodeH264FrameSizeKHR::framePSize"]
        [::std::mem::offset_of!(VkVideoEncodeH264FrameSizeKHR, framePSize) - 4usize];
    ["Offset of field: VkVideoEncodeH264FrameSizeKHR::frameBSize"]
        [::std::mem::offset_of!(VkVideoEncodeH264FrameSizeKHR, frameBSize) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264RateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useMinQp: VkBool32,
    pub minQp: VkVideoEncodeH264QpKHR,
    pub useMaxQp: VkBool32,
    pub maxQp: VkVideoEncodeH264QpKHR,
    pub useMaxFrameSize: VkBool32,
    pub maxFrameSize: VkVideoEncodeH264FrameSizeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264RateControlLayerInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264RateControlLayerInfoKHR>() - 64usize];
    ["Alignment of VkVideoEncodeH264RateControlLayerInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264RateControlLayerInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::useMinQp"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, useMinQp) - 16usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::minQp"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, minQp) - 20usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::useMaxQp"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, useMaxQp) - 32usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::maxQp"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, maxQp) - 36usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::useMaxFrameSize"][::std::mem::offset_of!(
        VkVideoEncodeH264RateControlLayerInfoKHR,
        useMaxFrameSize
    ) - 48usize];
    ["Offset of field: VkVideoEncodeH264RateControlLayerInfoKHR::maxFrameSize"]
        [::std::mem::offset_of!(VkVideoEncodeH264RateControlLayerInfoKHR, maxFrameSize) - 52usize];
};
impl Default for VkVideoEncodeH264RateControlLayerInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264GopRemainingFrameInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useGopRemainingFrames: VkBool32,
    pub gopRemainingI: u32,
    pub gopRemainingP: u32,
    pub gopRemainingB: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264GopRemainingFrameInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264GopRemainingFrameInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH264GopRemainingFrameInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264GopRemainingFrameInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264GopRemainingFrameInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264GopRemainingFrameInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::useGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        useGopRemainingFrames
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::gopRemainingI"][::std::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        gopRemainingI
    ) - 20usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::gopRemainingP"][::std::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        gopRemainingP
    ) - 24usize];
    ["Offset of field: VkVideoEncodeH264GopRemainingFrameInfoKHR::gopRemainingB"][::std::mem::offset_of!(
        VkVideoEncodeH264GopRemainingFrameInfoKHR,
        gopRemainingB
    ) - 28usize];
};
impl Default for VkVideoEncodeH264GopRemainingFrameInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME:
    StdVideoH265ChromaFormatIdc = 0;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_420:
    StdVideoH265ChromaFormatIdc = 1;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_422:
    StdVideoH265ChromaFormatIdc = 2;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_444:
    StdVideoH265ChromaFormatIdc = 3;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID:
    StdVideoH265ChromaFormatIdc = 2147483647;
pub const StdVideoH265ChromaFormatIdc_STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM:
    StdVideoH265ChromaFormatIdc = 2147483647;
pub type StdVideoH265ChromaFormatIdc = ::std::os::raw::c_uint;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAIN: StdVideoH265ProfileIdc = 1;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAIN_10: StdVideoH265ProfileIdc = 2;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE:
    StdVideoH265ProfileIdc = 3;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS:
    StdVideoH265ProfileIdc = 4;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS: StdVideoH265ProfileIdc =
    9;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_INVALID: StdVideoH265ProfileIdc =
    2147483647;
pub const StdVideoH265ProfileIdc_STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM: StdVideoH265ProfileIdc =
    2147483647;
pub type StdVideoH265ProfileIdc = ::std::os::raw::c_uint;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_1_0: StdVideoH265LevelIdc = 0;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_2_0: StdVideoH265LevelIdc = 1;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_2_1: StdVideoH265LevelIdc = 2;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_3_0: StdVideoH265LevelIdc = 3;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_3_1: StdVideoH265LevelIdc = 4;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_4_0: StdVideoH265LevelIdc = 5;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_4_1: StdVideoH265LevelIdc = 6;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_5_0: StdVideoH265LevelIdc = 7;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_5_1: StdVideoH265LevelIdc = 8;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_5_2: StdVideoH265LevelIdc = 9;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_6_0: StdVideoH265LevelIdc = 10;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_6_1: StdVideoH265LevelIdc = 11;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_6_2: StdVideoH265LevelIdc = 12;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_INVALID: StdVideoH265LevelIdc = 2147483647;
pub const StdVideoH265LevelIdc_STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM: StdVideoH265LevelIdc = 2147483647;
pub type StdVideoH265LevelIdc = ::std::os::raw::c_uint;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_B: StdVideoH265SliceType = 0;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_P: StdVideoH265SliceType = 1;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_I: StdVideoH265SliceType = 2;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_INVALID: StdVideoH265SliceType =
    2147483647;
pub const StdVideoH265SliceType_STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM: StdVideoH265SliceType =
    2147483647;
pub type StdVideoH265SliceType = ::std::os::raw::c_uint;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_P: StdVideoH265PictureType = 0;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_B: StdVideoH265PictureType = 1;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_I: StdVideoH265PictureType = 2;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_IDR: StdVideoH265PictureType = 3;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_INVALID: StdVideoH265PictureType =
    2147483647;
pub const StdVideoH265PictureType_STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM: StdVideoH265PictureType =
    2147483647;
pub type StdVideoH265PictureType = ::std::os::raw::c_uint;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED:
    StdVideoH265AspectRatioIdc = 0;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE:
    StdVideoH265AspectRatioIdc = 1;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11:
    StdVideoH265AspectRatioIdc = 2;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11:
    StdVideoH265AspectRatioIdc = 3;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11:
    StdVideoH265AspectRatioIdc = 4;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33:
    StdVideoH265AspectRatioIdc = 5;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11:
    StdVideoH265AspectRatioIdc = 6;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11:
    StdVideoH265AspectRatioIdc = 7;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11:
    StdVideoH265AspectRatioIdc = 8;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33:
    StdVideoH265AspectRatioIdc = 9;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11:
    StdVideoH265AspectRatioIdc = 10;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11:
    StdVideoH265AspectRatioIdc = 11;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33:
    StdVideoH265AspectRatioIdc = 12;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99:
    StdVideoH265AspectRatioIdc = 13;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3:
    StdVideoH265AspectRatioIdc = 14;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2:
    StdVideoH265AspectRatioIdc = 15;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1:
    StdVideoH265AspectRatioIdc = 16;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR:
    StdVideoH265AspectRatioIdc = 255;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID:
    StdVideoH265AspectRatioIdc = 2147483647;
pub const StdVideoH265AspectRatioIdc_STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM:
    StdVideoH265AspectRatioIdc = 2147483647;
pub type StdVideoH265AspectRatioIdc = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265DecPicBufMgr {
    pub max_latency_increase_plus1: [u32; 7usize],
    pub max_dec_pic_buffering_minus1: [u8; 7usize],
    pub max_num_reorder_pics: [u8; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265DecPicBufMgr"]
        [::std::mem::size_of::<StdVideoH265DecPicBufMgr>() - 44usize];
    ["Alignment of StdVideoH265DecPicBufMgr"]
        [::std::mem::align_of::<StdVideoH265DecPicBufMgr>() - 4usize];
    ["Offset of field: StdVideoH265DecPicBufMgr::max_latency_increase_plus1"]
        [::std::mem::offset_of!(StdVideoH265DecPicBufMgr, max_latency_increase_plus1) - 0usize];
    ["Offset of field: StdVideoH265DecPicBufMgr::max_dec_pic_buffering_minus1"]
        [::std::mem::offset_of!(StdVideoH265DecPicBufMgr, max_dec_pic_buffering_minus1) - 28usize];
    ["Offset of field: StdVideoH265DecPicBufMgr::max_num_reorder_pics"]
        [::std::mem::offset_of!(StdVideoH265DecPicBufMgr, max_num_reorder_pics) - 35usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265SubLayerHrdParameters {
    pub bit_rate_value_minus1: [u32; 32usize],
    pub cpb_size_value_minus1: [u32; 32usize],
    pub cpb_size_du_value_minus1: [u32; 32usize],
    pub bit_rate_du_value_minus1: [u32; 32usize],
    pub cbr_flag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SubLayerHrdParameters"]
        [::std::mem::size_of::<StdVideoH265SubLayerHrdParameters>() - 516usize];
    ["Alignment of StdVideoH265SubLayerHrdParameters"]
        [::std::mem::align_of::<StdVideoH265SubLayerHrdParameters>() - 4usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::bit_rate_value_minus1"]
        [::std::mem::offset_of!(StdVideoH265SubLayerHrdParameters, bit_rate_value_minus1) - 0usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::cpb_size_value_minus1"][::std::mem::offset_of!(
        StdVideoH265SubLayerHrdParameters,
        cpb_size_value_minus1
    ) - 128usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::cpb_size_du_value_minus1"][::std::mem::offset_of!(
        StdVideoH265SubLayerHrdParameters,
        cpb_size_du_value_minus1
    ) - 256usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::bit_rate_du_value_minus1"][::std::mem::offset_of!(
        StdVideoH265SubLayerHrdParameters,
        bit_rate_du_value_minus1
    ) - 384usize];
    ["Offset of field: StdVideoH265SubLayerHrdParameters::cbr_flag"]
        [::std::mem::offset_of!(StdVideoH265SubLayerHrdParameters, cbr_flag) - 512usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265HrdFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265HrdFlags"][::std::mem::size_of::<StdVideoH265HrdFlags>() - 4usize];
    ["Alignment of StdVideoH265HrdFlags"][::std::mem::align_of::<StdVideoH265HrdFlags>() - 4usize];
};
impl StdVideoH265HrdFlags {
    #[inline]
    pub fn nal_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nal_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn nal_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_nal_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vcl_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vcl_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vcl_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vcl_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sub_pic_hrd_params_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pic_hrd_params_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sub_pic_hrd_params_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sub_pic_hrd_params_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sub_pic_cpb_params_in_pic_timing_sei_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sub_pic_cpb_params_in_pic_timing_sei_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sub_pic_cpb_params_in_pic_timing_sei_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sub_pic_cpb_params_in_pic_timing_sei_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixed_pic_rate_general_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_pic_rate_general_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixed_pic_rate_general_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fixed_pic_rate_general_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fixed_pic_rate_within_cvs_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_fixed_pic_rate_within_cvs_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fixed_pic_rate_within_cvs_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fixed_pic_rate_within_cvs_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn low_delay_hrd_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay_hrd_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn low_delay_hrd_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_low_delay_hrd_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nal_hrd_parameters_present_flag: u32,
        vcl_hrd_parameters_present_flag: u32,
        sub_pic_hrd_params_present_flag: u32,
        sub_pic_cpb_params_in_pic_timing_sei_flag: u32,
        fixed_pic_rate_general_flag: u32,
        fixed_pic_rate_within_cvs_flag: u32,
        low_delay_hrd_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nal_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(nal_hrd_parameters_present_flag) };
            nal_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let vcl_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vcl_hrd_parameters_present_flag) };
            vcl_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sub_pic_hrd_params_present_flag: u32 =
                unsafe { ::std::mem::transmute(sub_pic_hrd_params_present_flag) };
            sub_pic_hrd_params_present_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sub_pic_cpb_params_in_pic_timing_sei_flag: u32 =
                unsafe { ::std::mem::transmute(sub_pic_cpb_params_in_pic_timing_sei_flag) };
            sub_pic_cpb_params_in_pic_timing_sei_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 8u8, {
            let fixed_pic_rate_general_flag: u32 =
                unsafe { ::std::mem::transmute(fixed_pic_rate_general_flag) };
            fixed_pic_rate_general_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 8u8, {
            let fixed_pic_rate_within_cvs_flag: u32 =
                unsafe { ::std::mem::transmute(fixed_pic_rate_within_cvs_flag) };
            fixed_pic_rate_within_cvs_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 8u8, {
            let low_delay_hrd_flag: u32 = unsafe { ::std::mem::transmute(low_delay_hrd_flag) };
            low_delay_hrd_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265HrdParameters {
    pub flags: StdVideoH265HrdFlags,
    pub tick_divisor_minus2: u8,
    pub du_cpb_removal_delay_increment_length_minus1: u8,
    pub dpb_output_delay_du_length_minus1: u8,
    pub bit_rate_scale: u8,
    pub cpb_size_scale: u8,
    pub cpb_size_du_scale: u8,
    pub initial_cpb_removal_delay_length_minus1: u8,
    pub au_cpb_removal_delay_length_minus1: u8,
    pub dpb_output_delay_length_minus1: u8,
    pub cpb_cnt_minus1: [u8; 7usize],
    pub elemental_duration_in_tc_minus1: [u16; 7usize],
    pub reserved: [u16; 3usize],
    pub pSubLayerHrdParametersNal: *const StdVideoH265SubLayerHrdParameters,
    pub pSubLayerHrdParametersVcl: *const StdVideoH265SubLayerHrdParameters,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265HrdParameters"]
        [::std::mem::size_of::<StdVideoH265HrdParameters>() - 56usize];
    ["Alignment of StdVideoH265HrdParameters"]
        [::std::mem::align_of::<StdVideoH265HrdParameters>() - 8usize];
    ["Offset of field: StdVideoH265HrdParameters::flags"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, flags) - 0usize];
    ["Offset of field: StdVideoH265HrdParameters::tick_divisor_minus2"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, tick_divisor_minus2) - 4usize];
    ["Offset of field: StdVideoH265HrdParameters::du_cpb_removal_delay_increment_length_minus1"][::std::mem::offset_of!(
        StdVideoH265HrdParameters,
        du_cpb_removal_delay_increment_length_minus1
    )
        - 5usize];
    ["Offset of field: StdVideoH265HrdParameters::dpb_output_delay_du_length_minus1"][::std::mem::offset_of!(
        StdVideoH265HrdParameters,
        dpb_output_delay_du_length_minus1
    ) - 6usize];
    ["Offset of field: StdVideoH265HrdParameters::bit_rate_scale"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, bit_rate_scale) - 7usize];
    ["Offset of field: StdVideoH265HrdParameters::cpb_size_scale"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, cpb_size_scale) - 8usize];
    ["Offset of field: StdVideoH265HrdParameters::cpb_size_du_scale"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, cpb_size_du_scale) - 9usize];
    ["Offset of field: StdVideoH265HrdParameters::initial_cpb_removal_delay_length_minus1"][::std::mem::offset_of!(
        StdVideoH265HrdParameters,
        initial_cpb_removal_delay_length_minus1
    )
        - 10usize];
    ["Offset of field: StdVideoH265HrdParameters::au_cpb_removal_delay_length_minus1"][::std::mem::offset_of!(
        StdVideoH265HrdParameters,
        au_cpb_removal_delay_length_minus1
    ) - 11usize];
    ["Offset of field: StdVideoH265HrdParameters::dpb_output_delay_length_minus1"][::std::mem::offset_of!(
        StdVideoH265HrdParameters,
        dpb_output_delay_length_minus1
    ) - 12usize];
    ["Offset of field: StdVideoH265HrdParameters::cpb_cnt_minus1"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, cpb_cnt_minus1) - 13usize];
    ["Offset of field: StdVideoH265HrdParameters::elemental_duration_in_tc_minus1"][::std::mem::offset_of!(
        StdVideoH265HrdParameters,
        elemental_duration_in_tc_minus1
    ) - 20usize];
    ["Offset of field: StdVideoH265HrdParameters::reserved"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, reserved) - 34usize];
    ["Offset of field: StdVideoH265HrdParameters::pSubLayerHrdParametersNal"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, pSubLayerHrdParametersNal) - 40usize];
    ["Offset of field: StdVideoH265HrdParameters::pSubLayerHrdParametersVcl"]
        [::std::mem::offset_of!(StdVideoH265HrdParameters, pSubLayerHrdParametersVcl) - 48usize];
};
impl Default for StdVideoH265HrdParameters {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265VpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265VpsFlags"][::std::mem::size_of::<StdVideoH265VpsFlags>() - 4usize];
    ["Alignment of StdVideoH265VpsFlags"][::std::mem::align_of::<StdVideoH265VpsFlags>() - 4usize];
};
impl StdVideoH265VpsFlags {
    #[inline]
    pub fn vps_temporal_id_nesting_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_temporal_id_nesting_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_temporal_id_nesting_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_temporal_id_nesting_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vps_sub_layer_ordering_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_sub_layer_ordering_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_sub_layer_ordering_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_sub_layer_ordering_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vps_timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vps_poc_proportional_to_timing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vps_poc_proportional_to_timing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vps_poc_proportional_to_timing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vps_poc_proportional_to_timing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        vps_temporal_id_nesting_flag: u32,
        vps_sub_layer_ordering_info_present_flag: u32,
        vps_timing_info_present_flag: u32,
        vps_poc_proportional_to_timing_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let vps_temporal_id_nesting_flag: u32 =
                unsafe { ::std::mem::transmute(vps_temporal_id_nesting_flag) };
            vps_temporal_id_nesting_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let vps_sub_layer_ordering_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(vps_sub_layer_ordering_info_present_flag) };
            vps_sub_layer_ordering_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let vps_timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(vps_timing_info_present_flag) };
            vps_timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let vps_poc_proportional_to_timing_flag: u32 =
                unsafe { ::std::mem::transmute(vps_poc_proportional_to_timing_flag) };
            vps_poc_proportional_to_timing_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265ProfileTierLevelFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ProfileTierLevelFlags"]
        [::std::mem::size_of::<StdVideoH265ProfileTierLevelFlags>() - 4usize];
    ["Alignment of StdVideoH265ProfileTierLevelFlags"]
        [::std::mem::align_of::<StdVideoH265ProfileTierLevelFlags>() - 4usize];
};
impl StdVideoH265ProfileTierLevelFlags {
    #[inline]
    pub fn general_tier_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_tier_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_tier_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_tier_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_progressive_source_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_progressive_source_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_progressive_source_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_progressive_source_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_interlaced_source_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_interlaced_source_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_interlaced_source_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_interlaced_source_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_non_packed_constraint_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_non_packed_constraint_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_non_packed_constraint_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_non_packed_constraint_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn general_frame_only_constraint_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_general_frame_only_constraint_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn general_frame_only_constraint_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_general_frame_only_constraint_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        general_tier_flag: u32,
        general_progressive_source_flag: u32,
        general_interlaced_source_flag: u32,
        general_non_packed_constraint_flag: u32,
        general_frame_only_constraint_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let general_tier_flag: u32 = unsafe { ::std::mem::transmute(general_tier_flag) };
            general_tier_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let general_progressive_source_flag: u32 =
                unsafe { ::std::mem::transmute(general_progressive_source_flag) };
            general_progressive_source_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let general_interlaced_source_flag: u32 =
                unsafe { ::std::mem::transmute(general_interlaced_source_flag) };
            general_interlaced_source_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let general_non_packed_constraint_flag: u32 =
                unsafe { ::std::mem::transmute(general_non_packed_constraint_flag) };
            general_non_packed_constraint_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let general_frame_only_constraint_flag: u32 =
                unsafe { ::std::mem::transmute(general_frame_only_constraint_flag) };
            general_frame_only_constraint_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265ProfileTierLevel {
    pub flags: StdVideoH265ProfileTierLevelFlags,
    pub general_profile_idc: StdVideoH265ProfileIdc,
    pub general_level_idc: StdVideoH265LevelIdc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ProfileTierLevel"]
        [::std::mem::size_of::<StdVideoH265ProfileTierLevel>() - 12usize];
    ["Alignment of StdVideoH265ProfileTierLevel"]
        [::std::mem::align_of::<StdVideoH265ProfileTierLevel>() - 4usize];
    ["Offset of field: StdVideoH265ProfileTierLevel::flags"]
        [::std::mem::offset_of!(StdVideoH265ProfileTierLevel, flags) - 0usize];
    ["Offset of field: StdVideoH265ProfileTierLevel::general_profile_idc"]
        [::std::mem::offset_of!(StdVideoH265ProfileTierLevel, general_profile_idc) - 4usize];
    ["Offset of field: StdVideoH265ProfileTierLevel::general_level_idc"]
        [::std::mem::offset_of!(StdVideoH265ProfileTierLevel, general_level_idc) - 8usize];
};
impl Default for StdVideoH265ProfileTierLevel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265VideoParameterSet {
    pub flags: StdVideoH265VpsFlags,
    pub vps_video_parameter_set_id: u8,
    pub vps_max_sub_layers_minus1: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub vps_num_units_in_tick: u32,
    pub vps_time_scale: u32,
    pub vps_num_ticks_poc_diff_one_minus1: u32,
    pub reserved3: u32,
    pub pDecPicBufMgr: *const StdVideoH265DecPicBufMgr,
    pub pHrdParameters: *const StdVideoH265HrdParameters,
    pub pProfileTierLevel: *const StdVideoH265ProfileTierLevel,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265VideoParameterSet"]
        [::std::mem::size_of::<StdVideoH265VideoParameterSet>() - 48usize];
    ["Alignment of StdVideoH265VideoParameterSet"]
        [::std::mem::align_of::<StdVideoH265VideoParameterSet>() - 8usize];
    ["Offset of field: StdVideoH265VideoParameterSet::flags"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_video_parameter_set_id"][::std::mem::offset_of!(
        StdVideoH265VideoParameterSet,
        vps_video_parameter_set_id
    ) - 4usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_max_sub_layers_minus1"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, vps_max_sub_layers_minus1) - 5usize];
    ["Offset of field: StdVideoH265VideoParameterSet::reserved1"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, reserved1) - 6usize];
    ["Offset of field: StdVideoH265VideoParameterSet::reserved2"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, reserved2) - 7usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_num_units_in_tick"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, vps_num_units_in_tick) - 8usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_time_scale"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, vps_time_scale) - 12usize];
    ["Offset of field: StdVideoH265VideoParameterSet::vps_num_ticks_poc_diff_one_minus1"][::std::mem::offset_of!(
        StdVideoH265VideoParameterSet,
        vps_num_ticks_poc_diff_one_minus1
    )
        - 16usize];
    ["Offset of field: StdVideoH265VideoParameterSet::reserved3"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, reserved3) - 20usize];
    ["Offset of field: StdVideoH265VideoParameterSet::pDecPicBufMgr"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, pDecPicBufMgr) - 24usize];
    ["Offset of field: StdVideoH265VideoParameterSet::pHrdParameters"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, pHrdParameters) - 32usize];
    ["Offset of field: StdVideoH265VideoParameterSet::pProfileTierLevel"]
        [::std::mem::offset_of!(StdVideoH265VideoParameterSet, pProfileTierLevel) - 40usize];
};
impl Default for StdVideoH265VideoParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265ScalingLists {
    pub ScalingList4x4: [[u8; 16usize]; 6usize],
    pub ScalingList8x8: [[u8; 64usize]; 6usize],
    pub ScalingList16x16: [[u8; 64usize]; 6usize],
    pub ScalingList32x32: [[u8; 64usize]; 2usize],
    pub ScalingListDCCoef16x16: [u8; 6usize],
    pub ScalingListDCCoef32x32: [u8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ScalingLists"]
        [::std::mem::size_of::<StdVideoH265ScalingLists>() - 1000usize];
    ["Alignment of StdVideoH265ScalingLists"]
        [::std::mem::align_of::<StdVideoH265ScalingLists>() - 1usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList4x4"]
        [::std::mem::offset_of!(StdVideoH265ScalingLists, ScalingList4x4) - 0usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList8x8"]
        [::std::mem::offset_of!(StdVideoH265ScalingLists, ScalingList8x8) - 96usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList16x16"]
        [::std::mem::offset_of!(StdVideoH265ScalingLists, ScalingList16x16) - 480usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingList32x32"]
        [::std::mem::offset_of!(StdVideoH265ScalingLists, ScalingList32x32) - 864usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingListDCCoef16x16"]
        [::std::mem::offset_of!(StdVideoH265ScalingLists, ScalingListDCCoef16x16) - 992usize];
    ["Offset of field: StdVideoH265ScalingLists::ScalingListDCCoef32x32"]
        [::std::mem::offset_of!(StdVideoH265ScalingLists, ScalingListDCCoef32x32) - 998usize];
};
impl Default for StdVideoH265ScalingLists {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265SpsVuiFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SpsVuiFlags"][::std::mem::size_of::<StdVideoH265SpsVuiFlags>() - 4usize];
    ["Alignment of StdVideoH265SpsVuiFlags"]
        [::std::mem::align_of::<StdVideoH265SpsVuiFlags>() - 4usize];
};
impl StdVideoH265SpsVuiFlags {
    #[inline]
    pub fn aspect_ratio_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_aspect_ratio_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn aspect_ratio_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_aspect_ratio_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overscan_appropriate_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overscan_appropriate_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overscan_appropriate_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overscan_appropriate_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_signal_type_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_signal_type_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_signal_type_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_signal_type_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn video_full_range_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_video_full_range_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn video_full_range_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_video_full_range_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn colour_description_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_colour_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn colour_description_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_colour_description_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn chroma_loc_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_loc_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_loc_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_loc_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn neutral_chroma_indication_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_neutral_chroma_indication_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn neutral_chroma_indication_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_neutral_chroma_indication_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn field_seq_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_seq_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn field_seq_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_field_seq_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_field_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_field_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_field_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_field_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn default_display_window_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_default_display_window_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn default_display_window_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_default_display_window_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_poc_proportional_to_timing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_poc_proportional_to_timing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_poc_proportional_to_timing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_poc_proportional_to_timing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_hrd_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_hrd_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_hrd_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_hrd_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bitstream_restriction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bitstream_restriction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bitstream_restriction_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bitstream_restriction_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tiles_fixed_structure_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_fixed_structure_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tiles_fixed_structure_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tiles_fixed_structure_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn motion_vectors_over_pic_boundaries_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_motion_vectors_over_pic_boundaries_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn motion_vectors_over_pic_boundaries_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_motion_vectors_over_pic_boundaries_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn restricted_ref_pic_lists_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_restricted_ref_pic_lists_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn restricted_ref_pic_lists_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_restricted_ref_pic_lists_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        aspect_ratio_info_present_flag: u32,
        overscan_info_present_flag: u32,
        overscan_appropriate_flag: u32,
        video_signal_type_present_flag: u32,
        video_full_range_flag: u32,
        colour_description_present_flag: u32,
        chroma_loc_info_present_flag: u32,
        neutral_chroma_indication_flag: u32,
        field_seq_flag: u32,
        frame_field_info_present_flag: u32,
        default_display_window_flag: u32,
        vui_timing_info_present_flag: u32,
        vui_poc_proportional_to_timing_flag: u32,
        vui_hrd_parameters_present_flag: u32,
        bitstream_restriction_flag: u32,
        tiles_fixed_structure_flag: u32,
        motion_vectors_over_pic_boundaries_flag: u32,
        restricted_ref_pic_lists_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let aspect_ratio_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(aspect_ratio_info_present_flag) };
            aspect_ratio_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overscan_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_info_present_flag) };
            overscan_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let overscan_appropriate_flag: u32 =
                unsafe { ::std::mem::transmute(overscan_appropriate_flag) };
            overscan_appropriate_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let video_signal_type_present_flag: u32 =
                unsafe { ::std::mem::transmute(video_signal_type_present_flag) };
            video_signal_type_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let video_full_range_flag: u32 =
                unsafe { ::std::mem::transmute(video_full_range_flag) };
            video_full_range_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let colour_description_present_flag: u32 =
                unsafe { ::std::mem::transmute(colour_description_present_flag) };
            colour_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let chroma_loc_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(chroma_loc_info_present_flag) };
            chroma_loc_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let neutral_chroma_indication_flag: u32 =
                unsafe { ::std::mem::transmute(neutral_chroma_indication_flag) };
            neutral_chroma_indication_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let field_seq_flag: u32 = unsafe { ::std::mem::transmute(field_seq_flag) };
            field_seq_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let frame_field_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(frame_field_info_present_flag) };
            frame_field_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let default_display_window_flag: u32 =
                unsafe { ::std::mem::transmute(default_display_window_flag) };
            default_display_window_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let vui_timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_timing_info_present_flag) };
            vui_timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let vui_poc_proportional_to_timing_flag: u32 =
                unsafe { ::std::mem::transmute(vui_poc_proportional_to_timing_flag) };
            vui_poc_proportional_to_timing_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let vui_hrd_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_hrd_parameters_present_flag) };
            vui_hrd_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bitstream_restriction_flag: u32 =
                unsafe { ::std::mem::transmute(bitstream_restriction_flag) };
            bitstream_restriction_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let tiles_fixed_structure_flag: u32 =
                unsafe { ::std::mem::transmute(tiles_fixed_structure_flag) };
            tiles_fixed_structure_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let motion_vectors_over_pic_boundaries_flag: u32 =
                unsafe { ::std::mem::transmute(motion_vectors_over_pic_boundaries_flag) };
            motion_vectors_over_pic_boundaries_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let restricted_ref_pic_lists_flag: u32 =
                unsafe { ::std::mem::transmute(restricted_ref_pic_lists_flag) };
            restricted_ref_pic_lists_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265SequenceParameterSetVui {
    pub flags: StdVideoH265SpsVuiFlags,
    pub aspect_ratio_idc: StdVideoH265AspectRatioIdc,
    pub sar_width: u16,
    pub sar_height: u16,
    pub video_format: u8,
    pub colour_primaries: u8,
    pub transfer_characteristics: u8,
    pub matrix_coeffs: u8,
    pub chroma_sample_loc_type_top_field: u8,
    pub chroma_sample_loc_type_bottom_field: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub def_disp_win_left_offset: u16,
    pub def_disp_win_right_offset: u16,
    pub def_disp_win_top_offset: u16,
    pub def_disp_win_bottom_offset: u16,
    pub vui_num_units_in_tick: u32,
    pub vui_time_scale: u32,
    pub vui_num_ticks_poc_diff_one_minus1: u32,
    pub min_spatial_segmentation_idc: u16,
    pub reserved3: u16,
    pub max_bytes_per_pic_denom: u8,
    pub max_bits_per_min_cu_denom: u8,
    pub log2_max_mv_length_horizontal: u8,
    pub log2_max_mv_length_vertical: u8,
    pub pHrdParameters: *const StdVideoH265HrdParameters,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SequenceParameterSetVui"]
        [::std::mem::size_of::<StdVideoH265SequenceParameterSetVui>() - 56usize];
    ["Alignment of StdVideoH265SequenceParameterSetVui"]
        [::std::mem::align_of::<StdVideoH265SequenceParameterSetVui>() - 8usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::flags"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, flags) - 0usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::aspect_ratio_idc"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, aspect_ratio_idc) - 4usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::sar_width"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, sar_width) - 8usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::sar_height"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, sar_height) - 10usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::video_format"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, video_format) - 12usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::colour_primaries"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, colour_primaries) - 13usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::transfer_characteristics"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        transfer_characteristics
    ) - 14usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::matrix_coeffs"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, matrix_coeffs) - 15usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::chroma_sample_loc_type_top_field"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        chroma_sample_loc_type_top_field
    )
        - 16usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::chroma_sample_loc_type_bottom_field"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        chroma_sample_loc_type_bottom_field
    )
        - 17usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::reserved1"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, reserved1) - 18usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::reserved2"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, reserved2) - 19usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_left_offset"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_left_offset
    ) - 20usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_right_offset"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_right_offset
    )
        - 22usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_top_offset"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_top_offset
    ) - 24usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::def_disp_win_bottom_offset"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        def_disp_win_bottom_offset
    )
        - 26usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::vui_num_units_in_tick"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        vui_num_units_in_tick
    ) - 28usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::vui_time_scale"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, vui_time_scale) - 32usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::vui_num_ticks_poc_diff_one_minus1"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        vui_num_ticks_poc_diff_one_minus1
    )
        - 36usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::min_spatial_segmentation_idc"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        min_spatial_segmentation_idc
    )
        - 40usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::reserved3"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, reserved3) - 42usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::max_bytes_per_pic_denom"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        max_bytes_per_pic_denom
    ) - 44usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::max_bits_per_min_cu_denom"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        max_bits_per_min_cu_denom
    )
        - 45usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::log2_max_mv_length_horizontal"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        log2_max_mv_length_horizontal
    )
        - 46usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::log2_max_mv_length_vertical"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSetVui,
        log2_max_mv_length_vertical
    )
        - 47usize];
    ["Offset of field: StdVideoH265SequenceParameterSetVui::pHrdParameters"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSetVui, pHrdParameters) - 48usize];
};
impl Default for StdVideoH265SequenceParameterSetVui {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265PredictorPaletteEntries {
    pub PredictorPaletteEntries: [[u16; 128usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265PredictorPaletteEntries"]
        [::std::mem::size_of::<StdVideoH265PredictorPaletteEntries>() - 768usize];
    ["Alignment of StdVideoH265PredictorPaletteEntries"]
        [::std::mem::align_of::<StdVideoH265PredictorPaletteEntries>() - 2usize];
    ["Offset of field: StdVideoH265PredictorPaletteEntries::PredictorPaletteEntries"][::std::mem::offset_of!(
        StdVideoH265PredictorPaletteEntries,
        PredictorPaletteEntries
    ) - 0usize];
};
impl Default for StdVideoH265PredictorPaletteEntries {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265SpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SpsFlags"][::std::mem::size_of::<StdVideoH265SpsFlags>() - 4usize];
    ["Alignment of StdVideoH265SpsFlags"][::std::mem::align_of::<StdVideoH265SpsFlags>() - 4usize];
};
impl StdVideoH265SpsFlags {
    #[inline]
    pub fn sps_temporal_id_nesting_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_id_nesting_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_temporal_id_nesting_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_temporal_id_nesting_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn separate_colour_plane_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_colour_plane_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn separate_colour_plane_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_separate_colour_plane_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn conformance_window_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_conformance_window_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn conformance_window_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_conformance_window_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_sub_layer_ordering_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_sub_layer_ordering_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_sub_layer_ordering_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_sub_layer_ordering_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn scaling_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scaling_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn scaling_list_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_scaling_list_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_scaling_list_data_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_scaling_list_data_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_scaling_list_data_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_scaling_list_data_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn amp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_amp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn amp_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_amp_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sample_adaptive_offset_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sample_adaptive_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sample_adaptive_offset_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sample_adaptive_offset_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pcm_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pcm_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pcm_loop_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pcm_loop_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pcm_loop_filter_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pcm_loop_filter_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn long_term_ref_pics_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_long_term_ref_pics_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn long_term_ref_pics_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_long_term_ref_pics_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_temporal_mvp_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_temporal_mvp_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn strong_intra_smoothing_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_strong_intra_smoothing_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn strong_intra_smoothing_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_strong_intra_smoothing_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vui_parameters_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vui_parameters_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vui_parameters_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vui_parameters_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_extension_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_extension_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_extension_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_range_extension_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_range_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_range_extension_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_range_extension_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transform_skip_rotation_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_rotation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_skip_rotation_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_skip_rotation_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transform_skip_context_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_context_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_skip_context_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_skip_context_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn implicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_implicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn implicit_rdpcm_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_implicit_rdpcm_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn explicit_rdpcm_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_explicit_rdpcm_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn explicit_rdpcm_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_explicit_rdpcm_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn extended_precision_processing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_extended_precision_processing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn extended_precision_processing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_extended_precision_processing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn intra_smoothing_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_smoothing_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn intra_smoothing_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_intra_smoothing_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn high_precision_offsets_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_high_precision_offsets_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn high_precision_offsets_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_high_precision_offsets_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn persistent_rice_adaptation_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_persistent_rice_adaptation_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn persistent_rice_adaptation_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_persistent_rice_adaptation_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cabac_bypass_alignment_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_bypass_alignment_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cabac_bypass_alignment_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cabac_bypass_alignment_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_scc_extension_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_scc_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_scc_extension_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_scc_extension_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_curr_pic_ref_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_curr_pic_ref_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_curr_pic_ref_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_curr_pic_ref_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn palette_mode_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_palette_mode_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn palette_mode_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_palette_mode_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sps_palette_predictor_initializers_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sps_palette_predictor_initializers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sps_palette_predictor_initializers_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sps_palette_predictor_initializers_present_flag_raw(
        this: *mut Self,
        val: u32,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn intra_boundary_filtering_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_intra_boundary_filtering_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn intra_boundary_filtering_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_intra_boundary_filtering_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sps_temporal_id_nesting_flag: u32,
        separate_colour_plane_flag: u32,
        conformance_window_flag: u32,
        sps_sub_layer_ordering_info_present_flag: u32,
        scaling_list_enabled_flag: u32,
        sps_scaling_list_data_present_flag: u32,
        amp_enabled_flag: u32,
        sample_adaptive_offset_enabled_flag: u32,
        pcm_enabled_flag: u32,
        pcm_loop_filter_disabled_flag: u32,
        long_term_ref_pics_present_flag: u32,
        sps_temporal_mvp_enabled_flag: u32,
        strong_intra_smoothing_enabled_flag: u32,
        vui_parameters_present_flag: u32,
        sps_extension_present_flag: u32,
        sps_range_extension_flag: u32,
        transform_skip_rotation_enabled_flag: u32,
        transform_skip_context_enabled_flag: u32,
        implicit_rdpcm_enabled_flag: u32,
        explicit_rdpcm_enabled_flag: u32,
        extended_precision_processing_flag: u32,
        intra_smoothing_disabled_flag: u32,
        high_precision_offsets_enabled_flag: u32,
        persistent_rice_adaptation_enabled_flag: u32,
        cabac_bypass_alignment_enabled_flag: u32,
        sps_scc_extension_flag: u32,
        sps_curr_pic_ref_enabled_flag: u32,
        palette_mode_enabled_flag: u32,
        sps_palette_predictor_initializers_present_flag: u32,
        intra_boundary_filtering_disabled_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let sps_temporal_id_nesting_flag: u32 =
                unsafe { ::std::mem::transmute(sps_temporal_id_nesting_flag) };
            sps_temporal_id_nesting_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let separate_colour_plane_flag: u32 =
                unsafe { ::std::mem::transmute(separate_colour_plane_flag) };
            separate_colour_plane_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let conformance_window_flag: u32 =
                unsafe { ::std::mem::transmute(conformance_window_flag) };
            conformance_window_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let sps_sub_layer_ordering_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_sub_layer_ordering_info_present_flag) };
            sps_sub_layer_ordering_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let scaling_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(scaling_list_enabled_flag) };
            scaling_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let sps_scaling_list_data_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_scaling_list_data_present_flag) };
            sps_scaling_list_data_present_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let amp_enabled_flag: u32 = unsafe { ::std::mem::transmute(amp_enabled_flag) };
            amp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let sample_adaptive_offset_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sample_adaptive_offset_enabled_flag) };
            sample_adaptive_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let pcm_enabled_flag: u32 = unsafe { ::std::mem::transmute(pcm_enabled_flag) };
            pcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let pcm_loop_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(pcm_loop_filter_disabled_flag) };
            pcm_loop_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let long_term_ref_pics_present_flag: u32 =
                unsafe { ::std::mem::transmute(long_term_ref_pics_present_flag) };
            long_term_ref_pics_present_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let sps_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sps_temporal_mvp_enabled_flag) };
            sps_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let strong_intra_smoothing_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(strong_intra_smoothing_enabled_flag) };
            strong_intra_smoothing_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let vui_parameters_present_flag: u32 =
                unsafe { ::std::mem::transmute(vui_parameters_present_flag) };
            vui_parameters_present_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let sps_extension_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_extension_present_flag) };
            sps_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sps_range_extension_flag: u32 =
                unsafe { ::std::mem::transmute(sps_range_extension_flag) };
            sps_range_extension_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let transform_skip_rotation_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_rotation_enabled_flag) };
            transform_skip_rotation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let transform_skip_context_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_context_enabled_flag) };
            transform_skip_context_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let implicit_rdpcm_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(implicit_rdpcm_enabled_flag) };
            implicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let explicit_rdpcm_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(explicit_rdpcm_enabled_flag) };
            explicit_rdpcm_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let extended_precision_processing_flag: u32 =
                unsafe { ::std::mem::transmute(extended_precision_processing_flag) };
            extended_precision_processing_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let intra_smoothing_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(intra_smoothing_disabled_flag) };
            intra_smoothing_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let high_precision_offsets_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(high_precision_offsets_enabled_flag) };
            high_precision_offsets_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let persistent_rice_adaptation_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(persistent_rice_adaptation_enabled_flag) };
            persistent_rice_adaptation_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let cabac_bypass_alignment_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cabac_bypass_alignment_enabled_flag) };
            cabac_bypass_alignment_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let sps_scc_extension_flag: u32 =
                unsafe { ::std::mem::transmute(sps_scc_extension_flag) };
            sps_scc_extension_flag as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let sps_curr_pic_ref_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sps_curr_pic_ref_enabled_flag) };
            sps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let palette_mode_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(palette_mode_enabled_flag) };
            palette_mode_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let sps_palette_predictor_initializers_present_flag: u32 =
                unsafe { ::std::mem::transmute(sps_palette_predictor_initializers_present_flag) };
            sps_palette_predictor_initializers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let intra_boundary_filtering_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(intra_boundary_filtering_disabled_flag) };
            intra_boundary_filtering_disabled_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265ShortTermRefPicSetFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ShortTermRefPicSetFlags"]
        [::std::mem::size_of::<StdVideoH265ShortTermRefPicSetFlags>() - 4usize];
    ["Alignment of StdVideoH265ShortTermRefPicSetFlags"]
        [::std::mem::align_of::<StdVideoH265ShortTermRefPicSetFlags>() - 4usize];
};
impl StdVideoH265ShortTermRefPicSetFlags {
    #[inline]
    pub fn inter_ref_pic_set_prediction_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_inter_ref_pic_set_prediction_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn inter_ref_pic_set_prediction_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_inter_ref_pic_set_prediction_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_rps_sign(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_rps_sign(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_rps_sign_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_rps_sign_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        inter_ref_pic_set_prediction_flag: u32,
        delta_rps_sign: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let inter_ref_pic_set_prediction_flag: u32 =
                unsafe { ::std::mem::transmute(inter_ref_pic_set_prediction_flag) };
            inter_ref_pic_set_prediction_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let delta_rps_sign: u32 = unsafe { ::std::mem::transmute(delta_rps_sign) };
            delta_rps_sign as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265ShortTermRefPicSet {
    pub flags: StdVideoH265ShortTermRefPicSetFlags,
    pub delta_idx_minus1: u32,
    pub use_delta_flag: u16,
    pub abs_delta_rps_minus1: u16,
    pub used_by_curr_pic_flag: u16,
    pub used_by_curr_pic_s0_flag: u16,
    pub used_by_curr_pic_s1_flag: u16,
    pub reserved1: u16,
    pub reserved2: u8,
    pub reserved3: u8,
    pub num_negative_pics: u8,
    pub num_positive_pics: u8,
    pub delta_poc_s0_minus1: [u16; 16usize],
    pub delta_poc_s1_minus1: [u16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265ShortTermRefPicSet"]
        [::std::mem::size_of::<StdVideoH265ShortTermRefPicSet>() - 88usize];
    ["Alignment of StdVideoH265ShortTermRefPicSet"]
        [::std::mem::align_of::<StdVideoH265ShortTermRefPicSet>() - 4usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::flags"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, flags) - 0usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::delta_idx_minus1"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, delta_idx_minus1) - 4usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::use_delta_flag"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, use_delta_flag) - 8usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::abs_delta_rps_minus1"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, abs_delta_rps_minus1) - 10usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::used_by_curr_pic_flag"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, used_by_curr_pic_flag) - 12usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::used_by_curr_pic_s0_flag"][::std::mem::offset_of!(
        StdVideoH265ShortTermRefPicSet,
        used_by_curr_pic_s0_flag
    ) - 14usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::used_by_curr_pic_s1_flag"][::std::mem::offset_of!(
        StdVideoH265ShortTermRefPicSet,
        used_by_curr_pic_s1_flag
    ) - 16usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::reserved1"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, reserved1) - 18usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::reserved2"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, reserved2) - 20usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::reserved3"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, reserved3) - 21usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::num_negative_pics"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, num_negative_pics) - 22usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::num_positive_pics"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, num_positive_pics) - 23usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::delta_poc_s0_minus1"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, delta_poc_s0_minus1) - 24usize];
    ["Offset of field: StdVideoH265ShortTermRefPicSet::delta_poc_s1_minus1"]
        [::std::mem::offset_of!(StdVideoH265ShortTermRefPicSet, delta_poc_s1_minus1) - 56usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265LongTermRefPicsSps {
    pub used_by_curr_pic_lt_sps_flag: u32,
    pub lt_ref_pic_poc_lsb_sps: [u32; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265LongTermRefPicsSps"]
        [::std::mem::size_of::<StdVideoH265LongTermRefPicsSps>() - 132usize];
    ["Alignment of StdVideoH265LongTermRefPicsSps"]
        [::std::mem::align_of::<StdVideoH265LongTermRefPicsSps>() - 4usize];
    ["Offset of field: StdVideoH265LongTermRefPicsSps::used_by_curr_pic_lt_sps_flag"][::std::mem::offset_of!(
        StdVideoH265LongTermRefPicsSps,
        used_by_curr_pic_lt_sps_flag
    ) - 0usize];
    ["Offset of field: StdVideoH265LongTermRefPicsSps::lt_ref_pic_poc_lsb_sps"]
        [::std::mem::offset_of!(StdVideoH265LongTermRefPicsSps, lt_ref_pic_poc_lsb_sps) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265SequenceParameterSet {
    pub flags: StdVideoH265SpsFlags,
    pub chroma_format_idc: StdVideoH265ChromaFormatIdc,
    pub pic_width_in_luma_samples: u32,
    pub pic_height_in_luma_samples: u32,
    pub sps_video_parameter_set_id: u8,
    pub sps_max_sub_layers_minus1: u8,
    pub sps_seq_parameter_set_id: u8,
    pub bit_depth_luma_minus8: u8,
    pub bit_depth_chroma_minus8: u8,
    pub log2_max_pic_order_cnt_lsb_minus4: u8,
    pub log2_min_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_luma_coding_block_size: u8,
    pub log2_min_luma_transform_block_size_minus2: u8,
    pub log2_diff_max_min_luma_transform_block_size: u8,
    pub max_transform_hierarchy_depth_inter: u8,
    pub max_transform_hierarchy_depth_intra: u8,
    pub num_short_term_ref_pic_sets: u8,
    pub num_long_term_ref_pics_sps: u8,
    pub pcm_sample_bit_depth_luma_minus1: u8,
    pub pcm_sample_bit_depth_chroma_minus1: u8,
    pub log2_min_pcm_luma_coding_block_size_minus3: u8,
    pub log2_diff_max_min_pcm_luma_coding_block_size: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub palette_max_size: u8,
    pub delta_palette_max_predictor_size: u8,
    pub motion_vector_resolution_control_idc: u8,
    pub sps_num_palette_predictor_initializers_minus1: u8,
    pub conf_win_left_offset: u32,
    pub conf_win_right_offset: u32,
    pub conf_win_top_offset: u32,
    pub conf_win_bottom_offset: u32,
    pub pProfileTierLevel: *const StdVideoH265ProfileTierLevel,
    pub pDecPicBufMgr: *const StdVideoH265DecPicBufMgr,
    pub pScalingLists: *const StdVideoH265ScalingLists,
    pub pShortTermRefPicSet: *const StdVideoH265ShortTermRefPicSet,
    pub pLongTermRefPicsSps: *const StdVideoH265LongTermRefPicsSps,
    pub pSequenceParameterSetVui: *const StdVideoH265SequenceParameterSetVui,
    pub pPredictorPaletteEntries: *const StdVideoH265PredictorPaletteEntries,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265SequenceParameterSet"]
        [::std::mem::size_of::<StdVideoH265SequenceParameterSet>() - 112usize];
    ["Alignment of StdVideoH265SequenceParameterSet"]
        [::std::mem::align_of::<StdVideoH265SequenceParameterSet>() - 8usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::flags"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::chroma_format_idc"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, chroma_format_idc) - 4usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pic_width_in_luma_samples"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pic_width_in_luma_samples
    ) - 8usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pic_height_in_luma_samples"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pic_height_in_luma_samples
    ) - 12usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_video_parameter_set_id"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        sps_video_parameter_set_id
    ) - 16usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_max_sub_layers_minus1"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        sps_max_sub_layers_minus1
    ) - 17usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_seq_parameter_set_id"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        sps_seq_parameter_set_id
    ) - 18usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::bit_depth_luma_minus8"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, bit_depth_luma_minus8) - 19usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::bit_depth_chroma_minus8"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        bit_depth_chroma_minus8
    ) - 20usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_max_pic_order_cnt_lsb_minus4"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        log2_max_pic_order_cnt_lsb_minus4
    )
        - 21usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_min_luma_coding_block_size_minus3"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        log2_min_luma_coding_block_size_minus3
    )
        - 22usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_diff_max_min_luma_coding_block_size"] [:: std :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_diff_max_min_luma_coding_block_size) - 23usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_min_luma_transform_block_size_minus2"] [:: std :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_min_luma_transform_block_size_minus2) - 24usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_diff_max_min_luma_transform_block_size"] [:: std :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_diff_max_min_luma_transform_block_size) - 25usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::max_transform_hierarchy_depth_inter"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        max_transform_hierarchy_depth_inter
    )
        - 26usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::max_transform_hierarchy_depth_intra"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        max_transform_hierarchy_depth_intra
    )
        - 27usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::num_short_term_ref_pic_sets"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        num_short_term_ref_pic_sets
    ) - 28usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::num_long_term_ref_pics_sps"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        num_long_term_ref_pics_sps
    ) - 29usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pcm_sample_bit_depth_luma_minus1"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pcm_sample_bit_depth_luma_minus1
    )
        - 30usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pcm_sample_bit_depth_chroma_minus1"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pcm_sample_bit_depth_chroma_minus1
    )
        - 31usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_min_pcm_luma_coding_block_size_minus3"] [:: std :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_min_pcm_luma_coding_block_size_minus3) - 32usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::log2_diff_max_min_pcm_luma_coding_block_size"] [:: std :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , log2_diff_max_min_pcm_luma_coding_block_size) - 33usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::reserved1"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, reserved1) - 34usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::reserved2"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, reserved2) - 35usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::palette_max_size"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, palette_max_size) - 36usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::delta_palette_max_predictor_size"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        delta_palette_max_predictor_size
    )
        - 37usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::motion_vector_resolution_control_idc"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        motion_vector_resolution_control_idc
    )
        - 38usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::sps_num_palette_predictor_initializers_minus1"] [:: std :: mem :: offset_of ! (StdVideoH265SequenceParameterSet , sps_num_palette_predictor_initializers_minus1) - 39usize] ;
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_left_offset"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, conf_win_left_offset) - 40usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_right_offset"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, conf_win_right_offset) - 44usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_top_offset"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, conf_win_top_offset) - 48usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::conf_win_bottom_offset"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        conf_win_bottom_offset
    ) - 52usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pProfileTierLevel"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, pProfileTierLevel) - 56usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pDecPicBufMgr"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, pDecPicBufMgr) - 64usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pScalingLists"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, pScalingLists) - 72usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pShortTermRefPicSet"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, pShortTermRefPicSet) - 80usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pLongTermRefPicsSps"]
        [::std::mem::offset_of!(StdVideoH265SequenceParameterSet, pLongTermRefPicsSps) - 88usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pSequenceParameterSetVui"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pSequenceParameterSetVui
    ) - 96usize];
    ["Offset of field: StdVideoH265SequenceParameterSet::pPredictorPaletteEntries"][::std::mem::offset_of!(
        StdVideoH265SequenceParameterSet,
        pPredictorPaletteEntries
    ) - 104usize];
};
impl Default for StdVideoH265SequenceParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoH265PpsFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265PpsFlags"][::std::mem::size_of::<StdVideoH265PpsFlags>() - 4usize];
    ["Alignment of StdVideoH265PpsFlags"][::std::mem::align_of::<StdVideoH265PpsFlags>() - 4usize];
};
impl StdVideoH265PpsFlags {
    #[inline]
    pub fn dependent_slice_segments_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segments_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dependent_slice_segments_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_dependent_slice_segments_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn output_flag_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_output_flag_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn output_flag_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_output_flag_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sign_data_hiding_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign_data_hiding_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sign_data_hiding_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sign_data_hiding_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cabac_init_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cabac_init_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cabac_init_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn constrained_intra_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_constrained_intra_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn constrained_intra_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_constrained_intra_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transform_skip_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transform_skip_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transform_skip_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transform_skip_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cu_qp_delta_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_qp_delta_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cu_qp_delta_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cu_qp_delta_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_slice_chroma_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_chroma_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_slice_chroma_qp_offsets_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_slice_chroma_qp_offsets_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weighted_pred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_pred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weighted_pred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weighted_pred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn weighted_bipred_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weighted_bipred_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn weighted_bipred_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_weighted_bipred_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn transquant_bypass_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_transquant_bypass_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn transquant_bypass_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_transquant_bypass_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tiles_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tiles_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn entropy_coding_sync_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entropy_coding_sync_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn entropy_coding_sync_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_entropy_coding_sync_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn uniform_spacing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uniform_spacing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn uniform_spacing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_uniform_spacing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn loop_filter_across_tiles_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_across_tiles_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_across_tiles_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_across_tiles_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_loop_filter_across_slices_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_loop_filter_across_slices_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_control_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_control_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_control_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_control_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_override_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_override_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_override_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_override_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_deblocking_filter_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_deblocking_filter_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_scaling_list_data_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_scaling_list_data_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_scaling_list_data_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_scaling_list_data_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lists_modification_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lists_modification_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lists_modification_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_lists_modification_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_segment_header_extension_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_segment_header_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_segment_header_extension_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_segment_header_extension_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_extension_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_extension_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_extension_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_extension_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cross_component_prediction_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cross_component_prediction_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cross_component_prediction_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cross_component_prediction_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn chroma_qp_offset_list_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_qp_offset_list_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_qp_offset_list_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_qp_offset_list_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_curr_pic_ref_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_curr_pic_ref_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_curr_pic_ref_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_curr_pic_ref_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn residual_adaptive_colour_transform_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_residual_adaptive_colour_transform_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn residual_adaptive_colour_transform_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_residual_adaptive_colour_transform_enabled_flag_raw(
        this: *mut Self,
        val: u32,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_slice_act_qp_offsets_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_slice_act_qp_offsets_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_slice_act_qp_offsets_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_slice_act_qp_offsets_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_palette_predictor_initializers_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_palette_predictor_initializers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_palette_predictor_initializers_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_palette_predictor_initializers_present_flag_raw(
        this: *mut Self,
        val: u32,
    ) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn monochrome_palette_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_monochrome_palette_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn monochrome_palette_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_monochrome_palette_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pps_range_extension_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pps_range_extension_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pps_range_extension_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pps_range_extension_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dependent_slice_segments_enabled_flag: u32,
        output_flag_present_flag: u32,
        sign_data_hiding_enabled_flag: u32,
        cabac_init_present_flag: u32,
        constrained_intra_pred_flag: u32,
        transform_skip_enabled_flag: u32,
        cu_qp_delta_enabled_flag: u32,
        pps_slice_chroma_qp_offsets_present_flag: u32,
        weighted_pred_flag: u32,
        weighted_bipred_flag: u32,
        transquant_bypass_enabled_flag: u32,
        tiles_enabled_flag: u32,
        entropy_coding_sync_enabled_flag: u32,
        uniform_spacing_flag: u32,
        loop_filter_across_tiles_enabled_flag: u32,
        pps_loop_filter_across_slices_enabled_flag: u32,
        deblocking_filter_control_present_flag: u32,
        deblocking_filter_override_enabled_flag: u32,
        pps_deblocking_filter_disabled_flag: u32,
        pps_scaling_list_data_present_flag: u32,
        lists_modification_present_flag: u32,
        slice_segment_header_extension_present_flag: u32,
        pps_extension_present_flag: u32,
        cross_component_prediction_enabled_flag: u32,
        chroma_qp_offset_list_enabled_flag: u32,
        pps_curr_pic_ref_enabled_flag: u32,
        residual_adaptive_colour_transform_enabled_flag: u32,
        pps_slice_act_qp_offsets_present_flag: u32,
        pps_palette_predictor_initializers_present_flag: u32,
        monochrome_palette_flag: u32,
        pps_range_extension_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dependent_slice_segments_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(dependent_slice_segments_enabled_flag) };
            dependent_slice_segments_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let output_flag_present_flag: u32 =
                unsafe { ::std::mem::transmute(output_flag_present_flag) };
            output_flag_present_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let sign_data_hiding_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(sign_data_hiding_enabled_flag) };
            sign_data_hiding_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let cabac_init_present_flag: u32 =
                unsafe { ::std::mem::transmute(cabac_init_present_flag) };
            cabac_init_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let constrained_intra_pred_flag: u32 =
                unsafe { ::std::mem::transmute(constrained_intra_pred_flag) };
            constrained_intra_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let transform_skip_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transform_skip_enabled_flag) };
            transform_skip_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cu_qp_delta_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cu_qp_delta_enabled_flag) };
            cu_qp_delta_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let pps_slice_chroma_qp_offsets_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_slice_chroma_qp_offsets_present_flag) };
            pps_slice_chroma_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weighted_pred_flag: u32 = unsafe { ::std::mem::transmute(weighted_pred_flag) };
            weighted_pred_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let weighted_bipred_flag: u32 = unsafe { ::std::mem::transmute(weighted_bipred_flag) };
            weighted_bipred_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let transquant_bypass_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(transquant_bypass_enabled_flag) };
            transquant_bypass_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let tiles_enabled_flag: u32 = unsafe { ::std::mem::transmute(tiles_enabled_flag) };
            tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let entropy_coding_sync_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(entropy_coding_sync_enabled_flag) };
            entropy_coding_sync_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let uniform_spacing_flag: u32 = unsafe { ::std::mem::transmute(uniform_spacing_flag) };
            uniform_spacing_flag as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let loop_filter_across_tiles_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(loop_filter_across_tiles_enabled_flag) };
            loop_filter_across_tiles_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let pps_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_loop_filter_across_slices_enabled_flag) };
            pps_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let deblocking_filter_control_present_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_control_present_flag) };
            deblocking_filter_control_present_flag as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let deblocking_filter_override_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_override_enabled_flag) };
            deblocking_filter_override_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let pps_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_deblocking_filter_disabled_flag) };
            pps_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let pps_scaling_list_data_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_scaling_list_data_present_flag) };
            pps_scaling_list_data_present_flag as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let lists_modification_present_flag: u32 =
                unsafe { ::std::mem::transmute(lists_modification_present_flag) };
            lists_modification_present_flag as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let slice_segment_header_extension_present_flag: u32 =
                unsafe { ::std::mem::transmute(slice_segment_header_extension_present_flag) };
            slice_segment_header_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let pps_extension_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_extension_present_flag) };
            pps_extension_present_flag as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let cross_component_prediction_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cross_component_prediction_enabled_flag) };
            cross_component_prediction_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let chroma_qp_offset_list_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(chroma_qp_offset_list_enabled_flag) };
            chroma_qp_offset_list_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let pps_curr_pic_ref_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(pps_curr_pic_ref_enabled_flag) };
            pps_curr_pic_ref_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let residual_adaptive_colour_transform_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(residual_adaptive_colour_transform_enabled_flag) };
            residual_adaptive_colour_transform_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let pps_slice_act_qp_offsets_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_slice_act_qp_offsets_present_flag) };
            pps_slice_act_qp_offsets_present_flag as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let pps_palette_predictor_initializers_present_flag: u32 =
                unsafe { ::std::mem::transmute(pps_palette_predictor_initializers_present_flag) };
            pps_palette_predictor_initializers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let monochrome_palette_flag: u32 =
                unsafe { ::std::mem::transmute(monochrome_palette_flag) };
            monochrome_palette_flag as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let pps_range_extension_flag: u32 =
                unsafe { ::std::mem::transmute(pps_range_extension_flag) };
            pps_range_extension_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoH265PictureParameterSet {
    pub flags: StdVideoH265PpsFlags,
    pub pps_pic_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub sps_video_parameter_set_id: u8,
    pub num_extra_slice_header_bits: u8,
    pub num_ref_idx_l0_default_active_minus1: u8,
    pub num_ref_idx_l1_default_active_minus1: u8,
    pub init_qp_minus26: i8,
    pub diff_cu_qp_delta_depth: u8,
    pub pps_cb_qp_offset: i8,
    pub pps_cr_qp_offset: i8,
    pub pps_beta_offset_div2: i8,
    pub pps_tc_offset_div2: i8,
    pub log2_parallel_merge_level_minus2: u8,
    pub log2_max_transform_skip_block_size_minus2: u8,
    pub diff_cu_chroma_qp_offset_depth: u8,
    pub chroma_qp_offset_list_len_minus1: u8,
    pub cb_qp_offset_list: [i8; 6usize],
    pub cr_qp_offset_list: [i8; 6usize],
    pub log2_sao_offset_scale_luma: u8,
    pub log2_sao_offset_scale_chroma: u8,
    pub pps_act_y_qp_offset_plus5: i8,
    pub pps_act_cb_qp_offset_plus5: i8,
    pub pps_act_cr_qp_offset_plus3: i8,
    pub pps_num_palette_predictor_initializers: u8,
    pub luma_bit_depth_entry_minus8: u8,
    pub chroma_bit_depth_entry_minus8: u8,
    pub num_tile_columns_minus1: u8,
    pub num_tile_rows_minus1: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub column_width_minus1: [u16; 19usize],
    pub row_height_minus1: [u16; 21usize],
    pub reserved3: u32,
    pub pScalingLists: *const StdVideoH265ScalingLists,
    pub pPredictorPaletteEntries: *const StdVideoH265PredictorPaletteEntries,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoH265PictureParameterSet"]
        [::std::mem::size_of::<StdVideoH265PictureParameterSet>() - 144usize];
    ["Alignment of StdVideoH265PictureParameterSet"]
        [::std::mem::align_of::<StdVideoH265PictureParameterSet>() - 8usize];
    ["Offset of field: StdVideoH265PictureParameterSet::flags"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, flags) - 0usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_pic_parameter_set_id"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_pic_parameter_set_id
    ) - 4usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_seq_parameter_set_id"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_seq_parameter_set_id
    ) - 5usize];
    ["Offset of field: StdVideoH265PictureParameterSet::sps_video_parameter_set_id"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        sps_video_parameter_set_id
    ) - 6usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_extra_slice_header_bits"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_extra_slice_header_bits
    ) - 7usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_ref_idx_l0_default_active_minus1"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_ref_idx_l0_default_active_minus1
    )
        - 8usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_ref_idx_l1_default_active_minus1"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_ref_idx_l1_default_active_minus1
    )
        - 9usize];
    ["Offset of field: StdVideoH265PictureParameterSet::init_qp_minus26"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, init_qp_minus26) - 10usize];
    ["Offset of field: StdVideoH265PictureParameterSet::diff_cu_qp_delta_depth"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, diff_cu_qp_delta_depth) - 11usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_cb_qp_offset"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, pps_cb_qp_offset) - 12usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_cr_qp_offset"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, pps_cr_qp_offset) - 13usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_beta_offset_div2"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, pps_beta_offset_div2) - 14usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_tc_offset_div2"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, pps_tc_offset_div2) - 15usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_parallel_merge_level_minus2"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        log2_parallel_merge_level_minus2
    )
        - 16usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_max_transform_skip_block_size_minus2"] [:: std :: mem :: offset_of ! (StdVideoH265PictureParameterSet , log2_max_transform_skip_block_size_minus2) - 17usize] ;
    ["Offset of field: StdVideoH265PictureParameterSet::diff_cu_chroma_qp_offset_depth"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        diff_cu_chroma_qp_offset_depth
    )
        - 18usize];
    ["Offset of field: StdVideoH265PictureParameterSet::chroma_qp_offset_list_len_minus1"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        chroma_qp_offset_list_len_minus1
    )
        - 19usize];
    ["Offset of field: StdVideoH265PictureParameterSet::cb_qp_offset_list"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, cb_qp_offset_list) - 20usize];
    ["Offset of field: StdVideoH265PictureParameterSet::cr_qp_offset_list"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, cr_qp_offset_list) - 26usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_sao_offset_scale_luma"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        log2_sao_offset_scale_luma
    ) - 32usize];
    ["Offset of field: StdVideoH265PictureParameterSet::log2_sao_offset_scale_chroma"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        log2_sao_offset_scale_chroma
    ) - 33usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_act_y_qp_offset_plus5"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_act_y_qp_offset_plus5
    ) - 34usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_act_cb_qp_offset_plus5"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_act_cb_qp_offset_plus5
    ) - 35usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_act_cr_qp_offset_plus3"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_act_cr_qp_offset_plus3
    ) - 36usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pps_num_palette_predictor_initializers"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pps_num_palette_predictor_initializers
    )
        - 37usize];
    ["Offset of field: StdVideoH265PictureParameterSet::luma_bit_depth_entry_minus8"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        luma_bit_depth_entry_minus8
    ) - 38usize];
    ["Offset of field: StdVideoH265PictureParameterSet::chroma_bit_depth_entry_minus8"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        chroma_bit_depth_entry_minus8
    )
        - 39usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_tile_columns_minus1"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        num_tile_columns_minus1
    ) - 40usize];
    ["Offset of field: StdVideoH265PictureParameterSet::num_tile_rows_minus1"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, num_tile_rows_minus1) - 41usize];
    ["Offset of field: StdVideoH265PictureParameterSet::reserved1"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, reserved1) - 42usize];
    ["Offset of field: StdVideoH265PictureParameterSet::reserved2"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, reserved2) - 43usize];
    ["Offset of field: StdVideoH265PictureParameterSet::column_width_minus1"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, column_width_minus1) - 44usize];
    ["Offset of field: StdVideoH265PictureParameterSet::row_height_minus1"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, row_height_minus1) - 82usize];
    ["Offset of field: StdVideoH265PictureParameterSet::reserved3"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, reserved3) - 124usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pScalingLists"]
        [::std::mem::offset_of!(StdVideoH265PictureParameterSet, pScalingLists) - 128usize];
    ["Offset of field: StdVideoH265PictureParameterSet::pPredictorPaletteEntries"][::std::mem::offset_of!(
        StdVideoH265PictureParameterSet,
        pPredictorPaletteEntries
    ) - 136usize];
};
impl Default for StdVideoH265PictureParameterSet {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH265WeightTableFlags {
    pub luma_weight_l0_flag: u16,
    pub chroma_weight_l0_flag: u16,
    pub luma_weight_l1_flag: u16,
    pub chroma_weight_l1_flag: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265WeightTableFlags"]
        [::std::mem::size_of::<StdVideoEncodeH265WeightTableFlags>() - 8usize];
    ["Alignment of StdVideoEncodeH265WeightTableFlags"]
        [::std::mem::align_of::<StdVideoEncodeH265WeightTableFlags>() - 2usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::luma_weight_l0_flag"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTableFlags, luma_weight_l0_flag) - 0usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::chroma_weight_l0_flag"][::std::mem::offset_of!(
        StdVideoEncodeH265WeightTableFlags,
        chroma_weight_l0_flag
    ) - 2usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::luma_weight_l1_flag"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTableFlags, luma_weight_l1_flag) - 4usize];
    ["Offset of field: StdVideoEncodeH265WeightTableFlags::chroma_weight_l1_flag"][::std::mem::offset_of!(
        StdVideoEncodeH265WeightTableFlags,
        chroma_weight_l1_flag
    ) - 6usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH265WeightTable {
    pub flags: StdVideoEncodeH265WeightTableFlags,
    pub luma_log2_weight_denom: u8,
    pub delta_chroma_log2_weight_denom: i8,
    pub delta_luma_weight_l0: [i8; 15usize],
    pub luma_offset_l0: [i8; 15usize],
    pub delta_chroma_weight_l0: [[i8; 2usize]; 15usize],
    pub delta_chroma_offset_l0: [[i8; 2usize]; 15usize],
    pub delta_luma_weight_l1: [i8; 15usize],
    pub luma_offset_l1: [i8; 15usize],
    pub delta_chroma_weight_l1: [[i8; 2usize]; 15usize],
    pub delta_chroma_offset_l1: [[i8; 2usize]; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265WeightTable"]
        [::std::mem::size_of::<StdVideoEncodeH265WeightTable>() - 190usize];
    ["Alignment of StdVideoEncodeH265WeightTable"]
        [::std::mem::align_of::<StdVideoEncodeH265WeightTable>() - 2usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::luma_log2_weight_denom"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, luma_log2_weight_denom) - 8usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_log2_weight_denom"][::std::mem::offset_of!(
        StdVideoEncodeH265WeightTable,
        delta_chroma_log2_weight_denom
    ) - 9usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_luma_weight_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_luma_weight_l0) - 10usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::luma_offset_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, luma_offset_l0) - 25usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_weight_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_weight_l0) - 40usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_offset_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_offset_l0) - 70usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_luma_weight_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_luma_weight_l1) - 100usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::luma_offset_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, luma_offset_l1) - 115usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_weight_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_weight_l1) - 130usize];
    ["Offset of field: StdVideoEncodeH265WeightTable::delta_chroma_offset_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH265WeightTable, delta_chroma_offset_l1) - 160usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH265SliceSegmentHeaderFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265SliceSegmentHeaderFlags"]
        [::std::mem::size_of::<StdVideoEncodeH265SliceSegmentHeaderFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265SliceSegmentHeaderFlags"]
        [::std::mem::align_of::<StdVideoEncodeH265SliceSegmentHeaderFlags>() - 4usize];
};
impl StdVideoEncodeH265SliceSegmentHeaderFlags {
    #[inline]
    pub fn first_slice_segment_in_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_first_slice_segment_in_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn first_slice_segment_in_pic_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_first_slice_segment_in_pic_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dependent_slice_segment_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dependent_slice_segment_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dependent_slice_segment_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_dependent_slice_segment_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_sao_luma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_luma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_sao_luma_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_sao_luma_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_sao_chroma_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_sao_chroma_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_sao_chroma_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_sao_chroma_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn num_ref_idx_active_override_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_num_ref_idx_active_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn num_ref_idx_active_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_num_ref_idx_active_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mvd_l1_zero_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mvd_l1_zero_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mvd_l1_zero_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mvd_l1_zero_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cabac_init_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cabac_init_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cabac_init_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cabac_init_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cu_chroma_qp_offset_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cu_chroma_qp_offset_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cu_chroma_qp_offset_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cu_chroma_qp_offset_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn deblocking_filter_override_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_deblocking_filter_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn deblocking_filter_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_deblocking_filter_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_deblocking_filter_disabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_deblocking_filter_disabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_deblocking_filter_disabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_deblocking_filter_disabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn collocated_from_l0_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_collocated_from_l0_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn collocated_from_l0_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_collocated_from_l0_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_loop_filter_across_slices_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_loop_filter_across_slices_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_loop_filter_across_slices_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_loop_filter_across_slices_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                20u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                20u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        first_slice_segment_in_pic_flag: u32,
        dependent_slice_segment_flag: u32,
        slice_sao_luma_flag: u32,
        slice_sao_chroma_flag: u32,
        num_ref_idx_active_override_flag: u32,
        mvd_l1_zero_flag: u32,
        cabac_init_flag: u32,
        cu_chroma_qp_offset_enabled_flag: u32,
        deblocking_filter_override_flag: u32,
        slice_deblocking_filter_disabled_flag: u32,
        collocated_from_l0_flag: u32,
        slice_loop_filter_across_slices_enabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let first_slice_segment_in_pic_flag: u32 =
                unsafe { ::std::mem::transmute(first_slice_segment_in_pic_flag) };
            first_slice_segment_in_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dependent_slice_segment_flag: u32 =
                unsafe { ::std::mem::transmute(dependent_slice_segment_flag) };
            dependent_slice_segment_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let slice_sao_luma_flag: u32 = unsafe { ::std::mem::transmute(slice_sao_luma_flag) };
            slice_sao_luma_flag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let slice_sao_chroma_flag: u32 =
                unsafe { ::std::mem::transmute(slice_sao_chroma_flag) };
            slice_sao_chroma_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let num_ref_idx_active_override_flag: u32 =
                unsafe { ::std::mem::transmute(num_ref_idx_active_override_flag) };
            num_ref_idx_active_override_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mvd_l1_zero_flag: u32 = unsafe { ::std::mem::transmute(mvd_l1_zero_flag) };
            mvd_l1_zero_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let cabac_init_flag: u32 = unsafe { ::std::mem::transmute(cabac_init_flag) };
            cabac_init_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let cu_chroma_qp_offset_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(cu_chroma_qp_offset_enabled_flag) };
            cu_chroma_qp_offset_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let deblocking_filter_override_flag: u32 =
                unsafe { ::std::mem::transmute(deblocking_filter_override_flag) };
            deblocking_filter_override_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let slice_deblocking_filter_disabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_deblocking_filter_disabled_flag) };
            slice_deblocking_filter_disabled_flag as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let collocated_from_l0_flag: u32 =
                unsafe { ::std::mem::transmute(collocated_from_l0_flag) };
            collocated_from_l0_flag as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let slice_loop_filter_across_slices_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_loop_filter_across_slices_enabled_flag) };
            slice_loop_filter_across_slices_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH265SliceSegmentHeader {
    pub flags: StdVideoEncodeH265SliceSegmentHeaderFlags,
    pub slice_type: StdVideoH265SliceType,
    pub slice_segment_address: u32,
    pub collocated_ref_idx: u8,
    pub MaxNumMergeCand: u8,
    pub slice_cb_qp_offset: i8,
    pub slice_cr_qp_offset: i8,
    pub slice_beta_offset_div2: i8,
    pub slice_tc_offset_div2: i8,
    pub slice_act_y_qp_offset: i8,
    pub slice_act_cb_qp_offset: i8,
    pub slice_act_cr_qp_offset: i8,
    pub slice_qp_delta: i8,
    pub reserved1: u16,
    pub pWeightTable: *const StdVideoEncodeH265WeightTable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265SliceSegmentHeader"]
        [::std::mem::size_of::<StdVideoEncodeH265SliceSegmentHeader>() - 32usize];
    ["Alignment of StdVideoEncodeH265SliceSegmentHeader"]
        [::std::mem::align_of::<StdVideoEncodeH265SliceSegmentHeader>() - 8usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_type"]
        [::std::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, slice_type) - 4usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_segment_address"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_segment_address
    ) - 8usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::collocated_ref_idx"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        collocated_ref_idx
    ) - 12usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::MaxNumMergeCand"]
        [::std::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, MaxNumMergeCand) - 13usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_cb_qp_offset"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_cb_qp_offset
    ) - 14usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_cr_qp_offset"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_cr_qp_offset
    ) - 15usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_beta_offset_div2"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_beta_offset_div2
    ) - 16usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_tc_offset_div2"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_tc_offset_div2
    ) - 17usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_act_y_qp_offset"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_act_y_qp_offset
    ) - 18usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_act_cb_qp_offset"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_act_cb_qp_offset
    ) - 19usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_act_cr_qp_offset"][::std::mem::offset_of!(
        StdVideoEncodeH265SliceSegmentHeader,
        slice_act_cr_qp_offset
    ) - 20usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::slice_qp_delta"]
        [::std::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, slice_qp_delta) - 21usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, reserved1) - 22usize];
    ["Offset of field: StdVideoEncodeH265SliceSegmentHeader::pWeightTable"]
        [::std::mem::offset_of!(StdVideoEncodeH265SliceSegmentHeader, pWeightTable) - 24usize];
};
impl Default for StdVideoEncodeH265SliceSegmentHeader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceListsInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceListsInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeH265ReferenceListsInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265ReferenceListsInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeH265ReferenceListsInfoFlags>() - 4usize];
};
impl StdVideoEncodeH265ReferenceListsInfoFlags {
    #[inline]
    pub fn ref_pic_list_modification_flag_l0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l0_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l0_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ref_pic_list_modification_flag_l1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ref_pic_list_modification_flag_l1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ref_pic_list_modification_flag_l1_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ref_pic_list_modification_flag_l1_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ref_pic_list_modification_flag_l0: u32,
        ref_pic_list_modification_flag_l1: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ref_pic_list_modification_flag_l0: u32 =
                unsafe { ::std::mem::transmute(ref_pic_list_modification_flag_l0) };
            ref_pic_list_modification_flag_l0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ref_pic_list_modification_flag_l1: u32 =
                unsafe { ::std::mem::transmute(ref_pic_list_modification_flag_l1) };
            ref_pic_list_modification_flag_l1 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceListsInfo {
    pub flags: StdVideoEncodeH265ReferenceListsInfoFlags,
    pub num_ref_idx_l0_active_minus1: u8,
    pub num_ref_idx_l1_active_minus1: u8,
    pub RefPicList0: [u8; 15usize],
    pub RefPicList1: [u8; 15usize],
    pub list_entry_l0: [u8; 15usize],
    pub list_entry_l1: [u8; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceListsInfo"]
        [::std::mem::size_of::<StdVideoEncodeH265ReferenceListsInfo>() - 68usize];
    ["Alignment of StdVideoEncodeH265ReferenceListsInfo"]
        [::std::mem::align_of::<StdVideoEncodeH265ReferenceListsInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::num_ref_idx_l0_active_minus1"][::std::mem::offset_of!(
        StdVideoEncodeH265ReferenceListsInfo,
        num_ref_idx_l0_active_minus1
    )
        - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::num_ref_idx_l1_active_minus1"][::std::mem::offset_of!(
        StdVideoEncodeH265ReferenceListsInfo,
        num_ref_idx_l1_active_minus1
    )
        - 5usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::RefPicList0"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, RefPicList0) - 6usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::RefPicList1"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, RefPicList1) - 21usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::list_entry_l0"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, list_entry_l0) - 36usize];
    ["Offset of field: StdVideoEncodeH265ReferenceListsInfo::list_entry_l1"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceListsInfo, list_entry_l1) - 51usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH265PictureInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265PictureInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeH265PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265PictureInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeH265PictureInfoFlags>() - 4usize];
};
impl StdVideoEncodeH265PictureInfoFlags {
    #[inline]
    pub fn is_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IrapPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IrapPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IrapPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IrapPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn discardable_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_discardable_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn discardable_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_discardable_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cross_layer_bla_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cross_layer_bla_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cross_layer_bla_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cross_layer_bla_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pic_output_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pic_output_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pic_output_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_pic_output_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn no_output_of_prior_pics_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_output_of_prior_pics_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn no_output_of_prior_pics_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_no_output_of_prior_pics_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn short_term_ref_pic_set_sps_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_short_term_ref_pic_set_sps_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn short_term_ref_pic_set_sps_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_short_term_ref_pic_set_sps_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn slice_temporal_mvp_enabled_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_slice_temporal_mvp_enabled_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn slice_temporal_mvp_enabled_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_slice_temporal_mvp_enabled_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                23u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                23u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        is_reference: u32,
        IrapPicFlag: u32,
        used_for_long_term_reference: u32,
        discardable_flag: u32,
        cross_layer_bla_flag: u32,
        pic_output_flag: u32,
        no_output_of_prior_pics_flag: u32,
        short_term_ref_pic_set_sps_flag: u32,
        slice_temporal_mvp_enabled_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let is_reference: u32 = unsafe { ::std::mem::transmute(is_reference) };
            is_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IrapPicFlag: u32 = unsafe { ::std::mem::transmute(IrapPicFlag) };
            IrapPicFlag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::std::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let discardable_flag: u32 = unsafe { ::std::mem::transmute(discardable_flag) };
            discardable_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let cross_layer_bla_flag: u32 = unsafe { ::std::mem::transmute(cross_layer_bla_flag) };
            cross_layer_bla_flag as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pic_output_flag: u32 = unsafe { ::std::mem::transmute(pic_output_flag) };
            pic_output_flag as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let no_output_of_prior_pics_flag: u32 =
                unsafe { ::std::mem::transmute(no_output_of_prior_pics_flag) };
            no_output_of_prior_pics_flag as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let short_term_ref_pic_set_sps_flag: u32 =
                unsafe { ::std::mem::transmute(short_term_ref_pic_set_sps_flag) };
            short_term_ref_pic_set_sps_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let slice_temporal_mvp_enabled_flag: u32 =
                unsafe { ::std::mem::transmute(slice_temporal_mvp_enabled_flag) };
            slice_temporal_mvp_enabled_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH265LongTermRefPics {
    pub num_long_term_sps: u8,
    pub num_long_term_pics: u8,
    pub lt_idx_sps: [u8; 32usize],
    pub poc_lsb_lt: [u8; 16usize],
    pub used_by_curr_pic_lt_flag: u16,
    pub delta_poc_msb_present_flag: [u8; 48usize],
    pub delta_poc_msb_cycle_lt: [u8; 48usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265LongTermRefPics"]
        [::std::mem::size_of::<StdVideoEncodeH265LongTermRefPics>() - 148usize];
    ["Alignment of StdVideoEncodeH265LongTermRefPics"]
        [::std::mem::align_of::<StdVideoEncodeH265LongTermRefPics>() - 2usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::num_long_term_sps"]
        [::std::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, num_long_term_sps) - 0usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::num_long_term_pics"]
        [::std::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, num_long_term_pics) - 1usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::lt_idx_sps"]
        [::std::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, lt_idx_sps) - 2usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::poc_lsb_lt"]
        [::std::mem::offset_of!(StdVideoEncodeH265LongTermRefPics, poc_lsb_lt) - 34usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::used_by_curr_pic_lt_flag"][::std::mem::offset_of!(
        StdVideoEncodeH265LongTermRefPics,
        used_by_curr_pic_lt_flag
    ) - 50usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::delta_poc_msb_present_flag"][::std::mem::offset_of!(
        StdVideoEncodeH265LongTermRefPics,
        delta_poc_msb_present_flag
    ) - 52usize];
    ["Offset of field: StdVideoEncodeH265LongTermRefPics::delta_poc_msb_cycle_lt"][::std::mem::offset_of!(
        StdVideoEncodeH265LongTermRefPics,
        delta_poc_msb_cycle_lt
    ) - 100usize];
};
impl Default for StdVideoEncodeH265LongTermRefPics {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH265PictureInfo {
    pub flags: StdVideoEncodeH265PictureInfoFlags,
    pub pic_type: StdVideoH265PictureType,
    pub sps_video_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub pps_pic_parameter_set_id: u8,
    pub short_term_ref_pic_set_idx: u8,
    pub PicOrderCntVal: i32,
    pub TemporalId: u8,
    pub reserved1: [u8; 7usize],
    pub pRefLists: *const StdVideoEncodeH265ReferenceListsInfo,
    pub pShortTermRefPicSet: *const StdVideoH265ShortTermRefPicSet,
    pub pLongTermRefPics: *const StdVideoEncodeH265LongTermRefPics,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265PictureInfo"]
        [::std::mem::size_of::<StdVideoEncodeH265PictureInfo>() - 48usize];
    ["Alignment of StdVideoEncodeH265PictureInfo"]
        [::std::mem::align_of::<StdVideoEncodeH265PictureInfo>() - 8usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pic_type"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, pic_type) - 4usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::sps_video_parameter_set_id"][::std::mem::offset_of!(
        StdVideoEncodeH265PictureInfo,
        sps_video_parameter_set_id
    ) - 8usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pps_seq_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, pps_seq_parameter_set_id) - 9usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pps_pic_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, pps_pic_parameter_set_id) - 10usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::short_term_ref_pic_set_idx"][::std::mem::offset_of!(
        StdVideoEncodeH265PictureInfo,
        short_term_ref_pic_set_idx
    ) - 11usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::PicOrderCntVal"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, PicOrderCntVal) - 12usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::TemporalId"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, TemporalId) - 16usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, reserved1) - 17usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pRefLists"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, pRefLists) - 24usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pShortTermRefPicSet"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, pShortTermRefPicSet) - 32usize];
    ["Offset of field: StdVideoEncodeH265PictureInfo::pLongTermRefPics"]
        [::std::mem::offset_of!(StdVideoEncodeH265PictureInfo, pLongTermRefPics) - 40usize];
};
impl Default for StdVideoEncodeH265PictureInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeH265ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeH265ReferenceInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeH265ReferenceInfoFlags>() - 4usize];
};
impl StdVideoEncodeH265ReferenceInfoFlags {
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_for_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unused_for_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_for_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_unused_for_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        used_for_long_term_reference: u32,
        unused_for_reference: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::std::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let unused_for_reference: u32 = unsafe { ::std::mem::transmute(unused_for_reference) };
            unused_for_reference as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeH265ReferenceInfo {
    pub flags: StdVideoEncodeH265ReferenceInfoFlags,
    pub pic_type: StdVideoH265PictureType,
    pub PicOrderCntVal: i32,
    pub TemporalId: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeH265ReferenceInfo"]
        [::std::mem::size_of::<StdVideoEncodeH265ReferenceInfo>() - 16usize];
    ["Alignment of StdVideoEncodeH265ReferenceInfo"]
        [::std::mem::align_of::<StdVideoEncodeH265ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::pic_type"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, pic_type) - 4usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::PicOrderCntVal"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, PicOrderCntVal) - 8usize];
    ["Offset of field: StdVideoEncodeH265ReferenceInfo::TemporalId"]
        [::std::mem::offset_of!(StdVideoEncodeH265ReferenceInfo, TemporalId) - 12usize];
};
impl Default for StdVideoEncodeH265ReferenceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 8 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 16 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 32 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 64 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 128 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 256 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 512 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_CU_QP_DIFF_WRAPAROUND_BIT_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 1024 ;
pub const VkVideoEncodeH265CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265CapabilityFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeH265CapabilityFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH265CapabilityFlagsKHR = VkFlags;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 8;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 16 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 32;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 64 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 128 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 256 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 512 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 1024 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 2048 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 4096 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 8192 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 16384 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 32768 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 65536 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 131072 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 262144 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 524288;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR : VkVideoEncodeH265StdFlagBitsKHR = 1048576 ;
pub const VkVideoEncodeH265StdFlagBitsKHR_VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeH265StdFlagBitsKHR = 2147483647;
pub type VkVideoEncodeH265StdFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH265StdFlagsKHR = VkFlags;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR:
    VkVideoEncodeH265CtbSizeFlagBitsKHR = 1;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR:
    VkVideoEncodeH265CtbSizeFlagBitsKHR = 2;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR:
    VkVideoEncodeH265CtbSizeFlagBitsKHR = 4;
pub const VkVideoEncodeH265CtbSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265CtbSizeFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeH265CtbSizeFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH265CtbSizeFlagsKHR = VkFlags;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 8 ;
pub const VkVideoEncodeH265TransformBlockSizeFlagBitsKHR_VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeH265TransformBlockSizeFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH265TransformBlockSizeFlagsKHR = VkFlags;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 1 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 2 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 4 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 8 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 16 ;
pub const VkVideoEncodeH265RateControlFlagBitsKHR_VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeH265RateControlFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeH265RateControlFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeH265RateControlFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoEncodeH265CapabilityFlagsKHR,
    pub maxLevelIdc: StdVideoH265LevelIdc,
    pub maxSliceSegmentCount: u32,
    pub maxTiles: VkExtent2D,
    pub ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR,
    pub transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR,
    pub maxPPictureL0ReferenceCount: u32,
    pub maxBPictureL0ReferenceCount: u32,
    pub maxL1ReferenceCount: u32,
    pub maxSubLayerCount: u32,
    pub expectDyadicTemporalSubLayerPattern: VkBool32,
    pub minQp: i32,
    pub maxQp: i32,
    pub prefersGopRemainingFrames: VkBool32,
    pub requiresGopRemainingFrames: VkBool32,
    pub stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265CapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265CapabilitiesKHR>() - 88usize];
    ["Alignment of VkVideoEncodeH265CapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265CapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxLevelIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxLevelIdc) - 20usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxSliceSegmentCount"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxSliceSegmentCount) - 24usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxTiles"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxTiles) - 28usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::ctbSizes"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, ctbSizes) - 36usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::transformBlockSizes"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, transformBlockSizes) - 40usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxPPictureL0ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        maxPPictureL0ReferenceCount
    ) - 44usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxBPictureL0ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        maxBPictureL0ReferenceCount
    ) - 48usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxL1ReferenceCount"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxL1ReferenceCount) - 52usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxSubLayerCount"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxSubLayerCount) - 56usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::expectDyadicTemporalSubLayerPattern"][::std::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        expectDyadicTemporalSubLayerPattern
    )
        - 60usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::minQp"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, minQp) - 64usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::maxQp"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, maxQp) - 68usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::prefersGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        prefersGopRemainingFrames
    ) - 72usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::requiresGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeH265CapabilitiesKHR,
        requiresGopRemainingFrames
    ) - 76usize];
    ["Offset of field: VkVideoEncodeH265CapabilitiesKHR::stdSyntaxFlags"]
        [::std::mem::offset_of!(VkVideoEncodeH265CapabilitiesKHR, stdSyntaxFlags) - 80usize];
};
impl Default for VkVideoEncodeH265CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265SessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useMaxLevelIdc: VkBool32,
    pub maxLevelIdc: StdVideoH265LevelIdc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265SessionCreateInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH265SessionCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265SessionCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::useMaxLevelIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, useMaxLevelIdc) - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionCreateInfoKHR::maxLevelIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionCreateInfoKHR, maxLevelIdc) - 20usize];
};
impl Default for VkVideoEncodeH265SessionCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVideoEncodeH265QpKHR {
    pub qpI: i32,
    pub qpP: i32,
    pub qpB: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265QpKHR"][::std::mem::size_of::<VkVideoEncodeH265QpKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH265QpKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265QpKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265QpKHR::qpI"]
        [::std::mem::offset_of!(VkVideoEncodeH265QpKHR, qpI) - 0usize];
    ["Offset of field: VkVideoEncodeH265QpKHR::qpP"]
        [::std::mem::offset_of!(VkVideoEncodeH265QpKHR, qpP) - 4usize];
    ["Offset of field: VkVideoEncodeH265QpKHR::qpB"]
        [::std::mem::offset_of!(VkVideoEncodeH265QpKHR, qpB) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265QualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR,
    pub preferredGopFrameCount: u32,
    pub preferredIdrPeriod: u32,
    pub preferredConsecutiveBFrameCount: u32,
    pub preferredSubLayerCount: u32,
    pub preferredConstantQp: VkVideoEncodeH265QpKHR,
    pub preferredMaxL0ReferenceCount: u32,
    pub preferredMaxL1ReferenceCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265QualityLevelPropertiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265QualityLevelPropertiesKHR>() - 56usize];
    ["Alignment of VkVideoEncodeH265QualityLevelPropertiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265QualityLevelPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265QualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265QualityLevelPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredRateControlFlags"][::std::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredRateControlFlags
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredGopFrameCount"][::std::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredGopFrameCount
    )
        - 20usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredIdrPeriod"][::std::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredIdrPeriod
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredConsecutiveBFrameCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeH265QualityLevelPropertiesKHR , preferredConsecutiveBFrameCount) - 28usize] ;
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredSubLayerCount"][::std::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredSubLayerCount
    )
        - 32usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredConstantQp"][::std::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredConstantQp
    )
        - 36usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredMaxL0ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredMaxL0ReferenceCount
    )
        - 48usize];
    ["Offset of field: VkVideoEncodeH265QualityLevelPropertiesKHR::preferredMaxL1ReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeH265QualityLevelPropertiesKHR,
        preferredMaxL1ReferenceCount
    )
        - 52usize];
};
impl Default for VkVideoEncodeH265QualityLevelPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdVPSCount: u32,
    pub pStdVPSs: *const StdVideoH265VideoParameterSet,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH265SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH265PictureParameterSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersAddInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265SessionParametersAddInfoKHR>() - 64usize];
    ["Alignment of VkVideoEncodeH265SessionParametersAddInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265SessionParametersAddInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::stdVPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersAddInfoKHR,
        stdVPSCount
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pStdVPSs"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pStdVPSs) - 24usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::stdSPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 32usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pStdSPSs"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pStdSPSs) - 40usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::stdPPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 48usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersAddInfoKHR::pStdPPSs"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersAddInfoKHR, pStdPPSs) - 56usize];
};
impl Default for VkVideoEncodeH265SessionParametersAddInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxStdVPSCount: u32,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoEncodeH265SessionParametersAddInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265SessionParametersCreateInfoKHR>() - 40usize];
    ["Alignment of VkVideoEncodeH265SessionParametersCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265SessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdVPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        maxStdVPSCount
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdSPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 20usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdPPSCount"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersCreateInfoKHR::pParametersAddInfo"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 32usize];
};
impl Default for VkVideoEncodeH265SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersGetInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub writeStdVPS: VkBool32,
    pub writeStdSPS: VkBool32,
    pub writeStdPPS: VkBool32,
    pub stdVPSId: u32,
    pub stdSPSId: u32,
    pub stdPPSId: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersGetInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265SessionParametersGetInfoKHR>() - 40usize];
    ["Alignment of VkVideoEncodeH265SessionParametersGetInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265SessionParametersGetInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::writeStdVPS"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersGetInfoKHR,
        writeStdVPS
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::writeStdSPS"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersGetInfoKHR,
        writeStdSPS
    ) - 20usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::writeStdPPS"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersGetInfoKHR,
        writeStdPPS
    ) - 24usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::stdVPSId"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, stdVPSId) - 28usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::stdSPSId"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, stdSPSId) - 32usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersGetInfoKHR::stdPPSId"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersGetInfoKHR, stdPPSId) - 36usize];
};
impl Default for VkVideoEncodeH265SessionParametersGetInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265SessionParametersFeedbackInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hasStdVPSOverrides: VkBool32,
    pub hasStdSPSOverrides: VkBool32,
    pub hasStdPPSOverrides: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265SessionParametersFeedbackInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265SessionParametersFeedbackInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH265SessionParametersFeedbackInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265SessionParametersFeedbackInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersFeedbackInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265SessionParametersFeedbackInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::hasStdVPSOverrides"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        hasStdVPSOverrides
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::hasStdSPSOverrides"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        hasStdSPSOverrides
    )
        - 20usize];
    ["Offset of field: VkVideoEncodeH265SessionParametersFeedbackInfoKHR::hasStdPPSOverrides"][::std::mem::offset_of!(
        VkVideoEncodeH265SessionParametersFeedbackInfoKHR,
        hasStdPPSOverrides
    )
        - 24usize];
};
impl Default for VkVideoEncodeH265SessionParametersFeedbackInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265NaluSliceSegmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub constantQp: i32,
    pub pStdSliceSegmentHeader: *const StdVideoEncodeH265SliceSegmentHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265NaluSliceSegmentInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265NaluSliceSegmentInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH265NaluSliceSegmentInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265NaluSliceSegmentInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265NaluSliceSegmentInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265NaluSliceSegmentInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::constantQp"]
        [::std::mem::offset_of!(VkVideoEncodeH265NaluSliceSegmentInfoKHR, constantQp) - 16usize];
    ["Offset of field: VkVideoEncodeH265NaluSliceSegmentInfoKHR::pStdSliceSegmentHeader"][::std::mem::offset_of!(
        VkVideoEncodeH265NaluSliceSegmentInfoKHR,
        pStdSliceSegmentHeader
    )
        - 24usize];
};
impl Default for VkVideoEncodeH265NaluSliceSegmentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub naluSliceSegmentEntryCount: u32,
    pub pNaluSliceSegmentEntries: *const VkVideoEncodeH265NaluSliceSegmentInfoKHR,
    pub pStdPictureInfo: *const StdVideoEncodeH265PictureInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265PictureInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265PictureInfoKHR>() - 40usize];
    ["Alignment of VkVideoEncodeH265PictureInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265PictureInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265PictureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::naluSliceSegmentEntryCount"][::std::mem::offset_of!(
        VkVideoEncodeH265PictureInfoKHR,
        naluSliceSegmentEntryCount
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::pNaluSliceSegmentEntries"][::std::mem::offset_of!(
        VkVideoEncodeH265PictureInfoKHR,
        pNaluSliceSegmentEntries
    ) - 24usize];
    ["Offset of field: VkVideoEncodeH265PictureInfoKHR::pStdPictureInfo"]
        [::std::mem::offset_of!(VkVideoEncodeH265PictureInfoKHR, pStdPictureInfo) - 32usize];
};
impl Default for VkVideoEncodeH265PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoEncodeH265ReferenceInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265DpbSlotInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265DpbSlotInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH265DpbSlotInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265DpbSlotInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265DpbSlotInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265DpbSlotInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265DpbSlotInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265DpbSlotInfoKHR::pStdReferenceInfo"]
        [::std::mem::offset_of!(VkVideoEncodeH265DpbSlotInfoKHR, pStdReferenceInfo) - 16usize];
};
impl Default for VkVideoEncodeH265DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfileIdc: StdVideoH265ProfileIdc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265ProfileInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265ProfileInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH265ProfileInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265ProfileInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265ProfileInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265ProfileInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265ProfileInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265ProfileInfoKHR::stdProfileIdc"]
        [::std::mem::offset_of!(VkVideoEncodeH265ProfileInfoKHR, stdProfileIdc) - 16usize];
};
impl Default for VkVideoEncodeH265ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265RateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoEncodeH265RateControlFlagsKHR,
    pub gopFrameCount: u32,
    pub idrPeriod: u32,
    pub consecutiveBFrameCount: u32,
    pub subLayerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265RateControlInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265RateControlInfoKHR>() - 40usize];
    ["Alignment of VkVideoEncodeH265RateControlInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265RateControlInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::gopFrameCount"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, gopFrameCount) - 20usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::idrPeriod"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, idrPeriod) - 24usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::consecutiveBFrameCount"][::std::mem::offset_of!(
        VkVideoEncodeH265RateControlInfoKHR,
        consecutiveBFrameCount
    ) - 28usize];
    ["Offset of field: VkVideoEncodeH265RateControlInfoKHR::subLayerCount"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlInfoKHR, subLayerCount) - 32usize];
};
impl Default for VkVideoEncodeH265RateControlInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVideoEncodeH265FrameSizeKHR {
    pub frameISize: u32,
    pub framePSize: u32,
    pub frameBSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265FrameSizeKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265FrameSizeKHR>() - 12usize];
    ["Alignment of VkVideoEncodeH265FrameSizeKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265FrameSizeKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeH265FrameSizeKHR::frameISize"]
        [::std::mem::offset_of!(VkVideoEncodeH265FrameSizeKHR, frameISize) - 0usize];
    ["Offset of field: VkVideoEncodeH265FrameSizeKHR::framePSize"]
        [::std::mem::offset_of!(VkVideoEncodeH265FrameSizeKHR, framePSize) - 4usize];
    ["Offset of field: VkVideoEncodeH265FrameSizeKHR::frameBSize"]
        [::std::mem::offset_of!(VkVideoEncodeH265FrameSizeKHR, frameBSize) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265RateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useMinQp: VkBool32,
    pub minQp: VkVideoEncodeH265QpKHR,
    pub useMaxQp: VkBool32,
    pub maxQp: VkVideoEncodeH265QpKHR,
    pub useMaxFrameSize: VkBool32,
    pub maxFrameSize: VkVideoEncodeH265FrameSizeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265RateControlLayerInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265RateControlLayerInfoKHR>() - 64usize];
    ["Alignment of VkVideoEncodeH265RateControlLayerInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265RateControlLayerInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::useMinQp"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, useMinQp) - 16usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::minQp"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, minQp) - 20usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::useMaxQp"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, useMaxQp) - 32usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::maxQp"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, maxQp) - 36usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::useMaxFrameSize"][::std::mem::offset_of!(
        VkVideoEncodeH265RateControlLayerInfoKHR,
        useMaxFrameSize
    ) - 48usize];
    ["Offset of field: VkVideoEncodeH265RateControlLayerInfoKHR::maxFrameSize"]
        [::std::mem::offset_of!(VkVideoEncodeH265RateControlLayerInfoKHR, maxFrameSize) - 52usize];
};
impl Default for VkVideoEncodeH265RateControlLayerInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265GopRemainingFrameInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useGopRemainingFrames: VkBool32,
    pub gopRemainingI: u32,
    pub gopRemainingP: u32,
    pub gopRemainingB: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265GopRemainingFrameInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265GopRemainingFrameInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeH265GopRemainingFrameInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265GopRemainingFrameInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265GopRemainingFrameInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265GopRemainingFrameInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::useGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        useGopRemainingFrames
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::gopRemainingI"][::std::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        gopRemainingI
    ) - 20usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::gopRemainingP"][::std::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        gopRemainingP
    ) - 24usize];
    ["Offset of field: VkVideoEncodeH265GopRemainingFrameInfoKHR::gopRemainingB"][::std::mem::offset_of!(
        VkVideoEncodeH265GopRemainingFrameInfoKHR,
        gopRemainingB
    ) - 28usize];
};
impl Default for VkVideoEncodeH265GopRemainingFrameInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const StdVideoDecodeH264FieldOrderCount_STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP:
    StdVideoDecodeH264FieldOrderCount = 0;
pub const StdVideoDecodeH264FieldOrderCount_STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM:
    StdVideoDecodeH264FieldOrderCount = 1;
pub const StdVideoDecodeH264FieldOrderCount_STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID:
    StdVideoDecodeH264FieldOrderCount = 2147483647;
pub const StdVideoDecodeH264FieldOrderCount_STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM:
    StdVideoDecodeH264FieldOrderCount = 2147483647;
pub type StdVideoDecodeH264FieldOrderCount = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH264PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264PictureInfoFlags"]
        [::std::mem::size_of::<StdVideoDecodeH264PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH264PictureInfoFlags"]
        [::std::mem::align_of::<StdVideoDecodeH264PictureInfoFlags>() - 4usize];
};
impl StdVideoDecodeH264PictureInfoFlags {
    #[inline]
    pub fn field_pic_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_field_pic_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn field_pic_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_field_pic_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_intra_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_intra_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IdrPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IdrPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bottom_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bottom_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bottom_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn complementary_field_pair(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_complementary_field_pair(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn complementary_field_pair_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_complementary_field_pair_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        field_pic_flag: u32,
        is_intra: u32,
        IdrPicFlag: u32,
        bottom_field_flag: u32,
        is_reference: u32,
        complementary_field_pair: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let field_pic_flag: u32 = unsafe { ::std::mem::transmute(field_pic_flag) };
            field_pic_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let is_intra: u32 = unsafe { ::std::mem::transmute(is_intra) };
            is_intra as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::std::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bottom_field_flag: u32 = unsafe { ::std::mem::transmute(bottom_field_flag) };
            bottom_field_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_reference: u32 = unsafe { ::std::mem::transmute(is_reference) };
            is_reference as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let complementary_field_pair: u32 =
                unsafe { ::std::mem::transmute(complementary_field_pair) };
            complementary_field_pair as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH264PictureInfo {
    pub flags: StdVideoDecodeH264PictureInfoFlags,
    pub seq_parameter_set_id: u8,
    pub pic_parameter_set_id: u8,
    pub reserved1: u8,
    pub reserved2: u8,
    pub frame_num: u16,
    pub idr_pic_id: u16,
    pub PicOrderCnt: [i32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264PictureInfo"]
        [::std::mem::size_of::<StdVideoDecodeH264PictureInfo>() - 20usize];
    ["Alignment of StdVideoDecodeH264PictureInfo"]
        [::std::mem::align_of::<StdVideoDecodeH264PictureInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::flags"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::seq_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, seq_parameter_set_id) - 4usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::pic_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, pic_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, reserved1) - 6usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::reserved2"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, reserved2) - 7usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::frame_num"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, frame_num) - 8usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::idr_pic_id"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, idr_pic_id) - 10usize];
    ["Offset of field: StdVideoDecodeH264PictureInfo::PicOrderCnt"]
        [::std::mem::offset_of!(StdVideoDecodeH264PictureInfo, PicOrderCnt) - 12usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH264ReferenceInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264ReferenceInfoFlags"]
        [::std::mem::size_of::<StdVideoDecodeH264ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH264ReferenceInfoFlags"]
        [::std::mem::align_of::<StdVideoDecodeH264ReferenceInfoFlags>() - 4usize];
};
impl StdVideoDecodeH264ReferenceInfoFlags {
    #[inline]
    pub fn top_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_top_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn top_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_top_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn bottom_field_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bottom_field_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bottom_field_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bottom_field_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_non_existing(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_non_existing(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_non_existing_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_non_existing_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        top_field_flag: u32,
        bottom_field_flag: u32,
        used_for_long_term_reference: u32,
        is_non_existing: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let top_field_flag: u32 = unsafe { ::std::mem::transmute(top_field_flag) };
            top_field_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bottom_field_flag: u32 = unsafe { ::std::mem::transmute(bottom_field_flag) };
            bottom_field_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::std::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_non_existing: u32 = unsafe { ::std::mem::transmute(is_non_existing) };
            is_non_existing as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH264ReferenceInfo {
    pub flags: StdVideoDecodeH264ReferenceInfoFlags,
    pub FrameNum: u16,
    pub reserved: u16,
    pub PicOrderCnt: [i32; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH264ReferenceInfo"]
        [::std::mem::size_of::<StdVideoDecodeH264ReferenceInfo>() - 16usize];
    ["Alignment of StdVideoDecodeH264ReferenceInfo"]
        [::std::mem::align_of::<StdVideoDecodeH264ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::flags"]
        [::std::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::FrameNum"]
        [::std::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, FrameNum) - 4usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::reserved"]
        [::std::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, reserved) - 6usize];
    ["Offset of field: StdVideoDecodeH264ReferenceInfo::PicOrderCnt"]
        [::std::mem::offset_of!(StdVideoDecodeH264ReferenceInfo, PicOrderCnt) - 8usize];
};
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 0 ;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 1 ;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 2 ;
pub const VkVideoDecodeH264PictureLayoutFlagBitsKHR_VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR : VkVideoDecodeH264PictureLayoutFlagBitsKHR = 2147483647 ;
pub type VkVideoDecodeH264PictureLayoutFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoDecodeH264PictureLayoutFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH264ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfileIdc: StdVideoH264ProfileIdc,
    pub pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264ProfileInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH264ProfileInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeH264ProfileInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH264ProfileInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::stdProfileIdc"]
        [::std::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, stdProfileIdc) - 16usize];
    ["Offset of field: VkVideoDecodeH264ProfileInfoKHR::pictureLayout"]
        [::std::mem::offset_of!(VkVideoDecodeH264ProfileInfoKHR, pictureLayout) - 20usize];
};
impl Default for VkVideoDecodeH264ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH264CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxLevelIdc: StdVideoH264LevelIdc,
    pub fieldOffsetGranularity: VkOffset2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264CapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoDecodeH264CapabilitiesKHR>() - 32usize];
    ["Alignment of VkVideoDecodeH264CapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoDecodeH264CapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH264CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH264CapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::maxLevelIdc"]
        [::std::mem::offset_of!(VkVideoDecodeH264CapabilitiesKHR, maxLevelIdc) - 16usize];
    ["Offset of field: VkVideoDecodeH264CapabilitiesKHR::fieldOffsetGranularity"][::std::mem::offset_of!(
        VkVideoDecodeH264CapabilitiesKHR,
        fieldOffsetGranularity
    ) - 20usize];
};
impl Default for VkVideoDecodeH264CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH264SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH264SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH264PictureParameterSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264SessionParametersAddInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH264SessionParametersAddInfoKHR>() - 48usize];
    ["Alignment of VkVideoDecodeH264SessionParametersAddInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH264SessionParametersAddInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::stdSPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH264SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 16usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::pStdSPSs"]
        [::std::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, pStdSPSs) - 24usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::stdPPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH264SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 32usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersAddInfoKHR::pStdPPSs"]
        [::std::mem::offset_of!(VkVideoDecodeH264SessionParametersAddInfoKHR, pStdPPSs) - 40usize];
};
impl Default for VkVideoDecodeH264SessionParametersAddInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH264SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoDecodeH264SessionParametersAddInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264SessionParametersCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH264SessionParametersCreateInfoKHR>() - 32usize];
    ["Alignment of VkVideoDecodeH264SessionParametersCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH264SessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH264SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH264SessionParametersCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::maxStdSPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH264SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 16usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::maxStdPPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH264SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 20usize];
    ["Offset of field: VkVideoDecodeH264SessionParametersCreateInfoKHR::pParametersAddInfo"][::std::mem::offset_of!(
        VkVideoDecodeH264SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 24usize];
};
impl Default for VkVideoDecodeH264SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH264PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdPictureInfo: *const StdVideoDecodeH264PictureInfo,
    pub sliceCount: u32,
    pub pSliceOffsets: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264PictureInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH264PictureInfoKHR>() - 40usize];
    ["Alignment of VkVideoDecodeH264PictureInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH264PictureInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::pStdPictureInfo"]
        [::std::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, pStdPictureInfo) - 16usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::sliceCount"]
        [::std::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, sliceCount) - 24usize];
    ["Offset of field: VkVideoDecodeH264PictureInfoKHR::pSliceOffsets"]
        [::std::mem::offset_of!(VkVideoDecodeH264PictureInfoKHR, pSliceOffsets) - 32usize];
};
impl Default for VkVideoDecodeH264PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH264DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeH264ReferenceInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264DpbSlotInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH264DpbSlotInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeH264DpbSlotInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH264DpbSlotInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH264DpbSlotInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH264DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264DpbSlotInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH264DpbSlotInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH264DpbSlotInfoKHR::pStdReferenceInfo"]
        [::std::mem::offset_of!(VkVideoDecodeH264DpbSlotInfoKHR, pStdReferenceInfo) - 16usize];
};
impl Default for VkVideoDecodeH264DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkRenderingFlagsKHR = VkRenderingFlags;
pub use self::VkRenderingFlagBits as VkRenderingFlagBitsKHR;
pub type VkRenderingInfoKHR = VkRenderingInfo;
pub type VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;
pub type VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;
pub type VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;
pub type VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;
pub type PFN_vkCmdBeginRenderingKHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pRenderingInfo: *const VkRenderingInfo),
>;
pub type PFN_vkCmdEndRenderingKHR =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
unsafe extern "system" {
    pub fn vkCmdBeginRenderingKHR(
        commandBuffer: VkCommandBuffer,
        pRenderingInfo: *const VkRenderingInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndRenderingKHR(commandBuffer: VkCommandBuffer);
}
pub type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub type VkFormatProperties2KHR = VkFormatProperties2;
pub type VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub type PFN_vkGetPhysicalDeviceFeatures2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    ),
>;
pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceFeatures2KHR(
        physicalDevice: VkPhysicalDevice,
        pFeatures: *mut VkPhysicalDeviceFeatures2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pProperties: *mut VkPhysicalDeviceProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        pFormatProperties: *mut VkFormatProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceImageFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pImageFormatInfo: *const VkPhysicalDeviceImageFormatInfo2,
        pImageFormatProperties: *mut VkImageFormatProperties2,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pQueueFamilyPropertyCount: *mut u32,
        pQueueFamilyProperties: *mut VkQueueFamilyProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceMemoryProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pFormatInfo: *const VkPhysicalDeviceSparseImageFormatInfo2,
        pPropertyCount: *mut u32,
        pProperties: *mut VkSparseImageFormatProperties2,
    );
}
pub type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub use self::VkPeerMemoryFeatureFlagBits as VkPeerMemoryFeatureFlagBitsKHR;
pub type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub use self::VkMemoryAllocateFlagBits as VkMemoryAllocateFlagBitsKHR;
pub type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub type PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    ),
>;
pub type PFN_vkCmdSetDeviceMaskKHR =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, deviceMask: u32)>;
pub type PFN_vkCmdDispatchBaseKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkGetDeviceGroupPeerMemoryFeaturesKHR(
        device: VkDevice,
        heapIndex: u32,
        localDeviceIndex: u32,
        remoteDeviceIndex: u32,
        pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32);
}
unsafe extern "system" {
    pub fn vkCmdDispatchBaseKHR(
        commandBuffer: VkCommandBuffer,
        baseGroupX: u32,
        baseGroupY: u32,
        baseGroupZ: u32,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
pub type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub type PFN_vkTrimCommandPoolKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    ),
>;
unsafe extern "system" {
    pub fn vkTrimCommandPoolKHR(
        device: VkDevice,
        commandPool: VkCommandPool,
        flags: VkCommandPoolTrimFlags,
    );
}
pub type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub type PFN_vkEnumeratePhysicalDeviceGroupsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkEnumeratePhysicalDeviceGroupsKHR(
        instance: VkInstance,
        pPhysicalDeviceGroupCount: *mut u32,
        pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties,
    ) -> VkResult;
}
pub type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub use self::VkExternalMemoryHandleTypeFlagBits as VkExternalMemoryHandleTypeFlagBitsKHR;
pub type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub use self::VkExternalMemoryFeatureFlagBits as VkExternalMemoryFeatureFlagBitsKHR;
pub type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub type PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalBufferInfo: *const VkPhysicalDeviceExternalBufferInfo,
        pExternalBufferProperties: *mut VkExternalBufferProperties,
    );
}
pub type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportMemoryFdInfoKHR"][::std::mem::size_of::<VkImportMemoryFdInfoKHR>() - 24usize];
    ["Alignment of VkImportMemoryFdInfoKHR"]
        [::std::mem::align_of::<VkImportMemoryFdInfoKHR>() - 8usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::sType"]
        [::std::mem::offset_of!(VkImportMemoryFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::pNext"]
        [::std::mem::offset_of!(VkImportMemoryFdInfoKHR, pNext) - 8usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::handleType"]
        [::std::mem::offset_of!(VkImportMemoryFdInfoKHR, handleType) - 16usize];
    ["Offset of field: VkImportMemoryFdInfoKHR::fd"]
        [::std::mem::offset_of!(VkImportMemoryFdInfoKHR, fd) - 20usize];
};
impl Default for VkImportMemoryFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryFdPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryTypeBits: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryFdPropertiesKHR"][::std::mem::size_of::<VkMemoryFdPropertiesKHR>() - 24usize];
    ["Alignment of VkMemoryFdPropertiesKHR"]
        [::std::mem::align_of::<VkMemoryFdPropertiesKHR>() - 8usize];
    ["Offset of field: VkMemoryFdPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkMemoryFdPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkMemoryFdPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkMemoryFdPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkMemoryFdPropertiesKHR::memoryTypeBits"]
        [::std::mem::offset_of!(VkMemoryFdPropertiesKHR, memoryTypeBits) - 16usize];
};
impl Default for VkMemoryFdPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryGetFdInfoKHR"][::std::mem::size_of::<VkMemoryGetFdInfoKHR>() - 32usize];
    ["Alignment of VkMemoryGetFdInfoKHR"][::std::mem::align_of::<VkMemoryGetFdInfoKHR>() - 8usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::sType"]
        [::std::mem::offset_of!(VkMemoryGetFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::pNext"]
        [::std::mem::offset_of!(VkMemoryGetFdInfoKHR, pNext) - 8usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::memory"]
        [::std::mem::offset_of!(VkMemoryGetFdInfoKHR, memory) - 16usize];
    ["Offset of field: VkMemoryGetFdInfoKHR::handleType"]
        [::std::mem::offset_of!(VkMemoryGetFdInfoKHR, handleType) - 24usize];
};
impl Default for VkMemoryGetFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetMemoryFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkMemoryGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
pub type PFN_vkGetMemoryFdPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        fd: ::std::os::raw::c_int,
        pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetMemoryFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkMemoryGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetMemoryFdPropertiesKHR(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        fd: ::std::os::raw::c_int,
        pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR,
    ) -> VkResult;
}
pub type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub use self::VkExternalSemaphoreHandleTypeFlagBits as VkExternalSemaphoreHandleTypeFlagBitsKHR;
pub type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub use self::VkExternalSemaphoreFeatureFlagBits as VkExternalSemaphoreFeatureFlagBitsKHR;
pub type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub type PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalSemaphoreInfo: *const VkPhysicalDeviceExternalSemaphoreInfo,
        pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties,
    );
}
pub type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub use self::VkSemaphoreImportFlagBits as VkSemaphoreImportFlagBitsKHR;
pub type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportSemaphoreFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub flags: VkSemaphoreImportFlags,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportSemaphoreFdInfoKHR"]
        [::std::mem::size_of::<VkImportSemaphoreFdInfoKHR>() - 40usize];
    ["Alignment of VkImportSemaphoreFdInfoKHR"]
        [::std::mem::align_of::<VkImportSemaphoreFdInfoKHR>() - 8usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::sType"]
        [::std::mem::offset_of!(VkImportSemaphoreFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::pNext"]
        [::std::mem::offset_of!(VkImportSemaphoreFdInfoKHR, pNext) - 8usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::semaphore"]
        [::std::mem::offset_of!(VkImportSemaphoreFdInfoKHR, semaphore) - 16usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::flags"]
        [::std::mem::offset_of!(VkImportSemaphoreFdInfoKHR, flags) - 24usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::handleType"]
        [::std::mem::offset_of!(VkImportSemaphoreFdInfoKHR, handleType) - 28usize];
    ["Offset of field: VkImportSemaphoreFdInfoKHR::fd"]
        [::std::mem::offset_of!(VkImportSemaphoreFdInfoKHR, fd) - 32usize];
};
impl Default for VkImportSemaphoreFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSemaphoreGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub semaphore: VkSemaphore,
    pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSemaphoreGetFdInfoKHR"][::std::mem::size_of::<VkSemaphoreGetFdInfoKHR>() - 32usize];
    ["Alignment of VkSemaphoreGetFdInfoKHR"]
        [::std::mem::align_of::<VkSemaphoreGetFdInfoKHR>() - 8usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::sType"]
        [::std::mem::offset_of!(VkSemaphoreGetFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::pNext"]
        [::std::mem::offset_of!(VkSemaphoreGetFdInfoKHR, pNext) - 8usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::semaphore"]
        [::std::mem::offset_of!(VkSemaphoreGetFdInfoKHR, semaphore) - 16usize];
    ["Offset of field: VkSemaphoreGetFdInfoKHR::handleType"]
        [::std::mem::offset_of!(VkSemaphoreGetFdInfoKHR, handleType) - 24usize];
};
impl Default for VkSemaphoreGetFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkImportSemaphoreFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetSemaphoreFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkSemaphoreGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkImportSemaphoreFdKHR(
        device: VkDevice,
        pImportSemaphoreFdInfo: *const VkImportSemaphoreFdInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetSemaphoreFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkSemaphoreGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
pub type VkPhysicalDevicePushDescriptorPropertiesKHR = VkPhysicalDevicePushDescriptorProperties;
pub type PFN_vkCmdPushDescriptorSetKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSetKHR(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
        descriptorWriteCount: u32,
        pDescriptorWrites: *const VkWriteDescriptorSet,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSetWithTemplateKHR(
        commandBuffer: VkCommandBuffer,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        layout: VkPipelineLayout,
        set: u32,
        pData: *const ::std::os::raw::c_void,
    );
}
pub type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkRectLayerKHR {
    pub offset: VkOffset2D,
    pub extent: VkExtent2D,
    pub layer: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRectLayerKHR"][::std::mem::size_of::<VkRectLayerKHR>() - 20usize];
    ["Alignment of VkRectLayerKHR"][::std::mem::align_of::<VkRectLayerKHR>() - 4usize];
    ["Offset of field: VkRectLayerKHR::offset"]
        [::std::mem::offset_of!(VkRectLayerKHR, offset) - 0usize];
    ["Offset of field: VkRectLayerKHR::extent"]
        [::std::mem::offset_of!(VkRectLayerKHR, extent) - 8usize];
    ["Offset of field: VkRectLayerKHR::layer"]
        [::std::mem::offset_of!(VkRectLayerKHR, layer) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionKHR {
    pub rectangleCount: u32,
    pub pRectangles: *const VkRectLayerKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentRegionKHR"][::std::mem::size_of::<VkPresentRegionKHR>() - 16usize];
    ["Alignment of VkPresentRegionKHR"][::std::mem::align_of::<VkPresentRegionKHR>() - 8usize];
    ["Offset of field: VkPresentRegionKHR::rectangleCount"]
        [::std::mem::offset_of!(VkPresentRegionKHR, rectangleCount) - 0usize];
    ["Offset of field: VkPresentRegionKHR::pRectangles"]
        [::std::mem::offset_of!(VkPresentRegionKHR, pRectangles) - 8usize];
};
impl Default for VkPresentRegionKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentRegionsKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pRegions: *const VkPresentRegionKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentRegionsKHR"][::std::mem::size_of::<VkPresentRegionsKHR>() - 32usize];
    ["Alignment of VkPresentRegionsKHR"][::std::mem::align_of::<VkPresentRegionsKHR>() - 8usize];
    ["Offset of field: VkPresentRegionsKHR::sType"]
        [::std::mem::offset_of!(VkPresentRegionsKHR, sType) - 0usize];
    ["Offset of field: VkPresentRegionsKHR::pNext"]
        [::std::mem::offset_of!(VkPresentRegionsKHR, pNext) - 8usize];
    ["Offset of field: VkPresentRegionsKHR::swapchainCount"]
        [::std::mem::offset_of!(VkPresentRegionsKHR, swapchainCount) - 16usize];
    ["Offset of field: VkPresentRegionsKHR::pRegions"]
        [::std::mem::offset_of!(VkPresentRegionsKHR, pRegions) - 24usize];
};
impl Default for VkPresentRegionsKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub use self::VkDescriptorUpdateTemplateType as VkDescriptorUpdateTemplateTypeKHR;
pub type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub type PFN_vkCreateDescriptorUpdateTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDescriptorUpdateTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateDescriptorSetWithTemplateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    ),
>;
unsafe extern "system" {
    pub fn vkCreateDescriptorUpdateTemplateKHR(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorUpdateTemplateCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDescriptorUpdateTemplateKHR(
        device: VkDevice,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkUpdateDescriptorSetWithTemplateKHR(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
        pData: *const ::std::os::raw::c_void,
    );
}
pub type VkPhysicalDeviceImagelessFramebufferFeaturesKHR =
    VkPhysicalDeviceImagelessFramebufferFeatures;
pub type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub type VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub type VkAttachmentReference2KHR = VkAttachmentReference2;
pub type VkSubpassDescription2KHR = VkSubpassDescription2;
pub type VkSubpassDependency2KHR = VkSubpassDependency2;
pub type VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub type VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub type PFN_vkCreateRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult,
>;
pub type PFN_vkCmdBeginRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    ),
>;
pub type PFN_vkCmdNextSubpass2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    ),
>;
pub type PFN_vkCmdEndRenderPass2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pSubpassEndInfo: *const VkSubpassEndInfo),
>;
unsafe extern "system" {
    pub fn vkCreateRenderPass2KHR(
        device: VkDevice,
        pCreateInfo: *const VkRenderPassCreateInfo2,
        pAllocator: *const VkAllocationCallbacks,
        pRenderPass: *mut VkRenderPass,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdBeginRenderPass2KHR(
        commandBuffer: VkCommandBuffer,
        pRenderPassBegin: *const VkRenderPassBeginInfo,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdNextSubpass2KHR(
        commandBuffer: VkCommandBuffer,
        pSubpassBeginInfo: *const VkSubpassBeginInfo,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndRenderPass2KHR(
        commandBuffer: VkCommandBuffer,
        pSubpassEndInfo: *const VkSubpassEndInfo,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sharedPresentSupportedUsageFlags: VkImageUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSharedPresentSurfaceCapabilitiesKHR"]
        [::std::mem::size_of::<VkSharedPresentSurfaceCapabilitiesKHR>() - 24usize];
    ["Alignment of VkSharedPresentSurfaceCapabilitiesKHR"]
        [::std::mem::align_of::<VkSharedPresentSurfaceCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkSharedPresentSurfaceCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkSharedPresentSurfaceCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkSharedPresentSurfaceCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkSharedPresentSurfaceCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkSharedPresentSurfaceCapabilitiesKHR::sharedPresentSupportedUsageFlags"][::std::mem::offset_of!(
        VkSharedPresentSurfaceCapabilitiesKHR,
        sharedPresentSupportedUsageFlags
    )
        - 16usize];
};
impl Default for VkSharedPresentSurfaceCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetSwapchainStatusKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) -> VkResult;
}
pub type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub use self::VkExternalFenceHandleTypeFlagBits as VkExternalFenceHandleTypeFlagBitsKHR;
pub type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub use self::VkExternalFenceFeatureFlagBits as VkExternalFenceFeatureFlagBitsKHR;
pub type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub type VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub type PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceExternalFencePropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pExternalFenceInfo: *const VkPhysicalDeviceExternalFenceInfo,
        pExternalFenceProperties: *mut VkExternalFenceProperties,
    );
}
pub type VkFenceImportFlagsKHR = VkFenceImportFlags;
pub use self::VkFenceImportFlagBits as VkFenceImportFlagBitsKHR;
pub type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportFenceFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fence: VkFence,
    pub flags: VkFenceImportFlags,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
    pub fd: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportFenceFdInfoKHR"][::std::mem::size_of::<VkImportFenceFdInfoKHR>() - 40usize];
    ["Alignment of VkImportFenceFdInfoKHR"]
        [::std::mem::align_of::<VkImportFenceFdInfoKHR>() - 8usize];
    ["Offset of field: VkImportFenceFdInfoKHR::sType"]
        [::std::mem::offset_of!(VkImportFenceFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkImportFenceFdInfoKHR::pNext"]
        [::std::mem::offset_of!(VkImportFenceFdInfoKHR, pNext) - 8usize];
    ["Offset of field: VkImportFenceFdInfoKHR::fence"]
        [::std::mem::offset_of!(VkImportFenceFdInfoKHR, fence) - 16usize];
    ["Offset of field: VkImportFenceFdInfoKHR::flags"]
        [::std::mem::offset_of!(VkImportFenceFdInfoKHR, flags) - 24usize];
    ["Offset of field: VkImportFenceFdInfoKHR::handleType"]
        [::std::mem::offset_of!(VkImportFenceFdInfoKHR, handleType) - 28usize];
    ["Offset of field: VkImportFenceFdInfoKHR::fd"]
        [::std::mem::offset_of!(VkImportFenceFdInfoKHR, fd) - 32usize];
};
impl Default for VkImportFenceFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFenceGetFdInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fence: VkFence,
    pub handleType: VkExternalFenceHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFenceGetFdInfoKHR"][::std::mem::size_of::<VkFenceGetFdInfoKHR>() - 32usize];
    ["Alignment of VkFenceGetFdInfoKHR"][::std::mem::align_of::<VkFenceGetFdInfoKHR>() - 8usize];
    ["Offset of field: VkFenceGetFdInfoKHR::sType"]
        [::std::mem::offset_of!(VkFenceGetFdInfoKHR, sType) - 0usize];
    ["Offset of field: VkFenceGetFdInfoKHR::pNext"]
        [::std::mem::offset_of!(VkFenceGetFdInfoKHR, pNext) - 8usize];
    ["Offset of field: VkFenceGetFdInfoKHR::fence"]
        [::std::mem::offset_of!(VkFenceGetFdInfoKHR, fence) - 16usize];
    ["Offset of field: VkFenceGetFdInfoKHR::handleType"]
        [::std::mem::offset_of!(VkFenceGetFdInfoKHR, handleType) - 24usize];
};
impl Default for VkFenceGetFdInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkImportFenceFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pImportFenceFdInfo: *const VkImportFenceFdInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetFenceFdKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pGetFdInfo: *const VkFenceGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkImportFenceFdKHR(
        device: VkDevice,
        pImportFenceFdInfo: *const VkImportFenceFdInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetFenceFdKHR(
        device: VkDevice,
        pGetFdInfo: *const VkFenceGetFdInfoKHR,
        pFd: *mut ::std::os::raw::c_int,
    ) -> VkResult;
}
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR:
    VkPerformanceCounterUnitKHR = 0;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR:
    VkPerformanceCounterUnitKHR = 1;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR:
    VkPerformanceCounterUnitKHR = 2;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR:
    VkPerformanceCounterUnitKHR = 3;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR:
    VkPerformanceCounterUnitKHR = 4;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR:
    VkPerformanceCounterUnitKHR = 5;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR:
    VkPerformanceCounterUnitKHR = 6;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR:
    VkPerformanceCounterUnitKHR = 7;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR:
    VkPerformanceCounterUnitKHR = 8;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR:
    VkPerformanceCounterUnitKHR = 9;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR:
    VkPerformanceCounterUnitKHR = 10;
pub const VkPerformanceCounterUnitKHR_VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR:
    VkPerformanceCounterUnitKHR = 2147483647;
pub type VkPerformanceCounterUnitKHR = ::std::os::raw::c_uint;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR:
    VkPerformanceCounterScopeKHR = 0;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR:
    VkPerformanceCounterScopeKHR = 1;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR:
    VkPerformanceCounterScopeKHR = 2;
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_COMMAND_BUFFER_KHR:
    VkPerformanceCounterScopeKHR = 0;
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_RENDER_PASS_KHR:
    VkPerformanceCounterScopeKHR = 1;
pub const VkPerformanceCounterScopeKHR_VK_QUERY_SCOPE_COMMAND_KHR: VkPerformanceCounterScopeKHR = 2;
pub const VkPerformanceCounterScopeKHR_VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR:
    VkPerformanceCounterScopeKHR = 2147483647;
pub type VkPerformanceCounterScopeKHR = ::std::os::raw::c_uint;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR:
    VkPerformanceCounterStorageKHR = 0;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR:
    VkPerformanceCounterStorageKHR = 1;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR:
    VkPerformanceCounterStorageKHR = 2;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR:
    VkPerformanceCounterStorageKHR = 3;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR:
    VkPerformanceCounterStorageKHR = 4;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR:
    VkPerformanceCounterStorageKHR = 5;
pub const VkPerformanceCounterStorageKHR_VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR:
    VkPerformanceCounterStorageKHR = 2147483647;
pub type VkPerformanceCounterStorageKHR = ::std::os::raw::c_uint;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 1 ;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2 ;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 1 ;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2 ;
pub const VkPerformanceCounterDescriptionFlagBitsKHR_VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR : VkPerformanceCounterDescriptionFlagBitsKHR = 2147483647 ;
pub type VkPerformanceCounterDescriptionFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub const VkAcquireProfilingLockFlagBitsKHR_VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR:
    VkAcquireProfilingLockFlagBitsKHR = 2147483647;
pub type VkAcquireProfilingLockFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkAcquireProfilingLockFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub performanceCounterQueryPools: VkBool32,
    pub performanceCounterMultipleQueryPools: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePerformanceQueryFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDevicePerformanceQueryFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDevicePerformanceQueryFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePerformanceQueryFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePerformanceQueryFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::performanceCounterQueryPools"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePerformanceQueryFeaturesKHR , performanceCounterQueryPools) - 16usize] ;
    ["Offset of field: VkPhysicalDevicePerformanceQueryFeaturesKHR::performanceCounterMultipleQueryPools"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePerformanceQueryFeaturesKHR , performanceCounterMultipleQueryPools) - 20usize] ;
};
impl Default for VkPhysicalDevicePerformanceQueryFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePerformanceQueryPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub allowCommandBufferQueryCopies: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePerformanceQueryPropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>() - 24usize];
    ["Alignment of VkPhysicalDevicePerformanceQueryPropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDevicePerformanceQueryPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePerformanceQueryPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePerformanceQueryPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePerformanceQueryPropertiesKHR::allowCommandBufferQueryCopies"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePerformanceQueryPropertiesKHR , allowCommandBufferQueryCopies) - 16usize] ;
};
impl Default for VkPhysicalDevicePerformanceQueryPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceCounterKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub unit: VkPerformanceCounterUnitKHR,
    pub scope: VkPerformanceCounterScopeKHR,
    pub storage: VkPerformanceCounterStorageKHR,
    pub uuid: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceCounterKHR"][::std::mem::size_of::<VkPerformanceCounterKHR>() - 48usize];
    ["Alignment of VkPerformanceCounterKHR"]
        [::std::mem::align_of::<VkPerformanceCounterKHR>() - 8usize];
    ["Offset of field: VkPerformanceCounterKHR::sType"]
        [::std::mem::offset_of!(VkPerformanceCounterKHR, sType) - 0usize];
    ["Offset of field: VkPerformanceCounterKHR::pNext"]
        [::std::mem::offset_of!(VkPerformanceCounterKHR, pNext) - 8usize];
    ["Offset of field: VkPerformanceCounterKHR::unit"]
        [::std::mem::offset_of!(VkPerformanceCounterKHR, unit) - 16usize];
    ["Offset of field: VkPerformanceCounterKHR::scope"]
        [::std::mem::offset_of!(VkPerformanceCounterKHR, scope) - 20usize];
    ["Offset of field: VkPerformanceCounterKHR::storage"]
        [::std::mem::offset_of!(VkPerformanceCounterKHR, storage) - 24usize];
    ["Offset of field: VkPerformanceCounterKHR::uuid"]
        [::std::mem::offset_of!(VkPerformanceCounterKHR, uuid) - 28usize];
};
impl Default for VkPerformanceCounterKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceCounterDescriptionKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkPerformanceCounterDescriptionFlagsKHR,
    pub name: [::std::os::raw::c_char; 256usize],
    pub category: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceCounterDescriptionKHR"]
        [::std::mem::size_of::<VkPerformanceCounterDescriptionKHR>() - 792usize];
    ["Alignment of VkPerformanceCounterDescriptionKHR"]
        [::std::mem::align_of::<VkPerformanceCounterDescriptionKHR>() - 8usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::sType"]
        [::std::mem::offset_of!(VkPerformanceCounterDescriptionKHR, sType) - 0usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::pNext"]
        [::std::mem::offset_of!(VkPerformanceCounterDescriptionKHR, pNext) - 8usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::flags"]
        [::std::mem::offset_of!(VkPerformanceCounterDescriptionKHR, flags) - 16usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::name"]
        [::std::mem::offset_of!(VkPerformanceCounterDescriptionKHR, name) - 20usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::category"]
        [::std::mem::offset_of!(VkPerformanceCounterDescriptionKHR, category) - 276usize];
    ["Offset of field: VkPerformanceCounterDescriptionKHR::description"]
        [::std::mem::offset_of!(VkPerformanceCounterDescriptionKHR, description) - 532usize];
};
impl Default for VkPerformanceCounterDescriptionKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolPerformanceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub queueFamilyIndex: u32,
    pub counterIndexCount: u32,
    pub pCounterIndices: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolPerformanceCreateInfoKHR"]
        [::std::mem::size_of::<VkQueryPoolPerformanceCreateInfoKHR>() - 32usize];
    ["Alignment of VkQueryPoolPerformanceCreateInfoKHR"]
        [::std::mem::align_of::<VkQueryPoolPerformanceCreateInfoKHR>() - 8usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::queueFamilyIndex"]
        [::std::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, queueFamilyIndex) - 16usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::counterIndexCount"]
        [::std::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, counterIndexCount) - 20usize];
    ["Offset of field: VkQueryPoolPerformanceCreateInfoKHR::pCounterIndices"]
        [::std::mem::offset_of!(VkQueryPoolPerformanceCreateInfoKHR, pCounterIndices) - 24usize];
};
impl Default for VkQueryPoolPerformanceCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceCounterResultKHR {
    pub int32: i32,
    pub int64: i64,
    pub uint32: u32,
    pub uint64: u64,
    pub float32: f32,
    pub float64: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceCounterResultKHR"]
        [::std::mem::size_of::<VkPerformanceCounterResultKHR>() - 8usize];
    ["Alignment of VkPerformanceCounterResultKHR"]
        [::std::mem::align_of::<VkPerformanceCounterResultKHR>() - 8usize];
    ["Offset of field: VkPerformanceCounterResultKHR::int32"]
        [::std::mem::offset_of!(VkPerformanceCounterResultKHR, int32) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::int64"]
        [::std::mem::offset_of!(VkPerformanceCounterResultKHR, int64) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::uint32"]
        [::std::mem::offset_of!(VkPerformanceCounterResultKHR, uint32) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::uint64"]
        [::std::mem::offset_of!(VkPerformanceCounterResultKHR, uint64) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::float32"]
        [::std::mem::offset_of!(VkPerformanceCounterResultKHR, float32) - 0usize];
    ["Offset of field: VkPerformanceCounterResultKHR::float64"]
        [::std::mem::offset_of!(VkPerformanceCounterResultKHR, float64) - 0usize];
};
impl Default for VkPerformanceCounterResultKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAcquireProfilingLockInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkAcquireProfilingLockFlagsKHR,
    pub timeout: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAcquireProfilingLockInfoKHR"]
        [::std::mem::size_of::<VkAcquireProfilingLockInfoKHR>() - 32usize];
    ["Alignment of VkAcquireProfilingLockInfoKHR"]
        [::std::mem::align_of::<VkAcquireProfilingLockInfoKHR>() - 8usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::sType"]
        [::std::mem::offset_of!(VkAcquireProfilingLockInfoKHR, sType) - 0usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::pNext"]
        [::std::mem::offset_of!(VkAcquireProfilingLockInfoKHR, pNext) - 8usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::flags"]
        [::std::mem::offset_of!(VkAcquireProfilingLockInfoKHR, flags) - 16usize];
    ["Offset of field: VkAcquireProfilingLockInfoKHR::timeout"]
        [::std::mem::offset_of!(VkAcquireProfilingLockInfoKHR, timeout) - 24usize];
};
impl Default for VkAcquireProfilingLockInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceQuerySubmitInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub counterPassIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceQuerySubmitInfoKHR"]
        [::std::mem::size_of::<VkPerformanceQuerySubmitInfoKHR>() - 24usize];
    ["Alignment of VkPerformanceQuerySubmitInfoKHR"]
        [::std::mem::align_of::<VkPerformanceQuerySubmitInfoKHR>() - 8usize];
    ["Offset of field: VkPerformanceQuerySubmitInfoKHR::sType"]
        [::std::mem::offset_of!(VkPerformanceQuerySubmitInfoKHR, sType) - 0usize];
    ["Offset of field: VkPerformanceQuerySubmitInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPerformanceQuerySubmitInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPerformanceQuerySubmitInfoKHR::counterPassIndex"]
        [::std::mem::offset_of!(VkPerformanceQuerySubmitInfoKHR, counterPassIndex) - 16usize];
};
impl Default for VkPerformanceQuerySubmitInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR =
    ::std::option::Option<
        unsafe extern "system" fn(
            physicalDevice: VkPhysicalDevice,
            queueFamilyIndex: u32,
            pCounterCount: *mut u32,
            pCounters: *mut VkPerformanceCounterKHR,
            pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR,
        ) -> VkResult,
    >;
pub type PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR,
        pNumPasses: *mut u32,
    ),
>;
pub type PFN_vkAcquireProfilingLockKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkAcquireProfilingLockInfoKHR) -> VkResult,
>;
pub type PFN_vkReleaseProfilingLockKHR =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice)>;
unsafe extern "system" {
    pub fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(
        physicalDevice: VkPhysicalDevice,
        queueFamilyIndex: u32,
        pCounterCount: *mut u32,
        pCounters: *mut VkPerformanceCounterKHR,
        pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(
        physicalDevice: VkPhysicalDevice,
        pPerformanceQueryCreateInfo: *const VkQueryPoolPerformanceCreateInfoKHR,
        pNumPasses: *mut u32,
    );
}
unsafe extern "system" {
    pub fn vkAcquireProfilingLockKHR(
        device: VkDevice,
        pInfo: *const VkAcquireProfilingLockInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkReleaseProfilingLockKHR(device: VkDevice);
}
pub use self::VkPointClippingBehavior as VkPointClippingBehaviorKHR;
pub use self::VkTessellationDomainOrigin as VkTessellationDomainOriginKHR;
pub type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub type VkRenderPassInputAttachmentAspectCreateInfoKHR =
    VkRenderPassInputAttachmentAspectCreateInfo;
pub type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub type VkPipelineTessellationDomainOriginStateCreateInfoKHR =
    VkPipelineTessellationDomainOriginStateCreateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub surface: VkSurfaceKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSurfaceInfo2KHR"]
        [::std::mem::size_of::<VkPhysicalDeviceSurfaceInfo2KHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceSurfaceInfo2KHR"]
        [::std::mem::align_of::<VkPhysicalDeviceSurfaceInfo2KHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSurfaceInfo2KHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSurfaceInfo2KHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSurfaceInfo2KHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSurfaceInfo2KHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSurfaceInfo2KHR::surface"]
        [::std::mem::offset_of!(VkPhysicalDeviceSurfaceInfo2KHR, surface) - 16usize];
};
impl Default for VkPhysicalDeviceSurfaceInfo2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub surfaceCapabilities: VkSurfaceCapabilitiesKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilities2KHR"]
        [::std::mem::size_of::<VkSurfaceCapabilities2KHR>() - 72usize];
    ["Alignment of VkSurfaceCapabilities2KHR"]
        [::std::mem::align_of::<VkSurfaceCapabilities2KHR>() - 8usize];
    ["Offset of field: VkSurfaceCapabilities2KHR::sType"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2KHR, sType) - 0usize];
    ["Offset of field: VkSurfaceCapabilities2KHR::pNext"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2KHR, pNext) - 8usize];
    ["Offset of field: VkSurfaceCapabilities2KHR::surfaceCapabilities"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2KHR, surfaceCapabilities) - 16usize];
};
impl Default for VkSurfaceCapabilities2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceFormat2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub surfaceFormat: VkSurfaceFormatKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceFormat2KHR"][::std::mem::size_of::<VkSurfaceFormat2KHR>() - 24usize];
    ["Alignment of VkSurfaceFormat2KHR"][::std::mem::align_of::<VkSurfaceFormat2KHR>() - 8usize];
    ["Offset of field: VkSurfaceFormat2KHR::sType"]
        [::std::mem::offset_of!(VkSurfaceFormat2KHR, sType) - 0usize];
    ["Offset of field: VkSurfaceFormat2KHR::pNext"]
        [::std::mem::offset_of!(VkSurfaceFormat2KHR, pNext) - 8usize];
    ["Offset of field: VkSurfaceFormat2KHR::surfaceFormat"]
        [::std::mem::offset_of!(VkSurfaceFormat2KHR, surfaceFormat) - 16usize];
};
impl Default for VkSurfaceFormat2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormat2KHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceFormats2KHR(
        physicalDevice: VkPhysicalDevice,
        pSurfaceInfo: *const VkPhysicalDeviceSurfaceInfo2KHR,
        pSurfaceFormatCount: *mut u32,
        pSurfaceFormats: *mut VkSurfaceFormat2KHR,
    ) -> VkResult;
}
pub type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayProperties: VkDisplayPropertiesKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayProperties2KHR"][::std::mem::size_of::<VkDisplayProperties2KHR>() - 64usize];
    ["Alignment of VkDisplayProperties2KHR"]
        [::std::mem::align_of::<VkDisplayProperties2KHR>() - 8usize];
    ["Offset of field: VkDisplayProperties2KHR::sType"]
        [::std::mem::offset_of!(VkDisplayProperties2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayProperties2KHR::pNext"]
        [::std::mem::offset_of!(VkDisplayProperties2KHR, pNext) - 8usize];
    ["Offset of field: VkDisplayProperties2KHR::displayProperties"]
        [::std::mem::offset_of!(VkDisplayProperties2KHR, displayProperties) - 16usize];
};
impl Default for VkDisplayProperties2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayPlaneProperties: VkDisplayPlanePropertiesKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneProperties2KHR"]
        [::std::mem::size_of::<VkDisplayPlaneProperties2KHR>() - 32usize];
    ["Alignment of VkDisplayPlaneProperties2KHR"]
        [::std::mem::align_of::<VkDisplayPlaneProperties2KHR>() - 8usize];
    ["Offset of field: VkDisplayPlaneProperties2KHR::sType"]
        [::std::mem::offset_of!(VkDisplayPlaneProperties2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayPlaneProperties2KHR::pNext"]
        [::std::mem::offset_of!(VkDisplayPlaneProperties2KHR, pNext) - 8usize];
    ["Offset of field: VkDisplayPlaneProperties2KHR::displayPlaneProperties"]
        [::std::mem::offset_of!(VkDisplayPlaneProperties2KHR, displayPlaneProperties) - 16usize];
};
impl Default for VkDisplayPlaneProperties2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeProperties2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub displayModeProperties: VkDisplayModePropertiesKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeProperties2KHR"]
        [::std::mem::size_of::<VkDisplayModeProperties2KHR>() - 40usize];
    ["Alignment of VkDisplayModeProperties2KHR"]
        [::std::mem::align_of::<VkDisplayModeProperties2KHR>() - 8usize];
    ["Offset of field: VkDisplayModeProperties2KHR::sType"]
        [::std::mem::offset_of!(VkDisplayModeProperties2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayModeProperties2KHR::pNext"]
        [::std::mem::offset_of!(VkDisplayModeProperties2KHR, pNext) - 8usize];
    ["Offset of field: VkDisplayModeProperties2KHR::displayModeProperties"]
        [::std::mem::offset_of!(VkDisplayModeProperties2KHR, displayModeProperties) - 16usize];
};
impl Default for VkDisplayModeProperties2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneInfo2KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub mode: VkDisplayModeKHR,
    pub planeIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneInfo2KHR"][::std::mem::size_of::<VkDisplayPlaneInfo2KHR>() - 32usize];
    ["Alignment of VkDisplayPlaneInfo2KHR"]
        [::std::mem::align_of::<VkDisplayPlaneInfo2KHR>() - 8usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::sType"]
        [::std::mem::offset_of!(VkDisplayPlaneInfo2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::pNext"]
        [::std::mem::offset_of!(VkDisplayPlaneInfo2KHR, pNext) - 8usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::mode"]
        [::std::mem::offset_of!(VkDisplayPlaneInfo2KHR, mode) - 16usize];
    ["Offset of field: VkDisplayPlaneInfo2KHR::planeIndex"]
        [::std::mem::offset_of!(VkDisplayPlaneInfo2KHR, planeIndex) - 24usize];
};
impl Default for VkDisplayPlaneInfo2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPlaneCapabilities2KHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub capabilities: VkDisplayPlaneCapabilitiesKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPlaneCapabilities2KHR"]
        [::std::mem::size_of::<VkDisplayPlaneCapabilities2KHR>() - 88usize];
    ["Alignment of VkDisplayPlaneCapabilities2KHR"]
        [::std::mem::align_of::<VkDisplayPlaneCapabilities2KHR>() - 8usize];
    ["Offset of field: VkDisplayPlaneCapabilities2KHR::sType"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilities2KHR, sType) - 0usize];
    ["Offset of field: VkDisplayPlaneCapabilities2KHR::pNext"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilities2KHR, pNext) - 8usize];
    ["Offset of field: VkDisplayPlaneCapabilities2KHR::capabilities"]
        [::std::mem::offset_of!(VkDisplayPlaneCapabilities2KHR, capabilities) - 16usize];
};
impl Default for VkDisplayPlaneCapabilities2KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlaneProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayModeProperties2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModeProperties2KHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDisplayPlaneCapabilities2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR,
        pCapabilities: *mut VkDisplayPlaneCapabilities2KHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceDisplayProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayProperties2KHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayPlaneProperties2KHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDisplayModeProperties2KHR(
        physicalDevice: VkPhysicalDevice,
        display: VkDisplayKHR,
        pPropertyCount: *mut u32,
        pProperties: *mut VkDisplayModeProperties2KHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDisplayPlaneCapabilities2KHR(
        physicalDevice: VkPhysicalDevice,
        pDisplayPlaneInfo: *const VkDisplayPlaneInfo2KHR,
        pCapabilities: *mut VkDisplayPlaneCapabilities2KHR,
    ) -> VkResult;
}
pub type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub type PFN_vkGetImageMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetBufferMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetImageSparseMemoryRequirements2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
unsafe extern "system" {
    pub fn vkGetImageMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkImageMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetBufferMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkBufferMemoryRequirementsInfo2,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetImageSparseMemoryRequirements2KHR(
        device: VkDevice,
        pInfo: *const VkImageSparseMemoryRequirementsInfo2,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
pub type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub use self::VkChromaLocation as VkChromaLocationKHR;
pub use self::VkSamplerYcbcrModelConversion as VkSamplerYcbcrModelConversionKHR;
pub use self::VkSamplerYcbcrRange as VkSamplerYcbcrRangeKHR;
pub type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR =
    VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub type VkSamplerYcbcrConversionImageFormatPropertiesKHR =
    VkSamplerYcbcrConversionImageFormatProperties;
pub type PFN_vkCreateSamplerYcbcrConversionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult,
>;
pub type PFN_vkDestroySamplerYcbcrConversionKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
unsafe extern "system" {
    pub fn vkCreateSamplerYcbcrConversionKHR(
        device: VkDevice,
        pCreateInfo: *const VkSamplerYcbcrConversionCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pYcbcrConversion: *mut VkSamplerYcbcrConversion,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroySamplerYcbcrConversionKHR(
        device: VkDevice,
        ycbcrConversion: VkSamplerYcbcrConversion,
        pAllocator: *const VkAllocationCallbacks,
    );
}
pub type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub type PFN_vkBindBufferMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkBindImageMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkBindBufferMemory2KHR(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindBufferMemoryInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkBindImageMemory2KHR(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindImageMemoryInfo,
    ) -> VkResult;
}
pub type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub type PFN_vkGetDescriptorSetLayoutSupportKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    ),
>;
unsafe extern "system" {
    pub fn vkGetDescriptorSetLayoutSupportKHR(
        device: VkDevice,
        pCreateInfo: *const VkDescriptorSetLayoutCreateInfo,
        pSupport: *mut VkDescriptorSetLayoutSupport,
    );
}
pub type PFN_vkCmdDrawIndirectCountKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdDrawIndirectCountKHR(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawIndexedIndirectCountKHR(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
pub type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR =
    VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderClockFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupClock: VkBool32,
    pub shaderDeviceClock: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderClockFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderClockFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderClockFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderClockFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderClockFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderClockFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::shaderSubgroupClock"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderClockFeaturesKHR,
        shaderSubgroupClock
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderClockFeaturesKHR::shaderDeviceClock"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderClockFeaturesKHR,
        shaderDeviceClock
    ) - 20usize];
};
impl Default for VkPhysicalDeviceShaderClockFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH265PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265PictureInfoFlags"]
        [::std::mem::size_of::<StdVideoDecodeH265PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH265PictureInfoFlags"]
        [::std::mem::align_of::<StdVideoDecodeH265PictureInfoFlags>() - 4usize];
};
impl StdVideoDecodeH265PictureInfoFlags {
    #[inline]
    pub fn IrapPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IrapPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IrapPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IrapPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IdrPicFlag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IdrPicFlag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IdrPicFlag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IdrPicFlag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsReference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsReference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsReference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IsReference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn short_term_ref_pic_set_sps_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_short_term_ref_pic_set_sps_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn short_term_ref_pic_set_sps_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_short_term_ref_pic_set_sps_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        IrapPicFlag: u32,
        IdrPicFlag: u32,
        IsReference: u32,
        short_term_ref_pic_set_sps_flag: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let IrapPicFlag: u32 = unsafe { ::std::mem::transmute(IrapPicFlag) };
            IrapPicFlag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IdrPicFlag: u32 = unsafe { ::std::mem::transmute(IdrPicFlag) };
            IdrPicFlag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IsReference: u32 = unsafe { ::std::mem::transmute(IsReference) };
            IsReference as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let short_term_ref_pic_set_sps_flag: u32 =
                unsafe { ::std::mem::transmute(short_term_ref_pic_set_sps_flag) };
            short_term_ref_pic_set_sps_flag as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH265PictureInfo {
    pub flags: StdVideoDecodeH265PictureInfoFlags,
    pub sps_video_parameter_set_id: u8,
    pub pps_seq_parameter_set_id: u8,
    pub pps_pic_parameter_set_id: u8,
    pub NumDeltaPocsOfRefRpsIdx: u8,
    pub PicOrderCntVal: i32,
    pub NumBitsForSTRefPicSetInSlice: u16,
    pub reserved: u16,
    pub RefPicSetStCurrBefore: [u8; 8usize],
    pub RefPicSetStCurrAfter: [u8; 8usize],
    pub RefPicSetLtCurr: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265PictureInfo"]
        [::std::mem::size_of::<StdVideoDecodeH265PictureInfo>() - 40usize];
    ["Alignment of StdVideoDecodeH265PictureInfo"]
        [::std::mem::align_of::<StdVideoDecodeH265PictureInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::flags"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::sps_video_parameter_set_id"][::std::mem::offset_of!(
        StdVideoDecodeH265PictureInfo,
        sps_video_parameter_set_id
    ) - 4usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::pps_seq_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, pps_seq_parameter_set_id) - 5usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::pps_pic_parameter_set_id"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, pps_pic_parameter_set_id) - 6usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::NumDeltaPocsOfRefRpsIdx"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, NumDeltaPocsOfRefRpsIdx) - 7usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::PicOrderCntVal"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, PicOrderCntVal) - 8usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::NumBitsForSTRefPicSetInSlice"][::std::mem::offset_of!(
        StdVideoDecodeH265PictureInfo,
        NumBitsForSTRefPicSetInSlice
    ) - 12usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::reserved"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, reserved) - 14usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::RefPicSetStCurrBefore"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, RefPicSetStCurrBefore) - 16usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::RefPicSetStCurrAfter"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, RefPicSetStCurrAfter) - 24usize];
    ["Offset of field: StdVideoDecodeH265PictureInfo::RefPicSetLtCurr"]
        [::std::mem::offset_of!(StdVideoDecodeH265PictureInfo, RefPicSetLtCurr) - 32usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH265ReferenceInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265ReferenceInfoFlags"]
        [::std::mem::size_of::<StdVideoDecodeH265ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeH265ReferenceInfoFlags"]
        [::std::mem::align_of::<StdVideoDecodeH265ReferenceInfoFlags>() - 4usize];
};
impl StdVideoDecodeH265ReferenceInfoFlags {
    #[inline]
    pub fn used_for_long_term_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_used_for_long_term_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn used_for_long_term_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_used_for_long_term_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn unused_for_reference(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unused_for_reference(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn unused_for_reference_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_unused_for_reference_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        used_for_long_term_reference: u32,
        unused_for_reference: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let used_for_long_term_reference: u32 =
                unsafe { ::std::mem::transmute(used_for_long_term_reference) };
            used_for_long_term_reference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let unused_for_reference: u32 = unsafe { ::std::mem::transmute(unused_for_reference) };
            unused_for_reference as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeH265ReferenceInfo {
    pub flags: StdVideoDecodeH265ReferenceInfoFlags,
    pub PicOrderCntVal: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeH265ReferenceInfo"]
        [::std::mem::size_of::<StdVideoDecodeH265ReferenceInfo>() - 8usize];
    ["Alignment of StdVideoDecodeH265ReferenceInfo"]
        [::std::mem::align_of::<StdVideoDecodeH265ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeH265ReferenceInfo::flags"]
        [::std::mem::offset_of!(StdVideoDecodeH265ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeH265ReferenceInfo::PicOrderCntVal"]
        [::std::mem::offset_of!(StdVideoDecodeH265ReferenceInfo, PicOrderCntVal) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH265ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfileIdc: StdVideoH265ProfileIdc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265ProfileInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH265ProfileInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeH265ProfileInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH265ProfileInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH265ProfileInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH265ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265ProfileInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH265ProfileInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH265ProfileInfoKHR::stdProfileIdc"]
        [::std::mem::offset_of!(VkVideoDecodeH265ProfileInfoKHR, stdProfileIdc) - 16usize];
};
impl Default for VkVideoDecodeH265ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH265CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxLevelIdc: StdVideoH265LevelIdc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265CapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoDecodeH265CapabilitiesKHR>() - 24usize];
    ["Alignment of VkVideoDecodeH265CapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoDecodeH265CapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH265CapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH265CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265CapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH265CapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH265CapabilitiesKHR::maxLevelIdc"]
        [::std::mem::offset_of!(VkVideoDecodeH265CapabilitiesKHR, maxLevelIdc) - 16usize];
};
impl Default for VkVideoDecodeH265CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH265SessionParametersAddInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdVPSCount: u32,
    pub pStdVPSs: *const StdVideoH265VideoParameterSet,
    pub stdSPSCount: u32,
    pub pStdSPSs: *const StdVideoH265SequenceParameterSet,
    pub stdPPSCount: u32,
    pub pStdPPSs: *const StdVideoH265PictureParameterSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265SessionParametersAddInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH265SessionParametersAddInfoKHR>() - 64usize];
    ["Alignment of VkVideoDecodeH265SessionParametersAddInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH265SessionParametersAddInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::stdVPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH265SessionParametersAddInfoKHR,
        stdVPSCount
    ) - 16usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pStdVPSs"]
        [::std::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pStdVPSs) - 24usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::stdSPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH265SessionParametersAddInfoKHR,
        stdSPSCount
    ) - 32usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pStdSPSs"]
        [::std::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pStdSPSs) - 40usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::stdPPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH265SessionParametersAddInfoKHR,
        stdPPSCount
    ) - 48usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersAddInfoKHR::pStdPPSs"]
        [::std::mem::offset_of!(VkVideoDecodeH265SessionParametersAddInfoKHR, pStdPPSs) - 56usize];
};
impl Default for VkVideoDecodeH265SessionParametersAddInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH265SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxStdVPSCount: u32,
    pub maxStdSPSCount: u32,
    pub maxStdPPSCount: u32,
    pub pParametersAddInfo: *const VkVideoDecodeH265SessionParametersAddInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265SessionParametersCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH265SessionParametersCreateInfoKHR>() - 40usize];
    ["Alignment of VkVideoDecodeH265SessionParametersCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH265SessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH265SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH265SessionParametersCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::maxStdVPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        maxStdVPSCount
    )
        - 16usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::maxStdSPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        maxStdSPSCount
    )
        - 20usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::maxStdPPSCount"][::std::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        maxStdPPSCount
    )
        - 24usize];
    ["Offset of field: VkVideoDecodeH265SessionParametersCreateInfoKHR::pParametersAddInfo"][::std::mem::offset_of!(
        VkVideoDecodeH265SessionParametersCreateInfoKHR,
        pParametersAddInfo
    )
        - 32usize];
};
impl Default for VkVideoDecodeH265SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH265PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdPictureInfo: *const StdVideoDecodeH265PictureInfo,
    pub sliceSegmentCount: u32,
    pub pSliceSegmentOffsets: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265PictureInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH265PictureInfoKHR>() - 40usize];
    ["Alignment of VkVideoDecodeH265PictureInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH265PictureInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::pStdPictureInfo"]
        [::std::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, pStdPictureInfo) - 16usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::sliceSegmentCount"]
        [::std::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, sliceSegmentCount) - 24usize];
    ["Offset of field: VkVideoDecodeH265PictureInfoKHR::pSliceSegmentOffsets"]
        [::std::mem::offset_of!(VkVideoDecodeH265PictureInfoKHR, pSliceSegmentOffsets) - 32usize];
};
impl Default for VkVideoDecodeH265PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH265DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeH265ReferenceInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265DpbSlotInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH265DpbSlotInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeH265DpbSlotInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH265DpbSlotInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH265DpbSlotInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH265DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265DpbSlotInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH265DpbSlotInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH265DpbSlotInfoKHR::pStdReferenceInfo"]
        [::std::mem::offset_of!(VkVideoDecodeH265DpbSlotInfoKHR, pStdReferenceInfo) - 16usize];
};
impl Default for VkVideoDecodeH265DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkQueueGlobalPriority as VkQueueGlobalPriorityKHR;
pub type VkDeviceQueueGlobalPriorityCreateInfoKHR = VkDeviceQueueGlobalPriorityCreateInfo;
pub type VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR =
    VkPhysicalDeviceGlobalPriorityQueryFeatures;
pub type VkQueueFamilyGlobalPriorityPropertiesKHR = VkQueueFamilyGlobalPriorityProperties;
pub use self::VkDriverId as VkDriverIdKHR;
pub type VkConformanceVersionKHR = VkConformanceVersion;
pub type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub use self::VkShaderFloatControlsIndependence as VkShaderFloatControlsIndependenceKHR;
pub type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub use self::VkResolveModeFlagBits as VkResolveModeFlagBitsKHR;
pub type VkResolveModeFlagsKHR = VkResolveModeFlags;
pub type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub type VkPhysicalDeviceDepthStencilResolvePropertiesKHR =
    VkPhysicalDeviceDepthStencilResolveProperties;
pub use self::VkSemaphoreType as VkSemaphoreTypeKHR;
pub use self::VkSemaphoreWaitFlagBits as VkSemaphoreWaitFlagBitsKHR;
pub type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub type VkPhysicalDeviceTimelineSemaphorePropertiesKHR =
    VkPhysicalDeviceTimelineSemaphoreProperties;
pub type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub type PFN_vkGetSemaphoreCounterValueKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, semaphore: VkSemaphore, pValue: *mut u64) -> VkResult,
>;
pub type PFN_vkWaitSemaphoresKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult,
>;
pub type PFN_vkSignalSemaphoreKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pSignalInfo: *const VkSemaphoreSignalInfo) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetSemaphoreCounterValueKHR(
        device: VkDevice,
        semaphore: VkSemaphore,
        pValue: *mut u64,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkWaitSemaphoresKHR(
        device: VkDevice,
        pWaitInfo: *const VkSemaphoreWaitInfo,
        timeout: u64,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkSignalSemaphoreKHR(
        device: VkDevice,
        pSignalInfo: *const VkSemaphoreSignalInfo,
    ) -> VkResult;
}
pub type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
pub type VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR =
    VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR:
    VkFragmentShadingRateCombinerOpKHR = 0;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR:
    VkFragmentShadingRateCombinerOpKHR = 1;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR:
    VkFragmentShadingRateCombinerOpKHR = 2;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR:
    VkFragmentShadingRateCombinerOpKHR = 3;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR:
    VkFragmentShadingRateCombinerOpKHR = 4;
pub const VkFragmentShadingRateCombinerOpKHR_VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR:
    VkFragmentShadingRateCombinerOpKHR = 2147483647;
pub type VkFragmentShadingRateCombinerOpKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFragmentShadingRateAttachmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pFragmentShadingRateAttachment: *const VkAttachmentReference2,
    pub shadingRateAttachmentTexelSize: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFragmentShadingRateAttachmentInfoKHR"]
        [::std::mem::size_of::<VkFragmentShadingRateAttachmentInfoKHR>() - 32usize];
    ["Alignment of VkFragmentShadingRateAttachmentInfoKHR"]
        [::std::mem::align_of::<VkFragmentShadingRateAttachmentInfoKHR>() - 8usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::sType"]
        [::std::mem::offset_of!(VkFragmentShadingRateAttachmentInfoKHR, sType) - 0usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::pNext"]
        [::std::mem::offset_of!(VkFragmentShadingRateAttachmentInfoKHR, pNext) - 8usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::pFragmentShadingRateAttachment"][::std::mem::offset_of!(
        VkFragmentShadingRateAttachmentInfoKHR,
        pFragmentShadingRateAttachment
    )
        - 16usize];
    ["Offset of field: VkFragmentShadingRateAttachmentInfoKHR::shadingRateAttachmentTexelSize"][::std::mem::offset_of!(
        VkFragmentShadingRateAttachmentInfoKHR,
        shadingRateAttachmentTexelSize
    )
        - 24usize];
};
impl Default for VkFragmentShadingRateAttachmentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineFragmentShadingRateStateCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fragmentSize: VkExtent2D,
    pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineFragmentShadingRateStateCreateInfoKHR"]
        [::std::mem::size_of::<VkPipelineFragmentShadingRateStateCreateInfoKHR>() - 32usize];
    ["Alignment of VkPipelineFragmentShadingRateStateCreateInfoKHR"]
        [::std::mem::align_of::<VkPipelineFragmentShadingRateStateCreateInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineFragmentShadingRateStateCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineFragmentShadingRateStateCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::fragmentSize"][::std::mem::offset_of!(
        VkPipelineFragmentShadingRateStateCreateInfoKHR,
        fragmentSize
    ) - 16usize];
    ["Offset of field: VkPipelineFragmentShadingRateStateCreateInfoKHR::combinerOps"][::std::mem::offset_of!(
        VkPipelineFragmentShadingRateStateCreateInfoKHR,
        combinerOps
    ) - 24usize];
};
impl Default for VkPipelineFragmentShadingRateStateCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineFragmentShadingRate: VkBool32,
    pub primitiveFragmentShadingRate: VkBool32,
    pub attachmentFragmentShadingRate: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>() - 32usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::pipelineFragmentShadingRate"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateFeaturesKHR , pipelineFragmentShadingRate) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::primitiveFragmentShadingRate"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateFeaturesKHR , primitiveFragmentShadingRate) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateFeaturesKHR::attachmentFragmentShadingRate"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateFeaturesKHR , attachmentFragmentShadingRate) - 24usize] ;
};
impl Default for VkPhysicalDeviceFragmentShadingRateFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    pub maxFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    pub maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32,
    pub primitiveFragmentShadingRateWithMultipleViewports: VkBool32,
    pub layeredShadingRateAttachments: VkBool32,
    pub fragmentShadingRateNonTrivialCombinerOps: VkBool32,
    pub maxFragmentSize: VkExtent2D,
    pub maxFragmentSizeAspectRatio: u32,
    pub maxFragmentShadingRateCoverageSamples: u32,
    pub maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits,
    pub fragmentShadingRateWithShaderDepthStencilWrites: VkBool32,
    pub fragmentShadingRateWithSampleMask: VkBool32,
    pub fragmentShadingRateWithShaderSampleMask: VkBool32,
    pub fragmentShadingRateWithConservativeRasterization: VkBool32,
    pub fragmentShadingRateWithFragmentShaderInterlock: VkBool32,
    pub fragmentShadingRateWithCustomSampleLocations: VkBool32,
    pub fragmentShadingRateStrictMultiplyCombiner: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRatePropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>() - 96usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRatePropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRatePropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRatePropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::minFragmentShadingRateAttachmentTexelSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , minFragmentShadingRateAttachmentTexelSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateAttachmentTexelSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateAttachmentTexelSize) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateAttachmentTexelSizeAspectRatio"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateAttachmentTexelSizeAspectRatio) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::primitiveFragmentShadingRateWithMultipleViewports"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , primitiveFragmentShadingRateWithMultipleViewports) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::layeredShadingRateAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , layeredShadingRateAttachments) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateNonTrivialCombinerOps"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateNonTrivialCombinerOps) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentSize"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRatePropertiesKHR,
        maxFragmentSize
    )
        - 48usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentSizeAspectRatio"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentSizeAspectRatio) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateCoverageSamples"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateCoverageSamples) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::maxFragmentShadingRateRasterizationSamples"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , maxFragmentShadingRateRasterizationSamples) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithShaderDepthStencilWrites"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithShaderDepthStencilWrites) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithSampleMask"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithSampleMask) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithShaderSampleMask"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithShaderSampleMask) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithConservativeRasterization"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithConservativeRasterization) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithFragmentShaderInterlock"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithFragmentShaderInterlock) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateWithCustomSampleLocations"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateWithCustomSampleLocations) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRatePropertiesKHR::fragmentShadingRateStrictMultiplyCombiner"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRatePropertiesKHR , fragmentShadingRateStrictMultiplyCombiner) - 92usize] ;
};
impl Default for VkPhysicalDeviceFragmentShadingRatePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sampleCounts: VkSampleCountFlags,
    pub fragmentSize: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateKHR>() - 32usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::sampleCounts"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, sampleCounts) - 16usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateKHR::fragmentSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentShadingRateKHR, fragmentSize) - 20usize];
};
impl Default for VkPhysicalDeviceFragmentShadingRateKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingFragmentShadingRateAttachmentInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
    pub shadingRateAttachmentTexelSize: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingFragmentShadingRateAttachmentInfoKHR"]
        [::std::mem::size_of::<VkRenderingFragmentShadingRateAttachmentInfoKHR>() - 40usize];
    ["Alignment of VkRenderingFragmentShadingRateAttachmentInfoKHR"]
        [::std::mem::align_of::<VkRenderingFragmentShadingRateAttachmentInfoKHR>() - 8usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::sType"]
        [::std::mem::offset_of!(VkRenderingFragmentShadingRateAttachmentInfoKHR, sType) - 0usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::pNext"]
        [::std::mem::offset_of!(VkRenderingFragmentShadingRateAttachmentInfoKHR, pNext) - 8usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::imageView"][::std::mem::offset_of!(
        VkRenderingFragmentShadingRateAttachmentInfoKHR,
        imageView
    ) - 16usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::imageLayout"][::std::mem::offset_of!(
        VkRenderingFragmentShadingRateAttachmentInfoKHR,
        imageLayout
    ) - 24usize];
    ["Offset of field: VkRenderingFragmentShadingRateAttachmentInfoKHR::shadingRateAttachmentTexelSize"] [:: std :: mem :: offset_of ! (VkRenderingFragmentShadingRateAttachmentInfoKHR , shadingRateAttachmentTexelSize) - 28usize] ;
};
impl Default for VkRenderingFragmentShadingRateAttachmentInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pFragmentShadingRateCount: *mut u32,
        pFragmentShadingRates: *mut VkPhysicalDeviceFragmentShadingRateKHR,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetFragmentShadingRateKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pFragmentSize: *const VkExtent2D,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceFragmentShadingRatesKHR(
        physicalDevice: VkPhysicalDevice,
        pFragmentShadingRateCount: *mut u32,
        pFragmentShadingRates: *mut VkPhysicalDeviceFragmentShadingRateKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdSetFragmentShadingRateKHR(
        commandBuffer: VkCommandBuffer,
        pFragmentSize: *const VkExtent2D,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    );
}
pub type VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR =
    VkPhysicalDeviceDynamicRenderingLocalReadFeatures;
pub type VkRenderingAttachmentLocationInfoKHR = VkRenderingAttachmentLocationInfo;
pub type VkRenderingInputAttachmentIndexInfoKHR = VkRenderingInputAttachmentIndexInfo;
pub type PFN_vkCmdSetRenderingAttachmentLocationsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pLocationInfo: *const VkRenderingAttachmentLocationInfo,
    ),
>;
pub type PFN_vkCmdSetRenderingInputAttachmentIndicesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInputAttachmentIndexInfo: *const VkRenderingInputAttachmentIndexInfo,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetRenderingAttachmentLocationsKHR(
        commandBuffer: VkCommandBuffer,
        pLocationInfo: *const VkRenderingAttachmentLocationInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetRenderingInputAttachmentIndicesKHR(
        commandBuffer: VkCommandBuffer,
        pInputAttachmentIndexInfo: *const VkRenderingInputAttachmentIndexInfo,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderQuadControlFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderQuadControl: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderQuadControlFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderQuadControlFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderQuadControlFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderQuadControlFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderQuadControlFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderQuadControlFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderQuadControlFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderQuadControlFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderQuadControlFeaturesKHR::shaderQuadControl"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderQuadControlFeaturesKHR,
        shaderQuadControl
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceShaderQuadControlFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceProtectedCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub supportsProtected: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceProtectedCapabilitiesKHR"]
        [::std::mem::size_of::<VkSurfaceProtectedCapabilitiesKHR>() - 24usize];
    ["Alignment of VkSurfaceProtectedCapabilitiesKHR"]
        [::std::mem::align_of::<VkSurfaceProtectedCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkSurfaceProtectedCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkSurfaceProtectedCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkSurfaceProtectedCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkSurfaceProtectedCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkSurfaceProtectedCapabilitiesKHR::supportsProtected"]
        [::std::mem::offset_of!(VkSurfaceProtectedCapabilitiesKHR, supportsProtected) - 16usize];
};
impl Default for VkSurfaceProtectedCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR =
    VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePresentWaitFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentWait: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentWaitFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDevicePresentWaitFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDevicePresentWaitFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDevicePresentWaitFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDevicePresentWaitFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentWaitFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentWaitFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentWaitFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePresentWaitFeaturesKHR::presentWait"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentWaitFeaturesKHR, presentWait) - 16usize];
};
impl Default for VkPhysicalDevicePresentWaitFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkWaitForPresentKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        presentId: u64,
        timeout: u64,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkWaitForPresentKHR(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        presentId: u64,
        timeout: u64,
    ) -> VkResult;
}
pub type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR =
    VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR =
    VkPhysicalDeviceBufferDeviceAddressFeatures;
pub type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub type PFN_vkGetBufferDeviceAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkGetBufferOpaqueCaptureAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkBufferDeviceAddressInfo) -> u64,
>;
pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64,
>;
unsafe extern "system" {
    pub fn vkGetBufferDeviceAddressKHR(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
unsafe extern "system" {
    pub fn vkGetBufferOpaqueCaptureAddressKHR(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> u64;
}
unsafe extern "system" {
    pub fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(
        device: VkDevice,
        pInfo: *const VkDeviceMemoryOpaqueCaptureAddressInfo,
    ) -> u64;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeferredOperationKHR_T {
    _unused: [u8; 0],
}
pub type VkDeferredOperationKHR = *mut VkDeferredOperationKHR_T;
pub type PFN_vkCreateDeferredOperationKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAllocator: *const VkAllocationCallbacks,
        pDeferredOperation: *mut VkDeferredOperationKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDeferredOperationKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetDeferredOperationMaxConcurrencyKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> u32,
>;
pub type PFN_vkGetDeferredOperationResultKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult,
>;
pub type PFN_vkDeferredOperationJoinKHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, operation: VkDeferredOperationKHR) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCreateDeferredOperationKHR(
        device: VkDevice,
        pAllocator: *const VkAllocationCallbacks,
        pDeferredOperation: *mut VkDeferredOperationKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDeferredOperationKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetDeferredOperationMaxConcurrencyKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
    ) -> u32;
}
unsafe extern "system" {
    pub fn vkGetDeferredOperationResultKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDeferredOperationJoinKHR(
        device: VkDevice,
        operation: VkDeferredOperationKHR,
    ) -> VkResult;
}
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR : VkPipelineExecutableStatisticFormatKHR = 0 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR : VkPipelineExecutableStatisticFormatKHR = 1 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR : VkPipelineExecutableStatisticFormatKHR = 2 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR : VkPipelineExecutableStatisticFormatKHR = 3 ;
pub const VkPipelineExecutableStatisticFormatKHR_VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR : VkPipelineExecutableStatisticFormatKHR = 2147483647 ;
pub type VkPipelineExecutableStatisticFormatKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineExecutableInfo: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"][::std::mem::size_of::<
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
    >() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR"][::std::mem::align_of::<
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
    >() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR::pipelineExecutableInfo"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR , pipelineExecutableInfo) - 16usize] ;
};
impl Default for VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineInfoKHR"][::std::mem::size_of::<VkPipelineInfoKHR>() - 24usize];
    ["Alignment of VkPipelineInfoKHR"][::std::mem::align_of::<VkPipelineInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineInfoKHR::pipeline"]
        [::std::mem::offset_of!(VkPipelineInfoKHR, pipeline) - 16usize];
};
impl Default for VkPipelineInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutablePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stages: VkShaderStageFlags,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub subgroupSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutablePropertiesKHR"]
        [::std::mem::size_of::<VkPipelineExecutablePropertiesKHR>() - 536usize];
    ["Alignment of VkPipelineExecutablePropertiesKHR"]
        [::std::mem::align_of::<VkPipelineExecutablePropertiesKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPipelineExecutablePropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineExecutablePropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::stages"]
        [::std::mem::offset_of!(VkPipelineExecutablePropertiesKHR, stages) - 16usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::name"]
        [::std::mem::offset_of!(VkPipelineExecutablePropertiesKHR, name) - 20usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::description"]
        [::std::mem::offset_of!(VkPipelineExecutablePropertiesKHR, description) - 276usize];
    ["Offset of field: VkPipelineExecutablePropertiesKHR::subgroupSize"]
        [::std::mem::offset_of!(VkPipelineExecutablePropertiesKHR, subgroupSize) - 532usize];
};
impl Default for VkPipelineExecutablePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
    pub executableIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableInfoKHR"]
        [::std::mem::size_of::<VkPipelineExecutableInfoKHR>() - 32usize];
    ["Alignment of VkPipelineExecutableInfoKHR"]
        [::std::mem::align_of::<VkPipelineExecutableInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineExecutableInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineExecutableInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::pipeline"]
        [::std::mem::offset_of!(VkPipelineExecutableInfoKHR, pipeline) - 16usize];
    ["Offset of field: VkPipelineExecutableInfoKHR::executableIndex"]
        [::std::mem::offset_of!(VkPipelineExecutableInfoKHR, executableIndex) - 24usize];
};
impl Default for VkPipelineExecutableInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPipelineExecutableStatisticValueKHR {
    pub b32: VkBool32,
    pub i64_: i64,
    pub u64_: u64,
    pub f64_: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableStatisticValueKHR"]
        [::std::mem::size_of::<VkPipelineExecutableStatisticValueKHR>() - 8usize];
    ["Alignment of VkPipelineExecutableStatisticValueKHR"]
        [::std::mem::align_of::<VkPipelineExecutableStatisticValueKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::b32"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, b32) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::i64_"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, i64_) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::u64_"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, u64_) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticValueKHR::f64_"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticValueKHR, f64_) - 0usize];
};
impl Default for VkPipelineExecutableStatisticValueKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableStatisticKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub format: VkPipelineExecutableStatisticFormatKHR,
    pub value: VkPipelineExecutableStatisticValueKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableStatisticKHR"]
        [::std::mem::size_of::<VkPipelineExecutableStatisticKHR>() - 544usize];
    ["Alignment of VkPipelineExecutableStatisticKHR"]
        [::std::mem::align_of::<VkPipelineExecutableStatisticKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::sType"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::name"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticKHR, name) - 16usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::description"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticKHR, description) - 272usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::format"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticKHR, format) - 528usize];
    ["Offset of field: VkPipelineExecutableStatisticKHR::value"]
        [::std::mem::offset_of!(VkPipelineExecutableStatisticKHR, value) - 536usize];
};
impl Default for VkPipelineExecutableStatisticKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineExecutableInternalRepresentationKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 256usize],
    pub description: [::std::os::raw::c_char; 256usize],
    pub isText: VkBool32,
    pub dataSize: usize,
    pub pData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineExecutableInternalRepresentationKHR"]
        [::std::mem::size_of::<VkPipelineExecutableInternalRepresentationKHR>() - 552usize];
    ["Alignment of VkPipelineExecutableInternalRepresentationKHR"]
        [::std::mem::align_of::<VkPipelineExecutableInternalRepresentationKHR>() - 8usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::sType"]
        [::std::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, sType) - 0usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::name"]
        [::std::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, name) - 16usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::description"][::std::mem::offset_of!(
        VkPipelineExecutableInternalRepresentationKHR,
        description
    ) - 272usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::isText"]
        [::std::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, isText) - 528usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::dataSize"][::std::mem::offset_of!(
        VkPipelineExecutableInternalRepresentationKHR,
        dataSize
    ) - 536usize];
    ["Offset of field: VkPipelineExecutableInternalRepresentationKHR::pData"]
        [::std::mem::offset_of!(VkPipelineExecutableInternalRepresentationKHR, pData) - 544usize];
};
impl Default for VkPipelineExecutableInternalRepresentationKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPipelineExecutablePropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoKHR,
        pExecutableCount: *mut u32,
        pProperties: *mut VkPipelineExecutablePropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableStatisticsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pStatisticCount: *mut u32,
        pStatistics: *mut VkPipelineExecutableStatisticKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pInternalRepresentationCount: *mut u32,
        pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPipelineExecutablePropertiesKHR(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoKHR,
        pExecutableCount: *mut u32,
        pProperties: *mut VkPipelineExecutablePropertiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPipelineExecutableStatisticsKHR(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pStatisticCount: *mut u32,
        pStatistics: *mut VkPipelineExecutableStatisticKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPipelineExecutableInternalRepresentationsKHR(
        device: VkDevice,
        pExecutableInfo: *const VkPipelineExecutableInfoKHR,
        pInternalRepresentationCount: *mut u32,
        pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR,
    ) -> VkResult;
}
pub use self::VkMemoryUnmapFlagBits as VkMemoryUnmapFlagBitsKHR;
pub type VkMemoryUnmapFlagsKHR = VkMemoryUnmapFlags;
pub type VkMemoryMapInfoKHR = VkMemoryMapInfo;
pub type VkMemoryUnmapInfoKHR = VkMemoryUnmapInfo;
pub type PFN_vkMapMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfo,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkUnmapMemory2KHR = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pMemoryUnmapInfo: *const VkMemoryUnmapInfo) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkMapMemory2KHR(
        device: VkDevice,
        pMemoryMapInfo: *const VkMemoryMapInfo,
        ppData: *mut *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkUnmapMemory2KHR(
        device: VkDevice,
        pMemoryUnmapInfo: *const VkMemoryUnmapInfo,
    ) -> VkResult;
}
pub type VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR =
    VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub type VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR =
    VkPhysicalDeviceShaderIntegerDotProductProperties;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineLibraryCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub libraryCount: u32,
    pub pLibraries: *const VkPipeline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineLibraryCreateInfoKHR"]
        [::std::mem::size_of::<VkPipelineLibraryCreateInfoKHR>() - 32usize];
    ["Alignment of VkPipelineLibraryCreateInfoKHR"]
        [::std::mem::align_of::<VkPipelineLibraryCreateInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::libraryCount"]
        [::std::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, libraryCount) - 16usize];
    ["Offset of field: VkPipelineLibraryCreateInfoKHR::pLibraries"]
        [::std::mem::offset_of!(VkPipelineLibraryCreateInfoKHR, pLibraries) - 24usize];
};
impl Default for VkPipelineLibraryCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentIdKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pPresentIds: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentIdKHR"][::std::mem::size_of::<VkPresentIdKHR>() - 32usize];
    ["Alignment of VkPresentIdKHR"][::std::mem::align_of::<VkPresentIdKHR>() - 8usize];
    ["Offset of field: VkPresentIdKHR::sType"]
        [::std::mem::offset_of!(VkPresentIdKHR, sType) - 0usize];
    ["Offset of field: VkPresentIdKHR::pNext"]
        [::std::mem::offset_of!(VkPresentIdKHR, pNext) - 8usize];
    ["Offset of field: VkPresentIdKHR::swapchainCount"]
        [::std::mem::offset_of!(VkPresentIdKHR, swapchainCount) - 16usize];
    ["Offset of field: VkPresentIdKHR::pPresentIds"]
        [::std::mem::offset_of!(VkPresentIdKHR, pPresentIds) - 24usize];
};
impl Default for VkPresentIdKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePresentIdFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentId: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentIdFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDevicePresentIdFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDevicePresentIdFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDevicePresentIdFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDevicePresentIdFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentIdFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentIdFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentIdFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePresentIdFeaturesKHR::presentId"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentIdFeaturesKHR, presentId) - 16usize];
};
impl Default for VkPhysicalDevicePresentIdFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR:
    VkVideoEncodeTuningModeKHR = 0;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR:
    VkVideoEncodeTuningModeKHR = 1;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR:
    VkVideoEncodeTuningModeKHR = 2;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR:
    VkVideoEncodeTuningModeKHR = 3;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR:
    VkVideoEncodeTuningModeKHR = 4;
pub const VkVideoEncodeTuningModeKHR_VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR:
    VkVideoEncodeTuningModeKHR = 2147483647;
pub type VkVideoEncodeTuningModeKHR = ::std::os::raw::c_uint;
pub const VkVideoEncodeFlagBitsKHR_VK_VIDEO_ENCODE_WITH_QUANTIZATION_DELTA_MAP_BIT_KHR:
    VkVideoEncodeFlagBitsKHR = 1;
pub const VkVideoEncodeFlagBitsKHR_VK_VIDEO_ENCODE_WITH_EMPHASIS_MAP_BIT_KHR:
    VkVideoEncodeFlagBitsKHR = 2;
pub const VkVideoEncodeFlagBitsKHR_VK_VIDEO_ENCODE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeFlagBitsKHR = 2147483647;
pub type VkVideoEncodeFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeFlagsKHR = VkFlags;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR : VkVideoEncodeCapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR : VkVideoEncodeCapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_QUANTIZATION_DELTA_MAP_BIT_KHR : VkVideoEncodeCapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_EMPHASIS_MAP_BIT_KHR:
    VkVideoEncodeCapabilityFlagBitsKHR = 8;
pub const VkVideoEncodeCapabilityFlagBitsKHR_VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeCapabilityFlagBitsKHR = 2147483647;
pub type VkVideoEncodeCapabilityFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeCapabilityFlagsKHR = VkFlags;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR:
    VkVideoEncodeRateControlModeFlagBitsKHR = 0;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR : VkVideoEncodeRateControlModeFlagBitsKHR = 1 ;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR:
    VkVideoEncodeRateControlModeFlagBitsKHR = 2;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR:
    VkVideoEncodeRateControlModeFlagBitsKHR = 4;
pub const VkVideoEncodeRateControlModeFlagBitsKHR_VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeRateControlModeFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeRateControlModeFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeRateControlModeFlagsKHR = VkFlags;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR : VkVideoEncodeFeedbackFlagBitsKHR = 1 ;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR : VkVideoEncodeFeedbackFlagBitsKHR = 2 ;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR : VkVideoEncodeFeedbackFlagBitsKHR = 4 ;
pub const VkVideoEncodeFeedbackFlagBitsKHR_VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeFeedbackFlagBitsKHR = 2147483647;
pub type VkVideoEncodeFeedbackFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeFeedbackFlagsKHR = VkFlags;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 0;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 1;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 2;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 4;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 8;
pub const VkVideoEncodeUsageFlagBitsKHR_VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeUsageFlagBitsKHR = 2147483647;
pub type VkVideoEncodeUsageFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeUsageFlagsKHR = VkFlags;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 0;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 1;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 2;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR:
    VkVideoEncodeContentFlagBitsKHR = 4;
pub const VkVideoEncodeContentFlagBitsKHR_VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeContentFlagBitsKHR = 2147483647;
pub type VkVideoEncodeContentFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeContentFlagsKHR = VkFlags;
pub type VkVideoEncodeRateControlFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoEncodeFlagsKHR,
    pub dstBuffer: VkBuffer,
    pub dstBufferOffset: VkDeviceSize,
    pub dstBufferRange: VkDeviceSize,
    pub srcPictureResource: VkVideoPictureResourceInfoKHR,
    pub pSetupReferenceSlot: *const VkVideoReferenceSlotInfoKHR,
    pub referenceSlotCount: u32,
    pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
    pub precedingExternallyEncodedBytes: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeInfoKHR"][::std::mem::size_of::<VkVideoEncodeInfoKHR>() - 128usize];
    ["Alignment of VkVideoEncodeInfoKHR"][::std::mem::align_of::<VkVideoEncodeInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeInfoKHR::dstBuffer"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, dstBuffer) - 24usize];
    ["Offset of field: VkVideoEncodeInfoKHR::dstBufferOffset"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, dstBufferOffset) - 32usize];
    ["Offset of field: VkVideoEncodeInfoKHR::dstBufferRange"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, dstBufferRange) - 40usize];
    ["Offset of field: VkVideoEncodeInfoKHR::srcPictureResource"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, srcPictureResource) - 48usize];
    ["Offset of field: VkVideoEncodeInfoKHR::pSetupReferenceSlot"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, pSetupReferenceSlot) - 96usize];
    ["Offset of field: VkVideoEncodeInfoKHR::referenceSlotCount"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, referenceSlotCount) - 104usize];
    ["Offset of field: VkVideoEncodeInfoKHR::pReferenceSlots"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, pReferenceSlots) - 112usize];
    ["Offset of field: VkVideoEncodeInfoKHR::precedingExternallyEncodedBytes"]
        [::std::mem::offset_of!(VkVideoEncodeInfoKHR, precedingExternallyEncodedBytes) - 120usize];
};
impl Default for VkVideoEncodeInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoEncodeCapabilityFlagsKHR,
    pub rateControlModes: VkVideoEncodeRateControlModeFlagsKHR,
    pub maxRateControlLayers: u32,
    pub maxBitrate: u64,
    pub maxQualityLevels: u32,
    pub encodeInputPictureGranularity: VkExtent2D,
    pub supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeCapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeCapabilitiesKHR>() - 56usize];
    ["Alignment of VkVideoEncodeCapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::rateControlModes"]
        [::std::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, rateControlModes) - 20usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::maxRateControlLayers"]
        [::std::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, maxRateControlLayers) - 24usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::maxBitrate"]
        [::std::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, maxBitrate) - 32usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::maxQualityLevels"]
        [::std::mem::offset_of!(VkVideoEncodeCapabilitiesKHR, maxQualityLevels) - 40usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::encodeInputPictureGranularity"][::std::mem::offset_of!(
        VkVideoEncodeCapabilitiesKHR,
        encodeInputPictureGranularity
    ) - 44usize];
    ["Offset of field: VkVideoEncodeCapabilitiesKHR::supportedEncodeFeedbackFlags"][::std::mem::offset_of!(
        VkVideoEncodeCapabilitiesKHR,
        supportedEncodeFeedbackFlags
    ) - 52usize];
};
impl Default for VkVideoEncodeCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolVideoEncodeFeedbackCreateInfoKHR"]
        [::std::mem::size_of::<VkQueryPoolVideoEncodeFeedbackCreateInfoKHR>() - 24usize];
    ["Alignment of VkQueryPoolVideoEncodeFeedbackCreateInfoKHR"]
        [::std::mem::align_of::<VkQueryPoolVideoEncodeFeedbackCreateInfoKHR>() - 8usize];
    ["Offset of field: VkQueryPoolVideoEncodeFeedbackCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkQueryPoolVideoEncodeFeedbackCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkQueryPoolVideoEncodeFeedbackCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkQueryPoolVideoEncodeFeedbackCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkQueryPoolVideoEncodeFeedbackCreateInfoKHR::encodeFeedbackFlags"][::std::mem::offset_of!(
        VkQueryPoolVideoEncodeFeedbackCreateInfoKHR,
        encodeFeedbackFlags
    )
        - 16usize];
};
impl Default for VkQueryPoolVideoEncodeFeedbackCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeUsageInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub videoUsageHints: VkVideoEncodeUsageFlagsKHR,
    pub videoContentHints: VkVideoEncodeContentFlagsKHR,
    pub tuningMode: VkVideoEncodeTuningModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeUsageInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeUsageInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeUsageInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeUsageInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeUsageInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeUsageInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::videoUsageHints"]
        [::std::mem::offset_of!(VkVideoEncodeUsageInfoKHR, videoUsageHints) - 16usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::videoContentHints"]
        [::std::mem::offset_of!(VkVideoEncodeUsageInfoKHR, videoContentHints) - 20usize];
    ["Offset of field: VkVideoEncodeUsageInfoKHR::tuningMode"]
        [::std::mem::offset_of!(VkVideoEncodeUsageInfoKHR, tuningMode) - 24usize];
};
impl Default for VkVideoEncodeUsageInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeRateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub averageBitrate: u64,
    pub maxBitrate: u64,
    pub frameRateNumerator: u32,
    pub frameRateDenominator: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeRateControlLayerInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeRateControlLayerInfoKHR>() - 40usize];
    ["Alignment of VkVideoEncodeRateControlLayerInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeRateControlLayerInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::averageBitrate"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, averageBitrate) - 16usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::maxBitrate"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlLayerInfoKHR, maxBitrate) - 24usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::frameRateNumerator"][::std::mem::offset_of!(
        VkVideoEncodeRateControlLayerInfoKHR,
        frameRateNumerator
    ) - 32usize];
    ["Offset of field: VkVideoEncodeRateControlLayerInfoKHR::frameRateDenominator"][::std::mem::offset_of!(
        VkVideoEncodeRateControlLayerInfoKHR,
        frameRateDenominator
    ) - 36usize];
};
impl Default for VkVideoEncodeRateControlLayerInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeRateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoEncodeRateControlFlagsKHR,
    pub rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR,
    pub layerCount: u32,
    pub pLayers: *const VkVideoEncodeRateControlLayerInfoKHR,
    pub virtualBufferSizeInMs: u32,
    pub initialVirtualBufferSizeInMs: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeRateControlInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeRateControlInfoKHR>() - 48usize];
    ["Alignment of VkVideoEncodeRateControlInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeRateControlInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::rateControlMode"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, rateControlMode) - 20usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::layerCount"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, layerCount) - 24usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::pLayers"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, pLayers) - 32usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::virtualBufferSizeInMs"]
        [::std::mem::offset_of!(VkVideoEncodeRateControlInfoKHR, virtualBufferSizeInMs) - 40usize];
    ["Offset of field: VkVideoEncodeRateControlInfoKHR::initialVirtualBufferSizeInMs"][::std::mem::offset_of!(
        VkVideoEncodeRateControlInfoKHR,
        initialVirtualBufferSizeInMs
    ) - 44usize];
};
impl Default for VkVideoEncodeRateControlInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pVideoProfile: *const VkVideoProfileInfoKHR,
    pub qualityLevel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR>() - 32usize];
    ["Alignment of VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::pVideoProfile"][::std::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
        pVideoProfile
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR::qualityLevel"][::std::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
        qualityLevel
    ) - 24usize];
};
impl Default for VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeQualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub preferredRateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR,
    pub preferredRateControlLayerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQualityLevelPropertiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeQualityLevelPropertiesKHR>() - 24usize];
    ["Alignment of VkVideoEncodeQualityLevelPropertiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeQualityLevelPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeQualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeQualityLevelPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::preferredRateControlMode"][::std::mem::offset_of!(
        VkVideoEncodeQualityLevelPropertiesKHR,
        preferredRateControlMode
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeQualityLevelPropertiesKHR::preferredRateControlLayerCount"][::std::mem::offset_of!(
        VkVideoEncodeQualityLevelPropertiesKHR,
        preferredRateControlLayerCount
    )
        - 20usize];
};
impl Default for VkVideoEncodeQualityLevelPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeQualityLevelInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub qualityLevel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQualityLevelInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeQualityLevelInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeQualityLevelInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeQualityLevelInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeQualityLevelInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeQualityLevelInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQualityLevelInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeQualityLevelInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeQualityLevelInfoKHR::qualityLevel"]
        [::std::mem::offset_of!(VkVideoEncodeQualityLevelInfoKHR, qualityLevel) - 16usize];
};
impl Default for VkVideoEncodeQualityLevelInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeSessionParametersGetInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub videoSessionParameters: VkVideoSessionParametersKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeSessionParametersGetInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeSessionParametersGetInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeSessionParametersGetInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeSessionParametersGetInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeSessionParametersGetInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeSessionParametersGetInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeSessionParametersGetInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeSessionParametersGetInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeSessionParametersGetInfoKHR::videoSessionParameters"][::std::mem::offset_of!(
        VkVideoEncodeSessionParametersGetInfoKHR,
        videoSessionParameters
    )
        - 16usize];
};
impl Default for VkVideoEncodeSessionParametersGetInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeSessionParametersFeedbackInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hasOverrides: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeSessionParametersFeedbackInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeSessionParametersFeedbackInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeSessionParametersFeedbackInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeSessionParametersFeedbackInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeSessionParametersFeedbackInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeSessionParametersFeedbackInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeSessionParametersFeedbackInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeSessionParametersFeedbackInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeSessionParametersFeedbackInfoKHR::hasOverrides"][::std::mem::offset_of!(
        VkVideoEncodeSessionParametersFeedbackInfoKHR,
        hasOverrides
    ) - 16usize];
};
impl Default for VkVideoEncodeSessionParametersFeedbackInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pQualityLevelInfo: *const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
        pQualityLevelProperties: *mut VkVideoEncodeQualityLevelPropertiesKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetEncodedVideoSessionParametersKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pVideoSessionParametersInfo: *const VkVideoEncodeSessionParametersGetInfoKHR,
        pFeedbackInfo: *mut VkVideoEncodeSessionParametersFeedbackInfoKHR,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdEncodeVideoKHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pEncodeInfo: *const VkVideoEncodeInfoKHR),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pQualityLevelInfo: *const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR,
        pQualityLevelProperties: *mut VkVideoEncodeQualityLevelPropertiesKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetEncodedVideoSessionParametersKHR(
        device: VkDevice,
        pVideoSessionParametersInfo: *const VkVideoEncodeSessionParametersGetInfoKHR,
        pFeedbackInfo: *mut VkVideoEncodeSessionParametersFeedbackInfoKHR,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdEncodeVideoKHR(
        commandBuffer: VkCommandBuffer,
        pEncodeInfo: *const VkVideoEncodeInfoKHR,
    );
}
pub type VkPipelineStageFlags2KHR = VkPipelineStageFlags2;
pub type VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;
pub type VkAccessFlags2KHR = VkAccessFlags2;
pub type VkAccessFlagBits2KHR = VkAccessFlagBits2;
pub use self::VkSubmitFlagBits as VkSubmitFlagBitsKHR;
pub type VkSubmitFlagsKHR = VkSubmitFlags;
pub type VkMemoryBarrier2KHR = VkMemoryBarrier2;
pub type VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;
pub type VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;
pub type VkDependencyInfoKHR = VkDependencyInfo;
pub type VkSubmitInfo2KHR = VkSubmitInfo2;
pub type VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;
pub type VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;
pub type VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;
pub type PFN_vkCmdSetEvent2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdResetEvent2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    ),
>;
pub type PFN_vkCmdWaitEvents2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    ),
>;
pub type PFN_vkCmdPipelineBarrier2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pDependencyInfo: *const VkDependencyInfo),
>;
pub type PFN_vkCmdWriteTimestamp2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    ),
>;
pub type PFN_vkQueueSubmit2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCmdSetEvent2KHR(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdResetEvent2KHR(
        commandBuffer: VkCommandBuffer,
        event: VkEvent,
        stageMask: VkPipelineStageFlags2,
    );
}
unsafe extern "system" {
    pub fn vkCmdWaitEvents2KHR(
        commandBuffer: VkCommandBuffer,
        eventCount: u32,
        pEvents: *const VkEvent,
        pDependencyInfos: *const VkDependencyInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPipelineBarrier2KHR(
        commandBuffer: VkCommandBuffer,
        pDependencyInfo: *const VkDependencyInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdWriteTimestamp2KHR(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        queryPool: VkQueryPool,
        query: u32,
    );
}
unsafe extern "system" {
    pub fn vkQueueSubmit2KHR(
        queue: VkQueue,
        submitCount: u32,
        pSubmits: *const VkSubmitInfo2,
        fence: VkFence,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShaderBarycentric: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR::fragmentShaderBarycentric"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR , fragmentShaderBarycentric) - 16usize] ;
};
impl Default for VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub triStripVertexOrderIndependentOfProvokingVertex: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR::triStripVertexOrderIndependentOfProvokingVertex"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR , triStripVertexOrderIndependentOfProvokingVertex) - 16usize] ;
};
impl Default for VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSubgroupUniformControlFlow: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"][::std::mem::size_of::<
        VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR>()
            - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR::shaderSubgroupUniformControlFlow"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR , shaderSubgroupUniformControlFlow) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR =
    VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub workgroupMemoryExplicitLayout: VkBool32,
    pub workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32,
    pub workgroupMemoryExplicitLayout8BitAccess: VkBool32,
    pub workgroupMemoryExplicitLayout16BitAccess: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"][::std::mem::size_of::<
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
    >() - 32usize];
    ["Alignment of VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR"][::std::mem::align_of::<
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayout"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayout) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayoutScalarBlockLayout"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayoutScalarBlockLayout) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayout8BitAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayout8BitAccess) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR::workgroupMemoryExplicitLayout16BitAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR , workgroupMemoryExplicitLayout16BitAccess) - 28usize] ;
};
impl Default for VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkCopyBufferInfo2KHR = VkCopyBufferInfo2;
pub type VkCopyImageInfo2KHR = VkCopyImageInfo2;
pub type VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;
pub type VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;
pub type VkBlitImageInfo2KHR = VkBlitImageInfo2;
pub type VkResolveImageInfo2KHR = VkResolveImageInfo2;
pub type VkBufferCopy2KHR = VkBufferCopy2;
pub type VkImageCopy2KHR = VkImageCopy2;
pub type VkImageBlit2KHR = VkImageBlit2;
pub type VkBufferImageCopy2KHR = VkBufferImageCopy2;
pub type VkImageResolve2KHR = VkImageResolve2;
pub type PFN_vkCmdCopyBuffer2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyBufferInfo: *const VkCopyBufferInfo2),
>;
pub type PFN_vkCmdCopyImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pCopyImageInfo: *const VkCopyImageInfo2),
>;
pub type PFN_vkCmdCopyBufferToImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    ),
>;
pub type PFN_vkCmdCopyImageToBuffer2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    ),
>;
pub type PFN_vkCmdBlitImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pBlitImageInfo: *const VkBlitImageInfo2),
>;
pub type PFN_vkCmdResolveImage2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdCopyBuffer2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyBufferInfo: *const VkCopyBufferInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyImage2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyImageInfo: *const VkCopyImageInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyBufferToImage2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyBufferToImageInfo: *const VkCopyBufferToImageInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyImageToBuffer2KHR(
        commandBuffer: VkCommandBuffer,
        pCopyImageToBufferInfo: *const VkCopyImageToBufferInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdBlitImage2KHR(
        commandBuffer: VkCommandBuffer,
        pBlitImageInfo: *const VkBlitImageInfo2,
    );
}
unsafe extern "system" {
    pub fn vkCmdResolveImage2KHR(
        commandBuffer: VkCommandBuffer,
        pResolveImageInfo: *const VkResolveImageInfo2,
    );
}
pub type VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;
pub type VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;
pub type VkFormatProperties3KHR = VkFormatProperties3;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingMaintenance1: VkBool32,
    pub rayTracingPipelineTraceRaysIndirect2: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::rayTracingMaintenance1"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR , rayTracingMaintenance1) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR::rayTracingPipelineTraceRaysIndirect2"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR , rayTracingPipelineTraceRaysIndirect2) - 20usize] ;
};
impl Default for VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkTraceRaysIndirectCommand2KHR {
    pub raygenShaderRecordAddress: VkDeviceAddress,
    pub raygenShaderRecordSize: VkDeviceSize,
    pub missShaderBindingTableAddress: VkDeviceAddress,
    pub missShaderBindingTableSize: VkDeviceSize,
    pub missShaderBindingTableStride: VkDeviceSize,
    pub hitShaderBindingTableAddress: VkDeviceAddress,
    pub hitShaderBindingTableSize: VkDeviceSize,
    pub hitShaderBindingTableStride: VkDeviceSize,
    pub callableShaderBindingTableAddress: VkDeviceAddress,
    pub callableShaderBindingTableSize: VkDeviceSize,
    pub callableShaderBindingTableStride: VkDeviceSize,
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTraceRaysIndirectCommand2KHR"]
        [::std::mem::size_of::<VkTraceRaysIndirectCommand2KHR>() - 104usize];
    ["Alignment of VkTraceRaysIndirectCommand2KHR"]
        [::std::mem::align_of::<VkTraceRaysIndirectCommand2KHR>() - 8usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::raygenShaderRecordAddress"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        raygenShaderRecordAddress
    ) - 0usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::raygenShaderRecordSize"]
        [::std::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, raygenShaderRecordSize) - 8usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::missShaderBindingTableAddress"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        missShaderBindingTableAddress
    ) - 16usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::missShaderBindingTableSize"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        missShaderBindingTableSize
    ) - 24usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::missShaderBindingTableStride"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        missShaderBindingTableStride
    ) - 32usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::hitShaderBindingTableAddress"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        hitShaderBindingTableAddress
    ) - 40usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::hitShaderBindingTableSize"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        hitShaderBindingTableSize
    ) - 48usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::hitShaderBindingTableStride"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        hitShaderBindingTableStride
    ) - 56usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::callableShaderBindingTableAddress"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        callableShaderBindingTableAddress
    )
        - 64usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::callableShaderBindingTableSize"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        callableShaderBindingTableSize
    )
        - 72usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::callableShaderBindingTableStride"][::std::mem::offset_of!(
        VkTraceRaysIndirectCommand2KHR,
        callableShaderBindingTableStride
    )
        - 80usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::width"]
        [::std::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, width) - 88usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::height"]
        [::std::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, height) - 92usize];
    ["Offset of field: VkTraceRaysIndirectCommand2KHR::depth"]
        [::std::mem::offset_of!(VkTraceRaysIndirectCommand2KHR, depth) - 96usize];
};
pub type PFN_vkCmdTraceRaysIndirect2KHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress),
>;
unsafe extern "system" {
    pub fn vkCmdTraceRaysIndirect2KHR(
        commandBuffer: VkCommandBuffer,
        indirectDeviceAddress: VkDeviceAddress,
    );
}
pub type VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;
pub type VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;
pub type VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;
pub type VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;
pub type PFN_vkGetDeviceBufferMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    ),
>;
unsafe extern "system" {
    pub fn vkGetDeviceBufferMemoryRequirementsKHR(
        device: VkDevice,
        pInfo: *const VkDeviceBufferMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceImageMemoryRequirementsKHR(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceImageSparseMemoryRequirementsKHR(
        device: VkDevice,
        pInfo: *const VkDeviceImageMemoryRequirements,
        pSparseMemoryRequirementCount: *mut u32,
        pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2,
    );
}
pub type VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR =
    VkPhysicalDeviceShaderSubgroupRotateFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderMaximalReconvergence: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR::shaderMaximalReconvergence"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR , shaderMaximalReconvergence) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineCreateFlags2KHR = VkPipelineCreateFlags2;
pub type VkPipelineCreateFlagBits2KHR = VkPipelineCreateFlagBits2;
pub type VkBufferUsageFlags2KHR = VkBufferUsageFlags2;
pub type VkBufferUsageFlagBits2KHR = VkBufferUsageFlagBits2;
pub type VkPhysicalDeviceMaintenance5FeaturesKHR = VkPhysicalDeviceMaintenance5Features;
pub type VkPhysicalDeviceMaintenance5PropertiesKHR = VkPhysicalDeviceMaintenance5Properties;
pub type VkRenderingAreaInfoKHR = VkRenderingAreaInfo;
pub type VkDeviceImageSubresourceInfoKHR = VkDeviceImageSubresourceInfo;
pub type VkImageSubresource2KHR = VkImageSubresource2;
pub type VkSubresourceLayout2KHR = VkSubresourceLayout2;
pub type VkPipelineCreateFlags2CreateInfoKHR = VkPipelineCreateFlags2CreateInfo;
pub type VkBufferUsageFlags2CreateInfoKHR = VkBufferUsageFlags2CreateInfo;
pub type PFN_vkCmdBindIndexBuffer2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        indexType: VkIndexType,
    ),
>;
pub type PFN_vkGetRenderingAreaGranularityKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pRenderingAreaInfo: *const VkRenderingAreaInfo,
        pGranularity: *mut VkExtent2D,
    ),
>;
pub type PFN_vkGetDeviceImageSubresourceLayoutKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkDeviceImageSubresourceInfo,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
pub type PFN_vkGetImageSubresourceLayout2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdBindIndexBuffer2KHR(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        size: VkDeviceSize,
        indexType: VkIndexType,
    );
}
unsafe extern "system" {
    pub fn vkGetRenderingAreaGranularityKHR(
        device: VkDevice,
        pRenderingAreaInfo: *const VkRenderingAreaInfo,
        pGranularity: *mut VkExtent2D,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceImageSubresourceLayoutKHR(
        device: VkDevice,
        pInfo: *const VkDeviceImageSubresourceInfo,
        pLayout: *mut VkSubresourceLayout2,
    );
}
unsafe extern "system" {
    pub fn vkGetImageSubresourceLayout2KHR(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingPositionFetch: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR::rayTracingPositionFetch"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR , rayTracingPositionFetch) - 16usize] ;
};
impl Default for VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryKHR_T {
    _unused: [u8; 0],
}
pub type VkPipelineBinaryKHR = *mut VkPipelineBinaryKHR_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineBinaryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineBinaries: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineBinaryFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineBinaryFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineBinaryFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineBinaryFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineBinaryFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineBinaryFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryFeaturesKHR::pipelineBinaries"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineBinaryFeaturesKHR,
        pipelineBinaries
    ) - 16usize];
};
impl Default for VkPhysicalDevicePipelineBinaryFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineBinaryPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineBinaryInternalCache: VkBool32,
    pub pipelineBinaryInternalCacheControl: VkBool32,
    pub pipelineBinaryPrefersInternalCache: VkBool32,
    pub pipelineBinaryPrecompiledInternalCache: VkBool32,
    pub pipelineBinaryCompressedData: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineBinaryPropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineBinaryPropertiesKHR>() - 40usize];
    ["Alignment of VkPhysicalDevicePipelineBinaryPropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineBinaryPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineBinaryPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelineBinaryPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryInternalCache"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineBinaryPropertiesKHR,
        pipelineBinaryInternalCache
    )
        - 16usize];
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryInternalCacheControl"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryInternalCacheControl) - 20usize] ;
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryPrefersInternalCache"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryPrefersInternalCache) - 24usize] ;
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryPrecompiledInternalCache"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryPrecompiledInternalCache) - 28usize] ;
    ["Offset of field: VkPhysicalDevicePipelineBinaryPropertiesKHR::pipelineBinaryCompressedData"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineBinaryPropertiesKHR , pipelineBinaryCompressedData) - 32usize] ;
};
impl Default for VkPhysicalDevicePipelineBinaryPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDevicePipelineBinaryInternalCacheControlKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub disableInternalCache: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDevicePipelineBinaryInternalCacheControlKHR"]
        [::std::mem::size_of::<VkDevicePipelineBinaryInternalCacheControlKHR>() - 24usize];
    ["Alignment of VkDevicePipelineBinaryInternalCacheControlKHR"]
        [::std::mem::align_of::<VkDevicePipelineBinaryInternalCacheControlKHR>() - 8usize];
    ["Offset of field: VkDevicePipelineBinaryInternalCacheControlKHR::sType"]
        [::std::mem::offset_of!(VkDevicePipelineBinaryInternalCacheControlKHR, sType) - 0usize];
    ["Offset of field: VkDevicePipelineBinaryInternalCacheControlKHR::pNext"]
        [::std::mem::offset_of!(VkDevicePipelineBinaryInternalCacheControlKHR, pNext) - 8usize];
    ["Offset of field: VkDevicePipelineBinaryInternalCacheControlKHR::disableInternalCache"][::std::mem::offset_of!(
        VkDevicePipelineBinaryInternalCacheControlKHR,
        disableInternalCache
    )
        - 16usize];
};
impl Default for VkDevicePipelineBinaryInternalCacheControlKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryKeyKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub keySize: u32,
    pub key: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryKeyKHR"][::std::mem::size_of::<VkPipelineBinaryKeyKHR>() - 56usize];
    ["Alignment of VkPipelineBinaryKeyKHR"]
        [::std::mem::align_of::<VkPipelineBinaryKeyKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::sType"]
        [::std::mem::offset_of!(VkPipelineBinaryKeyKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineBinaryKeyKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::keySize"]
        [::std::mem::offset_of!(VkPipelineBinaryKeyKHR, keySize) - 16usize];
    ["Offset of field: VkPipelineBinaryKeyKHR::key"]
        [::std::mem::offset_of!(VkPipelineBinaryKeyKHR, key) - 20usize];
};
impl Default for VkPipelineBinaryKeyKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryDataKHR {
    pub dataSize: usize,
    pub pData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryDataKHR"][::std::mem::size_of::<VkPipelineBinaryDataKHR>() - 16usize];
    ["Alignment of VkPipelineBinaryDataKHR"]
        [::std::mem::align_of::<VkPipelineBinaryDataKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryDataKHR::dataSize"]
        [::std::mem::offset_of!(VkPipelineBinaryDataKHR, dataSize) - 0usize];
    ["Offset of field: VkPipelineBinaryDataKHR::pData"]
        [::std::mem::offset_of!(VkPipelineBinaryDataKHR, pData) - 8usize];
};
impl Default for VkPipelineBinaryDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryKeysAndDataKHR {
    pub binaryCount: u32,
    pub pPipelineBinaryKeys: *const VkPipelineBinaryKeyKHR,
    pub pPipelineBinaryData: *const VkPipelineBinaryDataKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryKeysAndDataKHR"]
        [::std::mem::size_of::<VkPipelineBinaryKeysAndDataKHR>() - 24usize];
    ["Alignment of VkPipelineBinaryKeysAndDataKHR"]
        [::std::mem::align_of::<VkPipelineBinaryKeysAndDataKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryKeysAndDataKHR::binaryCount"]
        [::std::mem::offset_of!(VkPipelineBinaryKeysAndDataKHR, binaryCount) - 0usize];
    ["Offset of field: VkPipelineBinaryKeysAndDataKHR::pPipelineBinaryKeys"]
        [::std::mem::offset_of!(VkPipelineBinaryKeysAndDataKHR, pPipelineBinaryKeys) - 8usize];
    ["Offset of field: VkPipelineBinaryKeysAndDataKHR::pPipelineBinaryData"]
        [::std::mem::offset_of!(VkPipelineBinaryKeysAndDataKHR, pPipelineBinaryData) - 16usize];
};
impl Default for VkPipelineBinaryKeysAndDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCreateInfoKHR"][::std::mem::size_of::<VkPipelineCreateInfoKHR>() - 16usize];
    ["Alignment of VkPipelineCreateInfoKHR"]
        [::std::mem::align_of::<VkPipelineCreateInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineCreateInfoKHR, pNext) - 8usize];
};
impl Default for VkPipelineCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pKeysAndDataInfo: *const VkPipelineBinaryKeysAndDataKHR,
    pub pipeline: VkPipeline,
    pub pPipelineCreateInfo: *const VkPipelineCreateInfoKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryCreateInfoKHR"]
        [::std::mem::size_of::<VkPipelineBinaryCreateInfoKHR>() - 40usize];
    ["Alignment of VkPipelineBinaryCreateInfoKHR"]
        [::std::mem::align_of::<VkPipelineBinaryCreateInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pKeysAndDataInfo"]
        [::std::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pKeysAndDataInfo) - 16usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pipeline"]
        [::std::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pipeline) - 24usize];
    ["Offset of field: VkPipelineBinaryCreateInfoKHR::pPipelineCreateInfo"]
        [::std::mem::offset_of!(VkPipelineBinaryCreateInfoKHR, pPipelineCreateInfo) - 32usize];
};
impl Default for VkPipelineBinaryCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub binaryCount: u32,
    pub pPipelineBinaries: *const VkPipelineBinaryKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryInfoKHR"][::std::mem::size_of::<VkPipelineBinaryInfoKHR>() - 32usize];
    ["Alignment of VkPipelineBinaryInfoKHR"]
        [::std::mem::align_of::<VkPipelineBinaryInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineBinaryInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineBinaryInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::binaryCount"]
        [::std::mem::offset_of!(VkPipelineBinaryInfoKHR, binaryCount) - 16usize];
    ["Offset of field: VkPipelineBinaryInfoKHR::pPipelineBinaries"]
        [::std::mem::offset_of!(VkPipelineBinaryInfoKHR, pPipelineBinaries) - 24usize];
};
impl Default for VkPipelineBinaryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkReleaseCapturedPipelineDataInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkReleaseCapturedPipelineDataInfoKHR"]
        [::std::mem::size_of::<VkReleaseCapturedPipelineDataInfoKHR>() - 24usize];
    ["Alignment of VkReleaseCapturedPipelineDataInfoKHR"]
        [::std::mem::align_of::<VkReleaseCapturedPipelineDataInfoKHR>() - 8usize];
    ["Offset of field: VkReleaseCapturedPipelineDataInfoKHR::sType"]
        [::std::mem::offset_of!(VkReleaseCapturedPipelineDataInfoKHR, sType) - 0usize];
    ["Offset of field: VkReleaseCapturedPipelineDataInfoKHR::pNext"]
        [::std::mem::offset_of!(VkReleaseCapturedPipelineDataInfoKHR, pNext) - 8usize];
    ["Offset of field: VkReleaseCapturedPipelineDataInfoKHR::pipeline"]
        [::std::mem::offset_of!(VkReleaseCapturedPipelineDataInfoKHR, pipeline) - 16usize];
};
impl Default for VkReleaseCapturedPipelineDataInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryDataInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineBinary: VkPipelineBinaryKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryDataInfoKHR"]
        [::std::mem::size_of::<VkPipelineBinaryDataInfoKHR>() - 24usize];
    ["Alignment of VkPipelineBinaryDataInfoKHR"]
        [::std::mem::align_of::<VkPipelineBinaryDataInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryDataInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineBinaryDataInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryDataInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineBinaryDataInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineBinaryDataInfoKHR::pipelineBinary"]
        [::std::mem::offset_of!(VkPipelineBinaryDataInfoKHR, pipelineBinary) - 16usize];
};
impl Default for VkPipelineBinaryDataInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineBinaryHandlesInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBinaryCount: u32,
    pub pPipelineBinaries: *mut VkPipelineBinaryKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineBinaryHandlesInfoKHR"]
        [::std::mem::size_of::<VkPipelineBinaryHandlesInfoKHR>() - 32usize];
    ["Alignment of VkPipelineBinaryHandlesInfoKHR"]
        [::std::mem::align_of::<VkPipelineBinaryHandlesInfoKHR>() - 8usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::sType"]
        [::std::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, sType) - 0usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::pNext"]
        [::std::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, pNext) - 8usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::pipelineBinaryCount"]
        [::std::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, pipelineBinaryCount) - 16usize];
    ["Offset of field: VkPipelineBinaryHandlesInfoKHR::pPipelineBinaries"]
        [::std::mem::offset_of!(VkPipelineBinaryHandlesInfoKHR, pPipelineBinaries) - 24usize];
};
impl Default for VkPipelineBinaryHandlesInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreatePipelineBinariesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPipelineBinaryCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pBinaries: *mut VkPipelineBinaryHandlesInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPipelineBinaryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineBinary: VkPipelineBinaryKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetPipelineKeyKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pPipelineCreateInfo: *const VkPipelineCreateInfoKHR,
        pPipelineKey: *mut VkPipelineBinaryKeyKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetPipelineBinaryDataKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkPipelineBinaryDataInfoKHR,
        pPipelineBinaryKey: *mut VkPipelineBinaryKeyKHR,
        pPipelineBinaryDataSize: *mut usize,
        pPipelineBinaryData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkReleaseCapturedPipelineDataKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkReleaseCapturedPipelineDataInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCreatePipelineBinariesKHR(
        device: VkDevice,
        pCreateInfo: *const VkPipelineBinaryCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pBinaries: *mut VkPipelineBinaryHandlesInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyPipelineBinaryKHR(
        device: VkDevice,
        pipelineBinary: VkPipelineBinaryKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetPipelineKeyKHR(
        device: VkDevice,
        pPipelineCreateInfo: *const VkPipelineCreateInfoKHR,
        pPipelineKey: *mut VkPipelineBinaryKeyKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPipelineBinaryDataKHR(
        device: VkDevice,
        pInfo: *const VkPipelineBinaryDataInfoKHR,
        pPipelineBinaryKey: *mut VkPipelineBinaryKeyKHR,
        pPipelineBinaryDataSize: *mut usize,
        pPipelineBinaryData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkReleaseCapturedPipelineDataKHR(
        device: VkDevice,
        pInfo: *const VkReleaseCapturedPipelineDataInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
    ) -> VkResult;
}
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT16_KHR: VkComponentTypeKHR = 0;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT32_KHR: VkComponentTypeKHR = 1;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT64_KHR: VkComponentTypeKHR = 2;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT8_KHR: VkComponentTypeKHR = 3;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT16_KHR: VkComponentTypeKHR = 4;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT32_KHR: VkComponentTypeKHR = 5;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT64_KHR: VkComponentTypeKHR = 6;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT8_KHR: VkComponentTypeKHR = 7;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT16_KHR: VkComponentTypeKHR = 8;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT32_KHR: VkComponentTypeKHR = 9;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT64_KHR: VkComponentTypeKHR = 10;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT8_PACKED_NV: VkComponentTypeKHR = 1000491000;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT8_PACKED_NV: VkComponentTypeKHR = 1000491001;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT_E4M3_NV: VkComponentTypeKHR = 1000491002;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT_E5M2_NV: VkComponentTypeKHR = 1000491003;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT16_NV: VkComponentTypeKHR = 0;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT32_NV: VkComponentTypeKHR = 1;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_FLOAT64_NV: VkComponentTypeKHR = 2;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT8_NV: VkComponentTypeKHR = 3;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT16_NV: VkComponentTypeKHR = 4;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT32_NV: VkComponentTypeKHR = 5;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_SINT64_NV: VkComponentTypeKHR = 6;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT8_NV: VkComponentTypeKHR = 7;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT16_NV: VkComponentTypeKHR = 8;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT32_NV: VkComponentTypeKHR = 9;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_UINT64_NV: VkComponentTypeKHR = 10;
pub const VkComponentTypeKHR_VK_COMPONENT_TYPE_MAX_ENUM_KHR: VkComponentTypeKHR = 2147483647;
pub type VkComponentTypeKHR = ::std::os::raw::c_uint;
pub const VkScopeKHR_VK_SCOPE_DEVICE_KHR: VkScopeKHR = 1;
pub const VkScopeKHR_VK_SCOPE_WORKGROUP_KHR: VkScopeKHR = 2;
pub const VkScopeKHR_VK_SCOPE_SUBGROUP_KHR: VkScopeKHR = 3;
pub const VkScopeKHR_VK_SCOPE_QUEUE_FAMILY_KHR: VkScopeKHR = 5;
pub const VkScopeKHR_VK_SCOPE_DEVICE_NV: VkScopeKHR = 1;
pub const VkScopeKHR_VK_SCOPE_WORKGROUP_NV: VkScopeKHR = 2;
pub const VkScopeKHR_VK_SCOPE_SUBGROUP_NV: VkScopeKHR = 3;
pub const VkScopeKHR_VK_SCOPE_QUEUE_FAMILY_NV: VkScopeKHR = 5;
pub const VkScopeKHR_VK_SCOPE_MAX_ENUM_KHR: VkScopeKHR = 2147483647;
pub type VkScopeKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCooperativeMatrixPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub MSize: u32,
    pub NSize: u32,
    pub KSize: u32,
    pub AType: VkComponentTypeKHR,
    pub BType: VkComponentTypeKHR,
    pub CType: VkComponentTypeKHR,
    pub ResultType: VkComponentTypeKHR,
    pub saturatingAccumulation: VkBool32,
    pub scope: VkScopeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeMatrixPropertiesKHR"]
        [::std::mem::size_of::<VkCooperativeMatrixPropertiesKHR>() - 56usize];
    ["Alignment of VkCooperativeMatrixPropertiesKHR"]
        [::std::mem::align_of::<VkCooperativeMatrixPropertiesKHR>() - 8usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::MSize"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, MSize) - 16usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::NSize"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, NSize) - 20usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::KSize"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, KSize) - 24usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::AType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, AType) - 28usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::BType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, BType) - 32usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::CType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, CType) - 36usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::ResultType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, ResultType) - 40usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::saturatingAccumulation"][::std::mem::offset_of!(
        VkCooperativeMatrixPropertiesKHR,
        saturatingAccumulation
    ) - 44usize];
    ["Offset of field: VkCooperativeMatrixPropertiesKHR::scope"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesKHR, scope) - 48usize];
};
impl Default for VkCooperativeMatrixPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrix: VkBool32,
    pub cooperativeMatrixRobustBufferAccess: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::cooperativeMatrix"][::std::mem::offset_of!(
        VkPhysicalDeviceCooperativeMatrixFeaturesKHR,
        cooperativeMatrix
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesKHR::cooperativeMatrixRobustBufferAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixFeaturesKHR , cooperativeMatrixRobustBufferAccess) - 20usize] ;
};
impl Default for VkPhysicalDeviceCooperativeMatrixFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrixSupportedStages: VkShaderStageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixPropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixPropertiesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixPropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesKHR::cooperativeMatrixSupportedStages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixPropertiesKHR , cooperativeMatrixSupportedStages) - 16usize] ;
};
impl Default for VkPhysicalDeviceCooperativeMatrixPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub computeDerivativeGroupQuads: VkBool32,
    pub computeDerivativeGroupLinear: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::computeDerivativeGroupQuads"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR , computeDerivativeGroupQuads) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR::computeDerivativeGroupLinear"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR , computeDerivativeGroupLinear) - 20usize] ;
};
impl Default for VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub meshAndTaskShaderDerivatives: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR::meshAndTaskShaderDerivatives"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR , meshAndTaskShaderDerivatives) - 16usize] ;
};
impl Default for VkPhysicalDeviceComputeShaderDerivativesPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_MAIN: StdVideoAV1Profile = 0;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_HIGH: StdVideoAV1Profile = 1;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_PROFESSIONAL: StdVideoAV1Profile = 2;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_INVALID: StdVideoAV1Profile = 2147483647;
pub const StdVideoAV1Profile_STD_VIDEO_AV1_PROFILE_MAX_ENUM: StdVideoAV1Profile = 2147483647;
pub type StdVideoAV1Profile = ::std::os::raw::c_uint;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_0: StdVideoAV1Level = 0;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_1: StdVideoAV1Level = 1;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_2: StdVideoAV1Level = 2;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_2_3: StdVideoAV1Level = 3;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_0: StdVideoAV1Level = 4;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_1: StdVideoAV1Level = 5;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_2: StdVideoAV1Level = 6;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_3_3: StdVideoAV1Level = 7;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_0: StdVideoAV1Level = 8;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_1: StdVideoAV1Level = 9;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_2: StdVideoAV1Level = 10;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_4_3: StdVideoAV1Level = 11;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_0: StdVideoAV1Level = 12;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_1: StdVideoAV1Level = 13;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_2: StdVideoAV1Level = 14;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_5_3: StdVideoAV1Level = 15;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_0: StdVideoAV1Level = 16;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_1: StdVideoAV1Level = 17;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_2: StdVideoAV1Level = 18;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_6_3: StdVideoAV1Level = 19;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_0: StdVideoAV1Level = 20;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_1: StdVideoAV1Level = 21;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_2: StdVideoAV1Level = 22;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_7_3: StdVideoAV1Level = 23;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_INVALID: StdVideoAV1Level = 2147483647;
pub const StdVideoAV1Level_STD_VIDEO_AV1_LEVEL_MAX_ENUM: StdVideoAV1Level = 2147483647;
pub type StdVideoAV1Level = ::std::os::raw::c_uint;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_KEY: StdVideoAV1FrameType = 0;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_INTER: StdVideoAV1FrameType = 1;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_INTRA_ONLY: StdVideoAV1FrameType = 2;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_SWITCH: StdVideoAV1FrameType = 3;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_INVALID: StdVideoAV1FrameType = 2147483647;
pub const StdVideoAV1FrameType_STD_VIDEO_AV1_FRAME_TYPE_MAX_ENUM: StdVideoAV1FrameType = 2147483647;
pub type StdVideoAV1FrameType = ::std::os::raw::c_uint;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_INTRA_FRAME:
    StdVideoAV1ReferenceName = 0;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_LAST_FRAME:
    StdVideoAV1ReferenceName = 1;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_LAST2_FRAME:
    StdVideoAV1ReferenceName = 2;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_LAST3_FRAME:
    StdVideoAV1ReferenceName = 3;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_GOLDEN_FRAME:
    StdVideoAV1ReferenceName = 4;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_BWDREF_FRAME:
    StdVideoAV1ReferenceName = 5;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_ALTREF2_FRAME:
    StdVideoAV1ReferenceName = 6;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_ALTREF_FRAME:
    StdVideoAV1ReferenceName = 7;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_INVALID: StdVideoAV1ReferenceName =
    2147483647;
pub const StdVideoAV1ReferenceName_STD_VIDEO_AV1_REFERENCE_NAME_MAX_ENUM: StdVideoAV1ReferenceName =
    2147483647;
pub type StdVideoAV1ReferenceName = ::std::os::raw::c_uint;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP:
    StdVideoAV1InterpolationFilter = 0;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SMOOTH:
    StdVideoAV1InterpolationFilter = 1;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_EIGHTTAP_SHARP:
    StdVideoAV1InterpolationFilter = 2;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_BILINEAR:
    StdVideoAV1InterpolationFilter = 3;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_SWITCHABLE:
    StdVideoAV1InterpolationFilter = 4;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_INVALID:
    StdVideoAV1InterpolationFilter = 2147483647;
pub const StdVideoAV1InterpolationFilter_STD_VIDEO_AV1_INTERPOLATION_FILTER_MAX_ENUM:
    StdVideoAV1InterpolationFilter = 2147483647;
pub type StdVideoAV1InterpolationFilter = ::std::os::raw::c_uint;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_ONLY_4X4: StdVideoAV1TxMode = 0;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_LARGEST: StdVideoAV1TxMode = 1;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_SELECT: StdVideoAV1TxMode = 2;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_INVALID: StdVideoAV1TxMode = 2147483647;
pub const StdVideoAV1TxMode_STD_VIDEO_AV1_TX_MODE_MAX_ENUM: StdVideoAV1TxMode = 2147483647;
pub type StdVideoAV1TxMode = ::std::os::raw::c_uint;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_NONE:
    StdVideoAV1FrameRestorationType = 0;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_WIENER:
    StdVideoAV1FrameRestorationType = 1;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SGRPROJ:
    StdVideoAV1FrameRestorationType = 2;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_SWITCHABLE:
    StdVideoAV1FrameRestorationType = 3;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_INVALID:
    StdVideoAV1FrameRestorationType = 2147483647;
pub const StdVideoAV1FrameRestorationType_STD_VIDEO_AV1_FRAME_RESTORATION_TYPE_MAX_ENUM:
    StdVideoAV1FrameRestorationType = 2147483647;
pub type StdVideoAV1FrameRestorationType = ::std::os::raw::c_uint;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_709:
    StdVideoAV1ColorPrimaries = 1;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_UNSPECIFIED:
    StdVideoAV1ColorPrimaries = 2;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_M:
    StdVideoAV1ColorPrimaries = 4;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_470_B_G:
    StdVideoAV1ColorPrimaries = 5;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_601:
    StdVideoAV1ColorPrimaries = 6;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_240:
    StdVideoAV1ColorPrimaries = 7;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_GENERIC_FILM:
    StdVideoAV1ColorPrimaries = 8;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_2020:
    StdVideoAV1ColorPrimaries = 9;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_XYZ: StdVideoAV1ColorPrimaries =
    10;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_431:
    StdVideoAV1ColorPrimaries = 11;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_SMPTE_432:
    StdVideoAV1ColorPrimaries = 12;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_EBU_3213:
    StdVideoAV1ColorPrimaries = 22;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_INVALID:
    StdVideoAV1ColorPrimaries = 2147483647;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_BT_UNSPECIFIED:
    StdVideoAV1ColorPrimaries = 2;
pub const StdVideoAV1ColorPrimaries_STD_VIDEO_AV1_COLOR_PRIMARIES_MAX_ENUM:
    StdVideoAV1ColorPrimaries = 2147483647;
pub type StdVideoAV1ColorPrimaries = ::std::os::raw::c_uint;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_0:
    StdVideoAV1TransferCharacteristics = 0;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_709:
    StdVideoAV1TransferCharacteristics = 1;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_UNSPECIFIED:
    StdVideoAV1TransferCharacteristics = 2;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_RESERVED_3:
    StdVideoAV1TransferCharacteristics = 3;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_M:
    StdVideoAV1TransferCharacteristics = 4;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_470_B_G:
    StdVideoAV1TransferCharacteristics = 5;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_601:
    StdVideoAV1TransferCharacteristics = 6;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_240:
    StdVideoAV1TransferCharacteristics = 7;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LINEAR:
    StdVideoAV1TransferCharacteristics = 8;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100:
    StdVideoAV1TransferCharacteristics = 9;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_LOG_100_SQRT10 : StdVideoAV1TransferCharacteristics = 10 ;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_IEC_61966:
    StdVideoAV1TransferCharacteristics = 11;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_1361:
    StdVideoAV1TransferCharacteristics = 12;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SRGB:
    StdVideoAV1TransferCharacteristics = 13;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_10_BIT : StdVideoAV1TransferCharacteristics = 14 ;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_BT_2020_12_BIT : StdVideoAV1TransferCharacteristics = 15 ;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_2084:
    StdVideoAV1TransferCharacteristics = 16;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_SMPTE_428:
    StdVideoAV1TransferCharacteristics = 17;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_HLG:
    StdVideoAV1TransferCharacteristics = 18;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_INVALID:
    StdVideoAV1TransferCharacteristics = 2147483647;
pub const StdVideoAV1TransferCharacteristics_STD_VIDEO_AV1_TRANSFER_CHARACTERISTICS_MAX_ENUM:
    StdVideoAV1TransferCharacteristics = 2147483647;
pub type StdVideoAV1TransferCharacteristics = ::std::os::raw::c_uint;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_IDENTITY:
    StdVideoAV1MatrixCoefficients = 0;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_709:
    StdVideoAV1MatrixCoefficients = 1;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_UNSPECIFIED:
    StdVideoAV1MatrixCoefficients = 2;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_RESERVED_3:
    StdVideoAV1MatrixCoefficients = 3;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_FCC:
    StdVideoAV1MatrixCoefficients = 4;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_470_B_G:
    StdVideoAV1MatrixCoefficients = 5;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_601:
    StdVideoAV1MatrixCoefficients = 6;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_240:
    StdVideoAV1MatrixCoefficients = 7;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_YCGCO:
    StdVideoAV1MatrixCoefficients = 8;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_NCL:
    StdVideoAV1MatrixCoefficients = 9;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_BT_2020_CL:
    StdVideoAV1MatrixCoefficients = 10;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_SMPTE_2085:
    StdVideoAV1MatrixCoefficients = 11;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_NCL:
    StdVideoAV1MatrixCoefficients = 12;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_CHROMAT_CL:
    StdVideoAV1MatrixCoefficients = 13;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_ICTCP:
    StdVideoAV1MatrixCoefficients = 14;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_INVALID:
    StdVideoAV1MatrixCoefficients = 2147483647;
pub const StdVideoAV1MatrixCoefficients_STD_VIDEO_AV1_MATRIX_COEFFICIENTS_MAX_ENUM:
    StdVideoAV1MatrixCoefficients = 2147483647;
pub type StdVideoAV1MatrixCoefficients = ::std::os::raw::c_uint;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_UNKNOWN:
    StdVideoAV1ChromaSamplePosition = 0;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_VERTICAL:
    StdVideoAV1ChromaSamplePosition = 1;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_COLOCATED:
    StdVideoAV1ChromaSamplePosition = 2;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_RESERVED:
    StdVideoAV1ChromaSamplePosition = 3;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_INVALID:
    StdVideoAV1ChromaSamplePosition = 2147483647;
pub const StdVideoAV1ChromaSamplePosition_STD_VIDEO_AV1_CHROMA_SAMPLE_POSITION_MAX_ENUM:
    StdVideoAV1ChromaSamplePosition = 2147483647;
pub type StdVideoAV1ChromaSamplePosition = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1ColorConfigFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1ColorConfigFlags"]
        [::std::mem::size_of::<StdVideoAV1ColorConfigFlags>() - 4usize];
    ["Alignment of StdVideoAV1ColorConfigFlags"]
        [::std::mem::align_of::<StdVideoAV1ColorConfigFlags>() - 4usize];
};
impl StdVideoAV1ColorConfigFlags {
    #[inline]
    pub fn mono_chrome(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mono_chrome(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mono_chrome_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mono_chrome_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn color_range(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn color_range_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_color_range_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn separate_uv_delta_q(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_separate_uv_delta_q(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn separate_uv_delta_q_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_separate_uv_delta_q_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn color_description_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_color_description_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn color_description_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_color_description_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mono_chrome: u32,
        color_range: u32,
        separate_uv_delta_q: u32,
        color_description_present_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mono_chrome: u32 = unsafe { ::std::mem::transmute(mono_chrome) };
            mono_chrome as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let color_range: u32 = unsafe { ::std::mem::transmute(color_range) };
            color_range as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let separate_uv_delta_q: u32 = unsafe { ::std::mem::transmute(separate_uv_delta_q) };
            separate_uv_delta_q as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let color_description_present_flag: u32 =
                unsafe { ::std::mem::transmute(color_description_present_flag) };
            color_description_present_flag as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoAV1ColorConfig {
    pub flags: StdVideoAV1ColorConfigFlags,
    pub BitDepth: u8,
    pub subsampling_x: u8,
    pub subsampling_y: u8,
    pub reserved1: u8,
    pub color_primaries: StdVideoAV1ColorPrimaries,
    pub transfer_characteristics: StdVideoAV1TransferCharacteristics,
    pub matrix_coefficients: StdVideoAV1MatrixCoefficients,
    pub chroma_sample_position: StdVideoAV1ChromaSamplePosition,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1ColorConfig"][::std::mem::size_of::<StdVideoAV1ColorConfig>() - 24usize];
    ["Alignment of StdVideoAV1ColorConfig"]
        [::std::mem::align_of::<StdVideoAV1ColorConfig>() - 4usize];
    ["Offset of field: StdVideoAV1ColorConfig::flags"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, flags) - 0usize];
    ["Offset of field: StdVideoAV1ColorConfig::BitDepth"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, BitDepth) - 4usize];
    ["Offset of field: StdVideoAV1ColorConfig::subsampling_x"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, subsampling_x) - 5usize];
    ["Offset of field: StdVideoAV1ColorConfig::subsampling_y"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, subsampling_y) - 6usize];
    ["Offset of field: StdVideoAV1ColorConfig::reserved1"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, reserved1) - 7usize];
    ["Offset of field: StdVideoAV1ColorConfig::color_primaries"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, color_primaries) - 8usize];
    ["Offset of field: StdVideoAV1ColorConfig::transfer_characteristics"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, transfer_characteristics) - 12usize];
    ["Offset of field: StdVideoAV1ColorConfig::matrix_coefficients"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, matrix_coefficients) - 16usize];
    ["Offset of field: StdVideoAV1ColorConfig::chroma_sample_position"]
        [::std::mem::offset_of!(StdVideoAV1ColorConfig, chroma_sample_position) - 20usize];
};
impl Default for StdVideoAV1ColorConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1TimingInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TimingInfoFlags"]
        [::std::mem::size_of::<StdVideoAV1TimingInfoFlags>() - 4usize];
    ["Alignment of StdVideoAV1TimingInfoFlags"]
        [::std::mem::align_of::<StdVideoAV1TimingInfoFlags>() - 4usize];
};
impl StdVideoAV1TimingInfoFlags {
    #[inline]
    pub fn equal_picture_interval(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_equal_picture_interval(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn equal_picture_interval_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_equal_picture_interval_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        equal_picture_interval: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let equal_picture_interval: u32 =
                unsafe { ::std::mem::transmute(equal_picture_interval) };
            equal_picture_interval as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1TimingInfo {
    pub flags: StdVideoAV1TimingInfoFlags,
    pub num_units_in_display_tick: u32,
    pub time_scale: u32,
    pub num_ticks_per_picture_minus_1: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TimingInfo"][::std::mem::size_of::<StdVideoAV1TimingInfo>() - 16usize];
    ["Alignment of StdVideoAV1TimingInfo"]
        [::std::mem::align_of::<StdVideoAV1TimingInfo>() - 4usize];
    ["Offset of field: StdVideoAV1TimingInfo::flags"]
        [::std::mem::offset_of!(StdVideoAV1TimingInfo, flags) - 0usize];
    ["Offset of field: StdVideoAV1TimingInfo::num_units_in_display_tick"]
        [::std::mem::offset_of!(StdVideoAV1TimingInfo, num_units_in_display_tick) - 4usize];
    ["Offset of field: StdVideoAV1TimingInfo::time_scale"]
        [::std::mem::offset_of!(StdVideoAV1TimingInfo, time_scale) - 8usize];
    ["Offset of field: StdVideoAV1TimingInfo::num_ticks_per_picture_minus_1"]
        [::std::mem::offset_of!(StdVideoAV1TimingInfo, num_ticks_per_picture_minus_1) - 12usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1LoopFilterFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1LoopFilterFlags"]
        [::std::mem::size_of::<StdVideoAV1LoopFilterFlags>() - 4usize];
    ["Alignment of StdVideoAV1LoopFilterFlags"]
        [::std::mem::align_of::<StdVideoAV1LoopFilterFlags>() - 4usize];
};
impl StdVideoAV1LoopFilterFlags {
    #[inline]
    pub fn loop_filter_delta_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_delta_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_delta_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_delta_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn loop_filter_delta_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_loop_filter_delta_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn loop_filter_delta_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_loop_filter_delta_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        loop_filter_delta_enabled: u32,
        loop_filter_delta_update: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let loop_filter_delta_enabled: u32 =
                unsafe { ::std::mem::transmute(loop_filter_delta_enabled) };
            loop_filter_delta_enabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let loop_filter_delta_update: u32 =
                unsafe { ::std::mem::transmute(loop_filter_delta_update) };
            loop_filter_delta_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1LoopFilter {
    pub flags: StdVideoAV1LoopFilterFlags,
    pub loop_filter_level: [u8; 4usize],
    pub loop_filter_sharpness: u8,
    pub update_ref_delta: u8,
    pub loop_filter_ref_deltas: [i8; 8usize],
    pub update_mode_delta: u8,
    pub loop_filter_mode_deltas: [i8; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1LoopFilter"][::std::mem::size_of::<StdVideoAV1LoopFilter>() - 24usize];
    ["Alignment of StdVideoAV1LoopFilter"]
        [::std::mem::align_of::<StdVideoAV1LoopFilter>() - 4usize];
    ["Offset of field: StdVideoAV1LoopFilter::flags"]
        [::std::mem::offset_of!(StdVideoAV1LoopFilter, flags) - 0usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_level"]
        [::std::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_level) - 4usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_sharpness"]
        [::std::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_sharpness) - 8usize];
    ["Offset of field: StdVideoAV1LoopFilter::update_ref_delta"]
        [::std::mem::offset_of!(StdVideoAV1LoopFilter, update_ref_delta) - 9usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_ref_deltas"]
        [::std::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_ref_deltas) - 10usize];
    ["Offset of field: StdVideoAV1LoopFilter::update_mode_delta"]
        [::std::mem::offset_of!(StdVideoAV1LoopFilter, update_mode_delta) - 18usize];
    ["Offset of field: StdVideoAV1LoopFilter::loop_filter_mode_deltas"]
        [::std::mem::offset_of!(StdVideoAV1LoopFilter, loop_filter_mode_deltas) - 19usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1QuantizationFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1QuantizationFlags"]
        [::std::mem::size_of::<StdVideoAV1QuantizationFlags>() - 4usize];
    ["Alignment of StdVideoAV1QuantizationFlags"]
        [::std::mem::align_of::<StdVideoAV1QuantizationFlags>() - 4usize];
};
impl StdVideoAV1QuantizationFlags {
    #[inline]
    pub fn using_qmatrix(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_using_qmatrix(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn using_qmatrix_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_using_qmatrix_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn diff_uv_delta(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_diff_uv_delta(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn diff_uv_delta_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_diff_uv_delta_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        using_qmatrix: u32,
        diff_uv_delta: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let using_qmatrix: u32 = unsafe { ::std::mem::transmute(using_qmatrix) };
            using_qmatrix as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let diff_uv_delta: u32 = unsafe { ::std::mem::transmute(diff_uv_delta) };
            diff_uv_delta as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1Quantization {
    pub flags: StdVideoAV1QuantizationFlags,
    pub base_q_idx: u8,
    pub DeltaQYDc: i8,
    pub DeltaQUDc: i8,
    pub DeltaQUAc: i8,
    pub DeltaQVDc: i8,
    pub DeltaQVAc: i8,
    pub qm_y: u8,
    pub qm_u: u8,
    pub qm_v: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1Quantization"][::std::mem::size_of::<StdVideoAV1Quantization>() - 16usize];
    ["Alignment of StdVideoAV1Quantization"]
        [::std::mem::align_of::<StdVideoAV1Quantization>() - 4usize];
    ["Offset of field: StdVideoAV1Quantization::flags"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, flags) - 0usize];
    ["Offset of field: StdVideoAV1Quantization::base_q_idx"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, base_q_idx) - 4usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQYDc"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, DeltaQYDc) - 5usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQUDc"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, DeltaQUDc) - 6usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQUAc"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, DeltaQUAc) - 7usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQVDc"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, DeltaQVDc) - 8usize];
    ["Offset of field: StdVideoAV1Quantization::DeltaQVAc"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, DeltaQVAc) - 9usize];
    ["Offset of field: StdVideoAV1Quantization::qm_y"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, qm_y) - 10usize];
    ["Offset of field: StdVideoAV1Quantization::qm_u"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, qm_u) - 11usize];
    ["Offset of field: StdVideoAV1Quantization::qm_v"]
        [::std::mem::offset_of!(StdVideoAV1Quantization, qm_v) - 12usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1Segmentation {
    pub FeatureEnabled: [u8; 8usize],
    pub FeatureData: [[i16; 8usize]; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1Segmentation"]
        [::std::mem::size_of::<StdVideoAV1Segmentation>() - 136usize];
    ["Alignment of StdVideoAV1Segmentation"]
        [::std::mem::align_of::<StdVideoAV1Segmentation>() - 2usize];
    ["Offset of field: StdVideoAV1Segmentation::FeatureEnabled"]
        [::std::mem::offset_of!(StdVideoAV1Segmentation, FeatureEnabled) - 0usize];
    ["Offset of field: StdVideoAV1Segmentation::FeatureData"]
        [::std::mem::offset_of!(StdVideoAV1Segmentation, FeatureData) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1TileInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TileInfoFlags"]
        [::std::mem::size_of::<StdVideoAV1TileInfoFlags>() - 4usize];
    ["Alignment of StdVideoAV1TileInfoFlags"]
        [::std::mem::align_of::<StdVideoAV1TileInfoFlags>() - 4usize];
};
impl StdVideoAV1TileInfoFlags {
    #[inline]
    pub fn uniform_tile_spacing_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uniform_tile_spacing_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn uniform_tile_spacing_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_uniform_tile_spacing_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        uniform_tile_spacing_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let uniform_tile_spacing_flag: u32 =
                unsafe { ::std::mem::transmute(uniform_tile_spacing_flag) };
            uniform_tile_spacing_flag as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoAV1TileInfo {
    pub flags: StdVideoAV1TileInfoFlags,
    pub TileCols: u8,
    pub TileRows: u8,
    pub context_update_tile_id: u16,
    pub tile_size_bytes_minus_1: u8,
    pub reserved1: [u8; 7usize],
    pub pMiColStarts: *const u16,
    pub pMiRowStarts: *const u16,
    pub pWidthInSbsMinus1: *const u16,
    pub pHeightInSbsMinus1: *const u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1TileInfo"][::std::mem::size_of::<StdVideoAV1TileInfo>() - 48usize];
    ["Alignment of StdVideoAV1TileInfo"][::std::mem::align_of::<StdVideoAV1TileInfo>() - 8usize];
    ["Offset of field: StdVideoAV1TileInfo::flags"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, flags) - 0usize];
    ["Offset of field: StdVideoAV1TileInfo::TileCols"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, TileCols) - 4usize];
    ["Offset of field: StdVideoAV1TileInfo::TileRows"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, TileRows) - 5usize];
    ["Offset of field: StdVideoAV1TileInfo::context_update_tile_id"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, context_update_tile_id) - 6usize];
    ["Offset of field: StdVideoAV1TileInfo::tile_size_bytes_minus_1"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, tile_size_bytes_minus_1) - 8usize];
    ["Offset of field: StdVideoAV1TileInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, reserved1) - 9usize];
    ["Offset of field: StdVideoAV1TileInfo::pMiColStarts"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, pMiColStarts) - 16usize];
    ["Offset of field: StdVideoAV1TileInfo::pMiRowStarts"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, pMiRowStarts) - 24usize];
    ["Offset of field: StdVideoAV1TileInfo::pWidthInSbsMinus1"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, pWidthInSbsMinus1) - 32usize];
    ["Offset of field: StdVideoAV1TileInfo::pHeightInSbsMinus1"]
        [::std::mem::offset_of!(StdVideoAV1TileInfo, pHeightInSbsMinus1) - 40usize];
};
impl Default for StdVideoAV1TileInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1CDEF {
    pub cdef_damping_minus_3: u8,
    pub cdef_bits: u8,
    pub cdef_y_pri_strength: [u8; 8usize],
    pub cdef_y_sec_strength: [u8; 8usize],
    pub cdef_uv_pri_strength: [u8; 8usize],
    pub cdef_uv_sec_strength: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1CDEF"][::std::mem::size_of::<StdVideoAV1CDEF>() - 34usize];
    ["Alignment of StdVideoAV1CDEF"][::std::mem::align_of::<StdVideoAV1CDEF>() - 1usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_damping_minus_3"]
        [::std::mem::offset_of!(StdVideoAV1CDEF, cdef_damping_minus_3) - 0usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_bits"]
        [::std::mem::offset_of!(StdVideoAV1CDEF, cdef_bits) - 1usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_y_pri_strength"]
        [::std::mem::offset_of!(StdVideoAV1CDEF, cdef_y_pri_strength) - 2usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_y_sec_strength"]
        [::std::mem::offset_of!(StdVideoAV1CDEF, cdef_y_sec_strength) - 10usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_uv_pri_strength"]
        [::std::mem::offset_of!(StdVideoAV1CDEF, cdef_uv_pri_strength) - 18usize];
    ["Offset of field: StdVideoAV1CDEF::cdef_uv_sec_strength"]
        [::std::mem::offset_of!(StdVideoAV1CDEF, cdef_uv_sec_strength) - 26usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoAV1LoopRestoration {
    pub FrameRestorationType: [StdVideoAV1FrameRestorationType; 3usize],
    pub LoopRestorationSize: [u16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1LoopRestoration"]
        [::std::mem::size_of::<StdVideoAV1LoopRestoration>() - 20usize];
    ["Alignment of StdVideoAV1LoopRestoration"]
        [::std::mem::align_of::<StdVideoAV1LoopRestoration>() - 4usize];
    ["Offset of field: StdVideoAV1LoopRestoration::FrameRestorationType"]
        [::std::mem::offset_of!(StdVideoAV1LoopRestoration, FrameRestorationType) - 0usize];
    ["Offset of field: StdVideoAV1LoopRestoration::LoopRestorationSize"]
        [::std::mem::offset_of!(StdVideoAV1LoopRestoration, LoopRestorationSize) - 12usize];
};
impl Default for StdVideoAV1LoopRestoration {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1GlobalMotion {
    pub GmType: [u8; 8usize],
    pub gm_params: [[i32; 6usize]; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1GlobalMotion"]
        [::std::mem::size_of::<StdVideoAV1GlobalMotion>() - 200usize];
    ["Alignment of StdVideoAV1GlobalMotion"]
        [::std::mem::align_of::<StdVideoAV1GlobalMotion>() - 4usize];
    ["Offset of field: StdVideoAV1GlobalMotion::GmType"]
        [::std::mem::offset_of!(StdVideoAV1GlobalMotion, GmType) - 0usize];
    ["Offset of field: StdVideoAV1GlobalMotion::gm_params"]
        [::std::mem::offset_of!(StdVideoAV1GlobalMotion, gm_params) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1FilmGrainFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1FilmGrainFlags"]
        [::std::mem::size_of::<StdVideoAV1FilmGrainFlags>() - 4usize];
    ["Alignment of StdVideoAV1FilmGrainFlags"]
        [::std::mem::align_of::<StdVideoAV1FilmGrainFlags>() - 4usize];
};
impl StdVideoAV1FilmGrainFlags {
    #[inline]
    pub fn chroma_scaling_from_luma(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_chroma_scaling_from_luma(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn chroma_scaling_from_luma_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_chroma_scaling_from_luma_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn overlap_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_overlap_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn overlap_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_overlap_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn clip_to_restricted_range(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clip_to_restricted_range(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn clip_to_restricted_range_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_clip_to_restricted_range_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn update_grain(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_update_grain(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn update_grain_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_update_grain_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        chroma_scaling_from_luma: u32,
        overlap_flag: u32,
        clip_to_restricted_range: u32,
        update_grain: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let chroma_scaling_from_luma: u32 =
                unsafe { ::std::mem::transmute(chroma_scaling_from_luma) };
            chroma_scaling_from_luma as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let overlap_flag: u32 = unsafe { ::std::mem::transmute(overlap_flag) };
            overlap_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let clip_to_restricted_range: u32 =
                unsafe { ::std::mem::transmute(clip_to_restricted_range) };
            clip_to_restricted_range as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let update_grain: u32 = unsafe { ::std::mem::transmute(update_grain) };
            update_grain as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1FilmGrain {
    pub flags: StdVideoAV1FilmGrainFlags,
    pub grain_scaling_minus_8: u8,
    pub ar_coeff_lag: u8,
    pub ar_coeff_shift_minus_6: u8,
    pub grain_scale_shift: u8,
    pub grain_seed: u16,
    pub film_grain_params_ref_idx: u8,
    pub num_y_points: u8,
    pub point_y_value: [u8; 14usize],
    pub point_y_scaling: [u8; 14usize],
    pub num_cb_points: u8,
    pub point_cb_value: [u8; 10usize],
    pub point_cb_scaling: [u8; 10usize],
    pub num_cr_points: u8,
    pub point_cr_value: [u8; 10usize],
    pub point_cr_scaling: [u8; 10usize],
    pub ar_coeffs_y_plus_128: [i8; 24usize],
    pub ar_coeffs_cb_plus_128: [i8; 25usize],
    pub ar_coeffs_cr_plus_128: [i8; 25usize],
    pub cb_mult: u8,
    pub cb_luma_mult: u8,
    pub cb_offset: u16,
    pub cr_mult: u8,
    pub cr_luma_mult: u8,
    pub cr_offset: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1FilmGrain"][::std::mem::size_of::<StdVideoAV1FilmGrain>() - 164usize];
    ["Alignment of StdVideoAV1FilmGrain"][::std::mem::align_of::<StdVideoAV1FilmGrain>() - 4usize];
    ["Offset of field: StdVideoAV1FilmGrain::flags"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, flags) - 0usize];
    ["Offset of field: StdVideoAV1FilmGrain::grain_scaling_minus_8"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, grain_scaling_minus_8) - 4usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeff_lag"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeff_lag) - 5usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeff_shift_minus_6"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeff_shift_minus_6) - 6usize];
    ["Offset of field: StdVideoAV1FilmGrain::grain_scale_shift"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, grain_scale_shift) - 7usize];
    ["Offset of field: StdVideoAV1FilmGrain::grain_seed"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, grain_seed) - 8usize];
    ["Offset of field: StdVideoAV1FilmGrain::film_grain_params_ref_idx"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, film_grain_params_ref_idx) - 10usize];
    ["Offset of field: StdVideoAV1FilmGrain::num_y_points"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, num_y_points) - 11usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_y_value"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, point_y_value) - 12usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_y_scaling"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, point_y_scaling) - 26usize];
    ["Offset of field: StdVideoAV1FilmGrain::num_cb_points"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, num_cb_points) - 40usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cb_value"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, point_cb_value) - 41usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cb_scaling"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, point_cb_scaling) - 51usize];
    ["Offset of field: StdVideoAV1FilmGrain::num_cr_points"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, num_cr_points) - 61usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cr_value"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, point_cr_value) - 62usize];
    ["Offset of field: StdVideoAV1FilmGrain::point_cr_scaling"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, point_cr_scaling) - 72usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeffs_y_plus_128"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeffs_y_plus_128) - 82usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeffs_cb_plus_128"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeffs_cb_plus_128) - 106usize];
    ["Offset of field: StdVideoAV1FilmGrain::ar_coeffs_cr_plus_128"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, ar_coeffs_cr_plus_128) - 131usize];
    ["Offset of field: StdVideoAV1FilmGrain::cb_mult"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, cb_mult) - 156usize];
    ["Offset of field: StdVideoAV1FilmGrain::cb_luma_mult"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, cb_luma_mult) - 157usize];
    ["Offset of field: StdVideoAV1FilmGrain::cb_offset"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, cb_offset) - 158usize];
    ["Offset of field: StdVideoAV1FilmGrain::cr_mult"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, cr_mult) - 160usize];
    ["Offset of field: StdVideoAV1FilmGrain::cr_luma_mult"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, cr_luma_mult) - 161usize];
    ["Offset of field: StdVideoAV1FilmGrain::cr_offset"]
        [::std::mem::offset_of!(StdVideoAV1FilmGrain, cr_offset) - 162usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoAV1SequenceHeaderFlags {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1SequenceHeaderFlags"]
        [::std::mem::size_of::<StdVideoAV1SequenceHeaderFlags>() - 4usize];
    ["Alignment of StdVideoAV1SequenceHeaderFlags"]
        [::std::mem::align_of::<StdVideoAV1SequenceHeaderFlags>() - 4usize];
};
impl StdVideoAV1SequenceHeaderFlags {
    #[inline]
    pub fn still_picture(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_still_picture(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn still_picture_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_still_picture_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reduced_still_picture_header(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_still_picture_header(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reduced_still_picture_header_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reduced_still_picture_header_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_128x128_superblock(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_128x128_superblock(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_128x128_superblock_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_128x128_superblock_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_filter_intra(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_filter_intra(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_filter_intra_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_filter_intra_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_intra_edge_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_intra_edge_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_intra_edge_filter_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_intra_edge_filter_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_interintra_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_interintra_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_interintra_compound_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_interintra_compound_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_masked_compound(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_masked_compound(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_masked_compound_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_masked_compound_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_warped_motion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_warped_motion_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_warped_motion_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_dual_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_dual_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_dual_filter_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_dual_filter_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_order_hint(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_order_hint(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_order_hint_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_order_hint_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_jnt_comp(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_jnt_comp(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_jnt_comp_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_jnt_comp_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_ref_frame_mvs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_ref_frame_mvs_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_ref_frame_mvs_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_id_numbers_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_id_numbers_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_id_numbers_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_id_numbers_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_superres(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_superres_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_superres_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_cdef(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_cdef(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_cdef_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_cdef_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn enable_restoration(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enable_restoration(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enable_restoration_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enable_restoration_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn film_grain_params_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_film_grain_params_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn film_grain_params_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_film_grain_params_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn timing_info_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_timing_info_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn timing_info_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_timing_info_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn initial_display_delay_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_initial_display_delay_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn initial_display_delay_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_initial_display_delay_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 13u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                13u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                13u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        still_picture: u32,
        reduced_still_picture_header: u32,
        use_128x128_superblock: u32,
        enable_filter_intra: u32,
        enable_intra_edge_filter: u32,
        enable_interintra_compound: u32,
        enable_masked_compound: u32,
        enable_warped_motion: u32,
        enable_dual_filter: u32,
        enable_order_hint: u32,
        enable_jnt_comp: u32,
        enable_ref_frame_mvs: u32,
        frame_id_numbers_present_flag: u32,
        enable_superres: u32,
        enable_cdef: u32,
        enable_restoration: u32,
        film_grain_params_present: u32,
        timing_info_present_flag: u32,
        initial_display_delay_present_flag: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let still_picture: u32 = unsafe { ::std::mem::transmute(still_picture) };
            still_picture as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let reduced_still_picture_header: u32 =
                unsafe { ::std::mem::transmute(reduced_still_picture_header) };
            reduced_still_picture_header as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let use_128x128_superblock: u32 =
                unsafe { ::std::mem::transmute(use_128x128_superblock) };
            use_128x128_superblock as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let enable_filter_intra: u32 = unsafe { ::std::mem::transmute(enable_filter_intra) };
            enable_filter_intra as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let enable_intra_edge_filter: u32 =
                unsafe { ::std::mem::transmute(enable_intra_edge_filter) };
            enable_intra_edge_filter as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let enable_interintra_compound: u32 =
                unsafe { ::std::mem::transmute(enable_interintra_compound) };
            enable_interintra_compound as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let enable_masked_compound: u32 =
                unsafe { ::std::mem::transmute(enable_masked_compound) };
            enable_masked_compound as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let enable_warped_motion: u32 = unsafe { ::std::mem::transmute(enable_warped_motion) };
            enable_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let enable_dual_filter: u32 = unsafe { ::std::mem::transmute(enable_dual_filter) };
            enable_dual_filter as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let enable_order_hint: u32 = unsafe { ::std::mem::transmute(enable_order_hint) };
            enable_order_hint as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let enable_jnt_comp: u32 = unsafe { ::std::mem::transmute(enable_jnt_comp) };
            enable_jnt_comp as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let enable_ref_frame_mvs: u32 = unsafe { ::std::mem::transmute(enable_ref_frame_mvs) };
            enable_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let frame_id_numbers_present_flag: u32 =
                unsafe { ::std::mem::transmute(frame_id_numbers_present_flag) };
            frame_id_numbers_present_flag as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let enable_superres: u32 = unsafe { ::std::mem::transmute(enable_superres) };
            enable_superres as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let enable_cdef: u32 = unsafe { ::std::mem::transmute(enable_cdef) };
            enable_cdef as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let enable_restoration: u32 = unsafe { ::std::mem::transmute(enable_restoration) };
            enable_restoration as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let film_grain_params_present: u32 =
                unsafe { ::std::mem::transmute(film_grain_params_present) };
            film_grain_params_present as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let timing_info_present_flag: u32 =
                unsafe { ::std::mem::transmute(timing_info_present_flag) };
            timing_info_present_flag as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let initial_display_delay_present_flag: u32 =
                unsafe { ::std::mem::transmute(initial_display_delay_present_flag) };
            initial_display_delay_present_flag as u64
        });
        __bindgen_bitfield_unit.set(19usize, 13u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoAV1SequenceHeader {
    pub flags: StdVideoAV1SequenceHeaderFlags,
    pub seq_profile: StdVideoAV1Profile,
    pub frame_width_bits_minus_1: u8,
    pub frame_height_bits_minus_1: u8,
    pub max_frame_width_minus_1: u16,
    pub max_frame_height_minus_1: u16,
    pub delta_frame_id_length_minus_2: u8,
    pub additional_frame_id_length_minus_1: u8,
    pub order_hint_bits_minus_1: u8,
    pub seq_force_integer_mv: u8,
    pub seq_force_screen_content_tools: u8,
    pub reserved1: [u8; 5usize],
    pub pColorConfig: *const StdVideoAV1ColorConfig,
    pub pTimingInfo: *const StdVideoAV1TimingInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoAV1SequenceHeader"]
        [::std::mem::size_of::<StdVideoAV1SequenceHeader>() - 40usize];
    ["Alignment of StdVideoAV1SequenceHeader"]
        [::std::mem::align_of::<StdVideoAV1SequenceHeader>() - 8usize];
    ["Offset of field: StdVideoAV1SequenceHeader::flags"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, flags) - 0usize];
    ["Offset of field: StdVideoAV1SequenceHeader::seq_profile"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, seq_profile) - 4usize];
    ["Offset of field: StdVideoAV1SequenceHeader::frame_width_bits_minus_1"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, frame_width_bits_minus_1) - 8usize];
    ["Offset of field: StdVideoAV1SequenceHeader::frame_height_bits_minus_1"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, frame_height_bits_minus_1) - 9usize];
    ["Offset of field: StdVideoAV1SequenceHeader::max_frame_width_minus_1"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, max_frame_width_minus_1) - 10usize];
    ["Offset of field: StdVideoAV1SequenceHeader::max_frame_height_minus_1"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, max_frame_height_minus_1) - 12usize];
    ["Offset of field: StdVideoAV1SequenceHeader::delta_frame_id_length_minus_2"][::std::mem::offset_of!(
        StdVideoAV1SequenceHeader,
        delta_frame_id_length_minus_2
    ) - 14usize];
    ["Offset of field: StdVideoAV1SequenceHeader::additional_frame_id_length_minus_1"][::std::mem::offset_of!(
        StdVideoAV1SequenceHeader,
        additional_frame_id_length_minus_1
    ) - 15usize];
    ["Offset of field: StdVideoAV1SequenceHeader::order_hint_bits_minus_1"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, order_hint_bits_minus_1) - 16usize];
    ["Offset of field: StdVideoAV1SequenceHeader::seq_force_integer_mv"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, seq_force_integer_mv) - 17usize];
    ["Offset of field: StdVideoAV1SequenceHeader::seq_force_screen_content_tools"][::std::mem::offset_of!(
        StdVideoAV1SequenceHeader,
        seq_force_screen_content_tools
    ) - 18usize];
    ["Offset of field: StdVideoAV1SequenceHeader::reserved1"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, reserved1) - 19usize];
    ["Offset of field: StdVideoAV1SequenceHeader::pColorConfig"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, pColorConfig) - 24usize];
    ["Offset of field: StdVideoAV1SequenceHeader::pTimingInfo"]
        [::std::mem::offset_of!(StdVideoAV1SequenceHeader, pTimingInfo) - 32usize];
};
impl Default for StdVideoAV1SequenceHeader {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeAV1PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1PictureInfoFlags"]
        [::std::mem::size_of::<StdVideoDecodeAV1PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeAV1PictureInfoFlags"]
        [::std::mem::align_of::<StdVideoDecodeAV1PictureInfoFlags>() - 4usize];
};
impl StdVideoDecodeAV1PictureInfoFlags {
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn error_resilient_mode_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_error_resilient_mode_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_cdf_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_cdf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_cdf_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_cdf_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_superres(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_superres_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_superres_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn render_and_frame_size_different(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_render_and_frame_size_different(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn render_and_frame_size_different_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_render_and_frame_size_different_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_screen_content_tools(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_screen_content_tools(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_screen_content_tools_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_screen_content_tools_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_filter_switchable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_filter_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_filter_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_filter_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn force_integer_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_integer_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn force_integer_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_force_integer_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_size_override_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_size_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_size_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_size_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn buffer_removal_time_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buffer_removal_time_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn buffer_removal_time_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_buffer_removal_time_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_intrabc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_intrabc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_intrabc_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_intrabc_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_refs_short_signaling(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_refs_short_signaling(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_refs_short_signaling_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_refs_short_signaling_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_high_precision_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_high_precision_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_motion_mode_switchable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_motion_mode_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_motion_mode_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_motion_mode_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_ref_frame_mvs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_ref_frame_mvs_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_ref_frame_mvs_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_warped_motion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_warped_motion_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_warped_motion_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reduced_tx_set(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_tx_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reduced_tx_set_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reduced_tx_set_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reference_select(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reference_select(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reference_select_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reference_select_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn skip_mode_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mode_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn skip_mode_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_skip_mode_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_q_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_q_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_q_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_multi(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_multi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_multi_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_multi_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_map_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_map_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_temporal_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_temporal_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_data(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_data_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_data_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn UsesLr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_UsesLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn UsesLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_UsesLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn usesChromaLr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usesChromaLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn usesChromaLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_usesChromaLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn apply_grain(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_apply_grain(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn apply_grain_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_apply_grain_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        error_resilient_mode: u32,
        disable_cdf_update: u32,
        use_superres: u32,
        render_and_frame_size_different: u32,
        allow_screen_content_tools: u32,
        is_filter_switchable: u32,
        force_integer_mv: u32,
        frame_size_override_flag: u32,
        buffer_removal_time_present_flag: u32,
        allow_intrabc: u32,
        frame_refs_short_signaling: u32,
        allow_high_precision_mv: u32,
        is_motion_mode_switchable: u32,
        use_ref_frame_mvs: u32,
        disable_frame_end_update_cdf: u32,
        allow_warped_motion: u32,
        reduced_tx_set: u32,
        reference_select: u32,
        skip_mode_present: u32,
        delta_q_present: u32,
        delta_lf_present: u32,
        delta_lf_multi: u32,
        segmentation_enabled: u32,
        segmentation_update_map: u32,
        segmentation_temporal_update: u32,
        segmentation_update_data: u32,
        UsesLr: u32,
        usesChromaLr: u32,
        apply_grain: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::std::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disable_cdf_update: u32 = unsafe { ::std::mem::transmute(disable_cdf_update) };
            disable_cdf_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let use_superres: u32 = unsafe { ::std::mem::transmute(use_superres) };
            use_superres as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let render_and_frame_size_different: u32 =
                unsafe { ::std::mem::transmute(render_and_frame_size_different) };
            render_and_frame_size_different as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let allow_screen_content_tools: u32 =
                unsafe { ::std::mem::transmute(allow_screen_content_tools) };
            allow_screen_content_tools as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_filter_switchable: u32 = unsafe { ::std::mem::transmute(is_filter_switchable) };
            is_filter_switchable as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let force_integer_mv: u32 = unsafe { ::std::mem::transmute(force_integer_mv) };
            force_integer_mv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let frame_size_override_flag: u32 =
                unsafe { ::std::mem::transmute(frame_size_override_flag) };
            frame_size_override_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let buffer_removal_time_present_flag: u32 =
                unsafe { ::std::mem::transmute(buffer_removal_time_present_flag) };
            buffer_removal_time_present_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let allow_intrabc: u32 = unsafe { ::std::mem::transmute(allow_intrabc) };
            allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let frame_refs_short_signaling: u32 =
                unsafe { ::std::mem::transmute(frame_refs_short_signaling) };
            frame_refs_short_signaling as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::std::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_motion_mode_switchable: u32 =
                unsafe { ::std::mem::transmute(is_motion_mode_switchable) };
            is_motion_mode_switchable as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let use_ref_frame_mvs: u32 = unsafe { ::std::mem::transmute(use_ref_frame_mvs) };
            use_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::std::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let allow_warped_motion: u32 = unsafe { ::std::mem::transmute(allow_warped_motion) };
            allow_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reduced_tx_set: u32 = unsafe { ::std::mem::transmute(reduced_tx_set) };
            reduced_tx_set as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let reference_select: u32 = unsafe { ::std::mem::transmute(reference_select) };
            reference_select as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let skip_mode_present: u32 = unsafe { ::std::mem::transmute(skip_mode_present) };
            skip_mode_present as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let delta_q_present: u32 = unsafe { ::std::mem::transmute(delta_q_present) };
            delta_q_present as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let delta_lf_present: u32 = unsafe { ::std::mem::transmute(delta_lf_present) };
            delta_lf_present as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let delta_lf_multi: u32 = unsafe { ::std::mem::transmute(delta_lf_multi) };
            delta_lf_multi as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let segmentation_update_map: u32 =
                unsafe { ::std::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let segmentation_temporal_update: u32 =
                unsafe { ::std::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let segmentation_update_data: u32 =
                unsafe { ::std::mem::transmute(segmentation_update_data) };
            segmentation_update_data as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let UsesLr: u32 = unsafe { ::std::mem::transmute(UsesLr) };
            UsesLr as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let usesChromaLr: u32 = unsafe { ::std::mem::transmute(usesChromaLr) };
            usesChromaLr as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let apply_grain: u32 = unsafe { ::std::mem::transmute(apply_grain) };
            apply_grain as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoDecodeAV1PictureInfo {
    pub flags: StdVideoDecodeAV1PictureInfoFlags,
    pub frame_type: StdVideoAV1FrameType,
    pub current_frame_id: u32,
    pub OrderHint: u8,
    pub primary_ref_frame: u8,
    pub refresh_frame_flags: u8,
    pub reserved1: u8,
    pub interpolation_filter: StdVideoAV1InterpolationFilter,
    pub TxMode: StdVideoAV1TxMode,
    pub delta_q_res: u8,
    pub delta_lf_res: u8,
    pub SkipModeFrame: [u8; 2usize],
    pub coded_denom: u8,
    pub reserved2: [u8; 3usize],
    pub OrderHints: [u8; 8usize],
    pub expectedFrameId: [u32; 8usize],
    pub pTileInfo: *const StdVideoAV1TileInfo,
    pub pQuantization: *const StdVideoAV1Quantization,
    pub pSegmentation: *const StdVideoAV1Segmentation,
    pub pLoopFilter: *const StdVideoAV1LoopFilter,
    pub pCDEF: *const StdVideoAV1CDEF,
    pub pLoopRestoration: *const StdVideoAV1LoopRestoration,
    pub pGlobalMotion: *const StdVideoAV1GlobalMotion,
    pub pFilmGrain: *const StdVideoAV1FilmGrain,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1PictureInfo"]
        [::std::mem::size_of::<StdVideoDecodeAV1PictureInfo>() - 136usize];
    ["Alignment of StdVideoDecodeAV1PictureInfo"]
        [::std::mem::align_of::<StdVideoDecodeAV1PictureInfo>() - 8usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::flags"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::frame_type"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, frame_type) - 4usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::current_frame_id"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, current_frame_id) - 8usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::OrderHint"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, OrderHint) - 12usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::primary_ref_frame"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, primary_ref_frame) - 13usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::refresh_frame_flags"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, refresh_frame_flags) - 14usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, reserved1) - 15usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::interpolation_filter"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, interpolation_filter) - 16usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::TxMode"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, TxMode) - 20usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::delta_q_res"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, delta_q_res) - 24usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::delta_lf_res"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, delta_lf_res) - 25usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::SkipModeFrame"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, SkipModeFrame) - 26usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::coded_denom"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, coded_denom) - 28usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::reserved2"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, reserved2) - 29usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::OrderHints"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, OrderHints) - 32usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::expectedFrameId"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, expectedFrameId) - 40usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pTileInfo"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pTileInfo) - 72usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pQuantization"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pQuantization) - 80usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pSegmentation"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pSegmentation) - 88usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pLoopFilter"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pLoopFilter) - 96usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pCDEF"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pCDEF) - 104usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pLoopRestoration"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pLoopRestoration) - 112usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pGlobalMotion"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pGlobalMotion) - 120usize];
    ["Offset of field: StdVideoDecodeAV1PictureInfo::pFilmGrain"]
        [::std::mem::offset_of!(StdVideoDecodeAV1PictureInfo, pFilmGrain) - 128usize];
};
impl Default for StdVideoDecodeAV1PictureInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeAV1ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1ReferenceInfoFlags"]
        [::std::mem::size_of::<StdVideoDecodeAV1ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoDecodeAV1ReferenceInfoFlags"]
        [::std::mem::align_of::<StdVideoDecodeAV1ReferenceInfoFlags>() - 4usize];
};
impl StdVideoDecodeAV1ReferenceInfoFlags {
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_frame_end_update_cdf: u32,
        segmentation_enabled: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::std::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoDecodeAV1ReferenceInfo {
    pub flags: StdVideoDecodeAV1ReferenceInfoFlags,
    pub frame_type: u8,
    pub RefFrameSignBias: u8,
    pub OrderHint: u8,
    pub SavedOrderHints: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoDecodeAV1ReferenceInfo"]
        [::std::mem::size_of::<StdVideoDecodeAV1ReferenceInfo>() - 16usize];
    ["Alignment of StdVideoDecodeAV1ReferenceInfo"]
        [::std::mem::align_of::<StdVideoDecodeAV1ReferenceInfo>() - 4usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::flags"]
        [::std::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::frame_type"]
        [::std::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, frame_type) - 4usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::RefFrameSignBias"]
        [::std::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, RefFrameSignBias) - 5usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::OrderHint"]
        [::std::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, OrderHint) - 6usize];
    ["Offset of field: StdVideoDecodeAV1ReferenceInfo::SavedOrderHints"]
        [::std::mem::offset_of!(StdVideoDecodeAV1ReferenceInfo, SavedOrderHints) - 7usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeAV1ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfile: StdVideoAV1Profile,
    pub filmGrainSupport: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1ProfileInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeAV1ProfileInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeAV1ProfileInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeAV1ProfileInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::stdProfile"]
        [::std::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, stdProfile) - 16usize];
    ["Offset of field: VkVideoDecodeAV1ProfileInfoKHR::filmGrainSupport"]
        [::std::mem::offset_of!(VkVideoDecodeAV1ProfileInfoKHR, filmGrainSupport) - 20usize];
};
impl Default for VkVideoDecodeAV1ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeAV1CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxLevel: StdVideoAV1Level,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1CapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoDecodeAV1CapabilitiesKHR>() - 24usize];
    ["Alignment of VkVideoDecodeAV1CapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoDecodeAV1CapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeAV1CapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeAV1CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1CapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeAV1CapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeAV1CapabilitiesKHR::maxLevel"]
        [::std::mem::offset_of!(VkVideoDecodeAV1CapabilitiesKHR, maxLevel) - 16usize];
};
impl Default for VkVideoDecodeAV1CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeAV1SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdSequenceHeader: *const StdVideoAV1SequenceHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1SessionParametersCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeAV1SessionParametersCreateInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeAV1SessionParametersCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeAV1SessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeAV1SessionParametersCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeAV1SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1SessionParametersCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeAV1SessionParametersCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeAV1SessionParametersCreateInfoKHR::pStdSequenceHeader"][::std::mem::offset_of!(
        VkVideoDecodeAV1SessionParametersCreateInfoKHR,
        pStdSequenceHeader
    )
        - 16usize];
};
impl Default for VkVideoDecodeAV1SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeAV1PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdPictureInfo: *const StdVideoDecodeAV1PictureInfo,
    pub referenceNameSlotIndices: [i32; 7usize],
    pub frameHeaderOffset: u32,
    pub tileCount: u32,
    pub pTileOffsets: *const u32,
    pub pTileSizes: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1PictureInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeAV1PictureInfoKHR>() - 80usize];
    ["Alignment of VkVideoDecodeAV1PictureInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeAV1PictureInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pStdPictureInfo"]
        [::std::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pStdPictureInfo) - 16usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::referenceNameSlotIndices"][::std::mem::offset_of!(
        VkVideoDecodeAV1PictureInfoKHR,
        referenceNameSlotIndices
    ) - 24usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::frameHeaderOffset"]
        [::std::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, frameHeaderOffset) - 52usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::tileCount"]
        [::std::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, tileCount) - 56usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pTileOffsets"]
        [::std::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pTileOffsets) - 64usize];
    ["Offset of field: VkVideoDecodeAV1PictureInfoKHR::pTileSizes"]
        [::std::mem::offset_of!(VkVideoDecodeAV1PictureInfoKHR, pTileSizes) - 72usize];
};
impl Default for VkVideoDecodeAV1PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeAV1DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoDecodeAV1ReferenceInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1DpbSlotInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeAV1DpbSlotInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeAV1DpbSlotInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeAV1DpbSlotInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeAV1DpbSlotInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeAV1DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1DpbSlotInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeAV1DpbSlotInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeAV1DpbSlotInfoKHR::pStdReferenceInfo"]
        [::std::mem::offset_of!(VkVideoDecodeAV1DpbSlotInfoKHR, pStdReferenceInfo) - 16usize];
};
impl Default for VkVideoDecodeAV1DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeAV1DecoderModelInfo {
    pub buffer_delay_length_minus_1: u8,
    pub buffer_removal_time_length_minus_1: u8,
    pub frame_presentation_time_length_minus_1: u8,
    pub reserved1: u8,
    pub num_units_in_decoding_tick: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1DecoderModelInfo"]
        [::std::mem::size_of::<StdVideoEncodeAV1DecoderModelInfo>() - 8usize];
    ["Alignment of StdVideoEncodeAV1DecoderModelInfo"]
        [::std::mem::align_of::<StdVideoEncodeAV1DecoderModelInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::buffer_delay_length_minus_1"][::std::mem::offset_of!(
        StdVideoEncodeAV1DecoderModelInfo,
        buffer_delay_length_minus_1
    ) - 0usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::buffer_removal_time_length_minus_1"][::std::mem::offset_of!(
        StdVideoEncodeAV1DecoderModelInfo,
        buffer_removal_time_length_minus_1
    )
        - 1usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::frame_presentation_time_length_minus_1"] [:: std :: mem :: offset_of ! (StdVideoEncodeAV1DecoderModelInfo , frame_presentation_time_length_minus_1) - 2usize] ;
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeAV1DecoderModelInfo, reserved1) - 3usize];
    ["Offset of field: StdVideoEncodeAV1DecoderModelInfo::num_units_in_decoding_tick"][::std::mem::offset_of!(
        StdVideoEncodeAV1DecoderModelInfo,
        num_units_in_decoding_tick
    ) - 4usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeAV1ExtensionHeader {
    pub temporal_id: u8,
    pub spatial_id: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1ExtensionHeader"]
        [::std::mem::size_of::<StdVideoEncodeAV1ExtensionHeader>() - 2usize];
    ["Alignment of StdVideoEncodeAV1ExtensionHeader"]
        [::std::mem::align_of::<StdVideoEncodeAV1ExtensionHeader>() - 1usize];
    ["Offset of field: StdVideoEncodeAV1ExtensionHeader::temporal_id"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ExtensionHeader, temporal_id) - 0usize];
    ["Offset of field: StdVideoEncodeAV1ExtensionHeader::spatial_id"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ExtensionHeader, spatial_id) - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeAV1OperatingPointInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1OperatingPointInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeAV1OperatingPointInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeAV1OperatingPointInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeAV1OperatingPointInfoFlags>() - 4usize];
};
impl StdVideoEncodeAV1OperatingPointInfoFlags {
    #[inline]
    pub fn decoder_model_present_for_this_op(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_decoder_model_present_for_this_op(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn decoder_model_present_for_this_op_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_decoder_model_present_for_this_op_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn low_delay_mode_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_low_delay_mode_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn low_delay_mode_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_low_delay_mode_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn initial_display_delay_present_for_this_op(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_initial_display_delay_present_for_this_op(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn initial_display_delay_present_for_this_op_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_initial_display_delay_present_for_this_op_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                29u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                29u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        decoder_model_present_for_this_op: u32,
        low_delay_mode_flag: u32,
        initial_display_delay_present_for_this_op: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let decoder_model_present_for_this_op: u32 =
                unsafe { ::std::mem::transmute(decoder_model_present_for_this_op) };
            decoder_model_present_for_this_op as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let low_delay_mode_flag: u32 = unsafe { ::std::mem::transmute(low_delay_mode_flag) };
            low_delay_mode_flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let initial_display_delay_present_for_this_op: u32 =
                unsafe { ::std::mem::transmute(initial_display_delay_present_for_this_op) };
            initial_display_delay_present_for_this_op as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeAV1OperatingPointInfo {
    pub flags: StdVideoEncodeAV1OperatingPointInfoFlags,
    pub operating_point_idc: u16,
    pub seq_level_idx: u8,
    pub seq_tier: u8,
    pub decoder_buffer_delay: u32,
    pub encoder_buffer_delay: u32,
    pub initial_display_delay_minus_1: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1OperatingPointInfo"]
        [::std::mem::size_of::<StdVideoEncodeAV1OperatingPointInfo>() - 20usize];
    ["Alignment of StdVideoEncodeAV1OperatingPointInfo"]
        [::std::mem::align_of::<StdVideoEncodeAV1OperatingPointInfo>() - 4usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeAV1OperatingPointInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::operating_point_idc"]
        [::std::mem::offset_of!(StdVideoEncodeAV1OperatingPointInfo, operating_point_idc) - 4usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::seq_level_idx"]
        [::std::mem::offset_of!(StdVideoEncodeAV1OperatingPointInfo, seq_level_idx) - 6usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::seq_tier"]
        [::std::mem::offset_of!(StdVideoEncodeAV1OperatingPointInfo, seq_tier) - 7usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::decoder_buffer_delay"][::std::mem::offset_of!(
        StdVideoEncodeAV1OperatingPointInfo,
        decoder_buffer_delay
    ) - 8usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::encoder_buffer_delay"][::std::mem::offset_of!(
        StdVideoEncodeAV1OperatingPointInfo,
        encoder_buffer_delay
    ) - 12usize];
    ["Offset of field: StdVideoEncodeAV1OperatingPointInfo::initial_display_delay_minus_1"][::std::mem::offset_of!(
        StdVideoEncodeAV1OperatingPointInfo,
        initial_display_delay_minus_1
    )
        - 16usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeAV1PictureInfoFlags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1PictureInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeAV1PictureInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeAV1PictureInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeAV1PictureInfoFlags>() - 4usize];
};
impl StdVideoEncodeAV1PictureInfoFlags {
    #[inline]
    pub fn error_resilient_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_error_resilient_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn error_resilient_mode_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_error_resilient_mode_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_cdf_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_cdf_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_cdf_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_cdf_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_superres(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_superres(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_superres_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_superres_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn render_and_frame_size_different(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_render_and_frame_size_different(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn render_and_frame_size_different_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_render_and_frame_size_different_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_screen_content_tools(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_screen_content_tools(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_screen_content_tools_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_screen_content_tools_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_filter_switchable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_filter_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_filter_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_filter_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn force_integer_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_force_integer_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn force_integer_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_force_integer_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_size_override_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_size_override_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_size_override_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_size_override_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn buffer_removal_time_present_flag(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_buffer_removal_time_present_flag(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn buffer_removal_time_present_flag_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_buffer_removal_time_present_flag_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_intrabc(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_intrabc(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_intrabc_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_intrabc_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn frame_refs_short_signaling(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_frame_refs_short_signaling(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn frame_refs_short_signaling_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_frame_refs_short_signaling_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_high_precision_mv(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_high_precision_mv(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_high_precision_mv_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_high_precision_mv_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn is_motion_mode_switchable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_motion_mode_switchable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn is_motion_mode_switchable_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_is_motion_mode_switchable_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn use_ref_frame_mvs(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_ref_frame_mvs(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn use_ref_frame_mvs_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_use_ref_frame_mvs_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allow_warped_motion(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allow_warped_motion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allow_warped_motion_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allow_warped_motion_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reduced_tx_set(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reduced_tx_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reduced_tx_set_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reduced_tx_set_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn skip_mode_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_mode_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn skip_mode_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_skip_mode_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_q_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_q_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_q_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_q_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_present(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_present(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_present_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_present_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn delta_lf_multi(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_delta_lf_multi(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn delta_lf_multi_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_delta_lf_multi_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_map(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_map(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_map_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_map_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_temporal_update(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_temporal_update(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_temporal_update_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_temporal_update_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_update_data(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_update_data(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_update_data_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_update_data_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn UsesLr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_UsesLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn UsesLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                25usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_UsesLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                25usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn usesChromaLr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_usesChromaLr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn usesChromaLr_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                26usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_usesChromaLr_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                26usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn show_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_show_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn show_frame_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_show_frame_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn showable_frame(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_showable_frame(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn showable_frame_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_showable_frame_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        error_resilient_mode: u32,
        disable_cdf_update: u32,
        use_superres: u32,
        render_and_frame_size_different: u32,
        allow_screen_content_tools: u32,
        is_filter_switchable: u32,
        force_integer_mv: u32,
        frame_size_override_flag: u32,
        buffer_removal_time_present_flag: u32,
        allow_intrabc: u32,
        frame_refs_short_signaling: u32,
        allow_high_precision_mv: u32,
        is_motion_mode_switchable: u32,
        use_ref_frame_mvs: u32,
        disable_frame_end_update_cdf: u32,
        allow_warped_motion: u32,
        reduced_tx_set: u32,
        skip_mode_present: u32,
        delta_q_present: u32,
        delta_lf_present: u32,
        delta_lf_multi: u32,
        segmentation_enabled: u32,
        segmentation_update_map: u32,
        segmentation_temporal_update: u32,
        segmentation_update_data: u32,
        UsesLr: u32,
        usesChromaLr: u32,
        show_frame: u32,
        showable_frame: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let error_resilient_mode: u32 = unsafe { ::std::mem::transmute(error_resilient_mode) };
            error_resilient_mode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let disable_cdf_update: u32 = unsafe { ::std::mem::transmute(disable_cdf_update) };
            disable_cdf_update as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let use_superres: u32 = unsafe { ::std::mem::transmute(use_superres) };
            use_superres as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let render_and_frame_size_different: u32 =
                unsafe { ::std::mem::transmute(render_and_frame_size_different) };
            render_and_frame_size_different as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let allow_screen_content_tools: u32 =
                unsafe { ::std::mem::transmute(allow_screen_content_tools) };
            allow_screen_content_tools as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_filter_switchable: u32 = unsafe { ::std::mem::transmute(is_filter_switchable) };
            is_filter_switchable as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let force_integer_mv: u32 = unsafe { ::std::mem::transmute(force_integer_mv) };
            force_integer_mv as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let frame_size_override_flag: u32 =
                unsafe { ::std::mem::transmute(frame_size_override_flag) };
            frame_size_override_flag as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let buffer_removal_time_present_flag: u32 =
                unsafe { ::std::mem::transmute(buffer_removal_time_present_flag) };
            buffer_removal_time_present_flag as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let allow_intrabc: u32 = unsafe { ::std::mem::transmute(allow_intrabc) };
            allow_intrabc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let frame_refs_short_signaling: u32 =
                unsafe { ::std::mem::transmute(frame_refs_short_signaling) };
            frame_refs_short_signaling as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let allow_high_precision_mv: u32 =
                unsafe { ::std::mem::transmute(allow_high_precision_mv) };
            allow_high_precision_mv as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let is_motion_mode_switchable: u32 =
                unsafe { ::std::mem::transmute(is_motion_mode_switchable) };
            is_motion_mode_switchable as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let use_ref_frame_mvs: u32 = unsafe { ::std::mem::transmute(use_ref_frame_mvs) };
            use_ref_frame_mvs as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::std::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let allow_warped_motion: u32 = unsafe { ::std::mem::transmute(allow_warped_motion) };
            allow_warped_motion as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let reduced_tx_set: u32 = unsafe { ::std::mem::transmute(reduced_tx_set) };
            reduced_tx_set as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let skip_mode_present: u32 = unsafe { ::std::mem::transmute(skip_mode_present) };
            skip_mode_present as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let delta_q_present: u32 = unsafe { ::std::mem::transmute(delta_q_present) };
            delta_q_present as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let delta_lf_present: u32 = unsafe { ::std::mem::transmute(delta_lf_present) };
            delta_lf_present as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let delta_lf_multi: u32 = unsafe { ::std::mem::transmute(delta_lf_multi) };
            delta_lf_multi as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let segmentation_update_map: u32 =
                unsafe { ::std::mem::transmute(segmentation_update_map) };
            segmentation_update_map as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let segmentation_temporal_update: u32 =
                unsafe { ::std::mem::transmute(segmentation_temporal_update) };
            segmentation_temporal_update as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let segmentation_update_data: u32 =
                unsafe { ::std::mem::transmute(segmentation_update_data) };
            segmentation_update_data as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let UsesLr: u32 = unsafe { ::std::mem::transmute(UsesLr) };
            UsesLr as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let usesChromaLr: u32 = unsafe { ::std::mem::transmute(usesChromaLr) };
            usesChromaLr as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let show_frame: u32 = unsafe { ::std::mem::transmute(show_frame) };
            show_frame as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let showable_frame: u32 = unsafe { ::std::mem::transmute(showable_frame) };
            showable_frame as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeAV1PictureInfo {
    pub flags: StdVideoEncodeAV1PictureInfoFlags,
    pub frame_type: StdVideoAV1FrameType,
    pub frame_presentation_time: u32,
    pub current_frame_id: u32,
    pub order_hint: u8,
    pub primary_ref_frame: u8,
    pub refresh_frame_flags: u8,
    pub coded_denom: u8,
    pub render_width_minus_1: u16,
    pub render_height_minus_1: u16,
    pub interpolation_filter: StdVideoAV1InterpolationFilter,
    pub TxMode: StdVideoAV1TxMode,
    pub delta_q_res: u8,
    pub delta_lf_res: u8,
    pub ref_order_hint: [u8; 8usize],
    pub ref_frame_idx: [i8; 7usize],
    pub reserved1: [u8; 3usize],
    pub delta_frame_id_minus_1: [u32; 7usize],
    pub pTileInfo: *const StdVideoAV1TileInfo,
    pub pQuantization: *const StdVideoAV1Quantization,
    pub pSegmentation: *const StdVideoAV1Segmentation,
    pub pLoopFilter: *const StdVideoAV1LoopFilter,
    pub pCDEF: *const StdVideoAV1CDEF,
    pub pLoopRestoration: *const StdVideoAV1LoopRestoration,
    pub pGlobalMotion: *const StdVideoAV1GlobalMotion,
    pub pExtensionHeader: *const StdVideoEncodeAV1ExtensionHeader,
    pub pBufferRemovalTimes: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1PictureInfo"]
        [::std::mem::size_of::<StdVideoEncodeAV1PictureInfo>() - 152usize];
    ["Alignment of StdVideoEncodeAV1PictureInfo"]
        [::std::mem::align_of::<StdVideoEncodeAV1PictureInfo>() - 8usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::frame_type"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, frame_type) - 4usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::frame_presentation_time"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, frame_presentation_time) - 8usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::current_frame_id"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, current_frame_id) - 12usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::order_hint"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, order_hint) - 16usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::primary_ref_frame"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, primary_ref_frame) - 17usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::refresh_frame_flags"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, refresh_frame_flags) - 18usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::coded_denom"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, coded_denom) - 19usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::render_width_minus_1"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, render_width_minus_1) - 20usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::render_height_minus_1"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, render_height_minus_1) - 22usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::interpolation_filter"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, interpolation_filter) - 24usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::TxMode"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, TxMode) - 28usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::delta_q_res"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, delta_q_res) - 32usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::delta_lf_res"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, delta_lf_res) - 33usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::ref_order_hint"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, ref_order_hint) - 34usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::ref_frame_idx"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, ref_frame_idx) - 42usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, reserved1) - 49usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::delta_frame_id_minus_1"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, delta_frame_id_minus_1) - 52usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pTileInfo"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pTileInfo) - 80usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pQuantization"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pQuantization) - 88usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pSegmentation"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pSegmentation) - 96usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pLoopFilter"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pLoopFilter) - 104usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pCDEF"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pCDEF) - 112usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pLoopRestoration"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pLoopRestoration) - 120usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pGlobalMotion"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pGlobalMotion) - 128usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pExtensionHeader"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pExtensionHeader) - 136usize];
    ["Offset of field: StdVideoEncodeAV1PictureInfo::pBufferRemovalTimes"]
        [::std::mem::offset_of!(StdVideoEncodeAV1PictureInfo, pBufferRemovalTimes) - 144usize];
};
impl Default for StdVideoEncodeAV1PictureInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct StdVideoEncodeAV1ReferenceInfoFlags {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1ReferenceInfoFlags"]
        [::std::mem::size_of::<StdVideoEncodeAV1ReferenceInfoFlags>() - 4usize];
    ["Alignment of StdVideoEncodeAV1ReferenceInfoFlags"]
        [::std::mem::align_of::<StdVideoEncodeAV1ReferenceInfoFlags>() - 4usize];
};
impl StdVideoEncodeAV1ReferenceInfoFlags {
    #[inline]
    pub fn disable_frame_end_update_cdf(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disable_frame_end_update_cdf(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disable_frame_end_update_cdf_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disable_frame_end_update_cdf_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn segmentation_enabled(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_segmentation_enabled(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn segmentation_enabled_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_segmentation_enabled_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disable_frame_end_update_cdf: u32,
        segmentation_enabled: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disable_frame_end_update_cdf: u32 =
                unsafe { ::std::mem::transmute(disable_frame_end_update_cdf) };
            disable_frame_end_update_cdf as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let segmentation_enabled: u32 = unsafe { ::std::mem::transmute(segmentation_enabled) };
            segmentation_enabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StdVideoEncodeAV1ReferenceInfo {
    pub flags: StdVideoEncodeAV1ReferenceInfoFlags,
    pub RefFrameId: u32,
    pub frame_type: StdVideoAV1FrameType,
    pub OrderHint: u8,
    pub reserved1: [u8; 3usize],
    pub pExtensionHeader: *const StdVideoEncodeAV1ExtensionHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StdVideoEncodeAV1ReferenceInfo"]
        [::std::mem::size_of::<StdVideoEncodeAV1ReferenceInfo>() - 24usize];
    ["Alignment of StdVideoEncodeAV1ReferenceInfo"]
        [::std::mem::align_of::<StdVideoEncodeAV1ReferenceInfo>() - 8usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::flags"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, flags) - 0usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::RefFrameId"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, RefFrameId) - 4usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::frame_type"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, frame_type) - 8usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::OrderHint"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, OrderHint) - 12usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::reserved1"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, reserved1) - 13usize];
    ["Offset of field: StdVideoEncodeAV1ReferenceInfo::pExtensionHeader"]
        [::std::mem::offset_of!(StdVideoEncodeAV1ReferenceInfo, pExtensionHeader) - 16usize];
};
impl Default for StdVideoEncodeAV1ReferenceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_INTRA_ONLY_KHR:
    VkVideoEncodeAV1PredictionModeKHR = 0;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_SINGLE_REFERENCE_KHR : VkVideoEncodeAV1PredictionModeKHR = 1 ;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_UNIDIRECTIONAL_COMPOUND_KHR : VkVideoEncodeAV1PredictionModeKHR = 2 ;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_BIDIRECTIONAL_COMPOUND_KHR : VkVideoEncodeAV1PredictionModeKHR = 3 ;
pub const VkVideoEncodeAV1PredictionModeKHR_VK_VIDEO_ENCODE_AV1_PREDICTION_MODE_MAX_ENUM_KHR:
    VkVideoEncodeAV1PredictionModeKHR = 2147483647;
pub type VkVideoEncodeAV1PredictionModeKHR = ::std::os::raw::c_uint;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_INTRA_KHR:
    VkVideoEncodeAV1RateControlGroupKHR = 0;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_PREDICTIVE_KHR : VkVideoEncodeAV1RateControlGroupKHR = 1 ;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_BIPREDICTIVE_KHR : VkVideoEncodeAV1RateControlGroupKHR = 2 ;
pub const VkVideoEncodeAV1RateControlGroupKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_GROUP_MAX_ENUM_KHR : VkVideoEncodeAV1RateControlGroupKHR = 2147483647 ;
pub type VkVideoEncodeAV1RateControlGroupKHR = ::std::os::raw::c_uint;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_PER_RATE_CONTROL_GROUP_MIN_MAX_Q_INDEX_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_GENERATE_OBU_EXTENSION_HEADER_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 2 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_PRIMARY_REFERENCE_CDF_ONLY_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 4 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_FRAME_SIZE_OVERRIDE_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 8 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_MOTION_VECTOR_SCALING_BIT_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 16 ;
pub const VkVideoEncodeAV1CapabilityFlagBitsKHR_VK_VIDEO_ENCODE_AV1_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeAV1CapabilityFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeAV1CapabilityFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeAV1CapabilityFlagsKHR = VkFlags;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_UNIFORM_TILE_SPACING_FLAG_SET_BIT_KHR : VkVideoEncodeAV1StdFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_SKIP_MODE_PRESENT_UNSET_BIT_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 2;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_PRIMARY_REF_FRAME_BIT_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 4;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_DELTA_Q_BIT_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 8;
pub const VkVideoEncodeAV1StdFlagBitsKHR_VK_VIDEO_ENCODE_AV1_STD_FLAG_BITS_MAX_ENUM_KHR:
    VkVideoEncodeAV1StdFlagBitsKHR = 2147483647;
pub type VkVideoEncodeAV1StdFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeAV1StdFlagsKHR = VkFlags;
pub const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR_VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_64_BIT_KHR : VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR_VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_128_BIT_KHR : VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = 2 ;
pub const VkVideoEncodeAV1SuperblockSizeFlagBitsKHR_VK_VIDEO_ENCODE_AV1_SUPERBLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeAV1SuperblockSizeFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeAV1SuperblockSizeFlagsKHR = VkFlags;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REGULAR_GOP_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 1 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 2 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 4 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 8 ;
pub const VkVideoEncodeAV1RateControlFlagBitsKHR_VK_VIDEO_ENCODE_AV1_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR : VkVideoEncodeAV1RateControlFlagBitsKHR = 2147483647 ;
pub type VkVideoEncodeAV1RateControlFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkVideoEncodeAV1RateControlFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVideoEncodeAV1FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub videoEncodeAV1: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoEncodeAV1FeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceVideoEncodeAV1FeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceVideoEncodeAV1FeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceVideoEncodeAV1FeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeAV1FeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoEncodeAV1FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeAV1FeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoEncodeAV1FeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeAV1FeaturesKHR::videoEncodeAV1"][::std::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeAV1FeaturesKHR,
        videoEncodeAV1
    ) - 16usize];
};
impl Default for VkPhysicalDeviceVideoEncodeAV1FeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1CapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkVideoEncodeAV1CapabilityFlagsKHR,
    pub maxLevel: StdVideoAV1Level,
    pub codedPictureAlignment: VkExtent2D,
    pub maxTiles: VkExtent2D,
    pub minTileSize: VkExtent2D,
    pub maxTileSize: VkExtent2D,
    pub superblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR,
    pub maxSingleReferenceCount: u32,
    pub singleReferenceNameMask: u32,
    pub maxUnidirectionalCompoundReferenceCount: u32,
    pub maxUnidirectionalCompoundGroup1ReferenceCount: u32,
    pub unidirectionalCompoundReferenceNameMask: u32,
    pub maxBidirectionalCompoundReferenceCount: u32,
    pub maxBidirectionalCompoundGroup1ReferenceCount: u32,
    pub maxBidirectionalCompoundGroup2ReferenceCount: u32,
    pub bidirectionalCompoundReferenceNameMask: u32,
    pub maxTemporalLayerCount: u32,
    pub maxSpatialLayerCount: u32,
    pub maxOperatingPoints: u32,
    pub minQIndex: u32,
    pub maxQIndex: u32,
    pub prefersGopRemainingFrames: VkBool32,
    pub requiresGopRemainingFrames: VkBool32,
    pub stdSyntaxFlags: VkVideoEncodeAV1StdFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1CapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1CapabilitiesKHR>() - 128usize];
    ["Alignment of VkVideoEncodeAV1CapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1CapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxLevel"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxLevel) - 20usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::codedPictureAlignment"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, codedPictureAlignment) - 24usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxTiles"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxTiles) - 32usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::minTileSize"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, minTileSize) - 40usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxTileSize"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxTileSize) - 48usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::superblockSizes"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, superblockSizes) - 56usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxSingleReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        maxSingleReferenceCount
    ) - 60usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::singleReferenceNameMask"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        singleReferenceNameMask
    ) - 64usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxUnidirectionalCompoundReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        maxUnidirectionalCompoundReferenceCount
    )
        - 68usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxUnidirectionalCompoundGroup1ReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1CapabilitiesKHR , maxUnidirectionalCompoundGroup1ReferenceCount) - 72usize] ;
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::unidirectionalCompoundReferenceNameMask"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        unidirectionalCompoundReferenceNameMask
    )
        - 76usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxBidirectionalCompoundReferenceCount"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        maxBidirectionalCompoundReferenceCount
    )
        - 80usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxBidirectionalCompoundGroup1ReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1CapabilitiesKHR , maxBidirectionalCompoundGroup1ReferenceCount) - 84usize] ;
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxBidirectionalCompoundGroup2ReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1CapabilitiesKHR , maxBidirectionalCompoundGroup2ReferenceCount) - 88usize] ;
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::bidirectionalCompoundReferenceNameMask"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        bidirectionalCompoundReferenceNameMask
    )
        - 92usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxTemporalLayerCount"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxTemporalLayerCount) - 96usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxSpatialLayerCount"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxSpatialLayerCount) - 100usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxOperatingPoints"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxOperatingPoints) - 104usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::minQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, minQIndex) - 108usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::maxQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, maxQIndex) - 112usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::prefersGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        prefersGopRemainingFrames
    ) - 116usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::requiresGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeAV1CapabilitiesKHR,
        requiresGopRemainingFrames
    ) - 120usize];
    ["Offset of field: VkVideoEncodeAV1CapabilitiesKHR::stdSyntaxFlags"]
        [::std::mem::offset_of!(VkVideoEncodeAV1CapabilitiesKHR, stdSyntaxFlags) - 124usize];
};
impl Default for VkVideoEncodeAV1CapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVideoEncodeAV1QIndexKHR {
    pub intraQIndex: u32,
    pub predictiveQIndex: u32,
    pub bipredictiveQIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1QIndexKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1QIndexKHR>() - 12usize];
    ["Alignment of VkVideoEncodeAV1QIndexKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1QIndexKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1QIndexKHR::intraQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1QIndexKHR, intraQIndex) - 0usize];
    ["Offset of field: VkVideoEncodeAV1QIndexKHR::predictiveQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1QIndexKHR, predictiveQIndex) - 4usize];
    ["Offset of field: VkVideoEncodeAV1QIndexKHR::bipredictiveQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1QIndexKHR, bipredictiveQIndex) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1QualityLevelPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub preferredRateControlFlags: VkVideoEncodeAV1RateControlFlagsKHR,
    pub preferredGopFrameCount: u32,
    pub preferredKeyFramePeriod: u32,
    pub preferredConsecutiveBipredictiveFrameCount: u32,
    pub preferredTemporalLayerCount: u32,
    pub preferredConstantQIndex: VkVideoEncodeAV1QIndexKHR,
    pub preferredMaxSingleReferenceCount: u32,
    pub preferredSingleReferenceNameMask: u32,
    pub preferredMaxUnidirectionalCompoundReferenceCount: u32,
    pub preferredMaxUnidirectionalCompoundGroup1ReferenceCount: u32,
    pub preferredUnidirectionalCompoundReferenceNameMask: u32,
    pub preferredMaxBidirectionalCompoundReferenceCount: u32,
    pub preferredMaxBidirectionalCompoundGroup1ReferenceCount: u32,
    pub preferredMaxBidirectionalCompoundGroup2ReferenceCount: u32,
    pub preferredBidirectionalCompoundReferenceNameMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1QualityLevelPropertiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1QualityLevelPropertiesKHR>() - 88usize];
    ["Alignment of VkVideoEncodeAV1QualityLevelPropertiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1QualityLevelPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1QualityLevelPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1QualityLevelPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredRateControlFlags"][::std::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredRateControlFlags
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredGopFrameCount"][::std::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredGopFrameCount
    )
        - 20usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredKeyFramePeriod"][::std::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredKeyFramePeriod
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredConsecutiveBipredictiveFrameCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredConsecutiveBipredictiveFrameCount) - 28usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredTemporalLayerCount"][::std::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredTemporalLayerCount
    )
        - 32usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredConstantQIndex"][::std::mem::offset_of!(
        VkVideoEncodeAV1QualityLevelPropertiesKHR,
        preferredConstantQIndex
    )
        - 36usize];
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxSingleReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxSingleReferenceCount) - 48usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredSingleReferenceNameMask"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredSingleReferenceNameMask) - 52usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxUnidirectionalCompoundReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxUnidirectionalCompoundReferenceCount) - 56usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxUnidirectionalCompoundGroup1ReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxUnidirectionalCompoundGroup1ReferenceCount) - 60usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredUnidirectionalCompoundReferenceNameMask"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredUnidirectionalCompoundReferenceNameMask) - 64usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxBidirectionalCompoundReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxBidirectionalCompoundReferenceCount) - 68usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxBidirectionalCompoundGroup1ReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxBidirectionalCompoundGroup1ReferenceCount) - 72usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredMaxBidirectionalCompoundGroup2ReferenceCount"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredMaxBidirectionalCompoundGroup2ReferenceCount) - 76usize] ;
    ["Offset of field: VkVideoEncodeAV1QualityLevelPropertiesKHR::preferredBidirectionalCompoundReferenceNameMask"] [:: std :: mem :: offset_of ! (VkVideoEncodeAV1QualityLevelPropertiesKHR , preferredBidirectionalCompoundReferenceNameMask) - 80usize] ;
};
impl Default for VkVideoEncodeAV1QualityLevelPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1SessionCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useMaxLevel: VkBool32,
    pub maxLevel: StdVideoAV1Level,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1SessionCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1SessionCreateInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeAV1SessionCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1SessionCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::useMaxLevel"]
        [::std::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, useMaxLevel) - 16usize];
    ["Offset of field: VkVideoEncodeAV1SessionCreateInfoKHR::maxLevel"]
        [::std::mem::offset_of!(VkVideoEncodeAV1SessionCreateInfoKHR, maxLevel) - 20usize];
};
impl Default for VkVideoEncodeAV1SessionCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1SessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdSequenceHeader: *const StdVideoAV1SequenceHeader,
    pub pStdDecoderModelInfo: *const StdVideoEncodeAV1DecoderModelInfo,
    pub stdOperatingPointCount: u32,
    pub pStdOperatingPoints: *const StdVideoEncodeAV1OperatingPointInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1SessionParametersCreateInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1SessionParametersCreateInfoKHR>() - 48usize];
    ["Alignment of VkVideoEncodeAV1SessionParametersCreateInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1SessionParametersCreateInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1SessionParametersCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1SessionParametersCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pStdSequenceHeader"][::std::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        pStdSequenceHeader
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pStdDecoderModelInfo"][::std::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        pStdDecoderModelInfo
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::stdOperatingPointCount"][::std::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        stdOperatingPointCount
    )
        - 32usize];
    ["Offset of field: VkVideoEncodeAV1SessionParametersCreateInfoKHR::pStdOperatingPoints"][::std::mem::offset_of!(
        VkVideoEncodeAV1SessionParametersCreateInfoKHR,
        pStdOperatingPoints
    )
        - 40usize];
};
impl Default for VkVideoEncodeAV1SessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1PictureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub predictionMode: VkVideoEncodeAV1PredictionModeKHR,
    pub rateControlGroup: VkVideoEncodeAV1RateControlGroupKHR,
    pub constantQIndex: u32,
    pub pStdPictureInfo: *const StdVideoEncodeAV1PictureInfo,
    pub referenceNameSlotIndices: [i32; 7usize],
    pub primaryReferenceCdfOnly: VkBool32,
    pub generateObuExtensionHeader: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1PictureInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1PictureInfoKHR>() - 80usize];
    ["Alignment of VkVideoEncodeAV1PictureInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1PictureInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::predictionMode"]
        [::std::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, predictionMode) - 16usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::rateControlGroup"]
        [::std::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, rateControlGroup) - 20usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::constantQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, constantQIndex) - 24usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::pStdPictureInfo"]
        [::std::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, pStdPictureInfo) - 32usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::referenceNameSlotIndices"][::std::mem::offset_of!(
        VkVideoEncodeAV1PictureInfoKHR,
        referenceNameSlotIndices
    ) - 40usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::primaryReferenceCdfOnly"]
        [::std::mem::offset_of!(VkVideoEncodeAV1PictureInfoKHR, primaryReferenceCdfOnly) - 68usize];
    ["Offset of field: VkVideoEncodeAV1PictureInfoKHR::generateObuExtensionHeader"][::std::mem::offset_of!(
        VkVideoEncodeAV1PictureInfoKHR,
        generateObuExtensionHeader
    ) - 72usize];
};
impl Default for VkVideoEncodeAV1PictureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1DpbSlotInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdReferenceInfo: *const StdVideoEncodeAV1ReferenceInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1DpbSlotInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1DpbSlotInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeAV1DpbSlotInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1DpbSlotInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1DpbSlotInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1DpbSlotInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1DpbSlotInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1DpbSlotInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1DpbSlotInfoKHR::pStdReferenceInfo"]
        [::std::mem::offset_of!(VkVideoEncodeAV1DpbSlotInfoKHR, pStdReferenceInfo) - 16usize];
};
impl Default for VkVideoEncodeAV1DpbSlotInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1ProfileInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stdProfile: StdVideoAV1Profile,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1ProfileInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1ProfileInfoKHR>() - 24usize];
    ["Alignment of VkVideoEncodeAV1ProfileInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1ProfileInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1ProfileInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1ProfileInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1ProfileInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1ProfileInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1ProfileInfoKHR::stdProfile"]
        [::std::mem::offset_of!(VkVideoEncodeAV1ProfileInfoKHR, stdProfile) - 16usize];
};
impl Default for VkVideoEncodeAV1ProfileInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkVideoEncodeAV1FrameSizeKHR {
    pub intraFrameSize: u32,
    pub predictiveFrameSize: u32,
    pub bipredictiveFrameSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1FrameSizeKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1FrameSizeKHR>() - 12usize];
    ["Alignment of VkVideoEncodeAV1FrameSizeKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1FrameSizeKHR>() - 4usize];
    ["Offset of field: VkVideoEncodeAV1FrameSizeKHR::intraFrameSize"]
        [::std::mem::offset_of!(VkVideoEncodeAV1FrameSizeKHR, intraFrameSize) - 0usize];
    ["Offset of field: VkVideoEncodeAV1FrameSizeKHR::predictiveFrameSize"]
        [::std::mem::offset_of!(VkVideoEncodeAV1FrameSizeKHR, predictiveFrameSize) - 4usize];
    ["Offset of field: VkVideoEncodeAV1FrameSizeKHR::bipredictiveFrameSize"]
        [::std::mem::offset_of!(VkVideoEncodeAV1FrameSizeKHR, bipredictiveFrameSize) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1GopRemainingFrameInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useGopRemainingFrames: VkBool32,
    pub gopRemainingIntra: u32,
    pub gopRemainingPredictive: u32,
    pub gopRemainingBipredictive: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1GopRemainingFrameInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1GopRemainingFrameInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeAV1GopRemainingFrameInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1GopRemainingFrameInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1GopRemainingFrameInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1GopRemainingFrameInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::useGopRemainingFrames"][::std::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        useGopRemainingFrames
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::gopRemainingIntra"][::std::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        gopRemainingIntra
    ) - 20usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::gopRemainingPredictive"][::std::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        gopRemainingPredictive
    )
        - 24usize];
    ["Offset of field: VkVideoEncodeAV1GopRemainingFrameInfoKHR::gopRemainingBipredictive"][::std::mem::offset_of!(
        VkVideoEncodeAV1GopRemainingFrameInfoKHR,
        gopRemainingBipredictive
    )
        - 28usize];
};
impl Default for VkVideoEncodeAV1GopRemainingFrameInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1RateControlInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkVideoEncodeAV1RateControlFlagsKHR,
    pub gopFrameCount: u32,
    pub keyFramePeriod: u32,
    pub consecutiveBipredictiveFrameCount: u32,
    pub temporalLayerCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1RateControlInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1RateControlInfoKHR>() - 40usize];
    ["Alignment of VkVideoEncodeAV1RateControlInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1RateControlInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::flags"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, flags) - 16usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::gopFrameCount"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, gopFrameCount) - 20usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::keyFramePeriod"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, keyFramePeriod) - 24usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::consecutiveBipredictiveFrameCount"][::std::mem::offset_of!(
        VkVideoEncodeAV1RateControlInfoKHR,
        consecutiveBipredictiveFrameCount
    )
        - 28usize];
    ["Offset of field: VkVideoEncodeAV1RateControlInfoKHR::temporalLayerCount"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlInfoKHR, temporalLayerCount) - 32usize];
};
impl Default for VkVideoEncodeAV1RateControlInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1RateControlLayerInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub useMinQIndex: VkBool32,
    pub minQIndex: VkVideoEncodeAV1QIndexKHR,
    pub useMaxQIndex: VkBool32,
    pub maxQIndex: VkVideoEncodeAV1QIndexKHR,
    pub useMaxFrameSize: VkBool32,
    pub maxFrameSize: VkVideoEncodeAV1FrameSizeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1RateControlLayerInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1RateControlLayerInfoKHR>() - 64usize];
    ["Alignment of VkVideoEncodeAV1RateControlLayerInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1RateControlLayerInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::useMinQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, useMinQIndex) - 16usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::minQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, minQIndex) - 20usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::useMaxQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, useMaxQIndex) - 32usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::maxQIndex"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, maxQIndex) - 36usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::useMaxFrameSize"][::std::mem::offset_of!(
        VkVideoEncodeAV1RateControlLayerInfoKHR,
        useMaxFrameSize
    ) - 48usize];
    ["Offset of field: VkVideoEncodeAV1RateControlLayerInfoKHR::maxFrameSize"]
        [::std::mem::offset_of!(VkVideoEncodeAV1RateControlLayerInfoKHR, maxFrameSize) - 52usize];
};
impl Default for VkVideoEncodeAV1RateControlLayerInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVideoMaintenance1FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub videoMaintenance1: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoMaintenance1FeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceVideoMaintenance1FeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceVideoMaintenance1FeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceVideoMaintenance1FeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance1FeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoMaintenance1FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance1FeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoMaintenance1FeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance1FeaturesKHR::videoMaintenance1"][::std::mem::offset_of!(
        VkPhysicalDeviceVideoMaintenance1FeaturesKHR,
        videoMaintenance1
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceVideoMaintenance1FeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoInlineQueryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub queryPool: VkQueryPool,
    pub firstQuery: u32,
    pub queryCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoInlineQueryInfoKHR"]
        [::std::mem::size_of::<VkVideoInlineQueryInfoKHR>() - 32usize];
    ["Alignment of VkVideoInlineQueryInfoKHR"]
        [::std::mem::align_of::<VkVideoInlineQueryInfoKHR>() - 8usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoInlineQueryInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoInlineQueryInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::queryPool"]
        [::std::mem::offset_of!(VkVideoInlineQueryInfoKHR, queryPool) - 16usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::firstQuery"]
        [::std::mem::offset_of!(VkVideoInlineQueryInfoKHR, firstQuery) - 24usize];
    ["Offset of field: VkVideoInlineQueryInfoKHR::queryCount"]
        [::std::mem::offset_of!(VkVideoInlineQueryInfoKHR, queryCount) - 28usize];
};
impl Default for VkVideoInlineQueryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR =
    VkPhysicalDeviceVertexAttributeDivisorProperties;
pub type VkVertexInputBindingDivisorDescriptionKHR = VkVertexInputBindingDivisorDescription;
pub type VkPipelineVertexInputDivisorStateCreateInfoKHR =
    VkPipelineVertexInputDivisorStateCreateInfo;
pub type VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR =
    VkPhysicalDeviceVertexAttributeDivisorFeatures;
pub type VkPhysicalDeviceShaderFloatControls2FeaturesKHR =
    VkPhysicalDeviceShaderFloatControls2Features;
pub type VkPhysicalDeviceIndexTypeUint8FeaturesKHR = VkPhysicalDeviceIndexTypeUint8Features;
pub use self::VkLineRasterizationMode as VkLineRasterizationModeKHR;
pub type VkPhysicalDeviceLineRasterizationFeaturesKHR = VkPhysicalDeviceLineRasterizationFeatures;
pub type VkPhysicalDeviceLineRasterizationPropertiesKHR =
    VkPhysicalDeviceLineRasterizationProperties;
pub type VkPipelineRasterizationLineStateCreateInfoKHR = VkPipelineRasterizationLineStateCreateInfo;
pub type PFN_vkCmdSetLineStippleKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetLineStippleKHR(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    );
}
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_DEVICE_KHR: VkTimeDomainKHR = 0;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR: VkTimeDomainKHR = 1;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR: VkTimeDomainKHR = 2;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR: VkTimeDomainKHR = 3;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_DEVICE_EXT: VkTimeDomainKHR = 0;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: VkTimeDomainKHR = 1;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: VkTimeDomainKHR = 2;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: VkTimeDomainKHR = 3;
pub const VkTimeDomainKHR_VK_TIME_DOMAIN_MAX_ENUM_KHR: VkTimeDomainKHR = 2147483647;
pub type VkTimeDomainKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCalibratedTimestampInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub timeDomain: VkTimeDomainKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCalibratedTimestampInfoKHR"]
        [::std::mem::size_of::<VkCalibratedTimestampInfoKHR>() - 24usize];
    ["Alignment of VkCalibratedTimestampInfoKHR"]
        [::std::mem::align_of::<VkCalibratedTimestampInfoKHR>() - 8usize];
    ["Offset of field: VkCalibratedTimestampInfoKHR::sType"]
        [::std::mem::offset_of!(VkCalibratedTimestampInfoKHR, sType) - 0usize];
    ["Offset of field: VkCalibratedTimestampInfoKHR::pNext"]
        [::std::mem::offset_of!(VkCalibratedTimestampInfoKHR, pNext) - 8usize];
    ["Offset of field: VkCalibratedTimestampInfoKHR::timeDomain"]
        [::std::mem::offset_of!(VkCalibratedTimestampInfoKHR, timeDomain) - 16usize];
};
impl Default for VkCalibratedTimestampInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetCalibratedTimestampsKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoKHR,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetCalibratedTimestampsKHR(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoKHR,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult;
}
pub type VkPhysicalDeviceShaderExpectAssumeFeaturesKHR = VkPhysicalDeviceShaderExpectAssumeFeatures;
pub type VkPhysicalDeviceMaintenance6FeaturesKHR = VkPhysicalDeviceMaintenance6Features;
pub type VkPhysicalDeviceMaintenance6PropertiesKHR = VkPhysicalDeviceMaintenance6Properties;
pub type VkBindMemoryStatusKHR = VkBindMemoryStatus;
pub type VkBindDescriptorSetsInfoKHR = VkBindDescriptorSetsInfo;
pub type VkPushConstantsInfoKHR = VkPushConstantsInfo;
pub type VkPushDescriptorSetInfoKHR = VkPushDescriptorSetInfo;
pub type VkPushDescriptorSetWithTemplateInfoKHR = VkPushDescriptorSetWithTemplateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSetDescriptorBufferOffsetsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub firstSet: u32,
    pub setCount: u32,
    pub pBufferIndices: *const u32,
    pub pOffsets: *const VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetDescriptorBufferOffsetsInfoEXT"]
        [::std::mem::size_of::<VkSetDescriptorBufferOffsetsInfoEXT>() - 56usize];
    ["Alignment of VkSetDescriptorBufferOffsetsInfoEXT"]
        [::std::mem::align_of::<VkSetDescriptorBufferOffsetsInfoEXT>() - 8usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::sType"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, sType) - 0usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::stageFlags"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, stageFlags) - 16usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::layout"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, layout) - 24usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::firstSet"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, firstSet) - 32usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::setCount"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, setCount) - 36usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::pBufferIndices"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, pBufferIndices) - 40usize];
    ["Offset of field: VkSetDescriptorBufferOffsetsInfoEXT::pOffsets"]
        [::std::mem::offset_of!(VkSetDescriptorBufferOffsetsInfoEXT, pOffsets) - 48usize];
};
impl Default for VkSetDescriptorBufferOffsetsInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindDescriptorBufferEmbeddedSamplersInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stageFlags: VkShaderStageFlags,
    pub layout: VkPipelineLayout,
    pub set: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindDescriptorBufferEmbeddedSamplersInfoEXT"]
        [::std::mem::size_of::<VkBindDescriptorBufferEmbeddedSamplersInfoEXT>() - 40usize];
    ["Alignment of VkBindDescriptorBufferEmbeddedSamplersInfoEXT"]
        [::std::mem::align_of::<VkBindDescriptorBufferEmbeddedSamplersInfoEXT>() - 8usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::sType"]
        [::std::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, sType) - 0usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::pNext"]
        [::std::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, pNext) - 8usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::stageFlags"][::std::mem::offset_of!(
        VkBindDescriptorBufferEmbeddedSamplersInfoEXT,
        stageFlags
    ) - 16usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::layout"]
        [::std::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, layout) - 24usize];
    ["Offset of field: VkBindDescriptorBufferEmbeddedSamplersInfoEXT::set"]
        [::std::mem::offset_of!(VkBindDescriptorBufferEmbeddedSamplersInfoEXT, set) - 32usize];
};
impl Default for VkBindDescriptorBufferEmbeddedSamplersInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBindDescriptorSets2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBindDescriptorSetsInfo: *const VkBindDescriptorSetsInfo,
    ),
>;
pub type PFN_vkCmdPushConstants2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pPushConstantsInfo: *const VkPushConstantsInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSet2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetInfo: *const VkPushDescriptorSetInfo,
    ),
>;
pub type PFN_vkCmdPushDescriptorSetWithTemplate2KHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetWithTemplateInfo: *const VkPushDescriptorSetWithTemplateInfo,
    ),
>;
pub type PFN_vkCmdSetDescriptorBufferOffsets2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSetDescriptorBufferOffsetsInfo: *const VkSetDescriptorBufferOffsetsInfoEXT,
    ),
>;
pub type PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = :: std :: option :: Option < unsafe extern "system" fn (commandBuffer : VkCommandBuffer , pBindDescriptorBufferEmbeddedSamplersInfo : * const VkBindDescriptorBufferEmbeddedSamplersInfoEXT) > ;
unsafe extern "system" {
    pub fn vkCmdBindDescriptorSets2KHR(
        commandBuffer: VkCommandBuffer,
        pBindDescriptorSetsInfo: *const VkBindDescriptorSetsInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushConstants2KHR(
        commandBuffer: VkCommandBuffer,
        pPushConstantsInfo: *const VkPushConstantsInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSet2KHR(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetInfo: *const VkPushDescriptorSetInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdPushDescriptorSetWithTemplate2KHR(
        commandBuffer: VkCommandBuffer,
        pPushDescriptorSetWithTemplateInfo: *const VkPushDescriptorSetWithTemplateInfo,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDescriptorBufferOffsets2EXT(
        commandBuffer: VkCommandBuffer,
        pSetDescriptorBufferOffsetsInfo: *const VkSetDescriptorBufferOffsetsInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(
        commandBuffer: VkCommandBuffer,
        pBindDescriptorBufferEmbeddedSamplersInfo : * const VkBindDescriptorBufferEmbeddedSamplersInfoEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeQuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxQuantizationMapExtent: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQuantizationMapCapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeQuantizationMapCapabilitiesKHR>() - 24usize];
    ["Alignment of VkVideoEncodeQuantizationMapCapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeQuantizationMapCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeQuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQuantizationMapCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeQuantizationMapCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapCapabilitiesKHR::maxQuantizationMapExtent"][::std::mem::offset_of!(
        VkVideoEncodeQuantizationMapCapabilitiesKHR,
        maxQuantizationMapExtent
    )
        - 16usize];
};
impl Default for VkVideoEncodeQuantizationMapCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoFormatQuantizationMapPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub quantizationMapTexelSize: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatQuantizationMapPropertiesKHR"]
        [::std::mem::size_of::<VkVideoFormatQuantizationMapPropertiesKHR>() - 24usize];
    ["Alignment of VkVideoFormatQuantizationMapPropertiesKHR"]
        [::std::mem::align_of::<VkVideoFormatQuantizationMapPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoFormatQuantizationMapPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoFormatQuantizationMapPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatQuantizationMapPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoFormatQuantizationMapPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoFormatQuantizationMapPropertiesKHR::quantizationMapTexelSize"][::std::mem::offset_of!(
        VkVideoFormatQuantizationMapPropertiesKHR,
        quantizationMapTexelSize
    )
        - 16usize];
};
impl Default for VkVideoFormatQuantizationMapPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeQuantizationMapInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub quantizationMap: VkImageView,
    pub quantizationMapExtent: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQuantizationMapInfoKHR"]
        [::std::mem::size_of::<VkVideoEncodeQuantizationMapInfoKHR>() - 32usize];
    ["Alignment of VkVideoEncodeQuantizationMapInfoKHR"]
        [::std::mem::align_of::<VkVideoEncodeQuantizationMapInfoKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeQuantizationMapInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeQuantizationMapInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::quantizationMap"]
        [::std::mem::offset_of!(VkVideoEncodeQuantizationMapInfoKHR, quantizationMap) - 16usize];
    ["Offset of field: VkVideoEncodeQuantizationMapInfoKHR::quantizationMapExtent"][::std::mem::offset_of!(
        VkVideoEncodeQuantizationMapInfoKHR,
        quantizationMapExtent
    ) - 24usize];
};
impl Default for VkVideoEncodeQuantizationMapInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub quantizationMapTexelSize: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR"][::std::mem::size_of::<
        VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR,
    >() - 24usize];
    ["Alignment of VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR"][::std::mem::align_of::<
        VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR,
    >() - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR::sType"][::std::mem::offset_of!(
        VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR::pNext"][::std::mem::offset_of!(
        VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR,
        pNext
    )
        - 8usize];
    ["Offset of field: VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR::quantizationMapTexelSize"] [:: std :: mem :: offset_of ! (VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR , quantizationMapTexelSize) - 16usize] ;
};
impl Default for VkVideoEncodeQuantizationMapSessionParametersCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub videoEncodeQuantizationMap: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR::videoEncodeQuantizationMap"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR , videoEncodeQuantizationMap) - 16usize] ;
};
impl Default for VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH264QuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minQpDelta: i32,
    pub maxQpDelta: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH264QuantizationMapCapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeH264QuantizationMapCapabilitiesKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH264QuantizationMapCapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeH264QuantizationMapCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH264QuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH264QuantizationMapCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::minQpDelta"][::std::mem::offset_of!(
        VkVideoEncodeH264QuantizationMapCapabilitiesKHR,
        minQpDelta
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH264QuantizationMapCapabilitiesKHR::maxQpDelta"][::std::mem::offset_of!(
        VkVideoEncodeH264QuantizationMapCapabilitiesKHR,
        maxQpDelta
    ) - 20usize];
};
impl Default for VkVideoEncodeH264QuantizationMapCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeH265QuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minQpDelta: i32,
    pub maxQpDelta: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeH265QuantizationMapCapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeH265QuantizationMapCapabilitiesKHR>() - 24usize];
    ["Alignment of VkVideoEncodeH265QuantizationMapCapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeH265QuantizationMapCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeH265QuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeH265QuantizationMapCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::minQpDelta"][::std::mem::offset_of!(
        VkVideoEncodeH265QuantizationMapCapabilitiesKHR,
        minQpDelta
    ) - 16usize];
    ["Offset of field: VkVideoEncodeH265QuantizationMapCapabilitiesKHR::maxQpDelta"][::std::mem::offset_of!(
        VkVideoEncodeH265QuantizationMapCapabilitiesKHR,
        maxQpDelta
    ) - 20usize];
};
impl Default for VkVideoEncodeH265QuantizationMapCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoFormatH265QuantizationMapPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub compatibleCtbSizes: VkVideoEncodeH265CtbSizeFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatH265QuantizationMapPropertiesKHR"]
        [::std::mem::size_of::<VkVideoFormatH265QuantizationMapPropertiesKHR>() - 24usize];
    ["Alignment of VkVideoFormatH265QuantizationMapPropertiesKHR"]
        [::std::mem::align_of::<VkVideoFormatH265QuantizationMapPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoFormatH265QuantizationMapPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoFormatH265QuantizationMapPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatH265QuantizationMapPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoFormatH265QuantizationMapPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoFormatH265QuantizationMapPropertiesKHR::compatibleCtbSizes"][::std::mem::offset_of!(
        VkVideoFormatH265QuantizationMapPropertiesKHR,
        compatibleCtbSizes
    )
        - 16usize];
};
impl Default for VkVideoFormatH265QuantizationMapPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoEncodeAV1QuantizationMapCapabilitiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minQIndexDelta: i32,
    pub maxQIndexDelta: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoEncodeAV1QuantizationMapCapabilitiesKHR"]
        [::std::mem::size_of::<VkVideoEncodeAV1QuantizationMapCapabilitiesKHR>() - 24usize];
    ["Alignment of VkVideoEncodeAV1QuantizationMapCapabilitiesKHR"]
        [::std::mem::align_of::<VkVideoEncodeAV1QuantizationMapCapabilitiesKHR>() - 8usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoEncodeAV1QuantizationMapCapabilitiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoEncodeAV1QuantizationMapCapabilitiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::minQIndexDelta"][::std::mem::offset_of!(
        VkVideoEncodeAV1QuantizationMapCapabilitiesKHR,
        minQIndexDelta
    )
        - 16usize];
    ["Offset of field: VkVideoEncodeAV1QuantizationMapCapabilitiesKHR::maxQIndexDelta"][::std::mem::offset_of!(
        VkVideoEncodeAV1QuantizationMapCapabilitiesKHR,
        maxQIndexDelta
    )
        - 20usize];
};
impl Default for VkVideoEncodeAV1QuantizationMapCapabilitiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoFormatAV1QuantizationMapPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub compatibleSuperblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoFormatAV1QuantizationMapPropertiesKHR"]
        [::std::mem::size_of::<VkVideoFormatAV1QuantizationMapPropertiesKHR>() - 24usize];
    ["Alignment of VkVideoFormatAV1QuantizationMapPropertiesKHR"]
        [::std::mem::align_of::<VkVideoFormatAV1QuantizationMapPropertiesKHR>() - 8usize];
    ["Offset of field: VkVideoFormatAV1QuantizationMapPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkVideoFormatAV1QuantizationMapPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkVideoFormatAV1QuantizationMapPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkVideoFormatAV1QuantizationMapPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkVideoFormatAV1QuantizationMapPropertiesKHR::compatibleSuperblockSizes"][::std::mem::offset_of!(
        VkVideoFormatAV1QuantizationMapPropertiesKHR,
        compatibleSuperblockSizes
    )
        - 16usize];
};
impl Default for VkVideoFormatAV1QuantizationMapPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderRelaxedExtendedInstruction: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR"][::std::mem::size_of::<
        VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR>()
            - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR::shaderRelaxedExtendedInstruction"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR , shaderRelaxedExtendedInstruction) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_VULKAN_KHR:
    VkPhysicalDeviceLayeredApiKHR = 0;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_D3D12_KHR:
    VkPhysicalDeviceLayeredApiKHR = 1;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_METAL_KHR:
    VkPhysicalDeviceLayeredApiKHR = 2;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_OPENGL_KHR:
    VkPhysicalDeviceLayeredApiKHR = 3;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_OPENGLES_KHR:
    VkPhysicalDeviceLayeredApiKHR = 4;
pub const VkPhysicalDeviceLayeredApiKHR_VK_PHYSICAL_DEVICE_LAYERED_API_MAX_ENUM_KHR:
    VkPhysicalDeviceLayeredApiKHR = 2147483647;
pub type VkPhysicalDeviceLayeredApiKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance7FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maintenance7: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance7FeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance7FeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceMaintenance7FeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance7FeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7FeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance7FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7FeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance7FeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7FeaturesKHR::maintenance7"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance7FeaturesKHR, maintenance7) - 16usize];
};
impl Default for VkPhysicalDeviceMaintenance7FeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance7PropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustFragmentShadingRateAttachmentAccess: VkBool32,
    pub separateDepthStencilAttachmentAccess: VkBool32,
    pub maxDescriptorSetTotalUniformBuffersDynamic: u32,
    pub maxDescriptorSetTotalStorageBuffersDynamic: u32,
    pub maxDescriptorSetTotalBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic: u32,
    pub maxDescriptorSetUpdateAfterBindTotalBuffersDynamic: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance7PropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance7PropertiesKHR>() - 48usize];
    ["Alignment of VkPhysicalDeviceMaintenance7PropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance7PropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance7PropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance7PropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::robustFragmentShadingRateAttachmentAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , robustFragmentShadingRateAttachmentAccess) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::separateDepthStencilAttachmentAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , separateDepthStencilAttachmentAccess) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetTotalUniformBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetTotalUniformBuffersDynamic) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetTotalStorageBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetTotalStorageBuffersDynamic) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetTotalBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetTotalBuffersDynamic) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetUpdateAfterBindTotalBuffersDynamic"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMaintenance7PropertiesKHR , maxDescriptorSetUpdateAfterBindTotalBuffersDynamic) - 44usize] ;
};
impl Default for VkPhysicalDeviceMaintenance7PropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLayeredApiPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vendorID: u32,
    pub deviceID: u32,
    pub layeredAPI: VkPhysicalDeviceLayeredApiKHR,
    pub deviceName: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredApiPropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceLayeredApiPropertiesKHR>() - 288usize];
    ["Alignment of VkPhysicalDeviceLayeredApiPropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceLayeredApiPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::vendorID"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, vendorID) - 16usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::deviceID"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, deviceID) - 20usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::layeredAPI"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, layeredAPI) - 24usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesKHR::deviceName"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesKHR, deviceName) - 28usize];
};
impl Default for VkPhysicalDeviceLayeredApiPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLayeredApiPropertiesListKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub layeredApiCount: u32,
    pub pLayeredApis: *mut VkPhysicalDeviceLayeredApiPropertiesKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredApiPropertiesListKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceLayeredApiPropertiesListKHR>() - 32usize];
    ["Alignment of VkPhysicalDeviceLayeredApiPropertiesListKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceLayeredApiPropertiesListKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesListKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiPropertiesListKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::layeredApiCount"][::std::mem::offset_of!(
        VkPhysicalDeviceLayeredApiPropertiesListKHR,
        layeredApiCount
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiPropertiesListKHR::pLayeredApis"][::std::mem::offset_of!(
        VkPhysicalDeviceLayeredApiPropertiesListKHR,
        pLayeredApis
    ) - 24usize];
};
impl Default for VkPhysicalDeviceLayeredApiPropertiesListKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLayeredApiVulkanPropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub properties: VkPhysicalDeviceProperties2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredApiVulkanPropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceLayeredApiVulkanPropertiesKHR>() - 856usize];
    ["Alignment of VkPhysicalDeviceLayeredApiVulkanPropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceLayeredApiVulkanPropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiVulkanPropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiVulkanPropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiVulkanPropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredApiVulkanPropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredApiVulkanPropertiesKHR::properties"][::std::mem::offset_of!(
        VkPhysicalDeviceLayeredApiVulkanPropertiesKHR,
        properties
    ) - 16usize];
};
impl Default for VkPhysicalDeviceLayeredApiVulkanPropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkAccessFlags3KHR = VkFlags64;
pub type VkAccessFlagBits3KHR = VkFlags64;
pub const VK_ACCESS_3_NONE_KHR: VkAccessFlagBits3KHR = 0;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMaintenance8FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maintenance8: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMaintenance8FeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceMaintenance8FeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceMaintenance8FeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceMaintenance8FeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance8FeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance8FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMaintenance8FeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance8FeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMaintenance8FeaturesKHR::maintenance8"]
        [::std::mem::offset_of!(VkPhysicalDeviceMaintenance8FeaturesKHR, maintenance8) - 16usize];
};
impl Default for VkPhysicalDeviceMaintenance8FeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryBarrierAccessFlags3KHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcAccessMask3: VkAccessFlags3KHR,
    pub dstAccessMask3: VkAccessFlags3KHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryBarrierAccessFlags3KHR"]
        [::std::mem::size_of::<VkMemoryBarrierAccessFlags3KHR>() - 32usize];
    ["Alignment of VkMemoryBarrierAccessFlags3KHR"]
        [::std::mem::align_of::<VkMemoryBarrierAccessFlags3KHR>() - 8usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::sType"]
        [::std::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, sType) - 0usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::pNext"]
        [::std::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, pNext) - 8usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::srcAccessMask3"]
        [::std::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, srcAccessMask3) - 16usize];
    ["Offset of field: VkMemoryBarrierAccessFlags3KHR::dstAccessMask3"]
        [::std::mem::offset_of!(VkMemoryBarrierAccessFlags3KHR, dstAccessMask3) - 24usize];
};
impl Default for VkMemoryBarrierAccessFlags3KHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVideoMaintenance2FeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub videoMaintenance2: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVideoMaintenance2FeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceVideoMaintenance2FeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceVideoMaintenance2FeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceVideoMaintenance2FeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance2FeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoMaintenance2FeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance2FeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceVideoMaintenance2FeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceVideoMaintenance2FeaturesKHR::videoMaintenance2"][::std::mem::offset_of!(
        VkPhysicalDeviceVideoMaintenance2FeaturesKHR,
        videoMaintenance2
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceVideoMaintenance2FeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH264InlineSessionParametersInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdSPS: *const StdVideoH264SequenceParameterSet,
    pub pStdPPS: *const StdVideoH264PictureParameterSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH264InlineSessionParametersInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH264InlineSessionParametersInfoKHR>() - 32usize];
    ["Alignment of VkVideoDecodeH264InlineSessionParametersInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH264InlineSessionParametersInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH264InlineSessionParametersInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH264InlineSessionParametersInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::pStdSPS"][::std::mem::offset_of!(
        VkVideoDecodeH264InlineSessionParametersInfoKHR,
        pStdSPS
    ) - 16usize];
    ["Offset of field: VkVideoDecodeH264InlineSessionParametersInfoKHR::pStdPPS"][::std::mem::offset_of!(
        VkVideoDecodeH264InlineSessionParametersInfoKHR,
        pStdPPS
    ) - 24usize];
};
impl Default for VkVideoDecodeH264InlineSessionParametersInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeH265InlineSessionParametersInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdVPS: *const StdVideoH265VideoParameterSet,
    pub pStdSPS: *const StdVideoH265SequenceParameterSet,
    pub pStdPPS: *const StdVideoH265PictureParameterSet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeH265InlineSessionParametersInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeH265InlineSessionParametersInfoKHR>() - 40usize];
    ["Alignment of VkVideoDecodeH265InlineSessionParametersInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeH265InlineSessionParametersInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeH265InlineSessionParametersInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeH265InlineSessionParametersInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pStdVPS"][::std::mem::offset_of!(
        VkVideoDecodeH265InlineSessionParametersInfoKHR,
        pStdVPS
    ) - 16usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pStdSPS"][::std::mem::offset_of!(
        VkVideoDecodeH265InlineSessionParametersInfoKHR,
        pStdSPS
    ) - 24usize];
    ["Offset of field: VkVideoDecodeH265InlineSessionParametersInfoKHR::pStdPPS"][::std::mem::offset_of!(
        VkVideoDecodeH265InlineSessionParametersInfoKHR,
        pStdPPS
    ) - 32usize];
};
impl Default for VkVideoDecodeH265InlineSessionParametersInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVideoDecodeAV1InlineSessionParametersInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pStdSequenceHeader: *const StdVideoAV1SequenceHeader,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVideoDecodeAV1InlineSessionParametersInfoKHR"]
        [::std::mem::size_of::<VkVideoDecodeAV1InlineSessionParametersInfoKHR>() - 24usize];
    ["Alignment of VkVideoDecodeAV1InlineSessionParametersInfoKHR"]
        [::std::mem::align_of::<VkVideoDecodeAV1InlineSessionParametersInfoKHR>() - 8usize];
    ["Offset of field: VkVideoDecodeAV1InlineSessionParametersInfoKHR::sType"]
        [::std::mem::offset_of!(VkVideoDecodeAV1InlineSessionParametersInfoKHR, sType) - 0usize];
    ["Offset of field: VkVideoDecodeAV1InlineSessionParametersInfoKHR::pNext"]
        [::std::mem::offset_of!(VkVideoDecodeAV1InlineSessionParametersInfoKHR, pNext) - 8usize];
    ["Offset of field: VkVideoDecodeAV1InlineSessionParametersInfoKHR::pStdSequenceHeader"][::std::mem::offset_of!(
        VkVideoDecodeAV1InlineSessionParametersInfoKHR,
        pStdSequenceHeader
    )
        - 16usize];
};
impl Default for VkVideoDecodeAV1InlineSessionParametersInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthClampZeroOneFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClampZeroOne: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClampZeroOneFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceDepthClampZeroOneFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceDepthClampZeroOneFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceDepthClampZeroOneFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClampZeroOneFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClampZeroOneFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClampZeroOneFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClampZeroOneFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClampZeroOneFeaturesKHR::depthClampZeroOne"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthClampZeroOneFeaturesKHR,
        depthClampZeroOne
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceDepthClampZeroOneFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugReportCallbackEXT_T {
    _unused: [u8; 0],
}
pub type VkDebugReportCallbackEXT = *mut VkDebugReportCallbackEXT_T;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT:
    VkDebugReportObjectTypeEXT = 0;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT:
    VkDebugReportObjectTypeEXT = 1;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT:
    VkDebugReportObjectTypeEXT = 2;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT:
    VkDebugReportObjectTypeEXT = 3;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT:
    VkDebugReportObjectTypeEXT = 4;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT:
    VkDebugReportObjectTypeEXT = 5;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT:
    VkDebugReportObjectTypeEXT = 6;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT:
    VkDebugReportObjectTypeEXT = 7;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT:
    VkDebugReportObjectTypeEXT = 8;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT:
    VkDebugReportObjectTypeEXT = 9;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT:
    VkDebugReportObjectTypeEXT = 10;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT:
    VkDebugReportObjectTypeEXT = 11;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT:
    VkDebugReportObjectTypeEXT = 12;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT:
    VkDebugReportObjectTypeEXT = 13;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT:
    VkDebugReportObjectTypeEXT = 14;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT:
    VkDebugReportObjectTypeEXT = 15;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT:
    VkDebugReportObjectTypeEXT = 16;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT:
    VkDebugReportObjectTypeEXT = 17;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT:
    VkDebugReportObjectTypeEXT = 18;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT:
    VkDebugReportObjectTypeEXT = 19;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT:
    VkDebugReportObjectTypeEXT = 20;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT:
    VkDebugReportObjectTypeEXT = 21;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT:
    VkDebugReportObjectTypeEXT = 22;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT:
    VkDebugReportObjectTypeEXT = 23;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT:
    VkDebugReportObjectTypeEXT = 24;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT:
    VkDebugReportObjectTypeEXT = 25;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 26;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT:
    VkDebugReportObjectTypeEXT = 27;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT:
    VkDebugReportObjectTypeEXT = 28;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT:
    VkDebugReportObjectTypeEXT = 29;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 30;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT:
    VkDebugReportObjectTypeEXT = 33;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT:
    VkDebugReportObjectTypeEXT = 1000156000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT:
    VkDebugReportObjectTypeEXT = 1000085000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT:
    VkDebugReportObjectTypeEXT = 1000029000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT:
    VkDebugReportObjectTypeEXT = 1000029001;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT:
    VkDebugReportObjectTypeEXT = 1000150000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT:
    VkDebugReportObjectTypeEXT = 1000165000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT:
    VkDebugReportObjectTypeEXT = 1000307000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT:
    VkDebugReportObjectTypeEXT = 1000307001;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT:
    VkDebugReportObjectTypeEXT = 1000366000;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT:
    VkDebugReportObjectTypeEXT = 28;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT:
    VkDebugReportObjectTypeEXT = 33;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT : VkDebugReportObjectTypeEXT = 1000085000 ;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT : VkDebugReportObjectTypeEXT = 1000156000 ;
pub const VkDebugReportObjectTypeEXT_VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT:
    VkDebugReportObjectTypeEXT = 2147483647;
pub type VkDebugReportObjectTypeEXT = ::std::os::raw::c_uint;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_INFORMATION_BIT_EXT: VkDebugReportFlagBitsEXT =
    1;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_WARNING_BIT_EXT: VkDebugReportFlagBitsEXT = 2;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT:
    VkDebugReportFlagBitsEXT = 4;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_ERROR_BIT_EXT: VkDebugReportFlagBitsEXT = 8;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_DEBUG_BIT_EXT: VkDebugReportFlagBitsEXT = 16;
pub const VkDebugReportFlagBitsEXT_VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT:
    VkDebugReportFlagBitsEXT = 2147483647;
pub type VkDebugReportFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkDebugReportFlagsEXT = VkFlags;
pub type PFN_vkDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> VkBool32,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugReportCallbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugReportFlagsEXT,
    pub pfnCallback: PFN_vkDebugReportCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugReportCallbackCreateInfoEXT"]
        [::std::mem::size_of::<VkDebugReportCallbackCreateInfoEXT>() - 40usize];
    ["Alignment of VkDebugReportCallbackCreateInfoEXT"]
        [::std::mem::align_of::<VkDebugReportCallbackCreateInfoEXT>() - 8usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::pfnCallback"]
        [::std::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, pfnCallback) - 24usize];
    ["Offset of field: VkDebugReportCallbackCreateInfoEXT::pUserData"]
        [::std::mem::offset_of!(VkDebugReportCallbackCreateInfoEXT, pUserData) - 32usize];
};
impl Default for VkDebugReportCallbackCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pCallback: *mut VkDebugReportCallbackEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        callback: VkDebugReportCallbackEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDebugReportMessageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
    ),
>;
unsafe extern "system" {
    pub fn vkCreateDebugReportCallbackEXT(
        instance: VkInstance,
        pCreateInfo: *const VkDebugReportCallbackCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pCallback: *mut VkDebugReportCallbackEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDebugReportCallbackEXT(
        instance: VkInstance,
        callback: VkDebugReportCallbackEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkDebugReportMessageEXT(
        instance: VkInstance,
        flags: VkDebugReportFlagsEXT,
        objectType: VkDebugReportObjectTypeEXT,
        object: u64,
        location: usize,
        messageCode: i32,
        pLayerPrefix: *const ::std::os::raw::c_char,
        pMessage: *const ::std::os::raw::c_char,
    );
}
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_STRICT_AMD: VkRasterizationOrderAMD = 0;
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_RELAXED_AMD: VkRasterizationOrderAMD = 1;
pub const VkRasterizationOrderAMD_VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: VkRasterizationOrderAMD =
    2147483647;
pub type VkRasterizationOrderAMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub rasterizationOrder: VkRasterizationOrderAMD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationStateRasterizationOrderAMD"]
        [::std::mem::size_of::<VkPipelineRasterizationStateRasterizationOrderAMD>() - 24usize];
    ["Alignment of VkPipelineRasterizationStateRasterizationOrderAMD"]
        [::std::mem::align_of::<VkPipelineRasterizationStateRasterizationOrderAMD>() - 8usize];
    ["Offset of field: VkPipelineRasterizationStateRasterizationOrderAMD::sType"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateRasterizationOrderAMD, sType) - 0usize];
    ["Offset of field: VkPipelineRasterizationStateRasterizationOrderAMD::pNext"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateRasterizationOrderAMD, pNext) - 8usize];
    ["Offset of field: VkPipelineRasterizationStateRasterizationOrderAMD::rasterizationOrder"][::std::mem::offset_of!(
        VkPipelineRasterizationStateRasterizationOrderAMD,
        rasterizationOrder
    )
        - 16usize];
};
impl Default for VkPipelineRasterizationStateRasterizationOrderAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub pObjectName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugMarkerObjectNameInfoEXT"]
        [::std::mem::size_of::<VkDebugMarkerObjectNameInfoEXT>() - 40usize];
    ["Alignment of VkDebugMarkerObjectNameInfoEXT"]
        [::std::mem::align_of::<VkDebugMarkerObjectNameInfoEXT>() - 8usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::sType"]
        [::std::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::objectType"]
        [::std::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, objectType) - 16usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::object"]
        [::std::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, object) - 24usize];
    ["Offset of field: VkDebugMarkerObjectNameInfoEXT::pObjectName"]
        [::std::mem::offset_of!(VkDebugMarkerObjectNameInfoEXT, pObjectName) - 32usize];
};
impl Default for VkDebugMarkerObjectNameInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkDebugReportObjectTypeEXT,
    pub object: u64,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugMarkerObjectTagInfoEXT"]
        [::std::mem::size_of::<VkDebugMarkerObjectTagInfoEXT>() - 56usize];
    ["Alignment of VkDebugMarkerObjectTagInfoEXT"]
        [::std::mem::align_of::<VkDebugMarkerObjectTagInfoEXT>() - 8usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::sType"]
        [::std::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::objectType"]
        [::std::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, objectType) - 16usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::object"]
        [::std::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, object) - 24usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::tagName"]
        [::std::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, tagName) - 32usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::tagSize"]
        [::std::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, tagSize) - 40usize];
    ["Offset of field: VkDebugMarkerObjectTagInfoEXT::pTag"]
        [::std::mem::offset_of!(VkDebugMarkerObjectTagInfoEXT, pTag) - 48usize];
};
impl Default for VkDebugMarkerObjectTagInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugMarkerMarkerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pMarkerName: *const ::std::os::raw::c_char,
    pub color: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugMarkerMarkerInfoEXT"]
        [::std::mem::size_of::<VkDebugMarkerMarkerInfoEXT>() - 40usize];
    ["Alignment of VkDebugMarkerMarkerInfoEXT"]
        [::std::mem::align_of::<VkDebugMarkerMarkerInfoEXT>() - 8usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::sType"]
        [::std::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::pMarkerName"]
        [::std::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, pMarkerName) - 16usize];
    ["Offset of field: VkDebugMarkerMarkerInfoEXT::color"]
        [::std::mem::offset_of!(VkDebugMarkerMarkerInfoEXT, color) - 24usize];
};
impl Default for VkDebugMarkerMarkerInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDebugMarkerSetObjectTagEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugMarkerObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkDebugMarkerSetObjectNameEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugMarkerObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCmdDebugMarkerBeginEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
pub type PFN_vkCmdDebugMarkerEndEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdDebugMarkerInsertEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkDebugMarkerSetObjectTagEXT(
        device: VkDevice,
        pTagInfo: *const VkDebugMarkerObjectTagInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDebugMarkerSetObjectNameEXT(
        device: VkDevice,
        pNameInfo: *const VkDebugMarkerObjectNameInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdDebugMarkerBeginEXT(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer);
}
unsafe extern "system" {
    pub fn vkCmdDebugMarkerInsertEXT(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkDebugMarkerMarkerInfoEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDedicatedAllocationImageCreateInfoNV"]
        [::std::mem::size_of::<VkDedicatedAllocationImageCreateInfoNV>() - 24usize];
    ["Alignment of VkDedicatedAllocationImageCreateInfoNV"]
        [::std::mem::align_of::<VkDedicatedAllocationImageCreateInfoNV>() - 8usize];
    ["Offset of field: VkDedicatedAllocationImageCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkDedicatedAllocationImageCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDedicatedAllocationImageCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkDedicatedAllocationImageCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation"][::std::mem::offset_of!(
        VkDedicatedAllocationImageCreateInfoNV,
        dedicatedAllocation
    ) - 16usize];
};
impl Default for VkDedicatedAllocationImageCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationBufferCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dedicatedAllocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDedicatedAllocationBufferCreateInfoNV"]
        [::std::mem::size_of::<VkDedicatedAllocationBufferCreateInfoNV>() - 24usize];
    ["Alignment of VkDedicatedAllocationBufferCreateInfoNV"]
        [::std::mem::align_of::<VkDedicatedAllocationBufferCreateInfoNV>() - 8usize];
    ["Offset of field: VkDedicatedAllocationBufferCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkDedicatedAllocationBufferCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDedicatedAllocationBufferCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkDedicatedAllocationBufferCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation"][::std::mem::offset_of!(
        VkDedicatedAllocationBufferCreateInfoNV,
        dedicatedAllocation
    ) - 16usize];
};
impl Default for VkDedicatedAllocationBufferCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
    pub buffer: VkBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDedicatedAllocationMemoryAllocateInfoNV"]
        [::std::mem::size_of::<VkDedicatedAllocationMemoryAllocateInfoNV>() - 32usize];
    ["Alignment of VkDedicatedAllocationMemoryAllocateInfoNV"]
        [::std::mem::align_of::<VkDedicatedAllocationMemoryAllocateInfoNV>() - 8usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::sType"]
        [::std::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, sType) - 0usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::pNext"]
        [::std::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, pNext) - 8usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::image"]
        [::std::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, image) - 16usize];
    ["Offset of field: VkDedicatedAllocationMemoryAllocateInfoNV::buffer"]
        [::std::mem::offset_of!(VkDedicatedAllocationMemoryAllocateInfoNV, buffer) - 24usize];
};
impl Default for VkDedicatedAllocationMemoryAllocateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transformFeedback: VkBool32,
    pub geometryStreams: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTransformFeedbackFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceTransformFeedbackFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceTransformFeedbackFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTransformFeedbackFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTransformFeedbackFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::transformFeedback"][::std::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackFeaturesEXT,
        transformFeedback
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackFeaturesEXT::geometryStreams"][::std::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackFeaturesEXT,
        geometryStreams
    ) - 20usize];
};
impl Default for VkPhysicalDeviceTransformFeedbackFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTransformFeedbackStreams: u32,
    pub maxTransformFeedbackBuffers: u32,
    pub maxTransformFeedbackBufferSize: VkDeviceSize,
    pub maxTransformFeedbackStreamDataSize: u32,
    pub maxTransformFeedbackBufferDataSize: u32,
    pub maxTransformFeedbackBufferDataStride: u32,
    pub transformFeedbackQueries: VkBool32,
    pub transformFeedbackStreamsLinesTriangles: VkBool32,
    pub transformFeedbackRasterizationStreamSelect: VkBool32,
    pub transformFeedbackDraw: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTransformFeedbackPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>() - 64usize];
    ["Alignment of VkPhysicalDeviceTransformFeedbackPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceTransformFeedbackPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTransformFeedbackPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTransformFeedbackPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreams"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackStreams) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBuffers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBuffers) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBufferSize) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreamDataSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackStreamDataSize) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBufferDataSize) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataStride"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , maxTransformFeedbackBufferDataStride) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackQueries"][::std::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackPropertiesEXT,
        transformFeedbackQueries
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackStreamsLinesTriangles"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , transformFeedbackStreamsLinesTriangles) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackRasterizationStreamSelect"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceTransformFeedbackPropertiesEXT , transformFeedbackRasterizationStreamSelect) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackDraw"][::std::mem::offset_of!(
        VkPhysicalDeviceTransformFeedbackPropertiesEXT,
        transformFeedbackDraw
    )
        - 56usize];
};
impl Default for VkPhysicalDeviceTransformFeedbackPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    pub rasterizationStream: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationStateStreamCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>() - 24usize];
    ["Alignment of VkPipelineRasterizationStateStreamCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineRasterizationStateStreamCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateStreamCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateStreamCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkPipelineRasterizationStateStreamCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkPipelineRasterizationStateStreamCreateInfoEXT::rasterizationStream"][::std::mem::offset_of!(
        VkPipelineRasterizationStateStreamCreateInfoEXT,
        rasterizationStream
    )
        - 20usize];
};
impl Default for VkPipelineRasterizationStateStreamCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBindTransformFeedbackBuffersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginTransformFeedbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdEndTransformFeedbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBeginQueryIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
        index: u32,
    ),
>;
pub type PFN_vkCmdEndQueryIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        index: u32,
    ),
>;
pub type PFN_vkCmdDrawIndirectByteCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        instanceCount: u32,
        firstInstance: u32,
        counterBuffer: VkBuffer,
        counterBufferOffset: VkDeviceSize,
        counterOffset: u32,
        vertexStride: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdBindTransformFeedbackBuffersEXT(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdBeginTransformFeedbackEXT(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndTransformFeedbackEXT(
        commandBuffer: VkCommandBuffer,
        firstCounterBuffer: u32,
        counterBufferCount: u32,
        pCounterBuffers: *const VkBuffer,
        pCounterBufferOffsets: *const VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdBeginQueryIndexedEXT(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        flags: VkQueryControlFlags,
        index: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndQueryIndexedEXT(
        commandBuffer: VkCommandBuffer,
        queryPool: VkQueryPool,
        query: u32,
        index: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawIndirectByteCountEXT(
        commandBuffer: VkCommandBuffer,
        instanceCount: u32,
        firstInstance: u32,
        counterBuffer: VkBuffer,
        counterBufferOffset: VkDeviceSize,
        counterOffset: u32,
        vertexStride: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCuModuleNVX_T {
    _unused: [u8; 0],
}
pub type VkCuModuleNVX = *mut VkCuModuleNVX_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCuFunctionNVX_T {
    _unused: [u8; 0],
}
pub type VkCuFunctionNVX = *mut VkCuFunctionNVX_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCuModuleCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dataSize: usize,
    pub pData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuModuleCreateInfoNVX"][::std::mem::size_of::<VkCuModuleCreateInfoNVX>() - 32usize];
    ["Alignment of VkCuModuleCreateInfoNVX"]
        [::std::mem::align_of::<VkCuModuleCreateInfoNVX>() - 8usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::sType"]
        [::std::mem::offset_of!(VkCuModuleCreateInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::pNext"]
        [::std::mem::offset_of!(VkCuModuleCreateInfoNVX, pNext) - 8usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::dataSize"]
        [::std::mem::offset_of!(VkCuModuleCreateInfoNVX, dataSize) - 16usize];
    ["Offset of field: VkCuModuleCreateInfoNVX::pData"]
        [::std::mem::offset_of!(VkCuModuleCreateInfoNVX, pData) - 24usize];
};
impl Default for VkCuModuleCreateInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCuModuleTexturingModeCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub use64bitTexturing: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuModuleTexturingModeCreateInfoNVX"]
        [::std::mem::size_of::<VkCuModuleTexturingModeCreateInfoNVX>() - 24usize];
    ["Alignment of VkCuModuleTexturingModeCreateInfoNVX"]
        [::std::mem::align_of::<VkCuModuleTexturingModeCreateInfoNVX>() - 8usize];
    ["Offset of field: VkCuModuleTexturingModeCreateInfoNVX::sType"]
        [::std::mem::offset_of!(VkCuModuleTexturingModeCreateInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuModuleTexturingModeCreateInfoNVX::pNext"]
        [::std::mem::offset_of!(VkCuModuleTexturingModeCreateInfoNVX, pNext) - 8usize];
    ["Offset of field: VkCuModuleTexturingModeCreateInfoNVX::use64bitTexturing"]
        [::std::mem::offset_of!(VkCuModuleTexturingModeCreateInfoNVX, use64bitTexturing) - 16usize];
};
impl Default for VkCuModuleTexturingModeCreateInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCuFunctionCreateInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub module: VkCuModuleNVX,
    pub pName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuFunctionCreateInfoNVX"]
        [::std::mem::size_of::<VkCuFunctionCreateInfoNVX>() - 32usize];
    ["Alignment of VkCuFunctionCreateInfoNVX"]
        [::std::mem::align_of::<VkCuFunctionCreateInfoNVX>() - 8usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::sType"]
        [::std::mem::offset_of!(VkCuFunctionCreateInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::pNext"]
        [::std::mem::offset_of!(VkCuFunctionCreateInfoNVX, pNext) - 8usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::module"]
        [::std::mem::offset_of!(VkCuFunctionCreateInfoNVX, module) - 16usize];
    ["Offset of field: VkCuFunctionCreateInfoNVX::pName"]
        [::std::mem::offset_of!(VkCuFunctionCreateInfoNVX, pName) - 24usize];
};
impl Default for VkCuFunctionCreateInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCuLaunchInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub function: VkCuFunctionNVX,
    pub gridDimX: u32,
    pub gridDimY: u32,
    pub gridDimZ: u32,
    pub blockDimX: u32,
    pub blockDimY: u32,
    pub blockDimZ: u32,
    pub sharedMemBytes: u32,
    pub paramCount: usize,
    pub pParams: *const *const ::std::os::raw::c_void,
    pub extraCount: usize,
    pub pExtras: *const *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCuLaunchInfoNVX"][::std::mem::size_of::<VkCuLaunchInfoNVX>() - 88usize];
    ["Alignment of VkCuLaunchInfoNVX"][::std::mem::align_of::<VkCuLaunchInfoNVX>() - 8usize];
    ["Offset of field: VkCuLaunchInfoNVX::sType"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, sType) - 0usize];
    ["Offset of field: VkCuLaunchInfoNVX::pNext"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, pNext) - 8usize];
    ["Offset of field: VkCuLaunchInfoNVX::function"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, function) - 16usize];
    ["Offset of field: VkCuLaunchInfoNVX::gridDimX"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, gridDimX) - 24usize];
    ["Offset of field: VkCuLaunchInfoNVX::gridDimY"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, gridDimY) - 28usize];
    ["Offset of field: VkCuLaunchInfoNVX::gridDimZ"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, gridDimZ) - 32usize];
    ["Offset of field: VkCuLaunchInfoNVX::blockDimX"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, blockDimX) - 36usize];
    ["Offset of field: VkCuLaunchInfoNVX::blockDimY"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, blockDimY) - 40usize];
    ["Offset of field: VkCuLaunchInfoNVX::blockDimZ"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, blockDimZ) - 44usize];
    ["Offset of field: VkCuLaunchInfoNVX::sharedMemBytes"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, sharedMemBytes) - 48usize];
    ["Offset of field: VkCuLaunchInfoNVX::paramCount"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, paramCount) - 56usize];
    ["Offset of field: VkCuLaunchInfoNVX::pParams"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, pParams) - 64usize];
    ["Offset of field: VkCuLaunchInfoNVX::extraCount"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, extraCount) - 72usize];
    ["Offset of field: VkCuLaunchInfoNVX::pExtras"]
        [::std::mem::offset_of!(VkCuLaunchInfoNVX, pExtras) - 80usize];
};
impl Default for VkCuLaunchInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateCuModuleNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCuModuleCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCuModuleNVX,
    ) -> VkResult,
>;
pub type PFN_vkCreateCuFunctionNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCuFunctionCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCuFunctionNVX,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCuModuleNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        module: VkCuModuleNVX,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDestroyCuFunctionNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        function: VkCuFunctionNVX,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdCuLaunchKernelNVX = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLaunchInfo: *const VkCuLaunchInfoNVX),
>;
unsafe extern "system" {
    pub fn vkCreateCuModuleNVX(
        device: VkDevice,
        pCreateInfo: *const VkCuModuleCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCuModuleNVX,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateCuFunctionNVX(
        device: VkDevice,
        pCreateInfo: *const VkCuFunctionCreateInfoNVX,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCuFunctionNVX,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyCuModuleNVX(
        device: VkDevice,
        module: VkCuModuleNVX,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkDestroyCuFunctionNVX(
        device: VkDevice,
        function: VkCuFunctionNVX,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCmdCuLaunchKernelNVX(
        commandBuffer: VkCommandBuffer,
        pLaunchInfo: *const VkCuLaunchInfoNVX,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewHandleInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub descriptorType: VkDescriptorType,
    pub sampler: VkSampler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewHandleInfoNVX"]
        [::std::mem::size_of::<VkImageViewHandleInfoNVX>() - 40usize];
    ["Alignment of VkImageViewHandleInfoNVX"]
        [::std::mem::align_of::<VkImageViewHandleInfoNVX>() - 8usize];
    ["Offset of field: VkImageViewHandleInfoNVX::sType"]
        [::std::mem::offset_of!(VkImageViewHandleInfoNVX, sType) - 0usize];
    ["Offset of field: VkImageViewHandleInfoNVX::pNext"]
        [::std::mem::offset_of!(VkImageViewHandleInfoNVX, pNext) - 8usize];
    ["Offset of field: VkImageViewHandleInfoNVX::imageView"]
        [::std::mem::offset_of!(VkImageViewHandleInfoNVX, imageView) - 16usize];
    ["Offset of field: VkImageViewHandleInfoNVX::descriptorType"]
        [::std::mem::offset_of!(VkImageViewHandleInfoNVX, descriptorType) - 24usize];
    ["Offset of field: VkImageViewHandleInfoNVX::sampler"]
        [::std::mem::offset_of!(VkImageViewHandleInfoNVX, sampler) - 32usize];
};
impl Default for VkImageViewHandleInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewAddressPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewAddressPropertiesNVX"]
        [::std::mem::size_of::<VkImageViewAddressPropertiesNVX>() - 32usize];
    ["Alignment of VkImageViewAddressPropertiesNVX"]
        [::std::mem::align_of::<VkImageViewAddressPropertiesNVX>() - 8usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::sType"]
        [::std::mem::offset_of!(VkImageViewAddressPropertiesNVX, sType) - 0usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::pNext"]
        [::std::mem::offset_of!(VkImageViewAddressPropertiesNVX, pNext) - 8usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::deviceAddress"]
        [::std::mem::offset_of!(VkImageViewAddressPropertiesNVX, deviceAddress) - 16usize];
    ["Offset of field: VkImageViewAddressPropertiesNVX::size"]
        [::std::mem::offset_of!(VkImageViewAddressPropertiesNVX, size) - 24usize];
};
impl Default for VkImageViewAddressPropertiesNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetImageViewHandleNVX = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX) -> u32,
>;
pub type PFN_vkGetImageViewHandle64NVX = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX) -> u64,
>;
pub type PFN_vkGetImageViewAddressNVX = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        imageView: VkImageView,
        pProperties: *mut VkImageViewAddressPropertiesNVX,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: *const VkImageViewHandleInfoNVX)
        -> u32;
}
unsafe extern "system" {
    pub fn vkGetImageViewHandle64NVX(
        device: VkDevice,
        pInfo: *const VkImageViewHandleInfoNVX,
    ) -> u64;
}
unsafe extern "system" {
    pub fn vkGetImageViewAddressNVX(
        device: VkDevice,
        imageView: VkImageView,
        pProperties: *mut VkImageViewAddressPropertiesNVX,
    ) -> VkResult;
}
pub type PFN_vkCmdDrawIndirectCountAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawIndexedIndirectCountAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdDrawIndirectCountAMD(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawIndexedIndirectCountAMD(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTextureLODGatherFormatPropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportsTextureGatherLODBiasAMD: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTextureLODGatherFormatPropertiesAMD"]
        [::std::mem::size_of::<VkTextureLODGatherFormatPropertiesAMD>() - 24usize];
    ["Alignment of VkTextureLODGatherFormatPropertiesAMD"]
        [::std::mem::align_of::<VkTextureLODGatherFormatPropertiesAMD>() - 8usize];
    ["Offset of field: VkTextureLODGatherFormatPropertiesAMD::sType"]
        [::std::mem::offset_of!(VkTextureLODGatherFormatPropertiesAMD, sType) - 0usize];
    ["Offset of field: VkTextureLODGatherFormatPropertiesAMD::pNext"]
        [::std::mem::offset_of!(VkTextureLODGatherFormatPropertiesAMD, pNext) - 8usize];
    ["Offset of field: VkTextureLODGatherFormatPropertiesAMD::supportsTextureGatherLODBiasAMD"][::std::mem::offset_of!(
        VkTextureLODGatherFormatPropertiesAMD,
        supportsTextureGatherLODBiasAMD
    )
        - 16usize];
};
impl Default for VkTextureLODGatherFormatPropertiesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_STATISTICS_AMD: VkShaderInfoTypeAMD = 0;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_BINARY_AMD: VkShaderInfoTypeAMD = 1;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: VkShaderInfoTypeAMD = 2;
pub const VkShaderInfoTypeAMD_VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: VkShaderInfoTypeAMD = 2147483647;
pub type VkShaderInfoTypeAMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkShaderResourceUsageAMD {
    pub numUsedVgprs: u32,
    pub numUsedSgprs: u32,
    pub ldsSizePerLocalWorkGroup: u32,
    pub ldsUsageSizeInBytes: usize,
    pub scratchMemUsageInBytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderResourceUsageAMD"]
        [::std::mem::size_of::<VkShaderResourceUsageAMD>() - 32usize];
    ["Alignment of VkShaderResourceUsageAMD"]
        [::std::mem::align_of::<VkShaderResourceUsageAMD>() - 8usize];
    ["Offset of field: VkShaderResourceUsageAMD::numUsedVgprs"]
        [::std::mem::offset_of!(VkShaderResourceUsageAMD, numUsedVgprs) - 0usize];
    ["Offset of field: VkShaderResourceUsageAMD::numUsedSgprs"]
        [::std::mem::offset_of!(VkShaderResourceUsageAMD, numUsedSgprs) - 4usize];
    ["Offset of field: VkShaderResourceUsageAMD::ldsSizePerLocalWorkGroup"]
        [::std::mem::offset_of!(VkShaderResourceUsageAMD, ldsSizePerLocalWorkGroup) - 8usize];
    ["Offset of field: VkShaderResourceUsageAMD::ldsUsageSizeInBytes"]
        [::std::mem::offset_of!(VkShaderResourceUsageAMD, ldsUsageSizeInBytes) - 16usize];
    ["Offset of field: VkShaderResourceUsageAMD::scratchMemUsageInBytes"]
        [::std::mem::offset_of!(VkShaderResourceUsageAMD, scratchMemUsageInBytes) - 24usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkShaderStatisticsInfoAMD {
    pub shaderStageMask: VkShaderStageFlags,
    pub resourceUsage: VkShaderResourceUsageAMD,
    pub numPhysicalVgprs: u32,
    pub numPhysicalSgprs: u32,
    pub numAvailableVgprs: u32,
    pub numAvailableSgprs: u32,
    pub computeWorkGroupSize: [u32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderStatisticsInfoAMD"]
        [::std::mem::size_of::<VkShaderStatisticsInfoAMD>() - 72usize];
    ["Alignment of VkShaderStatisticsInfoAMD"]
        [::std::mem::align_of::<VkShaderStatisticsInfoAMD>() - 8usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::shaderStageMask"]
        [::std::mem::offset_of!(VkShaderStatisticsInfoAMD, shaderStageMask) - 0usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::resourceUsage"]
        [::std::mem::offset_of!(VkShaderStatisticsInfoAMD, resourceUsage) - 8usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numPhysicalVgprs"]
        [::std::mem::offset_of!(VkShaderStatisticsInfoAMD, numPhysicalVgprs) - 40usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numPhysicalSgprs"]
        [::std::mem::offset_of!(VkShaderStatisticsInfoAMD, numPhysicalSgprs) - 44usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numAvailableVgprs"]
        [::std::mem::offset_of!(VkShaderStatisticsInfoAMD, numAvailableVgprs) - 48usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::numAvailableSgprs"]
        [::std::mem::offset_of!(VkShaderStatisticsInfoAMD, numAvailableSgprs) - 52usize];
    ["Offset of field: VkShaderStatisticsInfoAMD::computeWorkGroupSize"]
        [::std::mem::offset_of!(VkShaderStatisticsInfoAMD, computeWorkGroupSize) - 56usize];
};
pub type PFN_vkGetShaderInfoAMD = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        shaderStage: VkShaderStageFlagBits,
        infoType: VkShaderInfoTypeAMD,
        pInfoSize: *mut usize,
        pInfo: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetShaderInfoAMD(
        device: VkDevice,
        pipeline: VkPipeline,
        shaderStage: VkShaderStageFlagBits,
        infoType: VkShaderInfoTypeAMD,
        pInfoSize: *mut usize,
        pInfo: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cornerSampledImage: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCornerSampledImageFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCornerSampledImageFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCornerSampledImageFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCornerSampledImageFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCornerSampledImageFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCornerSampledImageFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCornerSampledImageFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCornerSampledImageFeaturesNV::cornerSampledImage"][::std::mem::offset_of!(
        VkPhysicalDeviceCornerSampledImageFeaturesNV,
        cornerSampledImage
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceCornerSampledImageFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 1 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 2 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV:
    VkExternalMemoryHandleTypeFlagBitsNV = 4;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV : VkExternalMemoryHandleTypeFlagBitsNV = 8 ;
pub const VkExternalMemoryHandleTypeFlagBitsNV_VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV : VkExternalMemoryHandleTypeFlagBitsNV = 2147483647 ;
pub type VkExternalMemoryHandleTypeFlagBitsNV = ::std::os::raw::c_uint;
pub type VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 1;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 2;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV:
    VkExternalMemoryFeatureFlagBitsNV = 4;
pub const VkExternalMemoryFeatureFlagBitsNV_VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV:
    VkExternalMemoryFeatureFlagBitsNV = 2147483647;
pub type VkExternalMemoryFeatureFlagBitsNV = ::std::os::raw::c_uint;
pub type VkExternalMemoryFeatureFlagsNV = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkExternalImageFormatPropertiesNV {
    pub imageFormatProperties: VkImageFormatProperties,
    pub externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalImageFormatPropertiesNV"]
        [::std::mem::size_of::<VkExternalImageFormatPropertiesNV>() - 48usize];
    ["Alignment of VkExternalImageFormatPropertiesNV"]
        [::std::mem::align_of::<VkExternalImageFormatPropertiesNV>() - 8usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::imageFormatProperties"]
        [::std::mem::offset_of!(VkExternalImageFormatPropertiesNV, imageFormatProperties) - 0usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::externalMemoryFeatures"][::std::mem::offset_of!(
        VkExternalImageFormatPropertiesNV,
        externalMemoryFeatures
    ) - 32usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::exportFromImportedHandleTypes"][::std::mem::offset_of!(
        VkExternalImageFormatPropertiesNV,
        exportFromImportedHandleTypes
    )
        - 36usize];
    ["Offset of field: VkExternalImageFormatPropertiesNV::compatibleHandleTypes"][::std::mem::offset_of!(
        VkExternalImageFormatPropertiesNV,
        compatibleHandleTypes
    ) - 40usize];
};
pub type PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
        pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        format: VkFormat,
        type_: VkImageType,
        tiling: VkImageTiling,
        usage: VkImageUsageFlags,
        flags: VkImageCreateFlags,
        externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
        pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryImageCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryImageCreateInfoNV"]
        [::std::mem::size_of::<VkExternalMemoryImageCreateInfoNV>() - 24usize];
    ["Alignment of VkExternalMemoryImageCreateInfoNV"]
        [::std::mem::align_of::<VkExternalMemoryImageCreateInfoNV>() - 8usize];
    ["Offset of field: VkExternalMemoryImageCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkExternalMemoryImageCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkExternalMemoryImageCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkExternalMemoryImageCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkExternalMemoryImageCreateInfoNV::handleTypes"]
        [::std::mem::offset_of!(VkExternalMemoryImageCreateInfoNV, handleTypes) - 16usize];
};
impl Default for VkExternalMemoryImageCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExportMemoryAllocateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleTypes: VkExternalMemoryHandleTypeFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExportMemoryAllocateInfoNV"]
        [::std::mem::size_of::<VkExportMemoryAllocateInfoNV>() - 24usize];
    ["Alignment of VkExportMemoryAllocateInfoNV"]
        [::std::mem::align_of::<VkExportMemoryAllocateInfoNV>() - 8usize];
    ["Offset of field: VkExportMemoryAllocateInfoNV::sType"]
        [::std::mem::offset_of!(VkExportMemoryAllocateInfoNV, sType) - 0usize];
    ["Offset of field: VkExportMemoryAllocateInfoNV::pNext"]
        [::std::mem::offset_of!(VkExportMemoryAllocateInfoNV, pNext) - 8usize];
    ["Offset of field: VkExportMemoryAllocateInfoNV::handleTypes"]
        [::std::mem::offset_of!(VkExportMemoryAllocateInfoNV, handleTypes) - 16usize];
};
impl Default for VkExportMemoryAllocateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_ALL_EXT: VkValidationCheckEXT = 0;
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_SHADERS_EXT: VkValidationCheckEXT = 1;
pub const VkValidationCheckEXT_VK_VALIDATION_CHECK_MAX_ENUM_EXT: VkValidationCheckEXT = 2147483647;
pub type VkValidationCheckEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFlagsEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub disabledValidationCheckCount: u32,
    pub pDisabledValidationChecks: *const VkValidationCheckEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkValidationFlagsEXT"][::std::mem::size_of::<VkValidationFlagsEXT>() - 32usize];
    ["Alignment of VkValidationFlagsEXT"][::std::mem::align_of::<VkValidationFlagsEXT>() - 8usize];
    ["Offset of field: VkValidationFlagsEXT::sType"]
        [::std::mem::offset_of!(VkValidationFlagsEXT, sType) - 0usize];
    ["Offset of field: VkValidationFlagsEXT::pNext"]
        [::std::mem::offset_of!(VkValidationFlagsEXT, pNext) - 8usize];
    ["Offset of field: VkValidationFlagsEXT::disabledValidationCheckCount"]
        [::std::mem::offset_of!(VkValidationFlagsEXT, disabledValidationCheckCount) - 16usize];
    ["Offset of field: VkValidationFlagsEXT::pDisabledValidationChecks"]
        [::std::mem::offset_of!(VkValidationFlagsEXT, pDisabledValidationChecks) - 24usize];
};
impl Default for VkValidationFlagsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT =
    VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewASTCDecodeModeEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub decodeMode: VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewASTCDecodeModeEXT"]
        [::std::mem::size_of::<VkImageViewASTCDecodeModeEXT>() - 24usize];
    ["Alignment of VkImageViewASTCDecodeModeEXT"]
        [::std::mem::align_of::<VkImageViewASTCDecodeModeEXT>() - 8usize];
    ["Offset of field: VkImageViewASTCDecodeModeEXT::sType"]
        [::std::mem::offset_of!(VkImageViewASTCDecodeModeEXT, sType) - 0usize];
    ["Offset of field: VkImageViewASTCDecodeModeEXT::pNext"]
        [::std::mem::offset_of!(VkImageViewASTCDecodeModeEXT, pNext) - 8usize];
    ["Offset of field: VkImageViewASTCDecodeModeEXT::decodeMode"]
        [::std::mem::offset_of!(VkImageViewASTCDecodeModeEXT, decodeMode) - 16usize];
};
impl Default for VkImageViewASTCDecodeModeEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub decodeModeSharedExponent: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceASTCDecodeFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceASTCDecodeFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceASTCDecodeFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceASTCDecodeFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceASTCDecodeFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceASTCDecodeFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceASTCDecodeFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceASTCDecodeFeaturesEXT::decodeModeSharedExponent"][::std::mem::offset_of!(
        VkPhysicalDeviceASTCDecodeFeaturesEXT,
        decodeModeSharedExponent
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceASTCDecodeFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkPipelineRobustnessBufferBehavior as VkPipelineRobustnessBufferBehaviorEXT;
pub use self::VkPipelineRobustnessImageBehavior as VkPipelineRobustnessImageBehaviorEXT;
pub type VkPhysicalDevicePipelineRobustnessFeaturesEXT = VkPhysicalDevicePipelineRobustnessFeatures;
pub type VkPhysicalDevicePipelineRobustnessPropertiesEXT =
    VkPhysicalDevicePipelineRobustnessProperties;
pub type VkPipelineRobustnessCreateInfoEXT = VkPipelineRobustnessCreateInfo;
pub const VkConditionalRenderingFlagBitsEXT_VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT:
    VkConditionalRenderingFlagBitsEXT = 1;
pub const VkConditionalRenderingFlagBitsEXT_VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT:
    VkConditionalRenderingFlagBitsEXT = 2147483647;
pub type VkConditionalRenderingFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkConditionalRenderingFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConditionalRenderingBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub flags: VkConditionalRenderingFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkConditionalRenderingBeginInfoEXT"]
        [::std::mem::size_of::<VkConditionalRenderingBeginInfoEXT>() - 40usize];
    ["Alignment of VkConditionalRenderingBeginInfoEXT"]
        [::std::mem::align_of::<VkConditionalRenderingBeginInfoEXT>() - 8usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::sType"]
        [::std::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, sType) - 0usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::pNext"]
        [::std::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, pNext) - 8usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::buffer"]
        [::std::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, buffer) - 16usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::offset"]
        [::std::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, offset) - 24usize];
    ["Offset of field: VkConditionalRenderingBeginInfoEXT::flags"]
        [::std::mem::offset_of!(VkConditionalRenderingBeginInfoEXT, flags) - 32usize];
};
impl Default for VkConditionalRenderingBeginInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub conditionalRendering: VkBool32,
    pub inheritedConditionalRendering: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceConditionalRenderingFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceConditionalRenderingFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceConditionalRenderingFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceConditionalRenderingFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceConditionalRenderingFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::conditionalRendering"][::std::mem::offset_of!(
        VkPhysicalDeviceConditionalRenderingFeaturesEXT,
        conditionalRendering
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceConditionalRenderingFeaturesEXT::inheritedConditionalRendering"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConditionalRenderingFeaturesEXT , inheritedConditionalRendering) - 20usize] ;
};
impl Default for VkPhysicalDeviceConditionalRenderingFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub conditionalRenderingEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceConditionalRenderingInfoEXT"]
        [::std::mem::size_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>() - 24usize];
    ["Alignment of VkCommandBufferInheritanceConditionalRenderingInfoEXT"]
        [::std::mem::align_of::<VkCommandBufferInheritanceConditionalRenderingInfoEXT>() - 8usize];
    ["Offset of field: VkCommandBufferInheritanceConditionalRenderingInfoEXT::sType"][::std::mem::offset_of!(
        VkCommandBufferInheritanceConditionalRenderingInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceConditionalRenderingInfoEXT::pNext"][::std::mem::offset_of!(
        VkCommandBufferInheritanceConditionalRenderingInfoEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkCommandBufferInheritanceConditionalRenderingInfoEXT::conditionalRenderingEnable"] [:: std :: mem :: offset_of ! (VkCommandBufferInheritanceConditionalRenderingInfoEXT , conditionalRenderingEnable) - 16usize] ;
};
impl Default for VkCommandBufferInheritanceConditionalRenderingInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBeginConditionalRenderingEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT,
    ),
>;
pub type PFN_vkCmdEndConditionalRenderingEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
unsafe extern "system" {
    pub fn vkCmdBeginConditionalRenderingEXT(
        commandBuffer: VkCommandBuffer,
        pConditionalRenderingBegin: *const VkConditionalRenderingBeginInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer);
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkViewportWScalingNV {
    pub xcoeff: f32,
    pub ycoeff: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkViewportWScalingNV"][::std::mem::size_of::<VkViewportWScalingNV>() - 8usize];
    ["Alignment of VkViewportWScalingNV"][::std::mem::align_of::<VkViewportWScalingNV>() - 4usize];
    ["Offset of field: VkViewportWScalingNV::xcoeff"]
        [::std::mem::offset_of!(VkViewportWScalingNV, xcoeff) - 0usize];
    ["Offset of field: VkViewportWScalingNV::ycoeff"]
        [::std::mem::offset_of!(VkViewportWScalingNV, ycoeff) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewportWScalingEnable: VkBool32,
    pub viewportCount: u32,
    pub pViewportWScalings: *const VkViewportWScalingNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportWScalingStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineViewportWScalingStateCreateInfoNV>() - 32usize];
    ["Alignment of VkPipelineViewportWScalingStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineViewportWScalingStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkPipelineViewportWScalingStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkPipelineViewportWScalingStateCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::viewportWScalingEnable"][::std::mem::offset_of!(
        VkPipelineViewportWScalingStateCreateInfoNV,
        viewportWScalingEnable
    )
        - 16usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::viewportCount"][::std::mem::offset_of!(
        VkPipelineViewportWScalingStateCreateInfoNV,
        viewportCount
    ) - 20usize];
    ["Offset of field: VkPipelineViewportWScalingStateCreateInfoNV::pViewportWScalings"][::std::mem::offset_of!(
        VkPipelineViewportWScalingStateCreateInfoNV,
        pViewportWScalings
    )
        - 24usize];
};
impl Default for VkPipelineViewportWScalingStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetViewportWScalingNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportWScalings: *const VkViewportWScalingNV,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetViewportWScalingNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportWScalings: *const VkViewportWScalingNV,
    );
}
pub type PFN_vkReleaseDisplayEXT = ::std::option::Option<
    unsafe extern "system" fn(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR)
        -> VkResult;
}
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_VBLANK_BIT_EXT:
    VkSurfaceCounterFlagBitsEXT = 1;
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_VBLANK_EXT: VkSurfaceCounterFlagBitsEXT =
    1;
pub const VkSurfaceCounterFlagBitsEXT_VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT:
    VkSurfaceCounterFlagBitsEXT = 2147483647;
pub type VkSurfaceCounterFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkSurfaceCounterFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilities2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minImageCount: u32,
    pub maxImageCount: u32,
    pub currentExtent: VkExtent2D,
    pub minImageExtent: VkExtent2D,
    pub maxImageExtent: VkExtent2D,
    pub maxImageArrayLayers: u32,
    pub supportedTransforms: VkSurfaceTransformFlagsKHR,
    pub currentTransform: VkSurfaceTransformFlagBitsKHR,
    pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    pub supportedUsageFlags: VkImageUsageFlags,
    pub supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilities2EXT"]
        [::std::mem::size_of::<VkSurfaceCapabilities2EXT>() - 72usize];
    ["Alignment of VkSurfaceCapabilities2EXT"]
        [::std::mem::align_of::<VkSurfaceCapabilities2EXT>() - 8usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::sType"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, sType) - 0usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::pNext"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, pNext) - 8usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::minImageCount"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, minImageCount) - 16usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::maxImageCount"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, maxImageCount) - 20usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::currentExtent"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, currentExtent) - 24usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::minImageExtent"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, minImageExtent) - 32usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::maxImageExtent"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, maxImageExtent) - 40usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::maxImageArrayLayers"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, maxImageArrayLayers) - 48usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedTransforms"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedTransforms) - 52usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::currentTransform"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, currentTransform) - 56usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedCompositeAlpha"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedCompositeAlpha) - 60usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedUsageFlags"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedUsageFlags) - 64usize];
    ["Offset of field: VkSurfaceCapabilities2EXT::supportedSurfaceCounters"]
        [::std::mem::offset_of!(VkSurfaceCapabilities2EXT, supportedSurfaceCounters) - 68usize];
};
impl Default for VkSurfaceCapabilities2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(
        physicalDevice: VkPhysicalDevice,
        surface: VkSurfaceKHR,
        pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT,
    ) -> VkResult;
}
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_OFF_EXT: VkDisplayPowerStateEXT = 0;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_SUSPEND_EXT: VkDisplayPowerStateEXT = 1;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_ON_EXT: VkDisplayPowerStateEXT = 2;
pub const VkDisplayPowerStateEXT_VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: VkDisplayPowerStateEXT =
    2147483647;
pub type VkDisplayPowerStateEXT = ::std::os::raw::c_uint;
pub const VkDeviceEventTypeEXT_VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: VkDeviceEventTypeEXT = 0;
pub const VkDeviceEventTypeEXT_VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: VkDeviceEventTypeEXT = 2147483647;
pub type VkDeviceEventTypeEXT = ::std::os::raw::c_uint;
pub const VkDisplayEventTypeEXT_VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: VkDisplayEventTypeEXT =
    0;
pub const VkDisplayEventTypeEXT_VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: VkDisplayEventTypeEXT =
    2147483647;
pub type VkDisplayEventTypeEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayPowerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub powerState: VkDisplayPowerStateEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayPowerInfoEXT"][::std::mem::size_of::<VkDisplayPowerInfoEXT>() - 24usize];
    ["Alignment of VkDisplayPowerInfoEXT"]
        [::std::mem::align_of::<VkDisplayPowerInfoEXT>() - 8usize];
    ["Offset of field: VkDisplayPowerInfoEXT::sType"]
        [::std::mem::offset_of!(VkDisplayPowerInfoEXT, sType) - 0usize];
    ["Offset of field: VkDisplayPowerInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDisplayPowerInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDisplayPowerInfoEXT::powerState"]
        [::std::mem::offset_of!(VkDisplayPowerInfoEXT, powerState) - 16usize];
};
impl Default for VkDisplayPowerInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceEvent: VkDeviceEventTypeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceEventInfoEXT"][::std::mem::size_of::<VkDeviceEventInfoEXT>() - 24usize];
    ["Alignment of VkDeviceEventInfoEXT"][::std::mem::align_of::<VkDeviceEventInfoEXT>() - 8usize];
    ["Offset of field: VkDeviceEventInfoEXT::sType"]
        [::std::mem::offset_of!(VkDeviceEventInfoEXT, sType) - 0usize];
    ["Offset of field: VkDeviceEventInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDeviceEventInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDeviceEventInfoEXT::deviceEvent"]
        [::std::mem::offset_of!(VkDeviceEventInfoEXT, deviceEvent) - 16usize];
};
impl Default for VkDeviceEventInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayEventInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub displayEvent: VkDisplayEventTypeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayEventInfoEXT"][::std::mem::size_of::<VkDisplayEventInfoEXT>() - 24usize];
    ["Alignment of VkDisplayEventInfoEXT"]
        [::std::mem::align_of::<VkDisplayEventInfoEXT>() - 8usize];
    ["Offset of field: VkDisplayEventInfoEXT::sType"]
        [::std::mem::offset_of!(VkDisplayEventInfoEXT, sType) - 0usize];
    ["Offset of field: VkDisplayEventInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDisplayEventInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDisplayEventInfoEXT::displayEvent"]
        [::std::mem::offset_of!(VkDisplayEventInfoEXT, displayEvent) - 16usize];
};
impl Default for VkDisplayEventInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainCounterCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub surfaceCounters: VkSurfaceCounterFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainCounterCreateInfoEXT"]
        [::std::mem::size_of::<VkSwapchainCounterCreateInfoEXT>() - 24usize];
    ["Alignment of VkSwapchainCounterCreateInfoEXT"]
        [::std::mem::align_of::<VkSwapchainCounterCreateInfoEXT>() - 8usize];
    ["Offset of field: VkSwapchainCounterCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkSwapchainCounterCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainCounterCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSwapchainCounterCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSwapchainCounterCreateInfoEXT::surfaceCounters"]
        [::std::mem::offset_of!(VkSwapchainCounterCreateInfoEXT, surfaceCounters) - 16usize];
};
impl Default for VkSwapchainCounterCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDisplayPowerControlEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayPowerInfo: *const VkDisplayPowerInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDeviceEventEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDeviceEventInfo: *const VkDeviceEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkRegisterDisplayEventEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayEventInfo: *const VkDisplayEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult,
>;
pub type PFN_vkGetSwapchainCounterEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        counter: VkSurfaceCounterFlagBitsEXT,
        pCounterValue: *mut u64,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkDisplayPowerControlEXT(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayPowerInfo: *const VkDisplayPowerInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkRegisterDeviceEventEXT(
        device: VkDevice,
        pDeviceEventInfo: *const VkDeviceEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkRegisterDisplayEventEXT(
        device: VkDevice,
        display: VkDisplayKHR,
        pDisplayEventInfo: *const VkDisplayEventInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pFence: *mut VkFence,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetSwapchainCounterEXT(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        counter: VkSurfaceCounterFlagBitsEXT,
        pCounterValue: *mut u64,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkRefreshCycleDurationGOOGLE {
    pub refreshDuration: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRefreshCycleDurationGOOGLE"]
        [::std::mem::size_of::<VkRefreshCycleDurationGOOGLE>() - 8usize];
    ["Alignment of VkRefreshCycleDurationGOOGLE"]
        [::std::mem::align_of::<VkRefreshCycleDurationGOOGLE>() - 8usize];
    ["Offset of field: VkRefreshCycleDurationGOOGLE::refreshDuration"]
        [::std::mem::offset_of!(VkRefreshCycleDurationGOOGLE, refreshDuration) - 0usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPastPresentationTimingGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
    pub actualPresentTime: u64,
    pub earliestPresentTime: u64,
    pub presentMargin: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPastPresentationTimingGOOGLE"]
        [::std::mem::size_of::<VkPastPresentationTimingGOOGLE>() - 40usize];
    ["Alignment of VkPastPresentationTimingGOOGLE"]
        [::std::mem::align_of::<VkPastPresentationTimingGOOGLE>() - 8usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::presentID"]
        [::std::mem::offset_of!(VkPastPresentationTimingGOOGLE, presentID) - 0usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::desiredPresentTime"]
        [::std::mem::offset_of!(VkPastPresentationTimingGOOGLE, desiredPresentTime) - 8usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::actualPresentTime"]
        [::std::mem::offset_of!(VkPastPresentationTimingGOOGLE, actualPresentTime) - 16usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::earliestPresentTime"]
        [::std::mem::offset_of!(VkPastPresentationTimingGOOGLE, earliestPresentTime) - 24usize];
    ["Offset of field: VkPastPresentationTimingGOOGLE::presentMargin"]
        [::std::mem::offset_of!(VkPastPresentationTimingGOOGLE, presentMargin) - 32usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPresentTimeGOOGLE {
    pub presentID: u32,
    pub desiredPresentTime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentTimeGOOGLE"][::std::mem::size_of::<VkPresentTimeGOOGLE>() - 16usize];
    ["Alignment of VkPresentTimeGOOGLE"][::std::mem::align_of::<VkPresentTimeGOOGLE>() - 8usize];
    ["Offset of field: VkPresentTimeGOOGLE::presentID"]
        [::std::mem::offset_of!(VkPresentTimeGOOGLE, presentID) - 0usize];
    ["Offset of field: VkPresentTimeGOOGLE::desiredPresentTime"]
        [::std::mem::offset_of!(VkPresentTimeGOOGLE, desiredPresentTime) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPresentTimesInfoGOOGLE {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pTimes: *const VkPresentTimeGOOGLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPresentTimesInfoGOOGLE"]
        [::std::mem::size_of::<VkPresentTimesInfoGOOGLE>() - 32usize];
    ["Alignment of VkPresentTimesInfoGOOGLE"]
        [::std::mem::align_of::<VkPresentTimesInfoGOOGLE>() - 8usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::sType"]
        [::std::mem::offset_of!(VkPresentTimesInfoGOOGLE, sType) - 0usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::pNext"]
        [::std::mem::offset_of!(VkPresentTimesInfoGOOGLE, pNext) - 8usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::swapchainCount"]
        [::std::mem::offset_of!(VkPresentTimesInfoGOOGLE, swapchainCount) - 16usize];
    ["Offset of field: VkPresentTimesInfoGOOGLE::pTimes"]
        [::std::mem::offset_of!(VkPresentTimesInfoGOOGLE, pTimes) - 24usize];
};
impl Default for VkPresentTimesInfoGOOGLE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetRefreshCycleDurationGOOGLE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE,
    ) -> VkResult,
>;
pub type PFN_vkGetPastPresentationTimingGOOGLE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pPresentationTimingCount: *mut u32,
        pPresentationTimings: *mut VkPastPresentationTimingGOOGLE,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetRefreshCycleDurationGOOGLE(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPastPresentationTimingGOOGLE(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pPresentationTimingCount: *mut u32,
        pPresentationTimings: *mut VkPastPresentationTimingGOOGLE,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub perViewPositionAllComponents: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"][::std::mem::size_of::<
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX"][::std::mem::align_of::<
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX::perViewPositionAllComponents"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX , perViewPositionAllComponents) - 16usize] ;
};
impl Default for VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMultiviewPerViewAttributesInfoNVX {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub perViewAttributes: VkBool32,
    pub perViewAttributesPositionXOnly: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiviewPerViewAttributesInfoNVX"]
        [::std::mem::size_of::<VkMultiviewPerViewAttributesInfoNVX>() - 24usize];
    ["Alignment of VkMultiviewPerViewAttributesInfoNVX"]
        [::std::mem::align_of::<VkMultiviewPerViewAttributesInfoNVX>() - 8usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::sType"]
        [::std::mem::offset_of!(VkMultiviewPerViewAttributesInfoNVX, sType) - 0usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::pNext"]
        [::std::mem::offset_of!(VkMultiviewPerViewAttributesInfoNVX, pNext) - 8usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::perViewAttributes"]
        [::std::mem::offset_of!(VkMultiviewPerViewAttributesInfoNVX, perViewAttributes) - 16usize];
    ["Offset of field: VkMultiviewPerViewAttributesInfoNVX::perViewAttributesPositionXOnly"][::std::mem::offset_of!(
        VkMultiviewPerViewAttributesInfoNVX,
        perViewAttributesPositionXOnly
    )
        - 20usize];
};
impl Default for VkMultiviewPerViewAttributesInfoNVX {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV:
    VkViewportCoordinateSwizzleNV = 0;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV:
    VkViewportCoordinateSwizzleNV = 1;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV:
    VkViewportCoordinateSwizzleNV = 2;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV:
    VkViewportCoordinateSwizzleNV = 3;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV:
    VkViewportCoordinateSwizzleNV = 4;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV:
    VkViewportCoordinateSwizzleNV = 5;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV:
    VkViewportCoordinateSwizzleNV = 6;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV:
    VkViewportCoordinateSwizzleNV = 7;
pub const VkViewportCoordinateSwizzleNV_VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV:
    VkViewportCoordinateSwizzleNV = 2147483647;
pub type VkViewportCoordinateSwizzleNV = ::std::os::raw::c_uint;
pub type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkViewportSwizzleNV {
    pub x: VkViewportCoordinateSwizzleNV,
    pub y: VkViewportCoordinateSwizzleNV,
    pub z: VkViewportCoordinateSwizzleNV,
    pub w: VkViewportCoordinateSwizzleNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkViewportSwizzleNV"][::std::mem::size_of::<VkViewportSwizzleNV>() - 16usize];
    ["Alignment of VkViewportSwizzleNV"][::std::mem::align_of::<VkViewportSwizzleNV>() - 4usize];
    ["Offset of field: VkViewportSwizzleNV::x"]
        [::std::mem::offset_of!(VkViewportSwizzleNV, x) - 0usize];
    ["Offset of field: VkViewportSwizzleNV::y"]
        [::std::mem::offset_of!(VkViewportSwizzleNV, y) - 4usize];
    ["Offset of field: VkViewportSwizzleNV::z"]
        [::std::mem::offset_of!(VkViewportSwizzleNV, z) - 8usize];
    ["Offset of field: VkViewportSwizzleNV::w"]
        [::std::mem::offset_of!(VkViewportSwizzleNV, w) - 12usize];
};
impl Default for VkViewportSwizzleNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    pub viewportCount: u32,
    pub pViewportSwizzles: *const VkViewportSwizzleNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportSwizzleStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineViewportSwizzleStateCreateInfoNV>() - 32usize];
    ["Alignment of VkPipelineViewportSwizzleStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineViewportSwizzleStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkPipelineViewportSwizzleStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkPipelineViewportSwizzleStateCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkPipelineViewportSwizzleStateCreateInfoNV, flags) - 16usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::viewportCount"][::std::mem::offset_of!(
        VkPipelineViewportSwizzleStateCreateInfoNV,
        viewportCount
    ) - 20usize];
    ["Offset of field: VkPipelineViewportSwizzleStateCreateInfoNV::pViewportSwizzles"][::std::mem::offset_of!(
        VkPipelineViewportSwizzleStateCreateInfoNV,
        pViewportSwizzles
    ) - 24usize];
};
impl Default for VkPipelineViewportSwizzleStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT:
    VkDiscardRectangleModeEXT = 0;
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT:
    VkDiscardRectangleModeEXT = 1;
pub const VkDiscardRectangleModeEXT_VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT:
    VkDiscardRectangleModeEXT = 2147483647;
pub type VkDiscardRectangleModeEXT = ::std::os::raw::c_uint;
pub type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxDiscardRectangles: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDiscardRectanglePropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDiscardRectanglePropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDiscardRectanglePropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDiscardRectanglePropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDiscardRectanglePropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDiscardRectanglePropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDiscardRectanglePropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles"][::std::mem::offset_of!(
        VkPhysicalDeviceDiscardRectanglePropertiesEXT,
        maxDiscardRectangles
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceDiscardRectanglePropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    pub discardRectangleMode: VkDiscardRectangleModeEXT,
    pub discardRectangleCount: u32,
    pub pDiscardRectangles: *const VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineDiscardRectangleStateCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>() - 40usize];
    ["Alignment of VkPipelineDiscardRectangleStateCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineDiscardRectangleStateCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkPipelineDiscardRectangleStateCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPipelineDiscardRectangleStateCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkPipelineDiscardRectangleStateCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleMode"][::std::mem::offset_of!(
        VkPipelineDiscardRectangleStateCreateInfoEXT,
        discardRectangleMode
    )
        - 20usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::discardRectangleCount"][::std::mem::offset_of!(
        VkPipelineDiscardRectangleStateCreateInfoEXT,
        discardRectangleCount
    )
        - 24usize];
    ["Offset of field: VkPipelineDiscardRectangleStateCreateInfoEXT::pDiscardRectangles"][::std::mem::offset_of!(
        VkPipelineDiscardRectangleStateCreateInfoEXT,
        pDiscardRectangles
    )
        - 32usize];
};
impl Default for VkPipelineDiscardRectangleStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetDiscardRectangleEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstDiscardRectangle: u32,
        discardRectangleCount: u32,
        pDiscardRectangles: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdSetDiscardRectangleEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32),
>;
pub type PFN_vkCmdSetDiscardRectangleModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        discardRectangleMode: VkDiscardRectangleModeEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetDiscardRectangleEXT(
        commandBuffer: VkCommandBuffer,
        firstDiscardRectangle: u32,
        discardRectangleCount: u32,
        pDiscardRectangles: *const VkRect2D,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDiscardRectangleEnableEXT(
        commandBuffer: VkCommandBuffer,
        discardRectangleEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDiscardRectangleModeEXT(
        commandBuffer: VkCommandBuffer,
        discardRectangleMode: VkDiscardRectangleModeEXT,
    );
}
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT:
    VkConservativeRasterizationModeEXT = 0;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT:
    VkConservativeRasterizationModeEXT = 1;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT : VkConservativeRasterizationModeEXT = 2 ;
pub const VkConservativeRasterizationModeEXT_VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT:
    VkConservativeRasterizationModeEXT = 2147483647;
pub type VkConservativeRasterizationModeEXT = ::std::os::raw::c_uint;
pub type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub primitiveOverestimationSize: f32,
    pub maxExtraPrimitiveOverestimationSize: f32,
    pub extraPrimitiveOverestimationSizeGranularity: f32,
    pub primitiveUnderestimation: VkBool32,
    pub conservativePointAndLineRasterization: VkBool32,
    pub degenerateTrianglesRasterized: VkBool32,
    pub degenerateLinesRasterized: VkBool32,
    pub fullyCoveredFragmentShaderInputVariable: VkBool32,
    pub conservativeRasterizationPostDepthCoverage: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceConservativeRasterizationPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>() - 56usize];
    ["Alignment of VkPhysicalDeviceConservativeRasterizationPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceConservativeRasterizationPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceConservativeRasterizationPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveOverestimationSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , primitiveOverestimationSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::maxExtraPrimitiveOverestimationSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , maxExtraPrimitiveOverestimationSize) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::extraPrimitiveOverestimationSizeGranularity"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , extraPrimitiveOverestimationSizeGranularity) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::primitiveUnderestimation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , primitiveUnderestimation) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativePointAndLineRasterization"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , conservativePointAndLineRasterization) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateTrianglesRasterized"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , degenerateTrianglesRasterized) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::degenerateLinesRasterized"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , degenerateLinesRasterized) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::fullyCoveredFragmentShaderInputVariable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , fullyCoveredFragmentShaderInputVariable) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceConservativeRasterizationPropertiesEXT::conservativeRasterizationPostDepthCoverage"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceConservativeRasterizationPropertiesEXT , conservativeRasterizationPostDepthCoverage) - 48usize] ;
};
impl Default for VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    pub conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    pub extraPrimitiveOverestimationSize: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationConservativeStateCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>() - 32usize];
    ["Alignment of VkPipelineRasterizationConservativeStateCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineRasterizationConservativeStateCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::sType"][::std::mem::offset_of!(
        VkPipelineRasterizationConservativeStateCreateInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::pNext"][::std::mem::offset_of!(
        VkPipelineRasterizationConservativeStateCreateInfoEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::flags"][::std::mem::offset_of!(
        VkPipelineRasterizationConservativeStateCreateInfoEXT,
        flags
    ) - 16usize];
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::conservativeRasterizationMode"] [:: std :: mem :: offset_of ! (VkPipelineRasterizationConservativeStateCreateInfoEXT , conservativeRasterizationMode) - 20usize] ;
    ["Offset of field: VkPipelineRasterizationConservativeStateCreateInfoEXT::extraPrimitiveOverestimationSize"] [:: std :: mem :: offset_of ! (VkPipelineRasterizationConservativeStateCreateInfoEXT , extraPrimitiveOverestimationSize) - 24usize] ;
};
impl Default for VkPipelineRasterizationConservativeStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClipEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClipEnableFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDepthClipEnableFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDepthClipEnableFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClipEnableFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClipEnableFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClipEnableFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClipEnableFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClipEnableFeaturesEXT::depthClipEnable"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthClipEnableFeaturesEXT,
        depthClipEnable
    ) - 16usize];
};
impl Default for VkPhysicalDeviceDepthClipEnableFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    pub depthClipEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationDepthClipStateCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>() - 24usize];
    ["Alignment of VkPipelineRasterizationDepthClipStateCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineRasterizationDepthClipStateCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::sType"][::std::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::pNext"][::std::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::flags"][::std::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        flags
    ) - 16usize];
    ["Offset of field: VkPipelineRasterizationDepthClipStateCreateInfoEXT::depthClipEnable"][::std::mem::offset_of!(
        VkPipelineRasterizationDepthClipStateCreateInfoEXT,
        depthClipEnable
    )
        - 20usize];
};
impl Default for VkPipelineRasterizationDepthClipStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkXYColorEXT {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkXYColorEXT"][::std::mem::size_of::<VkXYColorEXT>() - 8usize];
    ["Alignment of VkXYColorEXT"][::std::mem::align_of::<VkXYColorEXT>() - 4usize];
    ["Offset of field: VkXYColorEXT::x"][::std::mem::offset_of!(VkXYColorEXT, x) - 0usize];
    ["Offset of field: VkXYColorEXT::y"][::std::mem::offset_of!(VkXYColorEXT, y) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHdrMetadataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub displayPrimaryRed: VkXYColorEXT,
    pub displayPrimaryGreen: VkXYColorEXT,
    pub displayPrimaryBlue: VkXYColorEXT,
    pub whitePoint: VkXYColorEXT,
    pub maxLuminance: f32,
    pub minLuminance: f32,
    pub maxContentLightLevel: f32,
    pub maxFrameAverageLightLevel: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHdrMetadataEXT"][::std::mem::size_of::<VkHdrMetadataEXT>() - 64usize];
    ["Alignment of VkHdrMetadataEXT"][::std::mem::align_of::<VkHdrMetadataEXT>() - 8usize];
    ["Offset of field: VkHdrMetadataEXT::sType"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, sType) - 0usize];
    ["Offset of field: VkHdrMetadataEXT::pNext"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, pNext) - 8usize];
    ["Offset of field: VkHdrMetadataEXT::displayPrimaryRed"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, displayPrimaryRed) - 16usize];
    ["Offset of field: VkHdrMetadataEXT::displayPrimaryGreen"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, displayPrimaryGreen) - 24usize];
    ["Offset of field: VkHdrMetadataEXT::displayPrimaryBlue"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, displayPrimaryBlue) - 32usize];
    ["Offset of field: VkHdrMetadataEXT::whitePoint"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, whitePoint) - 40usize];
    ["Offset of field: VkHdrMetadataEXT::maxLuminance"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, maxLuminance) - 48usize];
    ["Offset of field: VkHdrMetadataEXT::minLuminance"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, minLuminance) - 52usize];
    ["Offset of field: VkHdrMetadataEXT::maxContentLightLevel"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, maxContentLightLevel) - 56usize];
    ["Offset of field: VkHdrMetadataEXT::maxFrameAverageLightLevel"]
        [::std::mem::offset_of!(VkHdrMetadataEXT, maxFrameAverageLightLevel) - 60usize];
};
impl Default for VkHdrMetadataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetHdrMetadataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchainCount: u32,
        pSwapchains: *const VkSwapchainKHR,
        pMetadata: *const VkHdrMetadataEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkSetHdrMetadataEXT(
        device: VkDevice,
        swapchainCount: u32,
        pSwapchains: *const VkSwapchainKHR,
        pMetadata: *const VkHdrMetadataEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub relaxedLineRasterization: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG"]
        [::std::mem::size_of::<VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG>() - 24usize];
    ["Alignment of VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG"]
        [::std::mem::align_of::<VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG::relaxedLineRasterization"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG , relaxedLineRasterization) - 16usize] ;
};
impl Default for VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerEXT_T {
    _unused: [u8; 0],
}
pub type VkDebugUtilsMessengerEXT = *mut VkDebugUtilsMessengerEXT_T;
pub type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 1;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 16;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 256;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT:
    VkDebugUtilsMessageSeverityFlagBitsEXT = 4096;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT : VkDebugUtilsMessageSeverityFlagBitsEXT = 2147483647 ;
pub type VkDebugUtilsMessageSeverityFlagBitsEXT = ::std::os::raw::c_uint;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 1;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 2;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 4;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT : VkDebugUtilsMessageTypeFlagBitsEXT = 8 ;
pub const VkDebugUtilsMessageTypeFlagBitsEXT_VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT:
    VkDebugUtilsMessageTypeFlagBitsEXT = 2147483647;
pub type VkDebugUtilsMessageTypeFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsLabelEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pLabelName: *const ::std::os::raw::c_char,
    pub color: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsLabelEXT"][::std::mem::size_of::<VkDebugUtilsLabelEXT>() - 40usize];
    ["Alignment of VkDebugUtilsLabelEXT"][::std::mem::align_of::<VkDebugUtilsLabelEXT>() - 8usize];
    ["Offset of field: VkDebugUtilsLabelEXT::sType"]
        [::std::mem::offset_of!(VkDebugUtilsLabelEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsLabelEXT::pNext"]
        [::std::mem::offset_of!(VkDebugUtilsLabelEXT, pNext) - 8usize];
    ["Offset of field: VkDebugUtilsLabelEXT::pLabelName"]
        [::std::mem::offset_of!(VkDebugUtilsLabelEXT, pLabelName) - 16usize];
    ["Offset of field: VkDebugUtilsLabelEXT::color"]
        [::std::mem::offset_of!(VkDebugUtilsLabelEXT, color) - 24usize];
};
impl Default for VkDebugUtilsLabelEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectNameInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub pObjectName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsObjectNameInfoEXT"]
        [::std::mem::size_of::<VkDebugUtilsObjectNameInfoEXT>() - 40usize];
    ["Alignment of VkDebugUtilsObjectNameInfoEXT"]
        [::std::mem::align_of::<VkDebugUtilsObjectNameInfoEXT>() - 8usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::sType"]
        [::std::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::objectType"]
        [::std::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, objectType) - 16usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::objectHandle"]
        [::std::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, objectHandle) - 24usize];
    ["Offset of field: VkDebugUtilsObjectNameInfoEXT::pObjectName"]
        [::std::mem::offset_of!(VkDebugUtilsObjectNameInfoEXT, pObjectName) - 32usize];
};
impl Default for VkDebugUtilsObjectNameInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pub pMessageIdName: *const ::std::os::raw::c_char,
    pub messageIdNumber: i32,
    pub pMessage: *const ::std::os::raw::c_char,
    pub queueLabelCount: u32,
    pub pQueueLabels: *const VkDebugUtilsLabelEXT,
    pub cmdBufLabelCount: u32,
    pub pCmdBufLabels: *const VkDebugUtilsLabelEXT,
    pub objectCount: u32,
    pub pObjects: *const VkDebugUtilsObjectNameInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsMessengerCallbackDataEXT"]
        [::std::mem::size_of::<VkDebugUtilsMessengerCallbackDataEXT>() - 96usize];
    ["Alignment of VkDebugUtilsMessengerCallbackDataEXT"]
        [::std::mem::align_of::<VkDebugUtilsMessengerCallbackDataEXT>() - 8usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::sType"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pNext"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pNext) - 8usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::flags"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, flags) - 16usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pMessageIdName"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pMessageIdName) - 24usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::messageIdNumber"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, messageIdNumber) - 32usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pMessage"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pMessage) - 40usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::queueLabelCount"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, queueLabelCount) - 48usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pQueueLabels"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pQueueLabels) - 56usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::cmdBufLabelCount"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, cmdBufLabelCount) - 64usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pCmdBufLabels"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pCmdBufLabels) - 72usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::objectCount"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, objectCount) - 80usize];
    ["Offset of field: VkDebugUtilsMessengerCallbackDataEXT::pObjects"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCallbackDataEXT, pObjects) - 88usize];
};
impl Default for VkDebugUtilsMessengerCallbackDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDebugUtilsMessengerCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
        pUserData: *mut ::std::os::raw::c_void,
    ) -> VkBool32,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsMessengerCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDebugUtilsMessengerCreateFlagsEXT,
    pub messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    pub messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pub pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsMessengerCreateInfoEXT"]
        [::std::mem::size_of::<VkDebugUtilsMessengerCreateInfoEXT>() - 48usize];
    ["Alignment of VkDebugUtilsMessengerCreateInfoEXT"]
        [::std::mem::align_of::<VkDebugUtilsMessengerCreateInfoEXT>() - 8usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::messageSeverity"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, messageSeverity) - 20usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::messageType"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, messageType) - 24usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::pfnUserCallback"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, pfnUserCallback) - 32usize];
    ["Offset of field: VkDebugUtilsMessengerCreateInfoEXT::pUserData"]
        [::std::mem::offset_of!(VkDebugUtilsMessengerCreateInfoEXT, pUserData) - 40usize];
};
impl Default for VkDebugUtilsMessengerCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDebugUtilsObjectTagInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDebugUtilsObjectTagInfoEXT"]
        [::std::mem::size_of::<VkDebugUtilsObjectTagInfoEXT>() - 56usize];
    ["Alignment of VkDebugUtilsObjectTagInfoEXT"]
        [::std::mem::align_of::<VkDebugUtilsObjectTagInfoEXT>() - 8usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::sType"]
        [::std::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, sType) - 0usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::objectType"]
        [::std::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, objectType) - 16usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::objectHandle"]
        [::std::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, objectHandle) - 24usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::tagName"]
        [::std::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, tagName) - 32usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::tagSize"]
        [::std::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, tagSize) - 40usize];
    ["Offset of field: VkDebugUtilsObjectTagInfoEXT::pTag"]
        [::std::mem::offset_of!(VkDebugUtilsObjectTagInfoEXT, pTag) - 48usize];
};
impl Default for VkDebugUtilsObjectTagInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetDebugUtilsObjectNameEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pNameInfo: *const VkDebugUtilsObjectNameInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkSetDebugUtilsObjectTagEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pTagInfo: *const VkDebugUtilsObjectTagInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkQueueBeginDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkQueueEndDebugUtilsLabelEXT =
    ::std::option::Option<unsafe extern "system" fn(queue: VkQueue)>;
pub type PFN_vkQueueInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCmdBeginDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCmdEndDebugUtilsLabelEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
pub type PFN_vkCmdInsertDebugUtilsLabelEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLabelInfo: *const VkDebugUtilsLabelEXT),
>;
pub type PFN_vkCreateDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMessenger: *mut VkDebugUtilsMessengerEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyDebugUtilsMessengerEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        messenger: VkDebugUtilsMessengerEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSubmitDebugUtilsMessageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkSetDebugUtilsObjectNameEXT(
        device: VkDevice,
        pNameInfo: *const VkDebugUtilsObjectNameInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkSetDebugUtilsObjectTagEXT(
        device: VkDevice,
        pTagInfo: *const VkDebugUtilsObjectTagInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
}
unsafe extern "system" {
    pub fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue);
}
unsafe extern "system" {
    pub fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: *const VkDebugUtilsLabelEXT);
}
unsafe extern "system" {
    pub fn vkCmdBeginDebugUtilsLabelEXT(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer);
}
unsafe extern "system" {
    pub fn vkCmdInsertDebugUtilsLabelEXT(
        commandBuffer: VkCommandBuffer,
        pLabelInfo: *const VkDebugUtilsLabelEXT,
    );
}
unsafe extern "system" {
    pub fn vkCreateDebugUtilsMessengerEXT(
        instance: VkInstance,
        pCreateInfo: *const VkDebugUtilsMessengerCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMessenger: *mut VkDebugUtilsMessengerEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyDebugUtilsMessengerEXT(
        instance: VkInstance,
        messenger: VkDebugUtilsMessengerEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkSubmitDebugUtilsMessageEXT(
        instance: VkInstance,
        messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
        messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
        pCallbackData: *const VkDebugUtilsMessengerCallbackDataEXT,
    );
}
pub use self::VkSamplerReductionMode as VkSamplerReductionModeEXT;
pub type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT =
    VkPhysicalDeviceSamplerFilterMinmaxProperties;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentSampleCountInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub colorAttachmentCount: u32,
    pub pColorAttachmentSamples: *const VkSampleCountFlagBits,
    pub depthStencilAttachmentSamples: VkSampleCountFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentSampleCountInfoAMD"]
        [::std::mem::size_of::<VkAttachmentSampleCountInfoAMD>() - 40usize];
    ["Alignment of VkAttachmentSampleCountInfoAMD"]
        [::std::mem::align_of::<VkAttachmentSampleCountInfoAMD>() - 8usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::sType"]
        [::std::mem::offset_of!(VkAttachmentSampleCountInfoAMD, sType) - 0usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::pNext"]
        [::std::mem::offset_of!(VkAttachmentSampleCountInfoAMD, pNext) - 8usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::colorAttachmentCount"]
        [::std::mem::offset_of!(VkAttachmentSampleCountInfoAMD, colorAttachmentCount) - 16usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::pColorAttachmentSamples"]
        [::std::mem::offset_of!(VkAttachmentSampleCountInfoAMD, pColorAttachmentSamples) - 24usize];
    ["Offset of field: VkAttachmentSampleCountInfoAMD::depthStencilAttachmentSamples"][::std::mem::offset_of!(
        VkAttachmentSampleCountInfoAMD,
        depthStencilAttachmentSamples
    ) - 32usize];
};
impl Default for VkAttachmentSampleCountInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;
pub type VkPhysicalDeviceInlineUniformBlockPropertiesEXT =
    VkPhysicalDeviceInlineUniformBlockProperties;
pub type VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;
pub type VkDescriptorPoolInlineUniformBlockCreateInfoEXT =
    VkDescriptorPoolInlineUniformBlockCreateInfo;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSampleLocationEXT {
    pub x: f32,
    pub y: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSampleLocationEXT"][::std::mem::size_of::<VkSampleLocationEXT>() - 8usize];
    ["Alignment of VkSampleLocationEXT"][::std::mem::align_of::<VkSampleLocationEXT>() - 4usize];
    ["Offset of field: VkSampleLocationEXT::x"]
        [::std::mem::offset_of!(VkSampleLocationEXT, x) - 0usize];
    ["Offset of field: VkSampleLocationEXT::y"]
        [::std::mem::offset_of!(VkSampleLocationEXT, y) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSampleLocationsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleLocationsPerPixel: VkSampleCountFlagBits,
    pub sampleLocationGridSize: VkExtent2D,
    pub sampleLocationsCount: u32,
    pub pSampleLocations: *const VkSampleLocationEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSampleLocationsInfoEXT"]
        [::std::mem::size_of::<VkSampleLocationsInfoEXT>() - 40usize];
    ["Alignment of VkSampleLocationsInfoEXT"]
        [::std::mem::align_of::<VkSampleLocationsInfoEXT>() - 8usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sType"]
        [::std::mem::offset_of!(VkSampleLocationsInfoEXT, sType) - 0usize];
    ["Offset of field: VkSampleLocationsInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSampleLocationsInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sampleLocationsPerPixel"]
        [::std::mem::offset_of!(VkSampleLocationsInfoEXT, sampleLocationsPerPixel) - 16usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sampleLocationGridSize"]
        [::std::mem::offset_of!(VkSampleLocationsInfoEXT, sampleLocationGridSize) - 20usize];
    ["Offset of field: VkSampleLocationsInfoEXT::sampleLocationsCount"]
        [::std::mem::offset_of!(VkSampleLocationsInfoEXT, sampleLocationsCount) - 28usize];
    ["Offset of field: VkSampleLocationsInfoEXT::pSampleLocations"]
        [::std::mem::offset_of!(VkSampleLocationsInfoEXT, pSampleLocations) - 32usize];
};
impl Default for VkSampleLocationsInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAttachmentSampleLocationsEXT {
    pub attachmentIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAttachmentSampleLocationsEXT"]
        [::std::mem::size_of::<VkAttachmentSampleLocationsEXT>() - 48usize];
    ["Alignment of VkAttachmentSampleLocationsEXT"]
        [::std::mem::align_of::<VkAttachmentSampleLocationsEXT>() - 8usize];
    ["Offset of field: VkAttachmentSampleLocationsEXT::attachmentIndex"]
        [::std::mem::offset_of!(VkAttachmentSampleLocationsEXT, attachmentIndex) - 0usize];
    ["Offset of field: VkAttachmentSampleLocationsEXT::sampleLocationsInfo"]
        [::std::mem::offset_of!(VkAttachmentSampleLocationsEXT, sampleLocationsInfo) - 8usize];
};
impl Default for VkAttachmentSampleLocationsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassSampleLocationsEXT {
    pub subpassIndex: u32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassSampleLocationsEXT"]
        [::std::mem::size_of::<VkSubpassSampleLocationsEXT>() - 48usize];
    ["Alignment of VkSubpassSampleLocationsEXT"]
        [::std::mem::align_of::<VkSubpassSampleLocationsEXT>() - 8usize];
    ["Offset of field: VkSubpassSampleLocationsEXT::subpassIndex"]
        [::std::mem::offset_of!(VkSubpassSampleLocationsEXT, subpassIndex) - 0usize];
    ["Offset of field: VkSubpassSampleLocationsEXT::sampleLocationsInfo"]
        [::std::mem::offset_of!(VkSubpassSampleLocationsEXT, sampleLocationsInfo) - 8usize];
};
impl Default for VkSubpassSampleLocationsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentInitialSampleLocationsCount: u32,
    pub pAttachmentInitialSampleLocations: *const VkAttachmentSampleLocationsEXT,
    pub postSubpassSampleLocationsCount: u32,
    pub pPostSubpassSampleLocations: *const VkSubpassSampleLocationsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassSampleLocationsBeginInfoEXT"]
        [::std::mem::size_of::<VkRenderPassSampleLocationsBeginInfoEXT>() - 48usize];
    ["Alignment of VkRenderPassSampleLocationsBeginInfoEXT"]
        [::std::mem::align_of::<VkRenderPassSampleLocationsBeginInfoEXT>() - 8usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::sType"]
        [::std::mem::offset_of!(VkRenderPassSampleLocationsBeginInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::pNext"]
        [::std::mem::offset_of!(VkRenderPassSampleLocationsBeginInfoEXT, pNext) - 8usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::attachmentInitialSampleLocationsCount"] [:: std :: mem :: offset_of ! (VkRenderPassSampleLocationsBeginInfoEXT , attachmentInitialSampleLocationsCount) - 16usize] ;
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::pAttachmentInitialSampleLocations"] [:: std :: mem :: offset_of ! (VkRenderPassSampleLocationsBeginInfoEXT , pAttachmentInitialSampleLocations) - 24usize] ;
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::postSubpassSampleLocationsCount"][::std::mem::offset_of!(
        VkRenderPassSampleLocationsBeginInfoEXT,
        postSubpassSampleLocationsCount
    )
        - 32usize];
    ["Offset of field: VkRenderPassSampleLocationsBeginInfoEXT::pPostSubpassSampleLocations"][::std::mem::offset_of!(
        VkRenderPassSampleLocationsBeginInfoEXT,
        pPostSubpassSampleLocations
    )
        - 40usize];
};
impl Default for VkRenderPassSampleLocationsBeginInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleLocationsEnable: VkBool32,
    pub sampleLocationsInfo: VkSampleLocationsInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineSampleLocationsStateCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineSampleLocationsStateCreateInfoEXT>() - 64usize];
    ["Alignment of VkPipelineSampleLocationsStateCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineSampleLocationsStateCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkPipelineSampleLocationsStateCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPipelineSampleLocationsStateCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable"][::std::mem::offset_of!(
        VkPipelineSampleLocationsStateCreateInfoEXT,
        sampleLocationsEnable
    )
        - 16usize];
    ["Offset of field: VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsInfo"][::std::mem::offset_of!(
        VkPipelineSampleLocationsStateCreateInfoEXT,
        sampleLocationsInfo
    )
        - 24usize];
};
impl Default for VkPipelineSampleLocationsStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub sampleLocationSampleCounts: VkSampleCountFlags,
    pub maxSampleLocationGridSize: VkExtent2D,
    pub sampleLocationCoordinateRange: [f32; 2usize],
    pub sampleLocationSubPixelBits: u32,
    pub variableSampleLocations: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSampleLocationsPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>() - 48usize];
    ["Alignment of VkPhysicalDeviceSampleLocationsPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceSampleLocationsPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSampleLocationsPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSampleLocationsPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSampleCounts"][::std::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        sampleLocationSampleCounts
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::maxSampleLocationGridSize"][::std::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        maxSampleLocationGridSize
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationCoordinateRange"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSampleLocationsPropertiesEXT , sampleLocationCoordinateRange) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::sampleLocationSubPixelBits"][::std::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        sampleLocationSubPixelBits
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations"][::std::mem::offset_of!(
        VkPhysicalDeviceSampleLocationsPropertiesEXT,
        variableSampleLocations
    )
        - 40usize];
};
impl Default for VkPhysicalDeviceSampleLocationsPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMultisamplePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxSampleLocationGridSize: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultisamplePropertiesEXT"]
        [::std::mem::size_of::<VkMultisamplePropertiesEXT>() - 24usize];
    ["Alignment of VkMultisamplePropertiesEXT"]
        [::std::mem::align_of::<VkMultisamplePropertiesEXT>() - 8usize];
    ["Offset of field: VkMultisamplePropertiesEXT::sType"]
        [::std::mem::offset_of!(VkMultisamplePropertiesEXT, sType) - 0usize];
    ["Offset of field: VkMultisamplePropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkMultisamplePropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkMultisamplePropertiesEXT::maxSampleLocationGridSize"]
        [::std::mem::offset_of!(VkMultisamplePropertiesEXT, maxSampleLocationGridSize) - 16usize];
};
impl Default for VkMultisamplePropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetSampleLocationsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pSampleLocationsInfo: *const VkSampleLocationsInfoEXT,
    ),
>;
pub type PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        samples: VkSampleCountFlagBits,
        pMultisampleProperties: *mut VkMultisamplePropertiesEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetSampleLocationsEXT(
        commandBuffer: VkCommandBuffer,
        pSampleLocationsInfo: *const VkSampleLocationsInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceMultisamplePropertiesEXT(
        physicalDevice: VkPhysicalDevice,
        samples: VkSampleCountFlagBits,
        pMultisampleProperties: *mut VkMultisamplePropertiesEXT,
    );
}
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_UNCORRELATED_EXT: VkBlendOverlapEXT = 0;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_DISJOINT_EXT: VkBlendOverlapEXT = 1;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_CONJOINT_EXT: VkBlendOverlapEXT = 2;
pub const VkBlendOverlapEXT_VK_BLEND_OVERLAP_MAX_ENUM_EXT: VkBlendOverlapEXT = 2147483647;
pub type VkBlendOverlapEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub advancedBlendCoherentOperations: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT::advancedBlendCoherentOperations"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT , advancedBlendCoherentOperations) - 16usize] ;
};
impl Default for VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub advancedBlendMaxColorAttachments: u32,
    pub advancedBlendIndependentBlend: VkBool32,
    pub advancedBlendNonPremultipliedSrcColor: VkBool32,
    pub advancedBlendNonPremultipliedDstColor: VkBool32,
    pub advancedBlendCorrelatedOverlap: VkBool32,
    pub advancedBlendAllOperations: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>() - 40usize];
    ["Alignment of VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendMaxColorAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendMaxColorAttachments) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendIndependentBlend"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendIndependentBlend) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedSrcColor"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendNonPremultipliedSrcColor) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendNonPremultipliedDstColor"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendNonPremultipliedDstColor) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendCorrelatedOverlap"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendCorrelatedOverlap) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT::advancedBlendAllOperations"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT , advancedBlendAllOperations) - 36usize] ;
};
impl Default for VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcPremultiplied: VkBool32,
    pub dstPremultiplied: VkBool32,
    pub blendOverlap: VkBlendOverlapEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorBlendAdvancedStateCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>() - 32usize];
    ["Alignment of VkPipelineColorBlendAdvancedStateCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineColorBlendAdvancedStateCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkPipelineColorBlendAdvancedStateCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPipelineColorBlendAdvancedStateCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::srcPremultiplied"][::std::mem::offset_of!(
        VkPipelineColorBlendAdvancedStateCreateInfoEXT,
        srcPremultiplied
    )
        - 16usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::dstPremultiplied"][::std::mem::offset_of!(
        VkPipelineColorBlendAdvancedStateCreateInfoEXT,
        dstPremultiplied
    )
        - 20usize];
    ["Offset of field: VkPipelineColorBlendAdvancedStateCreateInfoEXT::blendOverlap"][::std::mem::offset_of!(
        VkPipelineColorBlendAdvancedStateCreateInfoEXT,
        blendOverlap
    ) - 24usize];
};
impl Default for VkPipelineColorBlendAdvancedStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    pub coverageToColorEnable: VkBool32,
    pub coverageToColorLocation: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCoverageToColorStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineCoverageToColorStateCreateInfoNV>() - 32usize];
    ["Alignment of VkPipelineCoverageToColorStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineCoverageToColorStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkPipelineCoverageToColorStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkPipelineCoverageToColorStateCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkPipelineCoverageToColorStateCreateInfoNV, flags) - 16usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorEnable"][::std::mem::offset_of!(
        VkPipelineCoverageToColorStateCreateInfoNV,
        coverageToColorEnable
    )
        - 20usize];
    ["Offset of field: VkPipelineCoverageToColorStateCreateInfoNV::coverageToColorLocation"][::std::mem::offset_of!(
        VkPipelineCoverageToColorStateCreateInfoNV,
        coverageToColorLocation
    )
        - 24usize];
};
impl Default for VkPipelineCoverageToColorStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_NONE_NV:
    VkCoverageModulationModeNV = 0;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_RGB_NV:
    VkCoverageModulationModeNV = 1;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_ALPHA_NV:
    VkCoverageModulationModeNV = 2;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_RGBA_NV:
    VkCoverageModulationModeNV = 3;
pub const VkCoverageModulationModeNV_VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV:
    VkCoverageModulationModeNV = 2147483647;
pub type VkCoverageModulationModeNV = ::std::os::raw::c_uint;
pub type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    pub coverageModulationMode: VkCoverageModulationModeNV,
    pub coverageModulationTableEnable: VkBool32,
    pub coverageModulationTableCount: u32,
    pub pCoverageModulationTable: *const f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCoverageModulationStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineCoverageModulationStateCreateInfoNV>() - 40usize];
    ["Alignment of VkPipelineCoverageModulationStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineCoverageModulationStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkPipelineCoverageModulationStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkPipelineCoverageModulationStateCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkPipelineCoverageModulationStateCreateInfoNV, flags) - 16usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationMode"][::std::mem::offset_of!(
        VkPipelineCoverageModulationStateCreateInfoNV,
        coverageModulationMode
    )
        - 20usize];
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableEnable"] [:: std :: mem :: offset_of ! (VkPipelineCoverageModulationStateCreateInfoNV , coverageModulationTableEnable) - 24usize] ;
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::coverageModulationTableCount"] [:: std :: mem :: offset_of ! (VkPipelineCoverageModulationStateCreateInfoNV , coverageModulationTableCount) - 28usize] ;
    ["Offset of field: VkPipelineCoverageModulationStateCreateInfoNV::pCoverageModulationTable"][::std::mem::offset_of!(
        VkPipelineCoverageModulationStateCreateInfoNV,
        pCoverageModulationTable
    )
        - 32usize];
};
impl Default for VkPipelineCoverageModulationStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSMCount: u32,
    pub shaderWarpsPerSM: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderSMBuiltinsPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::shaderSMCount"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,
        shaderSMCount
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsPropertiesNV::shaderWarpsPerSM"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSMBuiltinsPropertiesNV,
        shaderWarpsPerSM
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceShaderSMBuiltinsPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderSMBuiltins: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderSMBuiltinsFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderSMBuiltinsFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderSMBuiltinsFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderSMBuiltinsFeaturesNV::shaderSMBuiltins"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderSMBuiltinsFeaturesNV,
        shaderSMBuiltins
    ) - 16usize];
};
impl Default for VkPhysicalDeviceShaderSMBuiltinsFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesEXT {
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierPropertiesEXT"]
        [::std::mem::size_of::<VkDrmFormatModifierPropertiesEXT>() - 16usize];
    ["Alignment of VkDrmFormatModifierPropertiesEXT"]
        [::std::mem::align_of::<VkDrmFormatModifierPropertiesEXT>() - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesEXT::drmFormatModifier"]
        [::std::mem::offset_of!(VkDrmFormatModifierPropertiesEXT, drmFormatModifier) - 0usize];
    ["Offset of field: VkDrmFormatModifierPropertiesEXT::drmFormatModifierPlaneCount"][::std::mem::offset_of!(
        VkDrmFormatModifierPropertiesEXT,
        drmFormatModifierPlaneCount
    ) - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesEXT::drmFormatModifierTilingFeatures"][::std::mem::offset_of!(
        VkDrmFormatModifierPropertiesEXT,
        drmFormatModifierTilingFeatures
    )
        - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesListEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierPropertiesEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierPropertiesListEXT"]
        [::std::mem::size_of::<VkDrmFormatModifierPropertiesListEXT>() - 32usize];
    ["Alignment of VkDrmFormatModifierPropertiesListEXT"]
        [::std::mem::align_of::<VkDrmFormatModifierPropertiesListEXT>() - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::sType"]
        [::std::mem::offset_of!(VkDrmFormatModifierPropertiesListEXT, sType) - 0usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::pNext"]
        [::std::mem::offset_of!(VkDrmFormatModifierPropertiesListEXT, pNext) - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::drmFormatModifierCount"][::std::mem::offset_of!(
        VkDrmFormatModifierPropertiesListEXT,
        drmFormatModifierCount
    ) - 16usize];
    ["Offset of field: VkDrmFormatModifierPropertiesListEXT::pDrmFormatModifierProperties"][::std::mem::offset_of!(
        VkDrmFormatModifierPropertiesListEXT,
        pDrmFormatModifierProperties
    )
        - 24usize];
};
impl Default for VkDrmFormatModifierPropertiesListEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
    pub sharingMode: VkSharingMode,
    pub queueFamilyIndexCount: u32,
    pub pQueueFamilyIndices: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageDrmFormatModifierInfoEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>() - 40usize];
    ["Alignment of VkPhysicalDeviceImageDrmFormatModifierInfoEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceImageDrmFormatModifierInfoEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageDrmFormatModifierInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::drmFormatModifier"][::std::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        drmFormatModifier
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::sharingMode"][::std::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        sharingMode
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::queueFamilyIndexCount"][::std::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        queueFamilyIndexCount
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceImageDrmFormatModifierInfoEXT::pQueueFamilyIndices"][::std::mem::offset_of!(
        VkPhysicalDeviceImageDrmFormatModifierInfoEXT,
        pQueueFamilyIndices
    )
        - 32usize];
};
impl Default for VkPhysicalDeviceImageDrmFormatModifierInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifiers: *const u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageDrmFormatModifierListCreateInfoEXT"]
        [::std::mem::size_of::<VkImageDrmFormatModifierListCreateInfoEXT>() - 32usize];
    ["Alignment of VkImageDrmFormatModifierListCreateInfoEXT"]
        [::std::mem::align_of::<VkImageDrmFormatModifierListCreateInfoEXT>() - 8usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkImageDrmFormatModifierListCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkImageDrmFormatModifierListCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::drmFormatModifierCount"][::std::mem::offset_of!(
        VkImageDrmFormatModifierListCreateInfoEXT,
        drmFormatModifierCount
    )
        - 16usize];
    ["Offset of field: VkImageDrmFormatModifierListCreateInfoEXT::pDrmFormatModifiers"][::std::mem::offset_of!(
        VkImageDrmFormatModifierListCreateInfoEXT,
        pDrmFormatModifiers
    )
        - 24usize];
};
impl Default for VkImageDrmFormatModifierListCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub pPlaneLayouts: *const VkSubresourceLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageDrmFormatModifierExplicitCreateInfoEXT"]
        [::std::mem::size_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>() - 40usize];
    ["Alignment of VkImageDrmFormatModifierExplicitCreateInfoEXT"]
        [::std::mem::align_of::<VkImageDrmFormatModifierExplicitCreateInfoEXT>() - 8usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkImageDrmFormatModifierExplicitCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkImageDrmFormatModifierExplicitCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifier"][::std::mem::offset_of!(
        VkImageDrmFormatModifierExplicitCreateInfoEXT,
        drmFormatModifier
    )
        - 16usize];
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::drmFormatModifierPlaneCount"] [:: std :: mem :: offset_of ! (VkImageDrmFormatModifierExplicitCreateInfoEXT , drmFormatModifierPlaneCount) - 24usize] ;
    ["Offset of field: VkImageDrmFormatModifierExplicitCreateInfoEXT::pPlaneLayouts"][::std::mem::offset_of!(
        VkImageDrmFormatModifierExplicitCreateInfoEXT,
        pPlaneLayouts
    ) - 32usize];
};
impl Default for VkImageDrmFormatModifierExplicitCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageDrmFormatModifierPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifier: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageDrmFormatModifierPropertiesEXT"]
        [::std::mem::size_of::<VkImageDrmFormatModifierPropertiesEXT>() - 24usize];
    ["Alignment of VkImageDrmFormatModifierPropertiesEXT"]
        [::std::mem::align_of::<VkImageDrmFormatModifierPropertiesEXT>() - 8usize];
    ["Offset of field: VkImageDrmFormatModifierPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkImageDrmFormatModifierPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkImageDrmFormatModifierPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkImageDrmFormatModifierPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkImageDrmFormatModifierPropertiesEXT::drmFormatModifier"][::std::mem::offset_of!(
        VkImageDrmFormatModifierPropertiesEXT,
        drmFormatModifier
    ) - 16usize];
};
impl Default for VkImageDrmFormatModifierPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrmFormatModifierProperties2EXT {
    pub drmFormatModifier: u64,
    pub drmFormatModifierPlaneCount: u32,
    pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierProperties2EXT"]
        [::std::mem::size_of::<VkDrmFormatModifierProperties2EXT>() - 24usize];
    ["Alignment of VkDrmFormatModifierProperties2EXT"]
        [::std::mem::align_of::<VkDrmFormatModifierProperties2EXT>() - 8usize];
    ["Offset of field: VkDrmFormatModifierProperties2EXT::drmFormatModifier"]
        [::std::mem::offset_of!(VkDrmFormatModifierProperties2EXT, drmFormatModifier) - 0usize];
    ["Offset of field: VkDrmFormatModifierProperties2EXT::drmFormatModifierPlaneCount"][::std::mem::offset_of!(
        VkDrmFormatModifierProperties2EXT,
        drmFormatModifierPlaneCount
    ) - 8usize];
    ["Offset of field: VkDrmFormatModifierProperties2EXT::drmFormatModifierTilingFeatures"][::std::mem::offset_of!(
        VkDrmFormatModifierProperties2EXT,
        drmFormatModifierTilingFeatures
    )
        - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDrmFormatModifierPropertiesList2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub drmFormatModifierCount: u32,
    pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierProperties2EXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrmFormatModifierPropertiesList2EXT"]
        [::std::mem::size_of::<VkDrmFormatModifierPropertiesList2EXT>() - 32usize];
    ["Alignment of VkDrmFormatModifierPropertiesList2EXT"]
        [::std::mem::align_of::<VkDrmFormatModifierPropertiesList2EXT>() - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::sType"]
        [::std::mem::offset_of!(VkDrmFormatModifierPropertiesList2EXT, sType) - 0usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::pNext"]
        [::std::mem::offset_of!(VkDrmFormatModifierPropertiesList2EXT, pNext) - 8usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::drmFormatModifierCount"][::std::mem::offset_of!(
        VkDrmFormatModifierPropertiesList2EXT,
        drmFormatModifierCount
    ) - 16usize];
    ["Offset of field: VkDrmFormatModifierPropertiesList2EXT::pDrmFormatModifierProperties"][::std::mem::offset_of!(
        VkDrmFormatModifierPropertiesList2EXT,
        pDrmFormatModifierProperties
    )
        - 24usize];
};
impl Default for VkDrmFormatModifierPropertiesList2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetImageDrmFormatModifierPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pProperties: *mut VkImageDrmFormatModifierPropertiesEXT,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetImageDrmFormatModifierPropertiesEXT(
        device: VkDevice,
        image: VkImage,
        pProperties: *mut VkImageDrmFormatModifierPropertiesEXT,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationCacheEXT_T {
    _unused: [u8; 0],
}
pub type VkValidationCacheEXT = *mut VkValidationCacheEXT_T;
pub const VkValidationCacheHeaderVersionEXT_VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT:
    VkValidationCacheHeaderVersionEXT = 1;
pub const VkValidationCacheHeaderVersionEXT_VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT:
    VkValidationCacheHeaderVersionEXT = 2147483647;
pub type VkValidationCacheHeaderVersionEXT = ::std::os::raw::c_uint;
pub type VkValidationCacheCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkValidationCacheCreateFlagsEXT,
    pub initialDataSize: usize,
    pub pInitialData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkValidationCacheCreateInfoEXT"]
        [::std::mem::size_of::<VkValidationCacheCreateInfoEXT>() - 40usize];
    ["Alignment of VkValidationCacheCreateInfoEXT"]
        [::std::mem::align_of::<VkValidationCacheCreateInfoEXT>() - 8usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkValidationCacheCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkValidationCacheCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkValidationCacheCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::initialDataSize"]
        [::std::mem::offset_of!(VkValidationCacheCreateInfoEXT, initialDataSize) - 24usize];
    ["Offset of field: VkValidationCacheCreateInfoEXT::pInitialData"]
        [::std::mem::offset_of!(VkValidationCacheCreateInfoEXT, pInitialData) - 32usize];
};
impl Default for VkValidationCacheCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub validationCache: VkValidationCacheEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderModuleValidationCacheCreateInfoEXT"]
        [::std::mem::size_of::<VkShaderModuleValidationCacheCreateInfoEXT>() - 24usize];
    ["Alignment of VkShaderModuleValidationCacheCreateInfoEXT"]
        [::std::mem::align_of::<VkShaderModuleValidationCacheCreateInfoEXT>() - 8usize];
    ["Offset of field: VkShaderModuleValidationCacheCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkShaderModuleValidationCacheCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkShaderModuleValidationCacheCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkShaderModuleValidationCacheCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkShaderModuleValidationCacheCreateInfoEXT::validationCache"][::std::mem::offset_of!(
        VkShaderModuleValidationCacheCreateInfoEXT,
        validationCache
    ) - 16usize];
};
impl Default for VkShaderModuleValidationCacheCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateValidationCacheEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkValidationCacheCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pValidationCache: *mut VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyValidationCacheEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkMergeValidationCachesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        dstCache: VkValidationCacheEXT,
        srcCacheCount: u32,
        pSrcCaches: *const VkValidationCacheEXT,
    ) -> VkResult,
>;
pub type PFN_vkGetValidationCacheDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCreateValidationCacheEXT(
        device: VkDevice,
        pCreateInfo: *const VkValidationCacheCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pValidationCache: *mut VkValidationCacheEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyValidationCacheEXT(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkMergeValidationCachesEXT(
        device: VkDevice,
        dstCache: VkValidationCacheEXT,
        srcCacheCount: u32,
        pSrcCaches: *const VkValidationCacheEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetValidationCacheDataEXT(
        device: VkDevice,
        validationCache: VkValidationCacheEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
pub use self::VkDescriptorBindingFlagBits as VkDescriptorBindingFlagBitsEXT;
pub type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT =
    VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub type VkPhysicalDeviceDescriptorIndexingPropertiesEXT =
    VkPhysicalDeviceDescriptorIndexingProperties;
pub type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT =
    VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT =
    VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV:
    VkShadingRatePaletteEntryNV = 0;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 1;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 2;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 3;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 4;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV:
    VkShadingRatePaletteEntryNV = 5;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV : VkShadingRatePaletteEntryNV = 6 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 7 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 8 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV : VkShadingRatePaletteEntryNV = 9 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV : VkShadingRatePaletteEntryNV = 10 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV : VkShadingRatePaletteEntryNV = 11 ;
pub const VkShadingRatePaletteEntryNV_VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV:
    VkShadingRatePaletteEntryNV = 2147483647;
pub type VkShadingRatePaletteEntryNV = ::std::os::raw::c_uint;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV:
    VkCoarseSampleOrderTypeNV = 0;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV:
    VkCoarseSampleOrderTypeNV = 1;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV:
    VkCoarseSampleOrderTypeNV = 2;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV:
    VkCoarseSampleOrderTypeNV = 3;
pub const VkCoarseSampleOrderTypeNV_VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV:
    VkCoarseSampleOrderTypeNV = 2147483647;
pub type VkCoarseSampleOrderTypeNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShadingRatePaletteNV {
    pub shadingRatePaletteEntryCount: u32,
    pub pShadingRatePaletteEntries: *const VkShadingRatePaletteEntryNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShadingRatePaletteNV"][::std::mem::size_of::<VkShadingRatePaletteNV>() - 16usize];
    ["Alignment of VkShadingRatePaletteNV"]
        [::std::mem::align_of::<VkShadingRatePaletteNV>() - 8usize];
    ["Offset of field: VkShadingRatePaletteNV::shadingRatePaletteEntryCount"]
        [::std::mem::offset_of!(VkShadingRatePaletteNV, shadingRatePaletteEntryCount) - 0usize];
    ["Offset of field: VkShadingRatePaletteNV::pShadingRatePaletteEntries"]
        [::std::mem::offset_of!(VkShadingRatePaletteNV, pShadingRatePaletteEntries) - 8usize];
};
impl Default for VkShadingRatePaletteNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub shadingRateImageEnable: VkBool32,
    pub viewportCount: u32,
    pub pShadingRatePalettes: *const VkShadingRatePaletteNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportShadingRateImageStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>() - 32usize];
    ["Alignment of VkPipelineViewportShadingRateImageStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineViewportShadingRateImageStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::sType"][::std::mem::offset_of!(
        VkPipelineViewportShadingRateImageStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::pNext"][::std::mem::offset_of!(
        VkPipelineViewportShadingRateImageStateCreateInfoNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::shadingRateImageEnable"] [:: std :: mem :: offset_of ! (VkPipelineViewportShadingRateImageStateCreateInfoNV , shadingRateImageEnable) - 16usize] ;
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::viewportCount"][::std::mem::offset_of!(
        VkPipelineViewportShadingRateImageStateCreateInfoNV,
        viewportCount
    )
        - 20usize];
    ["Offset of field: VkPipelineViewportShadingRateImageStateCreateInfoNV::pShadingRatePalettes"] [:: std :: mem :: offset_of ! (VkPipelineViewportShadingRateImageStateCreateInfoNV , pShadingRatePalettes) - 24usize] ;
};
impl Default for VkPipelineViewportShadingRateImageStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shadingRateImage: VkBool32,
    pub shadingRateCoarseSampleOrder: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShadingRateImageFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceShadingRateImageFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceShadingRateImageFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShadingRateImageFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShadingRateImageFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateImage"][::std::mem::offset_of!(
        VkPhysicalDeviceShadingRateImageFeaturesNV,
        shadingRateImage
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImageFeaturesNV::shadingRateCoarseSampleOrder"][::std::mem::offset_of!(
        VkPhysicalDeviceShadingRateImageFeaturesNV,
        shadingRateCoarseSampleOrder
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceShadingRateImageFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shadingRateTexelSize: VkExtent2D,
    pub shadingRatePaletteSize: u32,
    pub shadingRateMaxCoarseSamples: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShadingRateImagePropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>() - 32usize];
    ["Alignment of VkPhysicalDeviceShadingRateImagePropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceShadingRateImagePropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShadingRateImagePropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShadingRateImagePropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateTexelSize"][::std::mem::offset_of!(
        VkPhysicalDeviceShadingRateImagePropertiesNV,
        shadingRateTexelSize
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRatePaletteSize"][::std::mem::offset_of!(
        VkPhysicalDeviceShadingRateImagePropertiesNV,
        shadingRatePaletteSize
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceShadingRateImagePropertiesNV::shadingRateMaxCoarseSamples"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShadingRateImagePropertiesNV , shadingRateMaxCoarseSamples) - 28usize] ;
};
impl Default for VkPhysicalDeviceShadingRateImagePropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkCoarseSampleLocationNV {
    pub pixelX: u32,
    pub pixelY: u32,
    pub sample: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCoarseSampleLocationNV"]
        [::std::mem::size_of::<VkCoarseSampleLocationNV>() - 12usize];
    ["Alignment of VkCoarseSampleLocationNV"]
        [::std::mem::align_of::<VkCoarseSampleLocationNV>() - 4usize];
    ["Offset of field: VkCoarseSampleLocationNV::pixelX"]
        [::std::mem::offset_of!(VkCoarseSampleLocationNV, pixelX) - 0usize];
    ["Offset of field: VkCoarseSampleLocationNV::pixelY"]
        [::std::mem::offset_of!(VkCoarseSampleLocationNV, pixelY) - 4usize];
    ["Offset of field: VkCoarseSampleLocationNV::sample"]
        [::std::mem::offset_of!(VkCoarseSampleLocationNV, sample) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCoarseSampleOrderCustomNV {
    pub shadingRate: VkShadingRatePaletteEntryNV,
    pub sampleCount: u32,
    pub sampleLocationCount: u32,
    pub pSampleLocations: *const VkCoarseSampleLocationNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCoarseSampleOrderCustomNV"]
        [::std::mem::size_of::<VkCoarseSampleOrderCustomNV>() - 24usize];
    ["Alignment of VkCoarseSampleOrderCustomNV"]
        [::std::mem::align_of::<VkCoarseSampleOrderCustomNV>() - 8usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::shadingRate"]
        [::std::mem::offset_of!(VkCoarseSampleOrderCustomNV, shadingRate) - 0usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::sampleCount"]
        [::std::mem::offset_of!(VkCoarseSampleOrderCustomNV, sampleCount) - 4usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::sampleLocationCount"]
        [::std::mem::offset_of!(VkCoarseSampleOrderCustomNV, sampleLocationCount) - 8usize];
    ["Offset of field: VkCoarseSampleOrderCustomNV::pSampleLocations"]
        [::std::mem::offset_of!(VkCoarseSampleOrderCustomNV, pSampleLocations) - 16usize];
};
impl Default for VkCoarseSampleOrderCustomNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampleOrderType: VkCoarseSampleOrderTypeNV,
    pub customSampleOrderCount: u32,
    pub pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>() - 32usize];
    ["Alignment of VkPipelineViewportCoarseSampleOrderStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineViewportCoarseSampleOrderStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sType"][::std::mem::offset_of!(
        VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pNext"][::std::mem::offset_of!(
        VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::sampleOrderType"][::std::mem::offset_of!(
        VkPipelineViewportCoarseSampleOrderStateCreateInfoNV,
        sampleOrderType
    )
        - 16usize];
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::customSampleOrderCount"] [:: std :: mem :: offset_of ! (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV , customSampleOrderCount) - 20usize] ;
    ["Offset of field: VkPipelineViewportCoarseSampleOrderStateCreateInfoNV::pCustomSampleOrders"] [:: std :: mem :: offset_of ! (VkPipelineViewportCoarseSampleOrderStateCreateInfoNV , pCustomSampleOrders) - 24usize] ;
};
impl Default for VkPipelineViewportCoarseSampleOrderStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBindShadingRateImageNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    ),
>;
pub type PFN_vkCmdSetViewportShadingRatePaletteNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pShadingRatePalettes: *const VkShadingRatePaletteNV,
    ),
>;
pub type PFN_vkCmdSetCoarseSampleOrderNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        sampleOrderType: VkCoarseSampleOrderTypeNV,
        customSampleOrderCount: u32,
        pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdBindShadingRateImageNV(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetViewportShadingRatePaletteNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pShadingRatePalettes: *const VkShadingRatePaletteNV,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetCoarseSampleOrderNV(
        commandBuffer: VkCommandBuffer,
        sampleOrderType: VkCoarseSampleOrderTypeNV,
        customSampleOrderCount: u32,
        pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureNV_T {
    _unused: [u8; 0],
}
pub type VkAccelerationStructureNV = *mut VkAccelerationStructureNV_T;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR:
    VkRayTracingShaderGroupTypeKHR = 0;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR : VkRayTracingShaderGroupTypeKHR = 1 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR : VkRayTracingShaderGroupTypeKHR = 2 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV:
    VkRayTracingShaderGroupTypeKHR = 0;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV:
    VkRayTracingShaderGroupTypeKHR = 1;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV : VkRayTracingShaderGroupTypeKHR = 2 ;
pub const VkRayTracingShaderGroupTypeKHR_VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR:
    VkRayTracingShaderGroupTypeKHR = 2147483647;
pub type VkRayTracingShaderGroupTypeKHR = ::std::os::raw::c_uint;
pub use self::VkRayTracingShaderGroupTypeKHR as VkRayTracingShaderGroupTypeNV;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_TRIANGLES_KHR: VkGeometryTypeKHR = 0;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_AABBS_KHR: VkGeometryTypeKHR = 1;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_INSTANCES_KHR: VkGeometryTypeKHR = 2;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_SPHERES_NV: VkGeometryTypeKHR = 1000429004;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_LINEAR_SWEPT_SPHERES_NV: VkGeometryTypeKHR =
    1000429005;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_TRIANGLES_NV: VkGeometryTypeKHR = 0;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_AABBS_NV: VkGeometryTypeKHR = 1;
pub const VkGeometryTypeKHR_VK_GEOMETRY_TYPE_MAX_ENUM_KHR: VkGeometryTypeKHR = 2147483647;
pub type VkGeometryTypeKHR = ::std::os::raw::c_uint;
pub use self::VkGeometryTypeKHR as VkGeometryTypeNV;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR:
    VkAccelerationStructureTypeKHR = 0;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR:
    VkAccelerationStructureTypeKHR = 1;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR:
    VkAccelerationStructureTypeKHR = 2;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV:
    VkAccelerationStructureTypeKHR = 0;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV:
    VkAccelerationStructureTypeKHR = 1;
pub const VkAccelerationStructureTypeKHR_VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR:
    VkAccelerationStructureTypeKHR = 2147483647;
pub type VkAccelerationStructureTypeKHR = ::std::os::raw::c_uint;
pub use self::VkAccelerationStructureTypeKHR as VkAccelerationStructureTypeNV;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR:
    VkCopyAccelerationStructureModeKHR = 0;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR:
    VkCopyAccelerationStructureModeKHR = 1;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR:
    VkCopyAccelerationStructureModeKHR = 2;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR:
    VkCopyAccelerationStructureModeKHR = 3;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV:
    VkCopyAccelerationStructureModeKHR = 0;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV:
    VkCopyAccelerationStructureModeKHR = 1;
pub const VkCopyAccelerationStructureModeKHR_VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR:
    VkCopyAccelerationStructureModeKHR = 2147483647;
pub type VkCopyAccelerationStructureModeKHR = ::std::os::raw::c_uint;
pub use self::VkCopyAccelerationStructureModeKHR as VkCopyAccelerationStructureModeNV;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 0 ;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 1 ;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 2 ;
pub const VkAccelerationStructureMemoryRequirementsTypeNV_VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV : VkAccelerationStructureMemoryRequirementsTypeNV = 2147483647 ;
pub type VkAccelerationStructureMemoryRequirementsTypeNV = ::std::os::raw::c_uint;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_OPAQUE_BIT_KHR: VkGeometryFlagBitsKHR = 1;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR:
    VkGeometryFlagBitsKHR = 2;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_OPAQUE_BIT_NV: VkGeometryFlagBitsKHR = 1;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV:
    VkGeometryFlagBitsKHR = 2;
pub const VkGeometryFlagBitsKHR_VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: VkGeometryFlagBitsKHR =
    2147483647;
pub type VkGeometryFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkGeometryFlagsKHR = VkFlags;
pub type VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub use self::VkGeometryFlagBitsKHR as VkGeometryFlagBitsNV;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR : VkGeometryInstanceFlagBitsKHR = 1 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 2;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 4;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR:
    VkGeometryInstanceFlagBitsKHR = 8;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT:
    VkGeometryInstanceFlagBitsKHR = 16;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT:
    VkGeometryInstanceFlagBitsKHR = 32;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR : VkGeometryInstanceFlagBitsKHR = 2 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 1;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV : VkGeometryInstanceFlagBitsKHR = 2 ;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 4;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV:
    VkGeometryInstanceFlagBitsKHR = 8;
pub const VkGeometryInstanceFlagBitsKHR_VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR:
    VkGeometryInstanceFlagBitsKHR = 2147483647;
pub type VkGeometryInstanceFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkGeometryInstanceFlagsKHR = VkFlags;
pub type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub use self::VkGeometryInstanceFlagBitsKHR as VkGeometryInstanceFlagBitsNV;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 1 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 4 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 8 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR : VkBuildAccelerationStructureFlagBitsKHR = 16 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV:
    VkBuildAccelerationStructureFlagBitsKHR = 32;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT : VkBuildAccelerationStructureFlagBitsKHR = 64 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT : VkBuildAccelerationStructureFlagBitsKHR = 128 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT : VkBuildAccelerationStructureFlagBitsKHR = 256 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2048 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 1 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 2 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 4 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 8 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV : VkBuildAccelerationStructureFlagBitsKHR = 16 ;
pub const VkBuildAccelerationStructureFlagBitsKHR_VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR : VkBuildAccelerationStructureFlagBitsKHR = 2147483647 ;
pub type VkBuildAccelerationStructureFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub use self::VkBuildAccelerationStructureFlagBitsKHR as VkBuildAccelerationStructureFlagBitsNV;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkRayTracingShaderGroupTypeKHR,
    pub generalShader: u32,
    pub closestHitShader: u32,
    pub anyHitShader: u32,
    pub intersectionShader: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingShaderGroupCreateInfoNV"]
        [::std::mem::size_of::<VkRayTracingShaderGroupCreateInfoNV>() - 40usize];
    ["Alignment of VkRayTracingShaderGroupCreateInfoNV"]
        [::std::mem::align_of::<VkRayTracingShaderGroupCreateInfoNV>() - 8usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::type_"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, type_) - 16usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::generalShader"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, generalShader) - 20usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::closestHitShader"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, closestHitShader) - 24usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::anyHitShader"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, anyHitShader) - 28usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoNV::intersectionShader"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoNV, intersectionShader) - 32usize];
};
impl Default for VkRayTracingShaderGroupCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingPipelineCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub groupCount: u32,
    pub pGroups: *const VkRayTracingShaderGroupCreateInfoNV,
    pub maxRecursionDepth: u32,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineCreateInfoNV"]
        [::std::mem::size_of::<VkRayTracingPipelineCreateInfoNV>() - 80usize];
    ["Alignment of VkRayTracingPipelineCreateInfoNV"]
        [::std::mem::align_of::<VkRayTracingPipelineCreateInfoNV>() - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, flags) - 16usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::stageCount"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, stageCount) - 20usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::pStages"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, pStages) - 24usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::groupCount"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, groupCount) - 32usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::pGroups"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, pGroups) - 40usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::maxRecursionDepth"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, maxRecursionDepth) - 48usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::layout"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, layout) - 56usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::basePipelineHandle"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, basePipelineHandle) - 64usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoNV::basePipelineIndex"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoNV, basePipelineIndex) - 72usize];
};
impl Default for VkRayTracingPipelineCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryTrianglesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexData: VkBuffer,
    pub vertexOffset: VkDeviceSize,
    pub vertexCount: u32,
    pub vertexStride: VkDeviceSize,
    pub vertexFormat: VkFormat,
    pub indexData: VkBuffer,
    pub indexOffset: VkDeviceSize,
    pub indexCount: u32,
    pub indexType: VkIndexType,
    pub transformData: VkBuffer,
    pub transformOffset: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryTrianglesNV"][::std::mem::size_of::<VkGeometryTrianglesNV>() - 96usize];
    ["Alignment of VkGeometryTrianglesNV"]
        [::std::mem::align_of::<VkGeometryTrianglesNV>() - 8usize];
    ["Offset of field: VkGeometryTrianglesNV::sType"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, sType) - 0usize];
    ["Offset of field: VkGeometryTrianglesNV::pNext"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, pNext) - 8usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexData"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, vertexData) - 16usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexOffset"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, vertexOffset) - 24usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexCount"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, vertexCount) - 32usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexStride"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, vertexStride) - 40usize];
    ["Offset of field: VkGeometryTrianglesNV::vertexFormat"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, vertexFormat) - 48usize];
    ["Offset of field: VkGeometryTrianglesNV::indexData"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, indexData) - 56usize];
    ["Offset of field: VkGeometryTrianglesNV::indexOffset"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, indexOffset) - 64usize];
    ["Offset of field: VkGeometryTrianglesNV::indexCount"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, indexCount) - 72usize];
    ["Offset of field: VkGeometryTrianglesNV::indexType"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, indexType) - 76usize];
    ["Offset of field: VkGeometryTrianglesNV::transformData"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, transformData) - 80usize];
    ["Offset of field: VkGeometryTrianglesNV::transformOffset"]
        [::std::mem::offset_of!(VkGeometryTrianglesNV, transformOffset) - 88usize];
};
impl Default for VkGeometryTrianglesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryAABBNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub aabbData: VkBuffer,
    pub numAABBs: u32,
    pub stride: u32,
    pub offset: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryAABBNV"][::std::mem::size_of::<VkGeometryAABBNV>() - 40usize];
    ["Alignment of VkGeometryAABBNV"][::std::mem::align_of::<VkGeometryAABBNV>() - 8usize];
    ["Offset of field: VkGeometryAABBNV::sType"]
        [::std::mem::offset_of!(VkGeometryAABBNV, sType) - 0usize];
    ["Offset of field: VkGeometryAABBNV::pNext"]
        [::std::mem::offset_of!(VkGeometryAABBNV, pNext) - 8usize];
    ["Offset of field: VkGeometryAABBNV::aabbData"]
        [::std::mem::offset_of!(VkGeometryAABBNV, aabbData) - 16usize];
    ["Offset of field: VkGeometryAABBNV::numAABBs"]
        [::std::mem::offset_of!(VkGeometryAABBNV, numAABBs) - 24usize];
    ["Offset of field: VkGeometryAABBNV::stride"]
        [::std::mem::offset_of!(VkGeometryAABBNV, stride) - 28usize];
    ["Offset of field: VkGeometryAABBNV::offset"]
        [::std::mem::offset_of!(VkGeometryAABBNV, offset) - 32usize];
};
impl Default for VkGeometryAABBNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryDataNV {
    pub triangles: VkGeometryTrianglesNV,
    pub aabbs: VkGeometryAABBNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryDataNV"][::std::mem::size_of::<VkGeometryDataNV>() - 136usize];
    ["Alignment of VkGeometryDataNV"][::std::mem::align_of::<VkGeometryDataNV>() - 8usize];
    ["Offset of field: VkGeometryDataNV::triangles"]
        [::std::mem::offset_of!(VkGeometryDataNV, triangles) - 0usize];
    ["Offset of field: VkGeometryDataNV::aabbs"]
        [::std::mem::offset_of!(VkGeometryDataNV, aabbs) - 96usize];
};
impl Default for VkGeometryDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeometryNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub geometryType: VkGeometryTypeKHR,
    pub geometry: VkGeometryDataNV,
    pub flags: VkGeometryFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeometryNV"][::std::mem::size_of::<VkGeometryNV>() - 168usize];
    ["Alignment of VkGeometryNV"][::std::mem::align_of::<VkGeometryNV>() - 8usize];
    ["Offset of field: VkGeometryNV::sType"][::std::mem::offset_of!(VkGeometryNV, sType) - 0usize];
    ["Offset of field: VkGeometryNV::pNext"][::std::mem::offset_of!(VkGeometryNV, pNext) - 8usize];
    ["Offset of field: VkGeometryNV::geometryType"]
        [::std::mem::offset_of!(VkGeometryNV, geometryType) - 16usize];
    ["Offset of field: VkGeometryNV::geometry"]
        [::std::mem::offset_of!(VkGeometryNV, geometry) - 24usize];
    ["Offset of field: VkGeometryNV::flags"]
        [::std::mem::offset_of!(VkGeometryNV, flags) - 160usize];
};
impl Default for VkGeometryNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureTypeNV,
    pub flags: VkBuildAccelerationStructureFlagsNV,
    pub instanceCount: u32,
    pub geometryCount: u32,
    pub pGeometries: *const VkGeometryNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureInfoNV"]
        [::std::mem::size_of::<VkAccelerationStructureInfoNV>() - 40usize];
    ["Alignment of VkAccelerationStructureInfoNV"]
        [::std::mem::align_of::<VkAccelerationStructureInfoNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureInfoNV::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureInfoNV::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureInfoNV, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureInfoNV::type_"]
        [::std::mem::offset_of!(VkAccelerationStructureInfoNV, type_) - 16usize];
    ["Offset of field: VkAccelerationStructureInfoNV::flags"]
        [::std::mem::offset_of!(VkAccelerationStructureInfoNV, flags) - 20usize];
    ["Offset of field: VkAccelerationStructureInfoNV::instanceCount"]
        [::std::mem::offset_of!(VkAccelerationStructureInfoNV, instanceCount) - 24usize];
    ["Offset of field: VkAccelerationStructureInfoNV::geometryCount"]
        [::std::mem::offset_of!(VkAccelerationStructureInfoNV, geometryCount) - 28usize];
    ["Offset of field: VkAccelerationStructureInfoNV::pGeometries"]
        [::std::mem::offset_of!(VkAccelerationStructureInfoNV, pGeometries) - 32usize];
};
impl Default for VkAccelerationStructureInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub compactedSize: VkDeviceSize,
    pub info: VkAccelerationStructureInfoNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureCreateInfoNV"]
        [::std::mem::size_of::<VkAccelerationStructureCreateInfoNV>() - 64usize];
    ["Alignment of VkAccelerationStructureCreateInfoNV"]
        [::std::mem::align_of::<VkAccelerationStructureCreateInfoNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::compactedSize"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoNV, compactedSize) - 16usize];
    ["Offset of field: VkAccelerationStructureCreateInfoNV::info"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoNV, info) - 24usize];
};
impl Default for VkAccelerationStructureCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindAccelerationStructureMemoryInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructure: VkAccelerationStructureNV,
    pub memory: VkDeviceMemory,
    pub memoryOffset: VkDeviceSize,
    pub deviceIndexCount: u32,
    pub pDeviceIndices: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindAccelerationStructureMemoryInfoNV"]
        [::std::mem::size_of::<VkBindAccelerationStructureMemoryInfoNV>() - 56usize];
    ["Alignment of VkBindAccelerationStructureMemoryInfoNV"]
        [::std::mem::align_of::<VkBindAccelerationStructureMemoryInfoNV>() - 8usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::sType"]
        [::std::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, sType) - 0usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::pNext"]
        [::std::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, pNext) - 8usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::accelerationStructure"][::std::mem::offset_of!(
        VkBindAccelerationStructureMemoryInfoNV,
        accelerationStructure
    )
        - 16usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::memory"]
        [::std::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, memory) - 24usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::memoryOffset"]
        [::std::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, memoryOffset) - 32usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::deviceIndexCount"][::std::mem::offset_of!(
        VkBindAccelerationStructureMemoryInfoNV,
        deviceIndexCount
    ) - 40usize];
    ["Offset of field: VkBindAccelerationStructureMemoryInfoNV::pDeviceIndices"]
        [::std::mem::offset_of!(VkBindAccelerationStructureMemoryInfoNV, pDeviceIndices) - 48usize];
};
impl Default for VkBindAccelerationStructureMemoryInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructureNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkAccelerationStructureNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetAccelerationStructureNV"]
        [::std::mem::size_of::<VkWriteDescriptorSetAccelerationStructureNV>() - 32usize];
    ["Alignment of VkWriteDescriptorSetAccelerationStructureNV"]
        [::std::mem::align_of::<VkWriteDescriptorSetAccelerationStructureNV>() - 8usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::sType"]
        [::std::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureNV, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::pNext"]
        [::std::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureNV, pNext) - 8usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::accelerationStructureCount"][::std::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureNV,
        accelerationStructureCount
    )
        - 16usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureNV::pAccelerationStructures"][::std::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureNV,
        pAccelerationStructures
    )
        - 24usize];
};
impl Default for VkWriteDescriptorSetAccelerationStructureNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureMemoryRequirementsTypeNV,
    pub accelerationStructure: VkAccelerationStructureNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMemoryRequirementsInfoNV"]
        [::std::mem::size_of::<VkAccelerationStructureMemoryRequirementsInfoNV>() - 32usize];
    ["Alignment of VkAccelerationStructureMemoryRequirementsInfoNV"]
        [::std::mem::align_of::<VkAccelerationStructureMemoryRequirementsInfoNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureMemoryRequirementsInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureMemoryRequirementsInfoNV, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::type_"]
        [::std::mem::offset_of!(VkAccelerationStructureMemoryRequirementsInfoNV, type_) - 16usize];
    ["Offset of field: VkAccelerationStructureMemoryRequirementsInfoNV::accelerationStructure"][::std::mem::offset_of!(
        VkAccelerationStructureMemoryRequirementsInfoNV,
        accelerationStructure
    )
        - 24usize];
};
impl Default for VkAccelerationStructureMemoryRequirementsInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderGroupHandleSize: u32,
    pub maxRecursionDepth: u32,
    pub maxShaderGroupStride: u32,
    pub shaderGroupBaseAlignment: u32,
    pub maxGeometryCount: u64,
    pub maxInstanceCount: u64,
    pub maxTriangleCount: u64,
    pub maxDescriptorSetAccelerationStructures: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingPropertiesNV>() - 64usize];
    ["Alignment of VkPhysicalDeviceRayTracingPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupHandleSize"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        shaderGroupHandleSize
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxRecursionDepth"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxRecursionDepth
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxShaderGroupStride"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxShaderGroupStride
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupBaseAlignment"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        shaderGroupBaseAlignment
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxGeometryCount"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxGeometryCount
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxInstanceCount"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxInstanceCount
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxTriangleCount"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPropertiesNV,
        maxTriangleCount
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPropertiesNV::maxDescriptorSetAccelerationStructures"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPropertiesNV , maxDescriptorSetAccelerationStructures) - 56usize] ;
};
impl Default for VkPhysicalDeviceRayTracingPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkTransformMatrixKHR {
    pub matrix: [[f32; 4usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTransformMatrixKHR"][::std::mem::size_of::<VkTransformMatrixKHR>() - 48usize];
    ["Alignment of VkTransformMatrixKHR"][::std::mem::align_of::<VkTransformMatrixKHR>() - 4usize];
    ["Offset of field: VkTransformMatrixKHR::matrix"]
        [::std::mem::offset_of!(VkTransformMatrixKHR, matrix) - 0usize];
};
pub type VkTransformMatrixNV = VkTransformMatrixKHR;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkAabbPositionsKHR {
    pub minX: f32,
    pub minY: f32,
    pub minZ: f32,
    pub maxX: f32,
    pub maxY: f32,
    pub maxZ: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAabbPositionsKHR"][::std::mem::size_of::<VkAabbPositionsKHR>() - 24usize];
    ["Alignment of VkAabbPositionsKHR"][::std::mem::align_of::<VkAabbPositionsKHR>() - 4usize];
    ["Offset of field: VkAabbPositionsKHR::minX"]
        [::std::mem::offset_of!(VkAabbPositionsKHR, minX) - 0usize];
    ["Offset of field: VkAabbPositionsKHR::minY"]
        [::std::mem::offset_of!(VkAabbPositionsKHR, minY) - 4usize];
    ["Offset of field: VkAabbPositionsKHR::minZ"]
        [::std::mem::offset_of!(VkAabbPositionsKHR, minZ) - 8usize];
    ["Offset of field: VkAabbPositionsKHR::maxX"]
        [::std::mem::offset_of!(VkAabbPositionsKHR, maxX) - 12usize];
    ["Offset of field: VkAabbPositionsKHR::maxY"]
        [::std::mem::offset_of!(VkAabbPositionsKHR, maxY) - 16usize];
    ["Offset of field: VkAabbPositionsKHR::maxZ"]
        [::std::mem::offset_of!(VkAabbPositionsKHR, maxZ) - 20usize];
};
pub type VkAabbPositionsNV = VkAabbPositionsKHR;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkAccelerationStructureInstanceKHR {
    pub transform: VkTransformMatrixKHR,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureInstanceKHR"]
        [::std::mem::size_of::<VkAccelerationStructureInstanceKHR>() - 64usize];
    ["Alignment of VkAccelerationStructureInstanceKHR"]
        [::std::mem::align_of::<VkAccelerationStructureInstanceKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureInstanceKHR::transform"]
        [::std::mem::offset_of!(VkAccelerationStructureInstanceKHR, transform) - 0usize];
    ["Offset of field: VkAccelerationStructureInstanceKHR::accelerationStructureReference"][::std::mem::offset_of!(
        VkAccelerationStructureInstanceKHR,
        accelerationStructureReference
    )
        - 56usize];
};
impl VkAccelerationStructureInstanceKHR {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceCustomIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceCustomIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mask_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mask_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceShaderBindingTableRecordOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceShaderBindingTableRecordOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> VkGeometryInstanceFlagsKHR {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::std::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::std::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub type PFN_vkCreateAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetAccelerationStructureMemoryRequirementsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2KHR,
    ),
>;
pub type PFN_vkBindAccelerationStructureMemoryNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkCmdBuildAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkAccelerationStructureInfoNV,
        instanceData: VkBuffer,
        instanceOffset: VkDeviceSize,
        update: VkBool32,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        scratch: VkBuffer,
        scratchOffset: VkDeviceSize,
    ),
>;
pub type PFN_vkCmdCopyAccelerationStructureNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        mode: VkCopyAccelerationStructureModeKHR,
    ),
>;
pub type PFN_vkCmdTraceRaysNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        raygenShaderBindingTableBuffer: VkBuffer,
        raygenShaderBindingOffset: VkDeviceSize,
        missShaderBindingTableBuffer: VkBuffer,
        missShaderBindingOffset: VkDeviceSize,
        missShaderBindingStride: VkDeviceSize,
        hitShaderBindingTableBuffer: VkBuffer,
        hitShaderBindingOffset: VkDeviceSize,
        hitShaderBindingStride: VkDeviceSize,
        callableShaderBindingTableBuffer: VkBuffer,
        callableShaderBindingOffset: VkDeviceSize,
        callableShaderBindingStride: VkDeviceSize,
        width: u32,
        height: u32,
        depth: u32,
    ),
>;
pub type PFN_vkCreateRayTracingPipelinesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingShaderGroupHandlesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetAccelerationStructureHandleNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureNV,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkCompileDeferredNV = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCreateAccelerationStructureNV(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyAccelerationStructureNV(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetAccelerationStructureMemoryRequirementsNV(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2KHR,
    );
}
unsafe extern "system" {
    pub fn vkBindAccelerationStructureMemoryNV(
        device: VkDevice,
        bindInfoCount: u32,
        pBindInfos: *const VkBindAccelerationStructureMemoryInfoNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdBuildAccelerationStructureNV(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkAccelerationStructureInfoNV,
        instanceData: VkBuffer,
        instanceOffset: VkDeviceSize,
        update: VkBool32,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        scratch: VkBuffer,
        scratchOffset: VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyAccelerationStructureNV(
        commandBuffer: VkCommandBuffer,
        dst: VkAccelerationStructureNV,
        src: VkAccelerationStructureNV,
        mode: VkCopyAccelerationStructureModeKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdTraceRaysNV(
        commandBuffer: VkCommandBuffer,
        raygenShaderBindingTableBuffer: VkBuffer,
        raygenShaderBindingOffset: VkDeviceSize,
        missShaderBindingTableBuffer: VkBuffer,
        missShaderBindingOffset: VkDeviceSize,
        missShaderBindingStride: VkDeviceSize,
        hitShaderBindingTableBuffer: VkBuffer,
        hitShaderBindingOffset: VkDeviceSize,
        hitShaderBindingStride: VkDeviceSize,
        callableShaderBindingTableBuffer: VkBuffer,
        callableShaderBindingOffset: VkDeviceSize,
        callableShaderBindingStride: VkDeviceSize,
        width: u32,
        height: u32,
        depth: u32,
    );
}
unsafe extern "system" {
    pub fn vkCreateRayTracingPipelinesNV(
        device: VkDevice,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetRayTracingShaderGroupHandlesKHR(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetRayTracingShaderGroupHandlesNV(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetAccelerationStructureHandleNV(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureNV,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdWriteAccelerationStructuresPropertiesNV(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureNV,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
unsafe extern "system" {
    pub fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub representativeFragmentTest: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV::representativeFragmentTest"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV , representativeFragmentTest) - 16usize] ;
};
impl Default for VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub representativeFragmentTestEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRepresentativeFragmentTestStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>() - 24usize];
    ["Alignment of VkPipelineRepresentativeFragmentTestStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineRepresentativeFragmentTestStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineRepresentativeFragmentTestStateCreateInfoNV::sType"][::std::mem::offset_of!(
        VkPipelineRepresentativeFragmentTestStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineRepresentativeFragmentTestStateCreateInfoNV::pNext"][::std::mem::offset_of!(
        VkPipelineRepresentativeFragmentTestStateCreateInfoNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineRepresentativeFragmentTestStateCreateInfoNV::representativeFragmentTestEnable"] [:: std :: mem :: offset_of ! (VkPipelineRepresentativeFragmentTestStateCreateInfoNV , representativeFragmentTestEnable) - 16usize] ;
};
impl Default for VkPipelineRepresentativeFragmentTestStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageViewType: VkImageViewType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageViewImageFormatInfoEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageViewImageFormatInfoEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceImageViewImageFormatInfoEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageViewImageFormatInfoEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageViewImageFormatInfoEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageViewImageFormatInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageViewImageFormatInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageViewImageFormatInfoEXT::imageViewType"][::std::mem::offset_of!(
        VkPhysicalDeviceImageViewImageFormatInfoEXT,
        imageViewType
    ) - 16usize];
};
impl Default for VkPhysicalDeviceImageViewImageFormatInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub filterCubic: VkBool32,
    pub filterCubicMinmax: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFilterCubicImageViewImageFormatPropertiesEXT"]
        [::std::mem::size_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>() - 24usize];
    ["Alignment of VkFilterCubicImageViewImageFormatPropertiesEXT"]
        [::std::mem::align_of::<VkFilterCubicImageViewImageFormatPropertiesEXT>() - 8usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkFilterCubicImageViewImageFormatPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkFilterCubicImageViewImageFormatPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubic"][::std::mem::offset_of!(
        VkFilterCubicImageViewImageFormatPropertiesEXT,
        filterCubic
    ) - 16usize];
    ["Offset of field: VkFilterCubicImageViewImageFormatPropertiesEXT::filterCubicMinmax"][::std::mem::offset_of!(
        VkFilterCubicImageViewImageFormatPropertiesEXT,
        filterCubicMinmax
    )
        - 20usize];
};
impl Default for VkFilterCubicImageViewImageFormatPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkQueueGlobalPriority as VkQueueGlobalPriorityEXT;
pub type VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImportMemoryHostPointerInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
    pub pHostPointer: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImportMemoryHostPointerInfoEXT"]
        [::std::mem::size_of::<VkImportMemoryHostPointerInfoEXT>() - 32usize];
    ["Alignment of VkImportMemoryHostPointerInfoEXT"]
        [::std::mem::align_of::<VkImportMemoryHostPointerInfoEXT>() - 8usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::sType"]
        [::std::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, sType) - 0usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::pNext"]
        [::std::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, pNext) - 8usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::handleType"]
        [::std::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, handleType) - 16usize];
    ["Offset of field: VkImportMemoryHostPointerInfoEXT::pHostPointer"]
        [::std::mem::offset_of!(VkImportMemoryHostPointerInfoEXT, pHostPointer) - 24usize];
};
impl Default for VkImportMemoryHostPointerInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryHostPointerPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryTypeBits: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryHostPointerPropertiesEXT"]
        [::std::mem::size_of::<VkMemoryHostPointerPropertiesEXT>() - 24usize];
    ["Alignment of VkMemoryHostPointerPropertiesEXT"]
        [::std::mem::align_of::<VkMemoryHostPointerPropertiesEXT>() - 8usize];
    ["Offset of field: VkMemoryHostPointerPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkMemoryHostPointerPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkMemoryHostPointerPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkMemoryHostPointerPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkMemoryHostPointerPropertiesEXT::memoryTypeBits"]
        [::std::mem::offset_of!(VkMemoryHostPointerPropertiesEXT, memoryTypeBits) - 16usize];
};
impl Default for VkMemoryHostPointerPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minImportedHostPointerAlignment: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalMemoryHostPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceExternalMemoryHostPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceExternalMemoryHostPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryHostPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryHostPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalMemoryHostPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExternalMemoryHostPropertiesEXT , minImportedHostPointerAlignment) - 16usize] ;
};
impl Default for VkPhysicalDeviceExternalMemoryHostPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetMemoryHostPointerPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        pHostPointer: *const ::std::os::raw::c_void,
        pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetMemoryHostPointerPropertiesEXT(
        device: VkDevice,
        handleType: VkExternalMemoryHandleTypeFlagBits,
        pHostPointer: *const ::std::os::raw::c_void,
        pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT,
    ) -> VkResult;
}
pub type PFN_vkCmdWriteBufferMarkerAMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    ),
>;
pub type PFN_vkCmdWriteBufferMarker2AMD = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdWriteBufferMarkerAMD(
        commandBuffer: VkCommandBuffer,
        pipelineStage: VkPipelineStageFlagBits,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdWriteBufferMarker2AMD(
        commandBuffer: VkCommandBuffer,
        stage: VkPipelineStageFlags2,
        dstBuffer: VkBuffer,
        dstOffset: VkDeviceSize,
        marker: u32,
    );
}
pub const VkPipelineCompilerControlFlagBitsAMD_VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD : VkPipelineCompilerControlFlagBitsAMD = 2147483647 ;
pub type VkPipelineCompilerControlFlagBitsAMD = ::std::os::raw::c_uint;
pub type VkPipelineCompilerControlFlagsAMD = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCompilerControlCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCompilerControlCreateInfoAMD"]
        [::std::mem::size_of::<VkPipelineCompilerControlCreateInfoAMD>() - 24usize];
    ["Alignment of VkPipelineCompilerControlCreateInfoAMD"]
        [::std::mem::align_of::<VkPipelineCompilerControlCreateInfoAMD>() - 8usize];
    ["Offset of field: VkPipelineCompilerControlCreateInfoAMD::sType"]
        [::std::mem::offset_of!(VkPipelineCompilerControlCreateInfoAMD, sType) - 0usize];
    ["Offset of field: VkPipelineCompilerControlCreateInfoAMD::pNext"]
        [::std::mem::offset_of!(VkPipelineCompilerControlCreateInfoAMD, pNext) - 8usize];
    ["Offset of field: VkPipelineCompilerControlCreateInfoAMD::compilerControlFlags"][::std::mem::offset_of!(
        VkPipelineCompilerControlCreateInfoAMD,
        compilerControlFlags
    ) - 16usize];
};
impl Default for VkPipelineCompilerControlCreateInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkTimeDomainKHR as VkTimeDomainEXT;
pub type VkCalibratedTimestampInfoEXT = VkCalibratedTimestampInfoKHR;
pub type PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetCalibratedTimestampsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoKHR,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(
        physicalDevice: VkPhysicalDevice,
        pTimeDomainCount: *mut u32,
        pTimeDomains: *mut VkTimeDomainKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetCalibratedTimestampsEXT(
        device: VkDevice,
        timestampCount: u32,
        pTimestampInfos: *const VkCalibratedTimestampInfoKHR,
        pTimestamps: *mut u64,
        pMaxDeviation: *mut u64,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderEngineCount: u32,
    pub shaderArraysPerEngineCount: u32,
    pub computeUnitsPerShaderArray: u32,
    pub simdPerComputeUnit: u32,
    pub wavefrontsPerSimd: u32,
    pub wavefrontSize: u32,
    pub sgprsPerSimd: u32,
    pub minSgprAllocation: u32,
    pub maxSgprAllocation: u32,
    pub sgprAllocationGranularity: u32,
    pub vgprsPerSimd: u32,
    pub minVgprAllocation: u32,
    pub maxVgprAllocation: u32,
    pub vgprAllocationGranularity: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCorePropertiesAMD"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderCorePropertiesAMD>() - 72usize];
    ["Alignment of VkPhysicalDeviceShaderCorePropertiesAMD"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderCorePropertiesAMD>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::shaderEngineCount"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        shaderEngineCount
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::shaderArraysPerEngineCount"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        shaderArraysPerEngineCount
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::computeUnitsPerShaderArray"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        computeUnitsPerShaderArray
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::simdPerComputeUnit"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        simdPerComputeUnit
    ) - 28usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontsPerSimd"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        wavefrontsPerSimd
    ) - 32usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::wavefrontSize"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, wavefrontSize) - 36usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::sgprsPerSimd"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, sgprsPerSimd) - 40usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::minSgprAllocation"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        minSgprAllocation
    ) - 44usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::maxSgprAllocation"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        maxSgprAllocation
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::sgprAllocationGranularity"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        sgprAllocationGranularity
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::vgprsPerSimd"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesAMD, vgprsPerSimd) - 56usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::minVgprAllocation"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        minVgprAllocation
    ) - 60usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::maxVgprAllocation"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        maxVgprAllocation
    ) - 64usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesAMD::vgprAllocationGranularity"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCorePropertiesAMD,
        vgprAllocationGranularity
    )
        - 68usize];
};
impl Default for VkPhysicalDeviceShaderCorePropertiesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD:
    VkMemoryOverallocationBehaviorAMD = 0;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD:
    VkMemoryOverallocationBehaviorAMD = 1;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD:
    VkMemoryOverallocationBehaviorAMD = 2;
pub const VkMemoryOverallocationBehaviorAMD_VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD:
    VkMemoryOverallocationBehaviorAMD = 2147483647;
pub type VkMemoryOverallocationBehaviorAMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceMemoryOverallocationCreateInfoAMD"]
        [::std::mem::size_of::<VkDeviceMemoryOverallocationCreateInfoAMD>() - 24usize];
    ["Alignment of VkDeviceMemoryOverallocationCreateInfoAMD"]
        [::std::mem::align_of::<VkDeviceMemoryOverallocationCreateInfoAMD>() - 8usize];
    ["Offset of field: VkDeviceMemoryOverallocationCreateInfoAMD::sType"]
        [::std::mem::offset_of!(VkDeviceMemoryOverallocationCreateInfoAMD, sType) - 0usize];
    ["Offset of field: VkDeviceMemoryOverallocationCreateInfoAMD::pNext"]
        [::std::mem::offset_of!(VkDeviceMemoryOverallocationCreateInfoAMD, pNext) - 8usize];
    ["Offset of field: VkDeviceMemoryOverallocationCreateInfoAMD::overallocationBehavior"][::std::mem::offset_of!(
        VkDeviceMemoryOverallocationCreateInfoAMD,
        overallocationBehavior
    )
        - 16usize];
};
impl Default for VkDeviceMemoryOverallocationCreateInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVertexAttribDivisor: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT::maxVertexAttribDivisor"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT , maxVertexAttribDivisor) - 16usize] ;
};
impl Default for VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkVertexInputBindingDivisorDescriptionEXT = VkVertexInputBindingDivisorDescription;
pub type VkPipelineVertexInputDivisorStateCreateInfoEXT =
    VkPipelineVertexInputDivisorStateCreateInfo;
pub type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT =
    VkPhysicalDeviceVertexAttributeDivisorFeatures;
pub use self::VkPipelineCreationFeedbackFlagBits as VkPipelineCreationFeedbackFlagBitsEXT;
pub type VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub type VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
pub type VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;
pub type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV =
    VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub taskShader: VkBool32,
    pub meshShader: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceMeshShaderFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceMeshShaderFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceMeshShaderFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::taskShader"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, taskShader) - 16usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesNV::meshShader"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesNV, meshShader) - 20usize];
};
impl Default for VkPhysicalDeviceMeshShaderFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxDrawMeshTasksCount: u32,
    pub maxTaskWorkGroupInvocations: u32,
    pub maxTaskWorkGroupSize: [u32; 3usize],
    pub maxTaskTotalMemorySize: u32,
    pub maxTaskOutputCount: u32,
    pub maxMeshWorkGroupInvocations: u32,
    pub maxMeshWorkGroupSize: [u32; 3usize],
    pub maxMeshTotalMemorySize: u32,
    pub maxMeshOutputVertices: u32,
    pub maxMeshOutputPrimitives: u32,
    pub maxMeshMultiviewViewCount: u32,
    pub meshOutputPerVertexGranularity: u32,
    pub meshOutputPerPrimitiveGranularity: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceMeshShaderPropertiesNV>() - 88usize];
    ["Alignment of VkPhysicalDeviceMeshShaderPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceMeshShaderPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxDrawMeshTasksCount
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupInvocations"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskWorkGroupInvocations
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskWorkGroupSize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskWorkGroupSize
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskTotalMemorySize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskTotalMemorySize
    )
        - 36usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxTaskOutputCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxTaskOutputCount
    ) - 40usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupInvocations"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshWorkGroupInvocations
    )
        - 44usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshWorkGroupSize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshWorkGroupSize
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshTotalMemorySize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshTotalMemorySize
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputVertices"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshOutputVertices
    ) - 64usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshOutputPrimitives"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshOutputPrimitives
    )
        - 68usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::maxMeshMultiviewViewCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        maxMeshMultiviewViewCount
    )
        - 72usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerVertexGranularity"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesNV,
        meshOutputPerVertexGranularity
    )
        - 76usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesNV::meshOutputPerPrimitiveGranularity"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesNV , meshOutputPerPrimitiveGranularity) - 80usize] ;
};
impl Default for VkPhysicalDeviceMeshShaderPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawMeshTasksIndirectCommandNV {
    pub taskCount: u32,
    pub firstTask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawMeshTasksIndirectCommandNV"]
        [::std::mem::size_of::<VkDrawMeshTasksIndirectCommandNV>() - 8usize];
    ["Alignment of VkDrawMeshTasksIndirectCommandNV"]
        [::std::mem::align_of::<VkDrawMeshTasksIndirectCommandNV>() - 4usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandNV::taskCount"]
        [::std::mem::offset_of!(VkDrawMeshTasksIndirectCommandNV, taskCount) - 0usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandNV::firstTask"]
        [::std::mem::offset_of!(VkDrawMeshTasksIndirectCommandNV, firstTask) - 4usize];
};
pub type PFN_vkCmdDrawMeshTasksNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectCountNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32);
}
unsafe extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectNV(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectCountNV(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
pub type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV =
    VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageFootprint: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderImageFootprintFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderImageFootprintFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderImageFootprintFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderImageFootprintFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderImageFootprintFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderImageFootprintFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderImageFootprintFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderImageFootprintFeaturesNV::imageFootprint"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderImageFootprintFeaturesNV,
        imageFootprint
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceShaderImageFootprintFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub exclusiveScissorCount: u32,
    pub pExclusiveScissors: *const VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportExclusiveScissorStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>() - 32usize];
    ["Alignment of VkPipelineViewportExclusiveScissorStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineViewportExclusiveScissorStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::sType"][::std::mem::offset_of!(
        VkPipelineViewportExclusiveScissorStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::pNext"][::std::mem::offset_of!(
        VkPipelineViewportExclusiveScissorStateCreateInfoNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::exclusiveScissorCount"] [:: std :: mem :: offset_of ! (VkPipelineViewportExclusiveScissorStateCreateInfoNV , exclusiveScissorCount) - 16usize] ;
    ["Offset of field: VkPipelineViewportExclusiveScissorStateCreateInfoNV::pExclusiveScissors"][::std::mem::offset_of!(
        VkPipelineViewportExclusiveScissorStateCreateInfoNV,
        pExclusiveScissors
    )
        - 24usize];
};
impl Default for VkPipelineViewportExclusiveScissorStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub exclusiveScissor: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExclusiveScissorFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceExclusiveScissorFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceExclusiveScissorFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExclusiveScissorFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExclusiveScissorFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExclusiveScissorFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExclusiveScissorFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExclusiveScissorFeaturesNV::exclusiveScissor"][::std::mem::offset_of!(
        VkPhysicalDeviceExclusiveScissorFeaturesNV,
        exclusiveScissor
    ) - 16usize];
};
impl Default for VkPhysicalDeviceExclusiveScissorFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetExclusiveScissorEnableNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissorEnables: *const VkBool32,
    ),
>;
pub type PFN_vkCmdSetExclusiveScissorNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissors: *const VkRect2D,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetExclusiveScissorEnableNV(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissorEnables: *const VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetExclusiveScissorNV(
        commandBuffer: VkCommandBuffer,
        firstExclusiveScissor: u32,
        exclusiveScissorCount: u32,
        pExclusiveScissors: *const VkRect2D,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyCheckpointPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub checkpointExecutionStageMask: VkPipelineStageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyCheckpointPropertiesNV"]
        [::std::mem::size_of::<VkQueueFamilyCheckpointPropertiesNV>() - 24usize];
    ["Alignment of VkQueueFamilyCheckpointPropertiesNV"]
        [::std::mem::align_of::<VkQueueFamilyCheckpointPropertiesNV>() - 8usize];
    ["Offset of field: VkQueueFamilyCheckpointPropertiesNV::sType"]
        [::std::mem::offset_of!(VkQueueFamilyCheckpointPropertiesNV, sType) - 0usize];
    ["Offset of field: VkQueueFamilyCheckpointPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkQueueFamilyCheckpointPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkQueueFamilyCheckpointPropertiesNV::checkpointExecutionStageMask"][::std::mem::offset_of!(
        VkQueueFamilyCheckpointPropertiesNV,
        checkpointExecutionStageMask
    )
        - 16usize];
};
impl Default for VkQueueFamilyCheckpointPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCheckpointDataNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stage: VkPipelineStageFlagBits,
    pub pCheckpointMarker: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCheckpointDataNV"][::std::mem::size_of::<VkCheckpointDataNV>() - 32usize];
    ["Alignment of VkCheckpointDataNV"][::std::mem::align_of::<VkCheckpointDataNV>() - 8usize];
    ["Offset of field: VkCheckpointDataNV::sType"]
        [::std::mem::offset_of!(VkCheckpointDataNV, sType) - 0usize];
    ["Offset of field: VkCheckpointDataNV::pNext"]
        [::std::mem::offset_of!(VkCheckpointDataNV, pNext) - 8usize];
    ["Offset of field: VkCheckpointDataNV::stage"]
        [::std::mem::offset_of!(VkCheckpointDataNV, stage) - 16usize];
    ["Offset of field: VkCheckpointDataNV::pCheckpointMarker"]
        [::std::mem::offset_of!(VkCheckpointDataNV, pCheckpointMarker) - 24usize];
};
impl Default for VkCheckpointDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueueFamilyCheckpointProperties2NV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub checkpointExecutionStageMask: VkPipelineStageFlags2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueueFamilyCheckpointProperties2NV"]
        [::std::mem::size_of::<VkQueueFamilyCheckpointProperties2NV>() - 24usize];
    ["Alignment of VkQueueFamilyCheckpointProperties2NV"]
        [::std::mem::align_of::<VkQueueFamilyCheckpointProperties2NV>() - 8usize];
    ["Offset of field: VkQueueFamilyCheckpointProperties2NV::sType"]
        [::std::mem::offset_of!(VkQueueFamilyCheckpointProperties2NV, sType) - 0usize];
    ["Offset of field: VkQueueFamilyCheckpointProperties2NV::pNext"]
        [::std::mem::offset_of!(VkQueueFamilyCheckpointProperties2NV, pNext) - 8usize];
    ["Offset of field: VkQueueFamilyCheckpointProperties2NV::checkpointExecutionStageMask"][::std::mem::offset_of!(
        VkQueueFamilyCheckpointProperties2NV,
        checkpointExecutionStageMask
    )
        - 16usize];
};
impl Default for VkQueueFamilyCheckpointProperties2NV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCheckpointData2NV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stage: VkPipelineStageFlags2,
    pub pCheckpointMarker: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCheckpointData2NV"][::std::mem::size_of::<VkCheckpointData2NV>() - 32usize];
    ["Alignment of VkCheckpointData2NV"][::std::mem::align_of::<VkCheckpointData2NV>() - 8usize];
    ["Offset of field: VkCheckpointData2NV::sType"]
        [::std::mem::offset_of!(VkCheckpointData2NV, sType) - 0usize];
    ["Offset of field: VkCheckpointData2NV::pNext"]
        [::std::mem::offset_of!(VkCheckpointData2NV, pNext) - 8usize];
    ["Offset of field: VkCheckpointData2NV::stage"]
        [::std::mem::offset_of!(VkCheckpointData2NV, stage) - 16usize];
    ["Offset of field: VkCheckpointData2NV::pCheckpointMarker"]
        [::std::mem::offset_of!(VkCheckpointData2NV, pCheckpointMarker) - 24usize];
};
impl Default for VkCheckpointData2NV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetCheckpointNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCheckpointMarker: *const ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkGetQueueCheckpointDataNV = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointDataNV,
    ),
>;
pub type PFN_vkGetQueueCheckpointData2NV = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointData2NV,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetCheckpointNV(
        commandBuffer: VkCommandBuffer,
        pCheckpointMarker: *const ::std::os::raw::c_void,
    );
}
unsafe extern "system" {
    pub fn vkGetQueueCheckpointDataNV(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointDataNV,
    );
}
unsafe extern "system" {
    pub fn vkGetQueueCheckpointData2NV(
        queue: VkQueue,
        pCheckpointDataCount: *mut u32,
        pCheckpointData: *mut VkCheckpointData2NV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderIntegerFunctions2: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL::shaderIntegerFunctions2"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL , shaderIntegerFunctions2) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceConfigurationINTEL_T {
    _unused: [u8; 0],
}
pub type VkPerformanceConfigurationINTEL = *mut VkPerformanceConfigurationINTEL_T;
pub const VkPerformanceConfigurationTypeINTEL_VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL : VkPerformanceConfigurationTypeINTEL = 0 ;
pub const VkPerformanceConfigurationTypeINTEL_VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL:
    VkPerformanceConfigurationTypeINTEL = 2147483647;
pub type VkPerformanceConfigurationTypeINTEL = ::std::os::raw::c_uint;
pub const VkQueryPoolSamplingModeINTEL_VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL:
    VkQueryPoolSamplingModeINTEL = 0;
pub const VkQueryPoolSamplingModeINTEL_VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL:
    VkQueryPoolSamplingModeINTEL = 2147483647;
pub type VkQueryPoolSamplingModeINTEL = ::std::os::raw::c_uint;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL:
    VkPerformanceOverrideTypeINTEL = 0;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL:
    VkPerformanceOverrideTypeINTEL = 1;
pub const VkPerformanceOverrideTypeINTEL_VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL:
    VkPerformanceOverrideTypeINTEL = 2147483647;
pub type VkPerformanceOverrideTypeINTEL = ::std::os::raw::c_uint;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL : VkPerformanceParameterTypeINTEL = 0 ;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL : VkPerformanceParameterTypeINTEL = 1 ;
pub const VkPerformanceParameterTypeINTEL_VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL:
    VkPerformanceParameterTypeINTEL = 2147483647;
pub type VkPerformanceParameterTypeINTEL = ::std::os::raw::c_uint;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL:
    VkPerformanceValueTypeINTEL = 0;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL:
    VkPerformanceValueTypeINTEL = 1;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL:
    VkPerformanceValueTypeINTEL = 2;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL:
    VkPerformanceValueTypeINTEL = 3;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL:
    VkPerformanceValueTypeINTEL = 4;
pub const VkPerformanceValueTypeINTEL_VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL:
    VkPerformanceValueTypeINTEL = 2147483647;
pub type VkPerformanceValueTypeINTEL = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkPerformanceValueDataINTEL {
    pub value32: u32,
    pub value64: u64,
    pub valueFloat: f32,
    pub valueBool: VkBool32,
    pub valueString: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceValueDataINTEL"]
        [::std::mem::size_of::<VkPerformanceValueDataINTEL>() - 8usize];
    ["Alignment of VkPerformanceValueDataINTEL"]
        [::std::mem::align_of::<VkPerformanceValueDataINTEL>() - 8usize];
    ["Offset of field: VkPerformanceValueDataINTEL::value32"]
        [::std::mem::offset_of!(VkPerformanceValueDataINTEL, value32) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::value64"]
        [::std::mem::offset_of!(VkPerformanceValueDataINTEL, value64) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::valueFloat"]
        [::std::mem::offset_of!(VkPerformanceValueDataINTEL, valueFloat) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::valueBool"]
        [::std::mem::offset_of!(VkPerformanceValueDataINTEL, valueBool) - 0usize];
    ["Offset of field: VkPerformanceValueDataINTEL::valueString"]
        [::std::mem::offset_of!(VkPerformanceValueDataINTEL, valueString) - 0usize];
};
impl Default for VkPerformanceValueDataINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceValueINTEL {
    pub type_: VkPerformanceValueTypeINTEL,
    pub data: VkPerformanceValueDataINTEL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceValueINTEL"][::std::mem::size_of::<VkPerformanceValueINTEL>() - 16usize];
    ["Alignment of VkPerformanceValueINTEL"]
        [::std::mem::align_of::<VkPerformanceValueINTEL>() - 8usize];
    ["Offset of field: VkPerformanceValueINTEL::type_"]
        [::std::mem::offset_of!(VkPerformanceValueINTEL, type_) - 0usize];
    ["Offset of field: VkPerformanceValueINTEL::data"]
        [::std::mem::offset_of!(VkPerformanceValueINTEL, data) - 8usize];
};
impl Default for VkPerformanceValueINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkInitializePerformanceApiInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkInitializePerformanceApiInfoINTEL"]
        [::std::mem::size_of::<VkInitializePerformanceApiInfoINTEL>() - 24usize];
    ["Alignment of VkInitializePerformanceApiInfoINTEL"]
        [::std::mem::align_of::<VkInitializePerformanceApiInfoINTEL>() - 8usize];
    ["Offset of field: VkInitializePerformanceApiInfoINTEL::sType"]
        [::std::mem::offset_of!(VkInitializePerformanceApiInfoINTEL, sType) - 0usize];
    ["Offset of field: VkInitializePerformanceApiInfoINTEL::pNext"]
        [::std::mem::offset_of!(VkInitializePerformanceApiInfoINTEL, pNext) - 8usize];
    ["Offset of field: VkInitializePerformanceApiInfoINTEL::pUserData"]
        [::std::mem::offset_of!(VkInitializePerformanceApiInfoINTEL, pUserData) - 16usize];
};
impl Default for VkInitializePerformanceApiInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryPoolPerformanceQueryCreateInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryPoolPerformanceQueryCreateInfoINTEL"]
        [::std::mem::size_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>() - 24usize];
    ["Alignment of VkQueryPoolPerformanceQueryCreateInfoINTEL"]
        [::std::mem::align_of::<VkQueryPoolPerformanceQueryCreateInfoINTEL>() - 8usize];
    ["Offset of field: VkQueryPoolPerformanceQueryCreateInfoINTEL::sType"]
        [::std::mem::offset_of!(VkQueryPoolPerformanceQueryCreateInfoINTEL, sType) - 0usize];
    ["Offset of field: VkQueryPoolPerformanceQueryCreateInfoINTEL::pNext"]
        [::std::mem::offset_of!(VkQueryPoolPerformanceQueryCreateInfoINTEL, pNext) - 8usize];
    ["Offset of field: VkQueryPoolPerformanceQueryCreateInfoINTEL::performanceCountersSampling"][::std::mem::offset_of!(
        VkQueryPoolPerformanceQueryCreateInfoINTEL,
        performanceCountersSampling
    )
        - 16usize];
};
impl Default for VkQueryPoolPerformanceQueryCreateInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub marker: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceMarkerInfoINTEL"]
        [::std::mem::size_of::<VkPerformanceMarkerInfoINTEL>() - 24usize];
    ["Alignment of VkPerformanceMarkerInfoINTEL"]
        [::std::mem::align_of::<VkPerformanceMarkerInfoINTEL>() - 8usize];
    ["Offset of field: VkPerformanceMarkerInfoINTEL::sType"]
        [::std::mem::offset_of!(VkPerformanceMarkerInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceMarkerInfoINTEL::pNext"]
        [::std::mem::offset_of!(VkPerformanceMarkerInfoINTEL, pNext) - 8usize];
    ["Offset of field: VkPerformanceMarkerInfoINTEL::marker"]
        [::std::mem::offset_of!(VkPerformanceMarkerInfoINTEL, marker) - 16usize];
};
impl Default for VkPerformanceMarkerInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceStreamMarkerInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub marker: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceStreamMarkerInfoINTEL"]
        [::std::mem::size_of::<VkPerformanceStreamMarkerInfoINTEL>() - 24usize];
    ["Alignment of VkPerformanceStreamMarkerInfoINTEL"]
        [::std::mem::align_of::<VkPerformanceStreamMarkerInfoINTEL>() - 8usize];
    ["Offset of field: VkPerformanceStreamMarkerInfoINTEL::sType"]
        [::std::mem::offset_of!(VkPerformanceStreamMarkerInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceStreamMarkerInfoINTEL::pNext"]
        [::std::mem::offset_of!(VkPerformanceStreamMarkerInfoINTEL, pNext) - 8usize];
    ["Offset of field: VkPerformanceStreamMarkerInfoINTEL::marker"]
        [::std::mem::offset_of!(VkPerformanceStreamMarkerInfoINTEL, marker) - 16usize];
};
impl Default for VkPerformanceStreamMarkerInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceOverrideInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkPerformanceOverrideTypeINTEL,
    pub enable: VkBool32,
    pub parameter: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceOverrideInfoINTEL"]
        [::std::mem::size_of::<VkPerformanceOverrideInfoINTEL>() - 32usize];
    ["Alignment of VkPerformanceOverrideInfoINTEL"]
        [::std::mem::align_of::<VkPerformanceOverrideInfoINTEL>() - 8usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::sType"]
        [::std::mem::offset_of!(VkPerformanceOverrideInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::pNext"]
        [::std::mem::offset_of!(VkPerformanceOverrideInfoINTEL, pNext) - 8usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::type_"]
        [::std::mem::offset_of!(VkPerformanceOverrideInfoINTEL, type_) - 16usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::enable"]
        [::std::mem::offset_of!(VkPerformanceOverrideInfoINTEL, enable) - 20usize];
    ["Offset of field: VkPerformanceOverrideInfoINTEL::parameter"]
        [::std::mem::offset_of!(VkPerformanceOverrideInfoINTEL, parameter) - 24usize];
};
impl Default for VkPerformanceOverrideInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkPerformanceConfigurationTypeINTEL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPerformanceConfigurationAcquireInfoINTEL"]
        [::std::mem::size_of::<VkPerformanceConfigurationAcquireInfoINTEL>() - 24usize];
    ["Alignment of VkPerformanceConfigurationAcquireInfoINTEL"]
        [::std::mem::align_of::<VkPerformanceConfigurationAcquireInfoINTEL>() - 8usize];
    ["Offset of field: VkPerformanceConfigurationAcquireInfoINTEL::sType"]
        [::std::mem::offset_of!(VkPerformanceConfigurationAcquireInfoINTEL, sType) - 0usize];
    ["Offset of field: VkPerformanceConfigurationAcquireInfoINTEL::pNext"]
        [::std::mem::offset_of!(VkPerformanceConfigurationAcquireInfoINTEL, pNext) - 8usize];
    ["Offset of field: VkPerformanceConfigurationAcquireInfoINTEL::type_"]
        [::std::mem::offset_of!(VkPerformanceConfigurationAcquireInfoINTEL, type_) - 16usize];
};
impl Default for VkPerformanceConfigurationAcquireInfoINTEL {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkInitializePerformanceApiINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkUninitializePerformanceApiINTEL =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice)>;
pub type PFN_vkCmdSetPerformanceMarkerINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceStreamMarkerINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkCmdSetPerformanceOverrideINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pOverrideInfo: *const VkPerformanceOverrideInfoINTEL,
    ) -> VkResult,
>;
pub type PFN_vkAcquirePerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL,
        pConfiguration: *mut VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkReleasePerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkQueueSetPerformanceConfigurationINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        queue: VkQueue,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult,
>;
pub type PFN_vkGetPerformanceParameterINTEL = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        parameter: VkPerformanceParameterTypeINTEL,
        pValue: *mut VkPerformanceValueINTEL,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkInitializePerformanceApiINTEL(
        device: VkDevice,
        pInitializeInfo: *const VkInitializePerformanceApiInfoINTEL,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkUninitializePerformanceApiINTEL(device: VkDevice);
}
unsafe extern "system" {
    pub fn vkCmdSetPerformanceMarkerINTEL(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceMarkerInfoINTEL,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdSetPerformanceStreamMarkerINTEL(
        commandBuffer: VkCommandBuffer,
        pMarkerInfo: *const VkPerformanceStreamMarkerInfoINTEL,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdSetPerformanceOverrideINTEL(
        commandBuffer: VkCommandBuffer,
        pOverrideInfo: *const VkPerformanceOverrideInfoINTEL,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkAcquirePerformanceConfigurationINTEL(
        device: VkDevice,
        pAcquireInfo: *const VkPerformanceConfigurationAcquireInfoINTEL,
        pConfiguration: *mut VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkReleasePerformanceConfigurationINTEL(
        device: VkDevice,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkQueueSetPerformanceConfigurationINTEL(
        queue: VkQueue,
        configuration: VkPerformanceConfigurationINTEL,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPerformanceParameterINTEL(
        device: VkDevice,
        parameter: VkPerformanceParameterTypeINTEL,
        pValue: *mut VkPerformanceValueINTEL,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pciDomain: u32,
    pub pciBus: u32,
    pub pciDevice: u32,
    pub pciFunction: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePCIBusInfoPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>() - 32usize];
    ["Alignment of VkPhysicalDevicePCIBusInfoPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDevicePCIBusInfoPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDomain"]
        [::std::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDomain) - 16usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciBus"]
        [::std::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciBus) - 20usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciDevice"]
        [::std::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciDevice) - 24usize];
    ["Offset of field: VkPhysicalDevicePCIBusInfoPropertiesEXT::pciFunction"]
        [::std::mem::offset_of!(VkPhysicalDevicePCIBusInfoPropertiesEXT, pciFunction) - 28usize];
};
impl Default for VkPhysicalDevicePCIBusInfoPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub localDimmingSupport: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayNativeHdrSurfaceCapabilitiesAMD"]
        [::std::mem::size_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>() - 24usize];
    ["Alignment of VkDisplayNativeHdrSurfaceCapabilitiesAMD"]
        [::std::mem::align_of::<VkDisplayNativeHdrSurfaceCapabilitiesAMD>() - 8usize];
    ["Offset of field: VkDisplayNativeHdrSurfaceCapabilitiesAMD::sType"]
        [::std::mem::offset_of!(VkDisplayNativeHdrSurfaceCapabilitiesAMD, sType) - 0usize];
    ["Offset of field: VkDisplayNativeHdrSurfaceCapabilitiesAMD::pNext"]
        [::std::mem::offset_of!(VkDisplayNativeHdrSurfaceCapabilitiesAMD, pNext) - 8usize];
    ["Offset of field: VkDisplayNativeHdrSurfaceCapabilitiesAMD::localDimmingSupport"][::std::mem::offset_of!(
        VkDisplayNativeHdrSurfaceCapabilitiesAMD,
        localDimmingSupport
    ) - 16usize];
};
impl Default for VkDisplayNativeHdrSurfaceCapabilitiesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub localDimmingEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainDisplayNativeHdrCreateInfoAMD"]
        [::std::mem::size_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>() - 24usize];
    ["Alignment of VkSwapchainDisplayNativeHdrCreateInfoAMD"]
        [::std::mem::align_of::<VkSwapchainDisplayNativeHdrCreateInfoAMD>() - 8usize];
    ["Offset of field: VkSwapchainDisplayNativeHdrCreateInfoAMD::sType"]
        [::std::mem::offset_of!(VkSwapchainDisplayNativeHdrCreateInfoAMD, sType) - 0usize];
    ["Offset of field: VkSwapchainDisplayNativeHdrCreateInfoAMD::pNext"]
        [::std::mem::offset_of!(VkSwapchainDisplayNativeHdrCreateInfoAMD, pNext) - 8usize];
    ["Offset of field: VkSwapchainDisplayNativeHdrCreateInfoAMD::localDimmingEnable"][::std::mem::offset_of!(
        VkSwapchainDisplayNativeHdrCreateInfoAMD,
        localDimmingEnable
    ) - 16usize];
};
impl Default for VkSwapchainDisplayNativeHdrCreateInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetLocalDimmingAMD = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32),
>;
unsafe extern "system" {
    pub fn vkSetLocalDimmingAMD(
        device: VkDevice,
        swapChain: VkSwapchainKHR,
        localDimmingEnable: VkBool32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMap: VkBool32,
    pub fragmentDensityMapDynamic: VkBool32,
    pub fragmentDensityMapNonSubsampledImages: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMap"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapFeaturesEXT,
        fragmentDensityMap
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapDynamic"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapFeaturesEXT,
        fragmentDensityMapDynamic
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapFeaturesEXT::fragmentDensityMapNonSubsampledImages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapFeaturesEXT , fragmentDensityMapNonSubsampledImages) - 24usize] ;
};
impl Default for VkPhysicalDeviceFragmentDensityMapFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minFragmentDensityTexelSize: VkExtent2D,
    pub maxFragmentDensityTexelSize: VkExtent2D,
    pub fragmentDensityInvocations: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>() - 40usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMapPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::minFragmentDensityTexelSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapPropertiesEXT , minFragmentDensityTexelSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::maxFragmentDensityTexelSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapPropertiesEXT , maxFragmentDensityTexelSize) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapPropertiesEXT::fragmentDensityInvocations"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapPropertiesEXT , fragmentDensityInvocations) - 32usize] ;
};
impl Default for VkPhysicalDeviceFragmentDensityMapPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fragmentDensityMapAttachment: VkAttachmentReference,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassFragmentDensityMapCreateInfoEXT"]
        [::std::mem::size_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>() - 24usize];
    ["Alignment of VkRenderPassFragmentDensityMapCreateInfoEXT"]
        [::std::mem::align_of::<VkRenderPassFragmentDensityMapCreateInfoEXT>() - 8usize];
    ["Offset of field: VkRenderPassFragmentDensityMapCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkRenderPassFragmentDensityMapCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassFragmentDensityMapCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkRenderPassFragmentDensityMapCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkRenderPassFragmentDensityMapCreateInfoEXT::fragmentDensityMapAttachment"] [:: std :: mem :: offset_of ! (VkRenderPassFragmentDensityMapCreateInfoEXT , fragmentDensityMapAttachment) - 16usize] ;
};
impl Default for VkRenderPassFragmentDensityMapCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderingFragmentDensityMapAttachmentInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
    pub imageLayout: VkImageLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderingFragmentDensityMapAttachmentInfoEXT"]
        [::std::mem::size_of::<VkRenderingFragmentDensityMapAttachmentInfoEXT>() - 32usize];
    ["Alignment of VkRenderingFragmentDensityMapAttachmentInfoEXT"]
        [::std::mem::align_of::<VkRenderingFragmentDensityMapAttachmentInfoEXT>() - 8usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::sType"]
        [::std::mem::offset_of!(VkRenderingFragmentDensityMapAttachmentInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::pNext"]
        [::std::mem::offset_of!(VkRenderingFragmentDensityMapAttachmentInfoEXT, pNext) - 8usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::imageView"][::std::mem::offset_of!(
        VkRenderingFragmentDensityMapAttachmentInfoEXT,
        imageView
    ) - 16usize];
    ["Offset of field: VkRenderingFragmentDensityMapAttachmentInfoEXT::imageLayout"][::std::mem::offset_of!(
        VkRenderingFragmentDensityMapAttachmentInfoEXT,
        imageLayout
    ) - 24usize];
};
impl Default for VkRenderingFragmentDensityMapAttachmentInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
pub type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT =
    VkPhysicalDeviceSubgroupSizeControlFeatures;
pub type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT =
    VkPhysicalDeviceSubgroupSizeControlProperties;
pub type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT =
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const VkShaderCorePropertiesFlagBitsAMD_VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD:
    VkShaderCorePropertiesFlagBitsAMD = 2147483647;
pub type VkShaderCorePropertiesFlagBitsAMD = ::std::os::raw::c_uint;
pub type VkShaderCorePropertiesFlagsAMD = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreProperties2AMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    pub activeComputeUnitCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCoreProperties2AMD"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderCoreProperties2AMD>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderCoreProperties2AMD"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderCoreProperties2AMD>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCoreProperties2AMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCoreProperties2AMD, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::shaderCoreFeatures"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCoreProperties2AMD,
        shaderCoreFeatures
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreProperties2AMD::activeComputeUnitCount"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCoreProperties2AMD,
        activeComputeUnitCount
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceShaderCoreProperties2AMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceCoherentMemory: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCoherentMemoryFeaturesAMD"]
        [::std::mem::size_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>() - 24usize];
    ["Alignment of VkPhysicalDeviceCoherentMemoryFeaturesAMD"]
        [::std::mem::align_of::<VkPhysicalDeviceCoherentMemoryFeaturesAMD>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCoherentMemoryFeaturesAMD::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCoherentMemoryFeaturesAMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCoherentMemoryFeaturesAMD::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCoherentMemoryFeaturesAMD, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCoherentMemoryFeaturesAMD::deviceCoherentMemory"][::std::mem::offset_of!(
        VkPhysicalDeviceCoherentMemoryFeaturesAMD,
        deviceCoherentMemory
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceCoherentMemoryFeaturesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderImageInt64Atomics: VkBool32,
    pub sparseImageInt64Atomics: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::shaderImageInt64Atomics"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT , shaderImageInt64Atomics) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT::sparseImageInt64Atomics"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT , sparseImageInt64Atomics) - 20usize] ;
};
impl Default for VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub heapBudget: [VkDeviceSize; 16usize],
    pub heapUsage: [VkDeviceSize; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryBudgetPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>() - 272usize];
    ["Alignment of VkPhysicalDeviceMemoryBudgetPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMemoryBudgetPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapBudget"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapBudget) - 16usize];
    ["Offset of field: VkPhysicalDeviceMemoryBudgetPropertiesEXT::heapUsage"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryBudgetPropertiesEXT, heapUsage) - 144usize];
};
impl Default for VkPhysicalDeviceMemoryBudgetPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryPriority: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryPriorityFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceMemoryPriorityFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMemoryPriorityFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryPriorityFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryPriorityFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryPriorityFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryPriorityFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryPriorityFeaturesEXT::memoryPriority"][::std::mem::offset_of!(
        VkPhysicalDeviceMemoryPriorityFeaturesEXT,
        memoryPriority
    ) - 16usize];
};
impl Default for VkPhysicalDeviceMemoryPriorityFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryPriorityAllocateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub priority: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryPriorityAllocateInfoEXT"]
        [::std::mem::size_of::<VkMemoryPriorityAllocateInfoEXT>() - 24usize];
    ["Alignment of VkMemoryPriorityAllocateInfoEXT"]
        [::std::mem::align_of::<VkMemoryPriorityAllocateInfoEXT>() - 8usize];
    ["Offset of field: VkMemoryPriorityAllocateInfoEXT::sType"]
        [::std::mem::offset_of!(VkMemoryPriorityAllocateInfoEXT, sType) - 0usize];
    ["Offset of field: VkMemoryPriorityAllocateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMemoryPriorityAllocateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMemoryPriorityAllocateInfoEXT::priority"]
        [::std::mem::offset_of!(VkMemoryPriorityAllocateInfoEXT, priority) - 16usize];
};
impl Default for VkMemoryPriorityAllocateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dedicatedAllocationImageAliasing: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"][::std::mem::size_of::<
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV"][::std::mem::align_of::<
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV::dedicatedAllocationImageAliasing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV , dedicatedAllocationImageAliasing) - 16usize] ;
};
impl Default for VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub bufferDeviceAddress: VkBool32,
    pub bufferDeviceAddressCaptureReplay: VkBool32,
    pub bufferDeviceAddressMultiDevice: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceBufferDeviceAddressFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceBufferDeviceAddressFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceBufferDeviceAddressFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddress"][::std::mem::offset_of!(
        VkPhysicalDeviceBufferDeviceAddressFeaturesEXT,
        bufferDeviceAddress
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddressCaptureReplay"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT , bufferDeviceAddressCaptureReplay) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddressMultiDevice"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBufferDeviceAddressFeaturesEXT , bufferDeviceAddressMultiDevice) - 24usize] ;
};
impl Default for VkPhysicalDeviceBufferDeviceAddressFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferDeviceAddressCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceAddress: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferDeviceAddressCreateInfoEXT"]
        [::std::mem::size_of::<VkBufferDeviceAddressCreateInfoEXT>() - 24usize];
    ["Alignment of VkBufferDeviceAddressCreateInfoEXT"]
        [::std::mem::align_of::<VkBufferDeviceAddressCreateInfoEXT>() - 8usize];
    ["Offset of field: VkBufferDeviceAddressCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkBufferDeviceAddressCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkBufferDeviceAddressCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkBufferDeviceAddressCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkBufferDeviceAddressCreateInfoEXT::deviceAddress"]
        [::std::mem::offset_of!(VkBufferDeviceAddressCreateInfoEXT, deviceAddress) - 16usize];
};
impl Default for VkBufferDeviceAddressCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetBufferDeviceAddressEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress,
>;
unsafe extern "system" {
    pub fn vkGetBufferDeviceAddressEXT(
        device: VkDevice,
        pInfo: *const VkBufferDeviceAddressInfo,
    ) -> VkDeviceAddress;
}
pub use self::VkToolPurposeFlagBits as VkToolPurposeFlagBitsEXT;
pub type VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub type VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;
pub type PFN_vkGetPhysicalDeviceToolPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceToolPropertiesEXT(
        physicalDevice: VkPhysicalDevice,
        pToolCount: *mut u32,
        pToolProperties: *mut VkPhysicalDeviceToolProperties,
    ) -> VkResult;
}
pub type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT:
    VkValidationFeatureEnableEXT = 0;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT : VkValidationFeatureEnableEXT = 1 ;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT:
    VkValidationFeatureEnableEXT = 2;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT:
    VkValidationFeatureEnableEXT = 3;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT : VkValidationFeatureEnableEXT = 4 ;
pub const VkValidationFeatureEnableEXT_VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT:
    VkValidationFeatureEnableEXT = 2147483647;
pub type VkValidationFeatureEnableEXT = ::std::os::raw::c_uint;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_ALL_EXT:
    VkValidationFeatureDisableEXT = 0;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT:
    VkValidationFeatureDisableEXT = 1;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT:
    VkValidationFeatureDisableEXT = 2;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT:
    VkValidationFeatureDisableEXT = 3;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT:
    VkValidationFeatureDisableEXT = 4;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT:
    VkValidationFeatureDisableEXT = 5;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT:
    VkValidationFeatureDisableEXT = 6;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT : VkValidationFeatureDisableEXT = 7 ;
pub const VkValidationFeatureDisableEXT_VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT:
    VkValidationFeatureDisableEXT = 2147483647;
pub type VkValidationFeatureDisableEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkValidationFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub enabledValidationFeatureCount: u32,
    pub pEnabledValidationFeatures: *const VkValidationFeatureEnableEXT,
    pub disabledValidationFeatureCount: u32,
    pub pDisabledValidationFeatures: *const VkValidationFeatureDisableEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkValidationFeaturesEXT"][::std::mem::size_of::<VkValidationFeaturesEXT>() - 48usize];
    ["Alignment of VkValidationFeaturesEXT"]
        [::std::mem::align_of::<VkValidationFeaturesEXT>() - 8usize];
    ["Offset of field: VkValidationFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkValidationFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkValidationFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkValidationFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkValidationFeaturesEXT::enabledValidationFeatureCount"]
        [::std::mem::offset_of!(VkValidationFeaturesEXT, enabledValidationFeatureCount) - 16usize];
    ["Offset of field: VkValidationFeaturesEXT::pEnabledValidationFeatures"]
        [::std::mem::offset_of!(VkValidationFeaturesEXT, pEnabledValidationFeatures) - 24usize];
    ["Offset of field: VkValidationFeaturesEXT::disabledValidationFeatureCount"]
        [::std::mem::offset_of!(VkValidationFeaturesEXT, disabledValidationFeatureCount) - 32usize];
    ["Offset of field: VkValidationFeaturesEXT::pDisabledValidationFeatures"]
        [::std::mem::offset_of!(VkValidationFeaturesEXT, pDisabledValidationFeatures) - 40usize];
};
impl Default for VkValidationFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub use self::VkComponentTypeKHR as VkComponentTypeNV;
pub use self::VkScopeKHR as VkScopeNV;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub MSize: u32,
    pub NSize: u32,
    pub KSize: u32,
    pub AType: VkComponentTypeNV,
    pub BType: VkComponentTypeNV,
    pub CType: VkComponentTypeNV,
    pub DType: VkComponentTypeNV,
    pub scope: VkScopeNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeMatrixPropertiesNV"]
        [::std::mem::size_of::<VkCooperativeMatrixPropertiesNV>() - 48usize];
    ["Alignment of VkCooperativeMatrixPropertiesNV"]
        [::std::mem::align_of::<VkCooperativeMatrixPropertiesNV>() - 8usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::sType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, sType) - 0usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::MSize"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, MSize) - 16usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::NSize"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, NSize) - 20usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::KSize"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, KSize) - 24usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::AType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, AType) - 28usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::BType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, BType) - 32usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::CType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, CType) - 36usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::DType"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, DType) - 40usize];
    ["Offset of field: VkCooperativeMatrixPropertiesNV::scope"]
        [::std::mem::offset_of!(VkCooperativeMatrixPropertiesNV, scope) - 44usize];
};
impl Default for VkCooperativeMatrixPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrix: VkBool32,
    pub cooperativeMatrixRobustBufferAccess: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrix"][::std::mem::offset_of!(
        VkPhysicalDeviceCooperativeMatrixFeaturesNV,
        cooperativeMatrix
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixFeaturesNV::cooperativeMatrixRobustBufferAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixFeaturesNV , cooperativeMatrixRobustBufferAccess) - 20usize] ;
};
impl Default for VkPhysicalDeviceCooperativeMatrixFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrixSupportedStages: VkShaderStageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrixPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrixPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrixPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrixPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrixPropertiesNV::cooperativeMatrixSupportedStages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrixPropertiesNV , cooperativeMatrixSupportedStages) - 16usize] ;
};
impl Default for VkPhysicalDeviceCooperativeMatrixPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesNV,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixPropertiesNV,
    ) -> VkResult;
}
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_MERGE_NV: VkCoverageReductionModeNV =
    0;
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV:
    VkCoverageReductionModeNV = 1;
pub const VkCoverageReductionModeNV_VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV:
    VkCoverageReductionModeNV = 2147483647;
pub type VkCoverageReductionModeNV = ::std::os::raw::c_uint;
pub type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub coverageReductionMode: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCoverageReductionModeFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCoverageReductionModeFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCoverageReductionModeFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCoverageReductionModeFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCoverageReductionModeFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCoverageReductionModeFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCoverageReductionModeFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCoverageReductionModeFeaturesNV::coverageReductionMode"][::std::mem::offset_of!(
        VkPhysicalDeviceCoverageReductionModeFeaturesNV,
        coverageReductionMode
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceCoverageReductionModeFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    pub coverageReductionMode: VkCoverageReductionModeNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineCoverageReductionStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineCoverageReductionStateCreateInfoNV>() - 24usize];
    ["Alignment of VkPipelineCoverageReductionStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineCoverageReductionStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkPipelineCoverageReductionStateCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkPipelineCoverageReductionStateCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkPipelineCoverageReductionStateCreateInfoNV, flags) - 16usize];
    ["Offset of field: VkPipelineCoverageReductionStateCreateInfoNV::coverageReductionMode"][::std::mem::offset_of!(
        VkPipelineCoverageReductionStateCreateInfoNV,
        coverageReductionMode
    )
        - 20usize];
};
impl Default for VkPipelineCoverageReductionStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFramebufferMixedSamplesCombinationNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub coverageReductionMode: VkCoverageReductionModeNV,
    pub rasterizationSamples: VkSampleCountFlagBits,
    pub depthStencilSamples: VkSampleCountFlags,
    pub colorSamples: VkSampleCountFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFramebufferMixedSamplesCombinationNV"]
        [::std::mem::size_of::<VkFramebufferMixedSamplesCombinationNV>() - 32usize];
    ["Alignment of VkFramebufferMixedSamplesCombinationNV"]
        [::std::mem::align_of::<VkFramebufferMixedSamplesCombinationNV>() - 8usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::sType"]
        [::std::mem::offset_of!(VkFramebufferMixedSamplesCombinationNV, sType) - 0usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::pNext"]
        [::std::mem::offset_of!(VkFramebufferMixedSamplesCombinationNV, pNext) - 8usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::coverageReductionMode"][::std::mem::offset_of!(
        VkFramebufferMixedSamplesCombinationNV,
        coverageReductionMode
    ) - 16usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::rasterizationSamples"][::std::mem::offset_of!(
        VkFramebufferMixedSamplesCombinationNV,
        rasterizationSamples
    ) - 20usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::depthStencilSamples"][::std::mem::offset_of!(
        VkFramebufferMixedSamplesCombinationNV,
        depthStencilSamples
    ) - 24usize];
    ["Offset of field: VkFramebufferMixedSamplesCombinationNV::colorSamples"]
        [::std::mem::offset_of!(VkFramebufferMixedSamplesCombinationNV, colorSamples) - 28usize];
};
impl Default for VkFramebufferMixedSamplesCombinationNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV =
    ::std::option::Option<
        unsafe extern "system" fn(
            physicalDevice: VkPhysicalDevice,
            pCombinationCount: *mut u32,
            pCombinations: *mut VkFramebufferMixedSamplesCombinationNV,
        ) -> VkResult,
    >;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(
        physicalDevice: VkPhysicalDevice,
        pCombinationCount: *mut u32,
        pCombinations: *mut VkFramebufferMixedSamplesCombinationNV,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShaderSampleInterlock: VkBool32,
    pub fragmentShaderPixelInterlock: VkBool32,
    pub fragmentShaderShadingRateInterlock: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderSampleInterlock"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT , fragmentShaderSampleInterlock) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderPixelInterlock"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT , fragmentShaderPixelInterlock) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT::fragmentShaderShadingRateInterlock"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT , fragmentShaderShadingRateInterlock) - 24usize] ;
};
impl Default for VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub ycbcrImageArrays: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceYcbcrImageArraysFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceYcbcrImageArraysFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceYcbcrImageArraysFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceYcbcrImageArraysFeaturesEXT::ycbcrImageArrays"][::std::mem::offset_of!(
        VkPhysicalDeviceYcbcrImageArraysFeaturesEXT,
        ycbcrImageArrays
    ) - 16usize];
};
impl Default for VkPhysicalDeviceYcbcrImageArraysFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkProvokingVertexModeEXT_VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT:
    VkProvokingVertexModeEXT = 0;
pub const VkProvokingVertexModeEXT_VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT:
    VkProvokingVertexModeEXT = 1;
pub const VkProvokingVertexModeEXT_VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT: VkProvokingVertexModeEXT =
    2147483647;
pub type VkProvokingVertexModeEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProvokingVertexFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub provokingVertexLast: VkBool32,
    pub transformFeedbackPreservesProvokingVertex: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProvokingVertexFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceProvokingVertexFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceProvokingVertexFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceProvokingVertexFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceProvokingVertexFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceProvokingVertexFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::provokingVertexLast"][::std::mem::offset_of!(
        VkPhysicalDeviceProvokingVertexFeaturesEXT,
        provokingVertexLast
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexFeaturesEXT::transformFeedbackPreservesProvokingVertex"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceProvokingVertexFeaturesEXT , transformFeedbackPreservesProvokingVertex) - 20usize] ;
};
impl Default for VkPhysicalDeviceProvokingVertexFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceProvokingVertexPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub provokingVertexModePerPipeline: VkBool32,
    pub transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceProvokingVertexPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceProvokingVertexPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceProvokingVertexPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceProvokingVertexPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceProvokingVertexPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceProvokingVertexPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::provokingVertexModePerPipeline"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceProvokingVertexPropertiesEXT , provokingVertexModePerPipeline) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceProvokingVertexPropertiesEXT::transformFeedbackPreservesTriangleFanProvokingVertex"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceProvokingVertexPropertiesEXT , transformFeedbackPreservesTriangleFanProvokingVertex) - 20usize] ;
};
impl Default for VkPhysicalDeviceProvokingVertexPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub provokingVertexMode: VkProvokingVertexModeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineRasterizationProvokingVertexStateCreateInfoEXT"][::std::mem::size_of::<
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
    >() - 24usize];
    ["Alignment of VkPipelineRasterizationProvokingVertexStateCreateInfoEXT"][::std::mem::align_of::<
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
    >() - 8usize];
    ["Offset of field: VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::sType"][::std::mem::offset_of!(
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::pNext"][::std::mem::offset_of!(
        VkPipelineRasterizationProvokingVertexStateCreateInfoEXT,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPipelineRasterizationProvokingVertexStateCreateInfoEXT::provokingVertexMode"] [:: std :: mem :: offset_of ! (VkPipelineRasterizationProvokingVertexStateCreateInfoEXT , provokingVertexMode) - 16usize] ;
};
impl Default for VkPipelineRasterizationProvokingVertexStateCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHeadlessSurfaceCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkHeadlessSurfaceCreateFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHeadlessSurfaceCreateInfoEXT"]
        [::std::mem::size_of::<VkHeadlessSurfaceCreateInfoEXT>() - 24usize];
    ["Alignment of VkHeadlessSurfaceCreateInfoEXT"]
        [::std::mem::align_of::<VkHeadlessSurfaceCreateInfoEXT>() - 8usize];
    ["Offset of field: VkHeadlessSurfaceCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkHeadlessSurfaceCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkHeadlessSurfaceCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkHeadlessSurfaceCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkHeadlessSurfaceCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkHeadlessSurfaceCreateInfoEXT, flags) - 16usize];
};
impl Default for VkHeadlessSurfaceCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateHeadlessSurfaceEXT = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkCreateHeadlessSurfaceEXT(
        instance: VkInstance,
        pCreateInfo: *const VkHeadlessSurfaceCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pSurface: *mut VkSurfaceKHR,
    ) -> VkResult;
}
pub use self::VkLineRasterizationMode as VkLineRasterizationModeEXT;
pub type VkPhysicalDeviceLineRasterizationFeaturesEXT = VkPhysicalDeviceLineRasterizationFeatures;
pub type VkPhysicalDeviceLineRasterizationPropertiesEXT =
    VkPhysicalDeviceLineRasterizationProperties;
pub type VkPipelineRasterizationLineStateCreateInfoEXT = VkPipelineRasterizationLineStateCreateInfo;
pub type PFN_vkCmdSetLineStippleEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetLineStippleEXT(
        commandBuffer: VkCommandBuffer,
        lineStippleFactor: u32,
        lineStipplePattern: u16,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferFloat32Atomics: VkBool32,
    pub shaderBufferFloat32AtomicAdd: VkBool32,
    pub shaderBufferFloat64Atomics: VkBool32,
    pub shaderBufferFloat64AtomicAdd: VkBool32,
    pub shaderSharedFloat32Atomics: VkBool32,
    pub shaderSharedFloat32AtomicAdd: VkBool32,
    pub shaderSharedFloat64Atomics: VkBool32,
    pub shaderSharedFloat64AtomicAdd: VkBool32,
    pub shaderImageFloat32Atomics: VkBool32,
    pub shaderImageFloat32AtomicAdd: VkBool32,
    pub sparseImageFloat32Atomics: VkBool32,
    pub sparseImageFloat32AtomicAdd: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>() - 64usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicFloatFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderAtomicFloatFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloatFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat32Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderBufferFloat32Atomics
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat32AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderBufferFloat32AtomicAdd) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat64Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderBufferFloat64Atomics
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderBufferFloat64AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderBufferFloat64AtomicAdd) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat32Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderSharedFloat32Atomics
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat32AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderSharedFloat32AtomicAdd) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat64Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderSharedFloat64Atomics
    )
        - 40usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderSharedFloat64AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderSharedFloat64AtomicAdd) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderImageFloat32Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        shaderImageFloat32Atomics
    )
        - 48usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::shaderImageFloat32AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , shaderImageFloat32AtomicAdd) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32Atomics"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloatFeaturesEXT,
        sparseImageFloat32Atomics
    )
        - 56usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloatFeaturesEXT::sparseImageFloat32AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT , sparseImageFloat32AtomicAdd) - 60usize] ;
};
impl Default for VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub type PFN_vkResetQueryPoolEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkResetQueryPoolEXT(
        device: VkDevice,
        queryPool: VkQueryPool,
        firstQuery: u32,
        queryCount: u32,
    );
}
pub type VkPhysicalDeviceIndexTypeUint8FeaturesEXT = VkPhysicalDeviceIndexTypeUint8Features;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedDynamicState: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicStateFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicStateFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicStateFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicStateFeaturesEXT::extendedDynamicState"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicStateFeaturesEXT,
        extendedDynamicState
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceExtendedDynamicStateFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetCullModeEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags),
>;
pub type PFN_vkCmdSetFrontFaceEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace),
>;
pub type PFN_vkCmdSetPrimitiveTopologyEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology),
>;
pub type PFN_vkCmdSetViewportWithCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    ),
>;
pub type PFN_vkCmdSetScissorWithCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    ),
>;
pub type PFN_vkCmdBindVertexBuffers2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdSetDepthTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthWriteEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthCompareOpEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp),
>;
pub type PFN_vkCmdSetDepthBoundsTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilTestEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32),
>;
pub type PFN_vkCmdSetStencilOpEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags);
}
unsafe extern "system" {
    pub fn vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace);
}
unsafe extern "system" {
    pub fn vkCmdSetPrimitiveTopologyEXT(
        commandBuffer: VkCommandBuffer,
        primitiveTopology: VkPrimitiveTopology,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetViewportWithCountEXT(
        commandBuffer: VkCommandBuffer,
        viewportCount: u32,
        pViewports: *const VkViewport,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetScissorWithCountEXT(
        commandBuffer: VkCommandBuffer,
        scissorCount: u32,
        pScissors: *const VkRect2D,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindVertexBuffers2EXT(
        commandBuffer: VkCommandBuffer,
        firstBinding: u32,
        bindingCount: u32,
        pBuffers: *const VkBuffer,
        pOffsets: *const VkDeviceSize,
        pSizes: *const VkDeviceSize,
        pStrides: *const VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp);
}
unsafe extern "system" {
    pub fn vkCmdSetDepthBoundsTestEnableEXT(
        commandBuffer: VkCommandBuffer,
        depthBoundsTestEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetStencilTestEnableEXT(
        commandBuffer: VkCommandBuffer,
        stencilTestEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetStencilOpEXT(
        commandBuffer: VkCommandBuffer,
        faceMask: VkStencilFaceFlags,
        failOp: VkStencilOp,
        passOp: VkStencilOp,
        depthFailOp: VkStencilOp,
        compareOp: VkCompareOp,
    );
}
pub use self::VkHostImageCopyFlagBits as VkHostImageCopyFlagBitsEXT;
pub type VkHostImageCopyFlagsEXT = VkHostImageCopyFlags;
pub type VkPhysicalDeviceHostImageCopyFeaturesEXT = VkPhysicalDeviceHostImageCopyFeatures;
pub type VkPhysicalDeviceHostImageCopyPropertiesEXT = VkPhysicalDeviceHostImageCopyProperties;
pub type VkMemoryToImageCopyEXT = VkMemoryToImageCopy;
pub type VkImageToMemoryCopyEXT = VkImageToMemoryCopy;
pub type VkCopyMemoryToImageInfoEXT = VkCopyMemoryToImageInfo;
pub type VkCopyImageToMemoryInfoEXT = VkCopyImageToMemoryInfo;
pub type VkCopyImageToImageInfoEXT = VkCopyImageToImageInfo;
pub type VkHostImageLayoutTransitionInfoEXT = VkHostImageLayoutTransitionInfo;
pub type VkSubresourceHostMemcpySizeEXT = VkSubresourceHostMemcpySize;
pub type VkHostImageCopyDevicePerformanceQueryEXT = VkHostImageCopyDevicePerformanceQuery;
pub type VkSubresourceLayout2EXT = VkSubresourceLayout2;
pub type VkImageSubresource2EXT = VkImageSubresource2;
pub type PFN_vkCopyMemoryToImageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCopyMemoryToImageInfo: *const VkCopyMemoryToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToMemoryEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCopyImageToMemoryInfo: *const VkCopyImageToMemoryInfo,
    ) -> VkResult,
>;
pub type PFN_vkCopyImageToImageEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCopyImageToImageInfo: *const VkCopyImageToImageInfo,
    ) -> VkResult,
>;
pub type PFN_vkTransitionImageLayoutEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        transitionCount: u32,
        pTransitions: *const VkHostImageLayoutTransitionInfo,
    ) -> VkResult,
>;
pub type PFN_vkGetImageSubresourceLayout2EXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    ),
>;
unsafe extern "system" {
    pub fn vkCopyMemoryToImageEXT(
        device: VkDevice,
        pCopyMemoryToImageInfo: *const VkCopyMemoryToImageInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyImageToMemoryEXT(
        device: VkDevice,
        pCopyImageToMemoryInfo: *const VkCopyImageToMemoryInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyImageToImageEXT(
        device: VkDevice,
        pCopyImageToImageInfo: *const VkCopyImageToImageInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkTransitionImageLayoutEXT(
        device: VkDevice,
        transitionCount: u32,
        pTransitions: *const VkHostImageLayoutTransitionInfo,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetImageSubresourceLayout2EXT(
        device: VkDevice,
        image: VkImage,
        pSubresource: *const VkImageSubresource2,
        pLayout: *mut VkSubresourceLayout2,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMapMemoryPlacedFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryMapPlaced: VkBool32,
    pub memoryMapRangePlaced: VkBool32,
    pub memoryUnmapReserve: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMapMemoryPlacedFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMapMemoryPlacedFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceMapMemoryPlacedFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMapMemoryPlacedFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::memoryMapPlaced"][::std::mem::offset_of!(
        VkPhysicalDeviceMapMemoryPlacedFeaturesEXT,
        memoryMapPlaced
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::memoryMapRangePlaced"][::std::mem::offset_of!(
        VkPhysicalDeviceMapMemoryPlacedFeaturesEXT,
        memoryMapRangePlaced
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedFeaturesEXT::memoryUnmapReserve"][::std::mem::offset_of!(
        VkPhysicalDeviceMapMemoryPlacedFeaturesEXT,
        memoryUnmapReserve
    )
        - 24usize];
};
impl Default for VkPhysicalDeviceMapMemoryPlacedFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMapMemoryPlacedPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minPlacedMemoryMapAlignment: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMapMemoryPlacedPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceMapMemoryPlacedPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMapMemoryPlacedPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMapMemoryPlacedPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::minPlacedMemoryMapAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMapMemoryPlacedPropertiesEXT , minPlacedMemoryMapAlignment) - 16usize] ;
};
impl Default for VkPhysicalDeviceMapMemoryPlacedPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryMapPlacedInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pPlacedAddress: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryMapPlacedInfoEXT"]
        [::std::mem::size_of::<VkMemoryMapPlacedInfoEXT>() - 24usize];
    ["Alignment of VkMemoryMapPlacedInfoEXT"]
        [::std::mem::align_of::<VkMemoryMapPlacedInfoEXT>() - 8usize];
    ["Offset of field: VkMemoryMapPlacedInfoEXT::sType"]
        [::std::mem::offset_of!(VkMemoryMapPlacedInfoEXT, sType) - 0usize];
    ["Offset of field: VkMemoryMapPlacedInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMemoryMapPlacedInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMemoryMapPlacedInfoEXT::pPlacedAddress"]
        [::std::mem::offset_of!(VkMemoryMapPlacedInfoEXT, pPlacedAddress) - 16usize];
};
impl Default for VkMemoryMapPlacedInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBufferFloat16Atomics: VkBool32,
    pub shaderBufferFloat16AtomicAdd: VkBool32,
    pub shaderBufferFloat16AtomicMinMax: VkBool32,
    pub shaderBufferFloat32AtomicMinMax: VkBool32,
    pub shaderBufferFloat64AtomicMinMax: VkBool32,
    pub shaderSharedFloat16Atomics: VkBool32,
    pub shaderSharedFloat16AtomicAdd: VkBool32,
    pub shaderSharedFloat16AtomicMinMax: VkBool32,
    pub shaderSharedFloat32AtomicMinMax: VkBool32,
    pub shaderSharedFloat64AtomicMinMax: VkBool32,
    pub shaderImageFloat32AtomicMinMax: VkBool32,
    pub sparseImageFloat32AtomicMinMax: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>() - 64usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat16Atomics"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat16Atomics) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat16AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat16AtomicAdd) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat16AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat16AtomicMinMax) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat32AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat32AtomicMinMax) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderBufferFloat64AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderBufferFloat64AtomicMinMax) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat16Atomics"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat16Atomics) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat16AtomicAdd"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat16AtomicAdd) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat16AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat16AtomicMinMax) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat32AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat32AtomicMinMax) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderSharedFloat64AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderSharedFloat64AtomicMinMax) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::shaderImageFloat32AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , shaderImageFloat32AtomicMinMax) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT::sparseImageFloat32AtomicMinMax"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT , sparseImageFloat32AtomicMinMax) - 60usize] ;
};
impl Default for VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT:
    VkPresentScalingFlagBitsEXT = 1;
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT:
    VkPresentScalingFlagBitsEXT = 2;
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_STRETCH_BIT_EXT:
    VkPresentScalingFlagBitsEXT = 4;
pub const VkPresentScalingFlagBitsEXT_VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT:
    VkPresentScalingFlagBitsEXT = 2147483647;
pub type VkPresentScalingFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkPresentScalingFlagsEXT = VkFlags;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_MIN_BIT_EXT: VkPresentGravityFlagBitsEXT =
    1;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_MAX_BIT_EXT: VkPresentGravityFlagBitsEXT =
    2;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_CENTERED_BIT_EXT:
    VkPresentGravityFlagBitsEXT = 4;
pub const VkPresentGravityFlagBitsEXT_VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT:
    VkPresentGravityFlagBitsEXT = 2147483647;
pub type VkPresentGravityFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkPresentGravityFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfacePresentModeEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentMode: VkPresentModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfacePresentModeEXT"][::std::mem::size_of::<VkSurfacePresentModeEXT>() - 24usize];
    ["Alignment of VkSurfacePresentModeEXT"]
        [::std::mem::align_of::<VkSurfacePresentModeEXT>() - 8usize];
    ["Offset of field: VkSurfacePresentModeEXT::sType"]
        [::std::mem::offset_of!(VkSurfacePresentModeEXT, sType) - 0usize];
    ["Offset of field: VkSurfacePresentModeEXT::pNext"]
        [::std::mem::offset_of!(VkSurfacePresentModeEXT, pNext) - 8usize];
    ["Offset of field: VkSurfacePresentModeEXT::presentMode"]
        [::std::mem::offset_of!(VkSurfacePresentModeEXT, presentMode) - 16usize];
};
impl Default for VkSurfacePresentModeEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfacePresentScalingCapabilitiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedPresentScaling: VkPresentScalingFlagsEXT,
    pub supportedPresentGravityX: VkPresentGravityFlagsEXT,
    pub supportedPresentGravityY: VkPresentGravityFlagsEXT,
    pub minScaledImageExtent: VkExtent2D,
    pub maxScaledImageExtent: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfacePresentScalingCapabilitiesEXT"]
        [::std::mem::size_of::<VkSurfacePresentScalingCapabilitiesEXT>() - 48usize];
    ["Alignment of VkSurfacePresentScalingCapabilitiesEXT"]
        [::std::mem::align_of::<VkSurfacePresentScalingCapabilitiesEXT>() - 8usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::sType"]
        [::std::mem::offset_of!(VkSurfacePresentScalingCapabilitiesEXT, sType) - 0usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::pNext"]
        [::std::mem::offset_of!(VkSurfacePresentScalingCapabilitiesEXT, pNext) - 8usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::supportedPresentScaling"][::std::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        supportedPresentScaling
    )
        - 16usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::supportedPresentGravityX"][::std::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        supportedPresentGravityX
    )
        - 20usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::supportedPresentGravityY"][::std::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        supportedPresentGravityY
    )
        - 24usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::minScaledImageExtent"][::std::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        minScaledImageExtent
    ) - 28usize];
    ["Offset of field: VkSurfacePresentScalingCapabilitiesEXT::maxScaledImageExtent"][::std::mem::offset_of!(
        VkSurfacePresentScalingCapabilitiesEXT,
        maxScaledImageExtent
    ) - 36usize];
};
impl Default for VkSurfacePresentScalingCapabilitiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfacePresentModeCompatibilityEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *mut VkPresentModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfacePresentModeCompatibilityEXT"]
        [::std::mem::size_of::<VkSurfacePresentModeCompatibilityEXT>() - 32usize];
    ["Alignment of VkSurfacePresentModeCompatibilityEXT"]
        [::std::mem::align_of::<VkSurfacePresentModeCompatibilityEXT>() - 8usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::sType"]
        [::std::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, sType) - 0usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::pNext"]
        [::std::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, pNext) - 8usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::presentModeCount"]
        [::std::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, presentModeCount) - 16usize];
    ["Offset of field: VkSurfacePresentModeCompatibilityEXT::pPresentModes"]
        [::std::mem::offset_of!(VkSurfacePresentModeCompatibilityEXT, pPresentModes) - 24usize];
};
impl Default for VkSurfacePresentModeCompatibilityEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub swapchainMaintenance1: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT::swapchainMaintenance1"][::std::mem::offset_of!(
        VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT,
        swapchainMaintenance1
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainPresentFenceInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pFences: *const VkFence,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentFenceInfoEXT"]
        [::std::mem::size_of::<VkSwapchainPresentFenceInfoEXT>() - 32usize];
    ["Alignment of VkSwapchainPresentFenceInfoEXT"]
        [::std::mem::align_of::<VkSwapchainPresentFenceInfoEXT>() - 8usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::sType"]
        [::std::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::swapchainCount"]
        [::std::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, swapchainCount) - 16usize];
    ["Offset of field: VkSwapchainPresentFenceInfoEXT::pFences"]
        [::std::mem::offset_of!(VkSwapchainPresentFenceInfoEXT, pFences) - 24usize];
};
impl Default for VkSwapchainPresentFenceInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainPresentModesCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *const VkPresentModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentModesCreateInfoEXT"]
        [::std::mem::size_of::<VkSwapchainPresentModesCreateInfoEXT>() - 32usize];
    ["Alignment of VkSwapchainPresentModesCreateInfoEXT"]
        [::std::mem::align_of::<VkSwapchainPresentModesCreateInfoEXT>() - 8usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::presentModeCount"]
        [::std::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, presentModeCount) - 16usize];
    ["Offset of field: VkSwapchainPresentModesCreateInfoEXT::pPresentModes"]
        [::std::mem::offset_of!(VkSwapchainPresentModesCreateInfoEXT, pPresentModes) - 24usize];
};
impl Default for VkSwapchainPresentModesCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainPresentModeInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchainCount: u32,
    pub pPresentModes: *const VkPresentModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentModeInfoEXT"]
        [::std::mem::size_of::<VkSwapchainPresentModeInfoEXT>() - 32usize];
    ["Alignment of VkSwapchainPresentModeInfoEXT"]
        [::std::mem::align_of::<VkSwapchainPresentModeInfoEXT>() - 8usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::sType"]
        [::std::mem::offset_of!(VkSwapchainPresentModeInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSwapchainPresentModeInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::swapchainCount"]
        [::std::mem::offset_of!(VkSwapchainPresentModeInfoEXT, swapchainCount) - 16usize];
    ["Offset of field: VkSwapchainPresentModeInfoEXT::pPresentModes"]
        [::std::mem::offset_of!(VkSwapchainPresentModeInfoEXT, pPresentModes) - 24usize];
};
impl Default for VkSwapchainPresentModeInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainPresentScalingCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub scalingBehavior: VkPresentScalingFlagsEXT,
    pub presentGravityX: VkPresentGravityFlagsEXT,
    pub presentGravityY: VkPresentGravityFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentScalingCreateInfoEXT"]
        [::std::mem::size_of::<VkSwapchainPresentScalingCreateInfoEXT>() - 32usize];
    ["Alignment of VkSwapchainPresentScalingCreateInfoEXT"]
        [::std::mem::align_of::<VkSwapchainPresentScalingCreateInfoEXT>() - 8usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::scalingBehavior"]
        [::std::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, scalingBehavior) - 16usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::presentGravityX"]
        [::std::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, presentGravityX) - 20usize];
    ["Offset of field: VkSwapchainPresentScalingCreateInfoEXT::presentGravityY"]
        [::std::mem::offset_of!(VkSwapchainPresentScalingCreateInfoEXT, presentGravityY) - 24usize];
};
impl Default for VkSwapchainPresentScalingCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkReleaseSwapchainImagesInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub swapchain: VkSwapchainKHR,
    pub imageIndexCount: u32,
    pub pImageIndices: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkReleaseSwapchainImagesInfoEXT"]
        [::std::mem::size_of::<VkReleaseSwapchainImagesInfoEXT>() - 40usize];
    ["Alignment of VkReleaseSwapchainImagesInfoEXT"]
        [::std::mem::align_of::<VkReleaseSwapchainImagesInfoEXT>() - 8usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::sType"]
        [::std::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, sType) - 0usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::pNext"]
        [::std::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, pNext) - 8usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::swapchain"]
        [::std::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, swapchain) - 16usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::imageIndexCount"]
        [::std::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, imageIndexCount) - 24usize];
    ["Offset of field: VkReleaseSwapchainImagesInfoEXT::pImageIndices"]
        [::std::mem::offset_of!(VkReleaseSwapchainImagesInfoEXT, pImageIndices) - 32usize];
};
impl Default for VkReleaseSwapchainImagesInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkReleaseSwapchainImagesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pReleaseInfo: *const VkReleaseSwapchainImagesInfoEXT,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkReleaseSwapchainImagesEXT(
        device: VkDevice,
        pReleaseInfo: *const VkReleaseSwapchainImagesInfoEXT,
    ) -> VkResult;
}
pub type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT =
    VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutNV_T {
    _unused: [u8; 0],
}
pub type VkIndirectCommandsLayoutNV = *mut VkIndirectCommandsLayoutNV_T;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV:
    VkIndirectCommandsTokenTypeNV = 0;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV:
    VkIndirectCommandsTokenTypeNV = 1;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV:
    VkIndirectCommandsTokenTypeNV = 2;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV:
    VkIndirectCommandsTokenTypeNV = 3;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV:
    VkIndirectCommandsTokenTypeNV = 4;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV:
    VkIndirectCommandsTokenTypeNV = 5;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV:
    VkIndirectCommandsTokenTypeNV = 6;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV:
    VkIndirectCommandsTokenTypeNV = 7;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV:
    VkIndirectCommandsTokenTypeNV = 1000328000;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV:
    VkIndirectCommandsTokenTypeNV = 1000428003;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV:
    VkIndirectCommandsTokenTypeNV = 1000428004;
pub const VkIndirectCommandsTokenTypeNV_VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV:
    VkIndirectCommandsTokenTypeNV = 2147483647;
pub type VkIndirectCommandsTokenTypeNV = ::std::os::raw::c_uint;
pub const VkIndirectStateFlagBitsNV_VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV:
    VkIndirectStateFlagBitsNV = 1;
pub const VkIndirectStateFlagBitsNV_VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV:
    VkIndirectStateFlagBitsNV = 2147483647;
pub type VkIndirectStateFlagBitsNV = ::std::os::raw::c_uint;
pub type VkIndirectStateFlagsNV = VkFlags;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 1 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 2 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 4 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV : VkIndirectCommandsLayoutUsageFlagBitsNV = 2147483647 ;
pub type VkIndirectCommandsLayoutUsageFlagBitsNV = ::std::os::raw::c_uint;
pub type VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxGraphicsShaderGroupCount: u32,
    pub maxIndirectSequenceCount: u32,
    pub maxIndirectCommandsTokenCount: u32,
    pub maxIndirectCommandsStreamCount: u32,
    pub maxIndirectCommandsTokenOffset: u32,
    pub maxIndirectCommandsStreamStride: u32,
    pub minSequencesCountBufferOffsetAlignment: u32,
    pub minSequencesIndexBufferOffsetAlignment: u32,
    pub minIndirectCommandsBufferOffsetAlignment: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>() - 56usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxGraphicsShaderGroupCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxGraphicsShaderGroupCount) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectSequenceCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectSequenceCount) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsTokenCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsTokenCount) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsStreamCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsStreamCount) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsTokenOffset"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsTokenOffset) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::maxIndirectCommandsStreamStride"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , maxIndirectCommandsStreamStride) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minSequencesCountBufferOffsetAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , minSequencesCountBufferOffsetAlignment) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minSequencesIndexBufferOffsetAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , minSequencesIndexBufferOffsetAlignment) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV::minIndirectCommandsBufferOffsetAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV , minIndirectCommandsBufferOffsetAlignment) - 48usize] ;
};
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceGeneratedCommands: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV::deviceGeneratedCommands"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV , deviceGeneratedCommands) - 16usize] ;
};
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsShaderGroupCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
    pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsShaderGroupCreateInfoNV"]
        [::std::mem::size_of::<VkGraphicsShaderGroupCreateInfoNV>() - 48usize];
    ["Alignment of VkGraphicsShaderGroupCreateInfoNV"]
        [::std::mem::align_of::<VkGraphicsShaderGroupCreateInfoNV>() - 8usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::stageCount"]
        [::std::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, stageCount) - 16usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pStages"]
        [::std::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pStages) - 24usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pVertexInputState"]
        [::std::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pVertexInputState) - 32usize];
    ["Offset of field: VkGraphicsShaderGroupCreateInfoNV::pTessellationState"]
        [::std::mem::offset_of!(VkGraphicsShaderGroupCreateInfoNV, pTessellationState) - 40usize];
};
impl Default for VkGraphicsShaderGroupCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub groupCount: u32,
    pub pGroups: *const VkGraphicsShaderGroupCreateInfoNV,
    pub pipelineCount: u32,
    pub pPipelines: *const VkPipeline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsPipelineShaderGroupsCreateInfoNV"]
        [::std::mem::size_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>() - 48usize];
    ["Alignment of VkGraphicsPipelineShaderGroupsCreateInfoNV"]
        [::std::mem::align_of::<VkGraphicsPipelineShaderGroupsCreateInfoNV>() - 8usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::groupCount"]
        [::std::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, groupCount) - 16usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pGroups"]
        [::std::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, pGroups) - 24usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pipelineCount"][::std::mem::offset_of!(
        VkGraphicsPipelineShaderGroupsCreateInfoNV,
        pipelineCount
    ) - 32usize];
    ["Offset of field: VkGraphicsPipelineShaderGroupsCreateInfoNV::pPipelines"]
        [::std::mem::offset_of!(VkGraphicsPipelineShaderGroupsCreateInfoNV, pPipelines) - 40usize];
};
impl Default for VkGraphicsPipelineShaderGroupsCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBindShaderGroupIndirectCommandNV {
    pub groupIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindShaderGroupIndirectCommandNV"]
        [::std::mem::size_of::<VkBindShaderGroupIndirectCommandNV>() - 4usize];
    ["Alignment of VkBindShaderGroupIndirectCommandNV"]
        [::std::mem::align_of::<VkBindShaderGroupIndirectCommandNV>() - 4usize];
    ["Offset of field: VkBindShaderGroupIndirectCommandNV::groupIndex"]
        [::std::mem::offset_of!(VkBindShaderGroupIndirectCommandNV, groupIndex) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindIndexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub indexType: VkIndexType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindIndexBufferIndirectCommandNV"]
        [::std::mem::size_of::<VkBindIndexBufferIndirectCommandNV>() - 16usize];
    ["Alignment of VkBindIndexBufferIndirectCommandNV"]
        [::std::mem::align_of::<VkBindIndexBufferIndirectCommandNV>() - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandNV::bufferAddress"]
        [::std::mem::offset_of!(VkBindIndexBufferIndirectCommandNV, bufferAddress) - 0usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandNV::size"]
        [::std::mem::offset_of!(VkBindIndexBufferIndirectCommandNV, size) - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandNV::indexType"]
        [::std::mem::offset_of!(VkBindIndexBufferIndirectCommandNV, indexType) - 12usize];
};
impl Default for VkBindIndexBufferIndirectCommandNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBindVertexBufferIndirectCommandNV {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub stride: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindVertexBufferIndirectCommandNV"]
        [::std::mem::size_of::<VkBindVertexBufferIndirectCommandNV>() - 16usize];
    ["Alignment of VkBindVertexBufferIndirectCommandNV"]
        [::std::mem::align_of::<VkBindVertexBufferIndirectCommandNV>() - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandNV::bufferAddress"]
        [::std::mem::offset_of!(VkBindVertexBufferIndirectCommandNV, bufferAddress) - 0usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandNV::size"]
        [::std::mem::offset_of!(VkBindVertexBufferIndirectCommandNV, size) - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandNV::stride"]
        [::std::mem::offset_of!(VkBindVertexBufferIndirectCommandNV, stride) - 12usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSetStateFlagsIndirectCommandNV {
    pub data: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetStateFlagsIndirectCommandNV"]
        [::std::mem::size_of::<VkSetStateFlagsIndirectCommandNV>() - 4usize];
    ["Alignment of VkSetStateFlagsIndirectCommandNV"]
        [::std::mem::align_of::<VkSetStateFlagsIndirectCommandNV>() - 4usize];
    ["Offset of field: VkSetStateFlagsIndirectCommandNV::data"]
        [::std::mem::offset_of!(VkSetStateFlagsIndirectCommandNV, data) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsStreamNV {
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsStreamNV"]
        [::std::mem::size_of::<VkIndirectCommandsStreamNV>() - 16usize];
    ["Alignment of VkIndirectCommandsStreamNV"]
        [::std::mem::align_of::<VkIndirectCommandsStreamNV>() - 8usize];
    ["Offset of field: VkIndirectCommandsStreamNV::buffer"]
        [::std::mem::offset_of!(VkIndirectCommandsStreamNV, buffer) - 0usize];
    ["Offset of field: VkIndirectCommandsStreamNV::offset"]
        [::std::mem::offset_of!(VkIndirectCommandsStreamNV, offset) - 8usize];
};
impl Default for VkIndirectCommandsStreamNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutTokenNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub tokenType: VkIndirectCommandsTokenTypeNV,
    pub stream: u32,
    pub offset: u32,
    pub vertexBindingUnit: u32,
    pub vertexDynamicStride: VkBool32,
    pub pushconstantPipelineLayout: VkPipelineLayout,
    pub pushconstantShaderStageFlags: VkShaderStageFlags,
    pub pushconstantOffset: u32,
    pub pushconstantSize: u32,
    pub indirectStateFlags: VkIndirectStateFlagsNV,
    pub indexTypeCount: u32,
    pub pIndexTypes: *const VkIndexType,
    pub pIndexTypeValues: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutTokenNV"]
        [::std::mem::size_of::<VkIndirectCommandsLayoutTokenNV>() - 88usize];
    ["Alignment of VkIndirectCommandsLayoutTokenNV"]
        [::std::mem::align_of::<VkIndirectCommandsLayoutTokenNV>() - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::sType"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pNext"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pNext) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::tokenType"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, tokenType) - 16usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::stream"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, stream) - 20usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::offset"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, offset) - 24usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::vertexBindingUnit"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, vertexBindingUnit) - 28usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::vertexDynamicStride"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, vertexDynamicStride) - 32usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantPipelineLayout"][::std::mem::offset_of!(
        VkIndirectCommandsLayoutTokenNV,
        pushconstantPipelineLayout
    ) - 40usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantShaderStageFlags"][::std::mem::offset_of!(
        VkIndirectCommandsLayoutTokenNV,
        pushconstantShaderStageFlags
    ) - 48usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantOffset"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pushconstantOffset) - 52usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pushconstantSize"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pushconstantSize) - 56usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::indirectStateFlags"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, indirectStateFlags) - 60usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::indexTypeCount"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, indexTypeCount) - 64usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pIndexTypes"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pIndexTypes) - 72usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenNV::pIndexTypeValues"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenNV, pIndexTypeValues) - 80usize];
};
impl Default for VkIndirectCommandsLayoutTokenNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkIndirectCommandsLayoutUsageFlagsNV,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub tokenCount: u32,
    pub pTokens: *const VkIndirectCommandsLayoutTokenNV,
    pub streamCount: u32,
    pub pStreamStrides: *const u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutCreateInfoNV"]
        [::std::mem::size_of::<VkIndirectCommandsLayoutCreateInfoNV>() - 56usize];
    ["Alignment of VkIndirectCommandsLayoutCreateInfoNV"]
        [::std::mem::align_of::<VkIndirectCommandsLayoutCreateInfoNV>() - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, flags) - 16usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pipelineBindPoint"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, pipelineBindPoint) - 20usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::tokenCount"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, tokenCount) - 24usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pTokens"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, pTokens) - 32usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::streamCount"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, streamCount) - 40usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoNV::pStreamStrides"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoNV, pStreamStrides) - 48usize];
};
impl Default for VkIndirectCommandsLayoutCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub streamCount: u32,
    pub pStreams: *const VkIndirectCommandsStreamNV,
    pub sequencesCount: u32,
    pub preprocessBuffer: VkBuffer,
    pub preprocessOffset: VkDeviceSize,
    pub preprocessSize: VkDeviceSize,
    pub sequencesCountBuffer: VkBuffer,
    pub sequencesCountOffset: VkDeviceSize,
    pub sequencesIndexBuffer: VkBuffer,
    pub sequencesIndexOffset: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsInfoNV"]
        [::std::mem::size_of::<VkGeneratedCommandsInfoNV>() - 120usize];
    ["Alignment of VkGeneratedCommandsInfoNV"]
        [::std::mem::align_of::<VkGeneratedCommandsInfoNV>() - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sType"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pNext"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, pNext) - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pipelineBindPoint"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, pipelineBindPoint) - 16usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pipeline"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, pipeline) - 24usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::indirectCommandsLayout"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, indirectCommandsLayout) - 32usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::streamCount"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, streamCount) - 40usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::pStreams"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, pStreams) - 48usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesCount"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesCount) - 56usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::preprocessBuffer"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, preprocessBuffer) - 64usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::preprocessOffset"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, preprocessOffset) - 72usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::preprocessSize"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, preprocessSize) - 80usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesCountBuffer"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesCountBuffer) - 88usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesCountOffset"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesCountOffset) - 96usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesIndexBuffer"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesIndexBuffer) - 104usize];
    ["Offset of field: VkGeneratedCommandsInfoNV::sequencesIndexOffset"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoNV, sequencesIndexOffset) - 112usize];
};
impl Default for VkGeneratedCommandsInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    pub maxSequencesCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsMemoryRequirementsInfoNV"]
        [::std::mem::size_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>() - 48usize];
    ["Alignment of VkGeneratedCommandsMemoryRequirementsInfoNV"]
        [::std::mem::align_of::<VkGeneratedCommandsMemoryRequirementsInfoNV>() - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::sType"]
        [::std::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoNV, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::pNext"]
        [::std::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoNV, pNext) - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::pipelineBindPoint"][::std::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoNV,
        pipelineBindPoint
    )
        - 16usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::pipeline"]
        [::std::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoNV, pipeline) - 24usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::indirectCommandsLayout"][::std::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoNV,
        indirectCommandsLayout
    )
        - 32usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoNV::maxSequencesCount"][::std::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoNV,
        maxSequencesCount
    )
        - 40usize];
};
impl Default for VkGeneratedCommandsMemoryRequirementsInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdPreprocessGeneratedCommandsNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdExecuteGeneratedCommandsNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    ),
>;
pub type PFN_vkCmdBindPipelineShaderGroupNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
        groupIndex: u32,
    ),
>;
pub type PFN_vkCreateIndirectCommandsLayoutNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectCommandsLayoutNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
unsafe extern "system" {
    pub fn vkGetGeneratedCommandsMemoryRequirementsNV(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoNV,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkCmdPreprocessGeneratedCommandsNV(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    );
}
unsafe extern "system" {
    pub fn vkCmdExecuteGeneratedCommandsNV(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoNV,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindPipelineShaderGroupNV(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
        groupIndex: u32,
    );
}
unsafe extern "system" {
    pub fn vkCreateIndirectCommandsLayoutNV(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyIndirectCommandsLayoutNV(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub inheritedViewportScissor2D: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInheritedViewportScissorFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceInheritedViewportScissorFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceInheritedViewportScissorFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceInheritedViewportScissorFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceInheritedViewportScissorFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceInheritedViewportScissorFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceInheritedViewportScissorFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceInheritedViewportScissorFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceInheritedViewportScissorFeaturesNV::inheritedViewportScissor2D"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceInheritedViewportScissorFeaturesNV , inheritedViewportScissor2D) - 16usize] ;
};
impl Default for VkPhysicalDeviceInheritedViewportScissorFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceViewportScissorInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub viewportScissor2D: VkBool32,
    pub viewportDepthCount: u32,
    pub pViewportDepths: *const VkViewport,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceViewportScissorInfoNV"]
        [::std::mem::size_of::<VkCommandBufferInheritanceViewportScissorInfoNV>() - 32usize];
    ["Alignment of VkCommandBufferInheritanceViewportScissorInfoNV"]
        [::std::mem::align_of::<VkCommandBufferInheritanceViewportScissorInfoNV>() - 8usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::sType"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceViewportScissorInfoNV, sType) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::pNext"]
        [::std::mem::offset_of!(VkCommandBufferInheritanceViewportScissorInfoNV, pNext) - 8usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::viewportScissor2D"][::std::mem::offset_of!(
        VkCommandBufferInheritanceViewportScissorInfoNV,
        viewportScissor2D
    )
        - 16usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::viewportDepthCount"][::std::mem::offset_of!(
        VkCommandBufferInheritanceViewportScissorInfoNV,
        viewportDepthCount
    )
        - 20usize];
    ["Offset of field: VkCommandBufferInheritanceViewportScissorInfoNV::pViewportDepths"][::std::mem::offset_of!(
        VkCommandBufferInheritanceViewportScissorInfoNV,
        pViewportDepths
    )
        - 24usize];
};
impl Default for VkCommandBufferInheritanceViewportScissorInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub texelBufferAlignment: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT::texelBufferAlignment"][::std::mem::offset_of!(
        VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT,
        texelBufferAlignment
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT =
    VkPhysicalDeviceTexelBufferAlignmentProperties;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassTransformBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassTransformBeginInfoQCOM"]
        [::std::mem::size_of::<VkRenderPassTransformBeginInfoQCOM>() - 24usize];
    ["Alignment of VkRenderPassTransformBeginInfoQCOM"]
        [::std::mem::align_of::<VkRenderPassTransformBeginInfoQCOM>() - 8usize];
    ["Offset of field: VkRenderPassTransformBeginInfoQCOM::sType"]
        [::std::mem::offset_of!(VkRenderPassTransformBeginInfoQCOM, sType) - 0usize];
    ["Offset of field: VkRenderPassTransformBeginInfoQCOM::pNext"]
        [::std::mem::offset_of!(VkRenderPassTransformBeginInfoQCOM, pNext) - 8usize];
    ["Offset of field: VkRenderPassTransformBeginInfoQCOM::transform"]
        [::std::mem::offset_of!(VkRenderPassTransformBeginInfoQCOM, transform) - 16usize];
};
impl Default for VkRenderPassTransformBeginInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
    pub renderArea: VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCommandBufferInheritanceRenderPassTransformInfoQCOM"]
        [::std::mem::size_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>() - 40usize];
    ["Alignment of VkCommandBufferInheritanceRenderPassTransformInfoQCOM"]
        [::std::mem::align_of::<VkCommandBufferInheritanceRenderPassTransformInfoQCOM>() - 8usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::sType"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::pNext"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        pNext
    ) - 8usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::transform"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        transform
    )
        - 16usize];
    ["Offset of field: VkCommandBufferInheritanceRenderPassTransformInfoQCOM::renderArea"][::std::mem::offset_of!(
        VkCommandBufferInheritanceRenderPassTransformInfoQCOM,
        renderArea
    )
        - 20usize];
};
impl Default for VkCommandBufferInheritanceRenderPassTransformInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT : VkDepthBiasRepresentationEXT = 0 ;
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT : VkDepthBiasRepresentationEXT = 1 ;
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT:
    VkDepthBiasRepresentationEXT = 2;
pub const VkDepthBiasRepresentationEXT_VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT:
    VkDepthBiasRepresentationEXT = 2147483647;
pub type VkDepthBiasRepresentationEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthBiasControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthBiasControl: VkBool32,
    pub leastRepresentableValueForceUnormRepresentation: VkBool32,
    pub floatRepresentation: VkBool32,
    pub depthBiasExact: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthBiasControlFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDepthBiasControlFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceDepthBiasControlFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDepthBiasControlFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthBiasControlFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthBiasControlFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::depthBiasControl"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthBiasControlFeaturesEXT,
        depthBiasControl
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::leastRepresentableValueForceUnormRepresentation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDepthBiasControlFeaturesEXT , leastRepresentableValueForceUnormRepresentation) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::floatRepresentation"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthBiasControlFeaturesEXT,
        floatRepresentation
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceDepthBiasControlFeaturesEXT::depthBiasExact"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthBiasControlFeaturesEXT,
        depthBiasExact
    ) - 28usize];
};
impl Default for VkPhysicalDeviceDepthBiasControlFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDepthBiasInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub depthBiasConstantFactor: f32,
    pub depthBiasClamp: f32,
    pub depthBiasSlopeFactor: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDepthBiasInfoEXT"][::std::mem::size_of::<VkDepthBiasInfoEXT>() - 32usize];
    ["Alignment of VkDepthBiasInfoEXT"][::std::mem::align_of::<VkDepthBiasInfoEXT>() - 8usize];
    ["Offset of field: VkDepthBiasInfoEXT::sType"]
        [::std::mem::offset_of!(VkDepthBiasInfoEXT, sType) - 0usize];
    ["Offset of field: VkDepthBiasInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDepthBiasInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDepthBiasInfoEXT::depthBiasConstantFactor"]
        [::std::mem::offset_of!(VkDepthBiasInfoEXT, depthBiasConstantFactor) - 16usize];
    ["Offset of field: VkDepthBiasInfoEXT::depthBiasClamp"]
        [::std::mem::offset_of!(VkDepthBiasInfoEXT, depthBiasClamp) - 20usize];
    ["Offset of field: VkDepthBiasInfoEXT::depthBiasSlopeFactor"]
        [::std::mem::offset_of!(VkDepthBiasInfoEXT, depthBiasSlopeFactor) - 24usize];
};
impl Default for VkDepthBiasInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDepthBiasRepresentationInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub depthBiasRepresentation: VkDepthBiasRepresentationEXT,
    pub depthBiasExact: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDepthBiasRepresentationInfoEXT"]
        [::std::mem::size_of::<VkDepthBiasRepresentationInfoEXT>() - 24usize];
    ["Alignment of VkDepthBiasRepresentationInfoEXT"]
        [::std::mem::align_of::<VkDepthBiasRepresentationInfoEXT>() - 8usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::sType"]
        [::std::mem::offset_of!(VkDepthBiasRepresentationInfoEXT, sType) - 0usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDepthBiasRepresentationInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::depthBiasRepresentation"][::std::mem::offset_of!(
        VkDepthBiasRepresentationInfoEXT,
        depthBiasRepresentation
    ) - 16usize];
    ["Offset of field: VkDepthBiasRepresentationInfoEXT::depthBiasExact"]
        [::std::mem::offset_of!(VkDepthBiasRepresentationInfoEXT, depthBiasExact) - 20usize];
};
impl Default for VkDepthBiasRepresentationInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetDepthBias2EXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pDepthBiasInfo: *const VkDepthBiasInfoEXT),
>;
unsafe extern "system" {
    pub fn vkCmdSetDepthBias2EXT(
        commandBuffer: VkCommandBuffer,
        pDepthBiasInfo: *const VkDepthBiasInfoEXT,
    );
}
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT:
    VkDeviceMemoryReportEventTypeEXT = 0;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT:
    VkDeviceMemoryReportEventTypeEXT = 1;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT:
    VkDeviceMemoryReportEventTypeEXT = 2;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT:
    VkDeviceMemoryReportEventTypeEXT = 3;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT : VkDeviceMemoryReportEventTypeEXT = 4 ;
pub const VkDeviceMemoryReportEventTypeEXT_VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT:
    VkDeviceMemoryReportEventTypeEXT = 2147483647;
pub type VkDeviceMemoryReportEventTypeEXT = ::std::os::raw::c_uint;
pub type VkDeviceMemoryReportFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceMemoryReport: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDeviceMemoryReportFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDeviceMemoryReportFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDeviceMemoryReportFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceMemoryReportFeaturesEXT::deviceMemoryReport"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceMemoryReportFeaturesEXT,
        deviceMemoryReport
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceDeviceMemoryReportFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceMemoryReportCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkDeviceMemoryReportFlagsEXT,
    pub type_: VkDeviceMemoryReportEventTypeEXT,
    pub memoryObjectId: u64,
    pub size: VkDeviceSize,
    pub objectType: VkObjectType,
    pub objectHandle: u64,
    pub heapIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceMemoryReportCallbackDataEXT"]
        [::std::mem::size_of::<VkDeviceMemoryReportCallbackDataEXT>() - 64usize];
    ["Alignment of VkDeviceMemoryReportCallbackDataEXT"]
        [::std::mem::align_of::<VkDeviceMemoryReportCallbackDataEXT>() - 8usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::sType"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, sType) - 0usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::pNext"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, pNext) - 8usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::flags"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, flags) - 16usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::type_"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, type_) - 20usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::memoryObjectId"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, memoryObjectId) - 24usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::size"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, size) - 32usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::objectType"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, objectType) - 40usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::objectHandle"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, objectHandle) - 48usize];
    ["Offset of field: VkDeviceMemoryReportCallbackDataEXT::heapIndex"]
        [::std::mem::offset_of!(VkDeviceMemoryReportCallbackDataEXT, heapIndex) - 56usize];
};
impl Default for VkDeviceMemoryReportCallbackDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkDeviceMemoryReportCallbackEXT = ::std::option::Option<
    unsafe extern "system" fn(
        pCallbackData: *const VkDeviceMemoryReportCallbackDataEXT,
        pUserData: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceDeviceMemoryReportCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceMemoryReportFlagsEXT,
    pub pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT,
    pub pUserData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceDeviceMemoryReportCreateInfoEXT"]
        [::std::mem::size_of::<VkDeviceDeviceMemoryReportCreateInfoEXT>() - 40usize];
    ["Alignment of VkDeviceDeviceMemoryReportCreateInfoEXT"]
        [::std::mem::align_of::<VkDeviceDeviceMemoryReportCreateInfoEXT>() - 8usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::pfnUserCallback"][::std::mem::offset_of!(
        VkDeviceDeviceMemoryReportCreateInfoEXT,
        pfnUserCallback
    ) - 24usize];
    ["Offset of field: VkDeviceDeviceMemoryReportCreateInfoEXT::pUserData"]
        [::std::mem::offset_of!(VkDeviceDeviceMemoryReportCreateInfoEXT, pUserData) - 32usize];
};
impl Default for VkDeviceDeviceMemoryReportCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkAcquireDrmDisplayEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        display: VkDisplayKHR,
    ) -> VkResult,
>;
pub type PFN_vkGetDrmDisplayEXT = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        connectorId: u32,
        display: *mut VkDisplayKHR,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkAcquireDrmDisplayEXT(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        display: VkDisplayKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDrmDisplayEXT(
        physicalDevice: VkPhysicalDevice,
        drmFd: i32,
        connectorId: u32,
        display: *mut VkDisplayKHR,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustBufferAccess2: VkBool32,
    pub robustImageAccess2: VkBool32,
    pub nullDescriptor: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRobustness2FeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceRobustness2FeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceRobustness2FeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceRobustness2FeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRobustness2FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRobustness2FeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesEXT::robustBufferAccess2"][::std::mem::offset_of!(
        VkPhysicalDeviceRobustness2FeaturesEXT,
        robustBufferAccess2
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesEXT::robustImageAccess2"][::std::mem::offset_of!(
        VkPhysicalDeviceRobustness2FeaturesEXT,
        robustImageAccess2
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceRobustness2FeaturesEXT::nullDescriptor"]
        [::std::mem::offset_of!(VkPhysicalDeviceRobustness2FeaturesEXT, nullDescriptor) - 24usize];
};
impl Default for VkPhysicalDeviceRobustness2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRobustness2PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub robustStorageBufferAccessSizeAlignment: VkDeviceSize,
    pub robustUniformBufferAccessSizeAlignment: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRobustness2PropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceRobustness2PropertiesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceRobustness2PropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceRobustness2PropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRobustness2PropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRobustness2PropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesEXT::robustStorageBufferAccessSizeAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRobustness2PropertiesEXT , robustStorageBufferAccessSizeAlignment) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceRobustness2PropertiesEXT::robustUniformBufferAccessSizeAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRobustness2PropertiesEXT , robustUniformBufferAccessSizeAlignment) - 24usize] ;
};
impl Default for VkPhysicalDeviceRobustness2PropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCustomBorderColorCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub customBorderColor: VkClearColorValue,
    pub format: VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCustomBorderColorCreateInfoEXT"]
        [::std::mem::size_of::<VkSamplerCustomBorderColorCreateInfoEXT>() - 40usize];
    ["Alignment of VkSamplerCustomBorderColorCreateInfoEXT"]
        [::std::mem::align_of::<VkSamplerCustomBorderColorCreateInfoEXT>() - 8usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkSamplerCustomBorderColorCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSamplerCustomBorderColorCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::customBorderColor"][::std::mem::offset_of!(
        VkSamplerCustomBorderColorCreateInfoEXT,
        customBorderColor
    ) - 16usize];
    ["Offset of field: VkSamplerCustomBorderColorCreateInfoEXT::format"]
        [::std::mem::offset_of!(VkSamplerCustomBorderColorCreateInfoEXT, format) - 32usize];
};
impl Default for VkSamplerCustomBorderColorCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxCustomBorderColorSamplers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCustomBorderColorPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceCustomBorderColorPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceCustomBorderColorPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCustomBorderColorPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCustomBorderColorPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorPropertiesEXT::maxCustomBorderColorSamplers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCustomBorderColorPropertiesEXT , maxCustomBorderColorSamplers) - 16usize] ;
};
impl Default for VkPhysicalDeviceCustomBorderColorPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub customBorderColors: VkBool32,
    pub customBorderColorWithoutFormat: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCustomBorderColorFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceCustomBorderColorFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceCustomBorderColorFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCustomBorderColorFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCustomBorderColorFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::customBorderColors"][::std::mem::offset_of!(
        VkPhysicalDeviceCustomBorderColorFeaturesEXT,
        customBorderColors
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceCustomBorderColorFeaturesEXT::customBorderColorWithoutFormat"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCustomBorderColorFeaturesEXT , customBorderColorWithoutFormat) - 20usize] ;
};
impl Default for VkPhysicalDeviceCustomBorderColorFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePresentBarrierFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentBarrier: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentBarrierFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDevicePresentBarrierFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDevicePresentBarrierFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDevicePresentBarrierFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDevicePresentBarrierFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentBarrierFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentBarrierFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentBarrierFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePresentBarrierFeaturesNV::presentBarrier"][::std::mem::offset_of!(
        VkPhysicalDevicePresentBarrierFeaturesNV,
        presentBarrier
    ) - 16usize];
};
impl Default for VkPhysicalDevicePresentBarrierFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSurfaceCapabilitiesPresentBarrierNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentBarrierSupported: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSurfaceCapabilitiesPresentBarrierNV"]
        [::std::mem::size_of::<VkSurfaceCapabilitiesPresentBarrierNV>() - 24usize];
    ["Alignment of VkSurfaceCapabilitiesPresentBarrierNV"]
        [::std::mem::align_of::<VkSurfaceCapabilitiesPresentBarrierNV>() - 8usize];
    ["Offset of field: VkSurfaceCapabilitiesPresentBarrierNV::sType"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesPresentBarrierNV, sType) - 0usize];
    ["Offset of field: VkSurfaceCapabilitiesPresentBarrierNV::pNext"]
        [::std::mem::offset_of!(VkSurfaceCapabilitiesPresentBarrierNV, pNext) - 8usize];
    ["Offset of field: VkSurfaceCapabilitiesPresentBarrierNV::presentBarrierSupported"][::std::mem::offset_of!(
        VkSurfaceCapabilitiesPresentBarrierNV,
        presentBarrierSupported
    )
        - 16usize];
};
impl Default for VkSurfaceCapabilitiesPresentBarrierNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainPresentBarrierCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentBarrierEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainPresentBarrierCreateInfoNV"]
        [::std::mem::size_of::<VkSwapchainPresentBarrierCreateInfoNV>() - 24usize];
    ["Alignment of VkSwapchainPresentBarrierCreateInfoNV"]
        [::std::mem::align_of::<VkSwapchainPresentBarrierCreateInfoNV>() - 8usize];
    ["Offset of field: VkSwapchainPresentBarrierCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkSwapchainPresentBarrierCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkSwapchainPresentBarrierCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkSwapchainPresentBarrierCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkSwapchainPresentBarrierCreateInfoNV::presentBarrierEnable"][::std::mem::offset_of!(
        VkSwapchainPresentBarrierCreateInfoNV,
        presentBarrierEnable
    ) - 16usize];
};
impl Default for VkSwapchainPresentBarrierCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPrivateDataSlotEXT = VkPrivateDataSlot;
pub type VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub type VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;
pub type VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;
pub type VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;
pub type PFN_vkCreatePrivateDataSlotEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult,
>;
pub type PFN_vkDestroyPrivateDataSlotEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkSetPrivateDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult,
>;
pub type PFN_vkGetPrivateDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    ),
>;
unsafe extern "system" {
    pub fn vkCreatePrivateDataSlotEXT(
        device: VkDevice,
        pCreateInfo: *const VkPrivateDataSlotCreateInfo,
        pAllocator: *const VkAllocationCallbacks,
        pPrivateDataSlot: *mut VkPrivateDataSlot,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyPrivateDataSlotEXT(
        device: VkDevice,
        privateDataSlot: VkPrivateDataSlot,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkSetPrivateDataEXT(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        data: u64,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetPrivateDataEXT(
        device: VkDevice,
        objectType: VkObjectType,
        objectHandle: u64,
        privateDataSlot: VkPrivateDataSlot,
        pData: *mut u64,
    );
}
pub type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT =
    VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 1 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 2 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 4 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV : VkDeviceDiagnosticsConfigFlagBitsNV = 8 ;
pub const VkDeviceDiagnosticsConfigFlagBitsNV_VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV:
    VkDeviceDiagnosticsConfigFlagBitsNV = 2147483647;
pub type VkDeviceDiagnosticsConfigFlagBitsNV = ::std::os::raw::c_uint;
pub type VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub diagnosticsConfig: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDiagnosticsConfigFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceDiagnosticsConfigFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceDiagnosticsConfigFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDiagnosticsConfigFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDiagnosticsConfigFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDiagnosticsConfigFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDiagnosticsConfigFeaturesNV::diagnosticsConfig"][::std::mem::offset_of!(
        VkPhysicalDeviceDiagnosticsConfigFeaturesNV,
        diagnosticsConfig
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceDiagnosticsConfigFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceDiagnosticsConfigCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkDeviceDiagnosticsConfigFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceDiagnosticsConfigCreateInfoNV"]
        [::std::mem::size_of::<VkDeviceDiagnosticsConfigCreateInfoNV>() - 24usize];
    ["Alignment of VkDeviceDiagnosticsConfigCreateInfoNV"]
        [::std::mem::align_of::<VkDeviceDiagnosticsConfigCreateInfoNV>() - 8usize];
    ["Offset of field: VkDeviceDiagnosticsConfigCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkDeviceDiagnosticsConfigCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDeviceDiagnosticsConfigCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkDeviceDiagnosticsConfigCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkDeviceDiagnosticsConfigCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkDeviceDiagnosticsConfigCreateInfoNV, flags) - 16usize];
};
impl Default for VkDeviceDiagnosticsConfigCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCudaModuleNV_T {
    _unused: [u8; 0],
}
pub type VkCudaModuleNV = *mut VkCudaModuleNV_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCudaFunctionNV_T {
    _unused: [u8; 0],
}
pub type VkCudaFunctionNV = *mut VkCudaFunctionNV_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCudaModuleCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dataSize: usize,
    pub pData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCudaModuleCreateInfoNV"]
        [::std::mem::size_of::<VkCudaModuleCreateInfoNV>() - 32usize];
    ["Alignment of VkCudaModuleCreateInfoNV"]
        [::std::mem::align_of::<VkCudaModuleCreateInfoNV>() - 8usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkCudaModuleCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkCudaModuleCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::dataSize"]
        [::std::mem::offset_of!(VkCudaModuleCreateInfoNV, dataSize) - 16usize];
    ["Offset of field: VkCudaModuleCreateInfoNV::pData"]
        [::std::mem::offset_of!(VkCudaModuleCreateInfoNV, pData) - 24usize];
};
impl Default for VkCudaModuleCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCudaFunctionCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub module: VkCudaModuleNV,
    pub pName: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCudaFunctionCreateInfoNV"]
        [::std::mem::size_of::<VkCudaFunctionCreateInfoNV>() - 32usize];
    ["Alignment of VkCudaFunctionCreateInfoNV"]
        [::std::mem::align_of::<VkCudaFunctionCreateInfoNV>() - 8usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkCudaFunctionCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkCudaFunctionCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::module"]
        [::std::mem::offset_of!(VkCudaFunctionCreateInfoNV, module) - 16usize];
    ["Offset of field: VkCudaFunctionCreateInfoNV::pName"]
        [::std::mem::offset_of!(VkCudaFunctionCreateInfoNV, pName) - 24usize];
};
impl Default for VkCudaFunctionCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCudaLaunchInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub function: VkCudaFunctionNV,
    pub gridDimX: u32,
    pub gridDimY: u32,
    pub gridDimZ: u32,
    pub blockDimX: u32,
    pub blockDimY: u32,
    pub blockDimZ: u32,
    pub sharedMemBytes: u32,
    pub paramCount: usize,
    pub pParams: *const *const ::std::os::raw::c_void,
    pub extraCount: usize,
    pub pExtras: *const *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCudaLaunchInfoNV"][::std::mem::size_of::<VkCudaLaunchInfoNV>() - 88usize];
    ["Alignment of VkCudaLaunchInfoNV"][::std::mem::align_of::<VkCudaLaunchInfoNV>() - 8usize];
    ["Offset of field: VkCudaLaunchInfoNV::sType"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, sType) - 0usize];
    ["Offset of field: VkCudaLaunchInfoNV::pNext"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, pNext) - 8usize];
    ["Offset of field: VkCudaLaunchInfoNV::function"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, function) - 16usize];
    ["Offset of field: VkCudaLaunchInfoNV::gridDimX"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, gridDimX) - 24usize];
    ["Offset of field: VkCudaLaunchInfoNV::gridDimY"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, gridDimY) - 28usize];
    ["Offset of field: VkCudaLaunchInfoNV::gridDimZ"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, gridDimZ) - 32usize];
    ["Offset of field: VkCudaLaunchInfoNV::blockDimX"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, blockDimX) - 36usize];
    ["Offset of field: VkCudaLaunchInfoNV::blockDimY"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, blockDimY) - 40usize];
    ["Offset of field: VkCudaLaunchInfoNV::blockDimZ"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, blockDimZ) - 44usize];
    ["Offset of field: VkCudaLaunchInfoNV::sharedMemBytes"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, sharedMemBytes) - 48usize];
    ["Offset of field: VkCudaLaunchInfoNV::paramCount"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, paramCount) - 56usize];
    ["Offset of field: VkCudaLaunchInfoNV::pParams"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, pParams) - 64usize];
    ["Offset of field: VkCudaLaunchInfoNV::extraCount"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, extraCount) - 72usize];
    ["Offset of field: VkCudaLaunchInfoNV::pExtras"]
        [::std::mem::offset_of!(VkCudaLaunchInfoNV, pExtras) - 80usize];
};
impl Default for VkCudaLaunchInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCudaKernelLaunchFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cudaKernelLaunchFeatures: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCudaKernelLaunchFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCudaKernelLaunchFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCudaKernelLaunchFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCudaKernelLaunchFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchFeaturesNV::cudaKernelLaunchFeatures"][::std::mem::offset_of!(
        VkPhysicalDeviceCudaKernelLaunchFeaturesNV,
        cudaKernelLaunchFeatures
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceCudaKernelLaunchFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCudaKernelLaunchPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub computeCapabilityMinor: u32,
    pub computeCapabilityMajor: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCudaKernelLaunchPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCudaKernelLaunchPropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCudaKernelLaunchPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCudaKernelLaunchPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCudaKernelLaunchPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::computeCapabilityMinor"][::std::mem::offset_of!(
        VkPhysicalDeviceCudaKernelLaunchPropertiesNV,
        computeCapabilityMinor
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceCudaKernelLaunchPropertiesNV::computeCapabilityMajor"][::std::mem::offset_of!(
        VkPhysicalDeviceCudaKernelLaunchPropertiesNV,
        computeCapabilityMajor
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceCudaKernelLaunchPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateCudaModuleNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCudaModuleCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCudaModuleNV,
    ) -> VkResult,
>;
pub type PFN_vkGetCudaModuleCacheNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        module: VkCudaModuleNV,
        pCacheSize: *mut usize,
        pCacheData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCreateCudaFunctionNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkCudaFunctionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCudaFunctionNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyCudaModuleNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        module: VkCudaModuleNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkDestroyCudaFunctionNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        function: VkCudaFunctionNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdCudaLaunchKernelNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pLaunchInfo: *const VkCudaLaunchInfoNV),
>;
unsafe extern "system" {
    pub fn vkCreateCudaModuleNV(
        device: VkDevice,
        pCreateInfo: *const VkCudaModuleCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pModule: *mut VkCudaModuleNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetCudaModuleCacheNV(
        device: VkDevice,
        module: VkCudaModuleNV,
        pCacheSize: *mut usize,
        pCacheData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateCudaFunctionNV(
        device: VkDevice,
        pCreateInfo: *const VkCudaFunctionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pFunction: *mut VkCudaFunctionNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyCudaModuleNV(
        device: VkDevice,
        module: VkCudaModuleNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkDestroyCudaFunctionNV(
        device: VkDevice,
        function: VkCudaFunctionNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCmdCudaLaunchKernelNV(
        commandBuffer: VkCommandBuffer,
        pLaunchInfo: *const VkCudaLaunchInfoNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkQueryLowLatencySupportNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pQueriedLowLatencyData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkQueryLowLatencySupportNV"]
        [::std::mem::size_of::<VkQueryLowLatencySupportNV>() - 24usize];
    ["Alignment of VkQueryLowLatencySupportNV"]
        [::std::mem::align_of::<VkQueryLowLatencySupportNV>() - 8usize];
    ["Offset of field: VkQueryLowLatencySupportNV::sType"]
        [::std::mem::offset_of!(VkQueryLowLatencySupportNV, sType) - 0usize];
    ["Offset of field: VkQueryLowLatencySupportNV::pNext"]
        [::std::mem::offset_of!(VkQueryLowLatencySupportNV, pNext) - 8usize];
    ["Offset of field: VkQueryLowLatencySupportNV::pQueriedLowLatencyData"]
        [::std::mem::offset_of!(VkQueryLowLatencySupportNV, pQueriedLowLatencyData) - 16usize];
};
impl Default for VkQueryLowLatencySupportNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureKHR_T {
    _unused: [u8; 0],
}
pub type VkAccelerationStructureKHR = *mut VkAccelerationStructureKHR_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub combinedImageSamplerDescriptorSingleArray: VkBool32,
    pub bufferlessPushDescriptors: VkBool32,
    pub allowSamplerImageViewPostSubmitCreation: VkBool32,
    pub descriptorBufferOffsetAlignment: VkDeviceSize,
    pub maxDescriptorBufferBindings: u32,
    pub maxResourceDescriptorBufferBindings: u32,
    pub maxSamplerDescriptorBufferBindings: u32,
    pub maxEmbeddedImmutableSamplerBindings: u32,
    pub maxEmbeddedImmutableSamplers: u32,
    pub bufferCaptureReplayDescriptorDataSize: usize,
    pub imageCaptureReplayDescriptorDataSize: usize,
    pub imageViewCaptureReplayDescriptorDataSize: usize,
    pub samplerCaptureReplayDescriptorDataSize: usize,
    pub accelerationStructureCaptureReplayDescriptorDataSize: usize,
    pub samplerDescriptorSize: usize,
    pub combinedImageSamplerDescriptorSize: usize,
    pub sampledImageDescriptorSize: usize,
    pub storageImageDescriptorSize: usize,
    pub uniformTexelBufferDescriptorSize: usize,
    pub robustUniformTexelBufferDescriptorSize: usize,
    pub storageTexelBufferDescriptorSize: usize,
    pub robustStorageTexelBufferDescriptorSize: usize,
    pub uniformBufferDescriptorSize: usize,
    pub robustUniformBufferDescriptorSize: usize,
    pub storageBufferDescriptorSize: usize,
    pub robustStorageBufferDescriptorSize: usize,
    pub inputAttachmentDescriptorSize: usize,
    pub accelerationStructureDescriptorSize: usize,
    pub maxSamplerDescriptorBufferRange: VkDeviceSize,
    pub maxResourceDescriptorBufferRange: VkDeviceSize,
    pub samplerDescriptorBufferAddressSpaceSize: VkDeviceSize,
    pub resourceDescriptorBufferAddressSpaceSize: VkDeviceSize,
    pub descriptorBufferAddressSpaceSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorBufferPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDescriptorBufferPropertiesEXT>() - 256usize];
    ["Alignment of VkPhysicalDeviceDescriptorBufferPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDescriptorBufferPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorBufferPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorBufferPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::combinedImageSamplerDescriptorSingleArray"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , combinedImageSamplerDescriptorSingleArray) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::bufferlessPushDescriptors"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferPropertiesEXT,
        bufferlessPushDescriptors
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::allowSamplerImageViewPostSubmitCreation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , allowSamplerImageViewPostSubmitCreation) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferOffsetAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , descriptorBufferOffsetAlignment) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxDescriptorBufferBindings"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxDescriptorBufferBindings) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxResourceDescriptorBufferBindings"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxResourceDescriptorBufferBindings) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxSamplerDescriptorBufferBindings"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxSamplerDescriptorBufferBindings) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxEmbeddedImmutableSamplerBindings"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxEmbeddedImmutableSamplerBindings) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxEmbeddedImmutableSamplers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxEmbeddedImmutableSamplers) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::bufferCaptureReplayDescriptorDataSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , bufferCaptureReplayDescriptorDataSize) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::imageCaptureReplayDescriptorDataSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , imageCaptureReplayDescriptorDataSize) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::imageViewCaptureReplayDescriptorDataSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , imageViewCaptureReplayDescriptorDataSize) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::samplerCaptureReplayDescriptorDataSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , samplerCaptureReplayDescriptorDataSize) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::accelerationStructureCaptureReplayDescriptorDataSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , accelerationStructureCaptureReplayDescriptorDataSize) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::samplerDescriptorSize"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferPropertiesEXT,
        samplerDescriptorSize
    )
        - 104usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::combinedImageSamplerDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , combinedImageSamplerDescriptorSize) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::sampledImageDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , sampledImageDescriptorSize) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::storageImageDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , storageImageDescriptorSize) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::uniformTexelBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , uniformTexelBufferDescriptorSize) - 136usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustUniformTexelBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustUniformTexelBufferDescriptorSize) - 144usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::storageTexelBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , storageTexelBufferDescriptorSize) - 152usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustStorageTexelBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustStorageTexelBufferDescriptorSize) - 160usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::uniformBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , uniformBufferDescriptorSize) - 168usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustUniformBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustUniformBufferDescriptorSize) - 176usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::storageBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , storageBufferDescriptorSize) - 184usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::robustStorageBufferDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , robustStorageBufferDescriptorSize) - 192usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::inputAttachmentDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , inputAttachmentDescriptorSize) - 200usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::accelerationStructureDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , accelerationStructureDescriptorSize) - 208usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxSamplerDescriptorBufferRange"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxSamplerDescriptorBufferRange) - 216usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxResourceDescriptorBufferRange"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , maxResourceDescriptorBufferRange) - 224usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::samplerDescriptorBufferAddressSpaceSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , samplerDescriptorBufferAddressSpaceSize) - 232usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::resourceDescriptorBufferAddressSpaceSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , resourceDescriptorBufferAddressSpaceSize) - 240usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferAddressSpaceSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferPropertiesEXT , descriptorBufferAddressSpaceSize) - 248usize] ;
};
impl Default for VkPhysicalDeviceDescriptorBufferPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub combinedImageSamplerDensityMapDescriptorSize: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT"][::std::mem::size_of::<
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT"][::std::mem::align_of::<
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT::combinedImageSamplerDensityMapDescriptorSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT , combinedImageSamplerDensityMapDescriptorSize) - 16usize] ;
};
impl Default for VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub descriptorBuffer: VkBool32,
    pub descriptorBufferCaptureReplay: VkBool32,
    pub descriptorBufferImageLayoutIgnored: VkBool32,
    pub descriptorBufferPushDescriptors: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorBufferFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDescriptorBufferFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceDescriptorBufferFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDescriptorBufferFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorBufferFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDescriptorBufferFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBuffer"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorBufferFeaturesEXT,
        descriptorBuffer
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBufferCaptureReplay"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferFeaturesEXT , descriptorBufferCaptureReplay) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBufferImageLayoutIgnored"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferFeaturesEXT , descriptorBufferImageLayoutIgnored) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDescriptorBufferFeaturesEXT::descriptorBufferPushDescriptors"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorBufferFeaturesEXT , descriptorBufferPushDescriptors) - 28usize] ;
};
impl Default for VkPhysicalDeviceDescriptorBufferFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorAddressInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub address: VkDeviceAddress,
    pub range: VkDeviceSize,
    pub format: VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorAddressInfoEXT"]
        [::std::mem::size_of::<VkDescriptorAddressInfoEXT>() - 40usize];
    ["Alignment of VkDescriptorAddressInfoEXT"]
        [::std::mem::align_of::<VkDescriptorAddressInfoEXT>() - 8usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::sType"]
        [::std::mem::offset_of!(VkDescriptorAddressInfoEXT, sType) - 0usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDescriptorAddressInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::address"]
        [::std::mem::offset_of!(VkDescriptorAddressInfoEXT, address) - 16usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::range"]
        [::std::mem::offset_of!(VkDescriptorAddressInfoEXT, range) - 24usize];
    ["Offset of field: VkDescriptorAddressInfoEXT::format"]
        [::std::mem::offset_of!(VkDescriptorAddressInfoEXT, format) - 32usize];
};
impl Default for VkDescriptorAddressInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorBufferBindingInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub address: VkDeviceAddress,
    pub usage: VkBufferUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorBufferBindingInfoEXT"]
        [::std::mem::size_of::<VkDescriptorBufferBindingInfoEXT>() - 32usize];
    ["Alignment of VkDescriptorBufferBindingInfoEXT"]
        [::std::mem::align_of::<VkDescriptorBufferBindingInfoEXT>() - 8usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::sType"]
        [::std::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, sType) - 0usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::address"]
        [::std::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, address) - 16usize];
    ["Offset of field: VkDescriptorBufferBindingInfoEXT::usage"]
        [::std::mem::offset_of!(VkDescriptorBufferBindingInfoEXT, usage) - 24usize];
};
impl Default for VkDescriptorBufferBindingInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorBufferBindingPushDescriptorBufferHandleEXT"]
        [::std::mem::size_of::<VkDescriptorBufferBindingPushDescriptorBufferHandleEXT>() - 24usize];
    ["Alignment of VkDescriptorBufferBindingPushDescriptorBufferHandleEXT"]
        [::std::mem::align_of::<VkDescriptorBufferBindingPushDescriptorBufferHandleEXT>() - 8usize];
    ["Offset of field: VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::sType"][::std::mem::offset_of!(
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::pNext"][::std::mem::offset_of!(
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkDescriptorBufferBindingPushDescriptorBufferHandleEXT::buffer"][::std::mem::offset_of!(
        VkDescriptorBufferBindingPushDescriptorBufferHandleEXT,
        buffer
    )
        - 16usize];
};
impl Default for VkDescriptorBufferBindingPushDescriptorBufferHandleEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDescriptorDataEXT {
    pub pSampler: *const VkSampler,
    pub pCombinedImageSampler: *const VkDescriptorImageInfo,
    pub pInputAttachmentImage: *const VkDescriptorImageInfo,
    pub pSampledImage: *const VkDescriptorImageInfo,
    pub pStorageImage: *const VkDescriptorImageInfo,
    pub pUniformTexelBuffer: *const VkDescriptorAddressInfoEXT,
    pub pStorageTexelBuffer: *const VkDescriptorAddressInfoEXT,
    pub pUniformBuffer: *const VkDescriptorAddressInfoEXT,
    pub pStorageBuffer: *const VkDescriptorAddressInfoEXT,
    pub accelerationStructure: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorDataEXT"][::std::mem::size_of::<VkDescriptorDataEXT>() - 8usize];
    ["Alignment of VkDescriptorDataEXT"][::std::mem::align_of::<VkDescriptorDataEXT>() - 8usize];
    ["Offset of field: VkDescriptorDataEXT::pSampler"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pSampler) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pCombinedImageSampler"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pCombinedImageSampler) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pInputAttachmentImage"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pInputAttachmentImage) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pSampledImage"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pSampledImage) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pStorageImage"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pStorageImage) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pUniformTexelBuffer"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pUniformTexelBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pStorageTexelBuffer"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pStorageTexelBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pUniformBuffer"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pUniformBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::pStorageBuffer"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, pStorageBuffer) - 0usize];
    ["Offset of field: VkDescriptorDataEXT::accelerationStructure"]
        [::std::mem::offset_of!(VkDescriptorDataEXT, accelerationStructure) - 0usize];
};
impl Default for VkDescriptorDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorGetInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkDescriptorType,
    pub data: VkDescriptorDataEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorGetInfoEXT"][::std::mem::size_of::<VkDescriptorGetInfoEXT>() - 32usize];
    ["Alignment of VkDescriptorGetInfoEXT"]
        [::std::mem::align_of::<VkDescriptorGetInfoEXT>() - 8usize];
    ["Offset of field: VkDescriptorGetInfoEXT::sType"]
        [::std::mem::offset_of!(VkDescriptorGetInfoEXT, sType) - 0usize];
    ["Offset of field: VkDescriptorGetInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDescriptorGetInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDescriptorGetInfoEXT::type_"]
        [::std::mem::offset_of!(VkDescriptorGetInfoEXT, type_) - 16usize];
    ["Offset of field: VkDescriptorGetInfoEXT::data"]
        [::std::mem::offset_of!(VkDescriptorGetInfoEXT, data) - 24usize];
};
impl Default for VkDescriptorGetInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBufferCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub buffer: VkBuffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBufferCaptureDescriptorDataInfoEXT"]
        [::std::mem::size_of::<VkBufferCaptureDescriptorDataInfoEXT>() - 24usize];
    ["Alignment of VkBufferCaptureDescriptorDataInfoEXT"]
        [::std::mem::align_of::<VkBufferCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkBufferCaptureDescriptorDataInfoEXT::sType"]
        [::std::mem::offset_of!(VkBufferCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkBufferCaptureDescriptorDataInfoEXT::pNext"]
        [::std::mem::offset_of!(VkBufferCaptureDescriptorDataInfoEXT, pNext) - 8usize];
    ["Offset of field: VkBufferCaptureDescriptorDataInfoEXT::buffer"]
        [::std::mem::offset_of!(VkBufferCaptureDescriptorDataInfoEXT, buffer) - 16usize];
};
impl Default for VkBufferCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub image: VkImage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCaptureDescriptorDataInfoEXT"]
        [::std::mem::size_of::<VkImageCaptureDescriptorDataInfoEXT>() - 24usize];
    ["Alignment of VkImageCaptureDescriptorDataInfoEXT"]
        [::std::mem::align_of::<VkImageCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkImageCaptureDescriptorDataInfoEXT::sType"]
        [::std::mem::offset_of!(VkImageCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageCaptureDescriptorDataInfoEXT::pNext"]
        [::std::mem::offset_of!(VkImageCaptureDescriptorDataInfoEXT, pNext) - 8usize];
    ["Offset of field: VkImageCaptureDescriptorDataInfoEXT::image"]
        [::std::mem::offset_of!(VkImageCaptureDescriptorDataInfoEXT, image) - 16usize];
};
impl Default for VkImageCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub imageView: VkImageView,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewCaptureDescriptorDataInfoEXT"]
        [::std::mem::size_of::<VkImageViewCaptureDescriptorDataInfoEXT>() - 24usize];
    ["Alignment of VkImageViewCaptureDescriptorDataInfoEXT"]
        [::std::mem::align_of::<VkImageViewCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkImageViewCaptureDescriptorDataInfoEXT::sType"]
        [::std::mem::offset_of!(VkImageViewCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageViewCaptureDescriptorDataInfoEXT::pNext"]
        [::std::mem::offset_of!(VkImageViewCaptureDescriptorDataInfoEXT, pNext) - 8usize];
    ["Offset of field: VkImageViewCaptureDescriptorDataInfoEXT::imageView"]
        [::std::mem::offset_of!(VkImageViewCaptureDescriptorDataInfoEXT, imageView) - 16usize];
};
impl Default for VkImageViewCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sampler: VkSampler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCaptureDescriptorDataInfoEXT"]
        [::std::mem::size_of::<VkSamplerCaptureDescriptorDataInfoEXT>() - 24usize];
    ["Alignment of VkSamplerCaptureDescriptorDataInfoEXT"]
        [::std::mem::align_of::<VkSamplerCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkSamplerCaptureDescriptorDataInfoEXT::sType"]
        [::std::mem::offset_of!(VkSamplerCaptureDescriptorDataInfoEXT, sType) - 0usize];
    ["Offset of field: VkSamplerCaptureDescriptorDataInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSamplerCaptureDescriptorDataInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSamplerCaptureDescriptorDataInfoEXT::sampler"]
        [::std::mem::offset_of!(VkSamplerCaptureDescriptorDataInfoEXT, sampler) - 16usize];
};
impl Default for VkSamplerCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub opaqueCaptureDescriptorData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpaqueCaptureDescriptorDataCreateInfoEXT"]
        [::std::mem::size_of::<VkOpaqueCaptureDescriptorDataCreateInfoEXT>() - 24usize];
    ["Alignment of VkOpaqueCaptureDescriptorDataCreateInfoEXT"]
        [::std::mem::align_of::<VkOpaqueCaptureDescriptorDataCreateInfoEXT>() - 8usize];
    ["Offset of field: VkOpaqueCaptureDescriptorDataCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkOpaqueCaptureDescriptorDataCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkOpaqueCaptureDescriptorDataCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkOpaqueCaptureDescriptorDataCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkOpaqueCaptureDescriptorDataCreateInfoEXT::opaqueCaptureDescriptorData"][::std::mem::offset_of!(
        VkOpaqueCaptureDescriptorDataCreateInfoEXT,
        opaqueCaptureDescriptorData
    )
        - 16usize];
};
impl Default for VkOpaqueCaptureDescriptorDataCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructure: VkAccelerationStructureKHR,
    pub accelerationStructureNV: VkAccelerationStructureNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureCaptureDescriptorDataInfoEXT"]
        [::std::mem::size_of::<VkAccelerationStructureCaptureDescriptorDataInfoEXT>() - 32usize];
    ["Alignment of VkAccelerationStructureCaptureDescriptorDataInfoEXT"]
        [::std::mem::align_of::<VkAccelerationStructureCaptureDescriptorDataInfoEXT>() - 8usize];
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::sType"][::std::mem::offset_of!(
        VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::pNext"][::std::mem::offset_of!(
        VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::accelerationStructure"] [:: std :: mem :: offset_of ! (VkAccelerationStructureCaptureDescriptorDataInfoEXT , accelerationStructure) - 16usize] ;
    ["Offset of field: VkAccelerationStructureCaptureDescriptorDataInfoEXT::accelerationStructureNV"] [:: std :: mem :: offset_of ! (VkAccelerationStructureCaptureDescriptorDataInfoEXT , accelerationStructureNV) - 24usize] ;
};
impl Default for VkAccelerationStructureCaptureDescriptorDataInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDescriptorSetLayoutSizeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        pLayoutSizeInBytes: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkGetDescriptorSetLayoutBindingOffsetEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        binding: u32,
        pOffset: *mut VkDeviceSize,
    ),
>;
pub type PFN_vkGetDescriptorEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pDescriptorInfo: *const VkDescriptorGetInfoEXT,
        dataSize: usize,
        pDescriptor: *mut ::std::os::raw::c_void,
    ),
>;
pub type PFN_vkCmdBindDescriptorBuffersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        bufferCount: u32,
        pBindingInfos: *const VkDescriptorBufferBindingInfoEXT,
    ),
>;
pub type PFN_vkCmdSetDescriptorBufferOffsetsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        setCount: u32,
        pBufferIndices: *const u32,
        pOffsets: *const VkDeviceSize,
    ),
>;
pub type PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
    ),
>;
pub type PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkBufferCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetImageOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkImageViewCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkSamplerCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetDescriptorSetLayoutSizeEXT(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        pLayoutSizeInBytes: *mut VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkGetDescriptorSetLayoutBindingOffsetEXT(
        device: VkDevice,
        layout: VkDescriptorSetLayout,
        binding: u32,
        pOffset: *mut VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkGetDescriptorEXT(
        device: VkDevice,
        pDescriptorInfo: *const VkDescriptorGetInfoEXT,
        dataSize: usize,
        pDescriptor: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindDescriptorBuffersEXT(
        commandBuffer: VkCommandBuffer,
        bufferCount: u32,
        pBindingInfos: *const VkDescriptorBufferBindingInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDescriptorBufferOffsetsEXT(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        firstSet: u32,
        setCount: u32,
        pBufferIndices: *const u32,
        pOffsets: *const VkDeviceSize,
    );
}
unsafe extern "system" {
    pub fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        layout: VkPipelineLayout,
        set: u32,
    );
}
unsafe extern "system" {
    pub fn vkGetBufferOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkBufferCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetImageOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkImageCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkImageViewCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkSamplerCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureCaptureDescriptorDataInfoEXT,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 1 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 2 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 4 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 8 ;
pub const VkGraphicsPipelineLibraryFlagBitsEXT_VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT : VkGraphicsPipelineLibraryFlagBitsEXT = 2147483647 ;
pub type VkGraphicsPipelineLibraryFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub graphicsPipelineLibrary: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT::graphicsPipelineLibrary"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT , graphicsPipelineLibrary) - 16usize] ;
};
impl Default for VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub graphicsPipelineLibraryFastLinking: VkBool32,
    pub graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::graphicsPipelineLibraryFastLinking"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT , graphicsPipelineLibraryFastLinking) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT::graphicsPipelineLibraryIndependentInterpolationDecoration"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT , graphicsPipelineLibraryIndependentInterpolationDecoration) - 20usize] ;
};
impl Default for VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGraphicsPipelineLibraryCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkGraphicsPipelineLibraryFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGraphicsPipelineLibraryCreateInfoEXT"]
        [::std::mem::size_of::<VkGraphicsPipelineLibraryCreateInfoEXT>() - 24usize];
    ["Alignment of VkGraphicsPipelineLibraryCreateInfoEXT"]
        [::std::mem::align_of::<VkGraphicsPipelineLibraryCreateInfoEXT>() - 8usize];
    ["Offset of field: VkGraphicsPipelineLibraryCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkGraphicsPipelineLibraryCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkGraphicsPipelineLibraryCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkGraphicsPipelineLibraryCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkGraphicsPipelineLibraryCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkGraphicsPipelineLibraryCreateInfoEXT, flags) - 16usize];
};
impl Default for VkGraphicsPipelineLibraryCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderEarlyAndLateFragmentTests: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"][::std::mem::size_of::<
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD"][::std::mem::align_of::<
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD::shaderEarlyAndLateFragmentTests"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD , shaderEarlyAndLateFragmentTests) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkFragmentShadingRateTypeNV_VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV:
    VkFragmentShadingRateTypeNV = 0;
pub const VkFragmentShadingRateTypeNV_VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV:
    VkFragmentShadingRateTypeNV = 1;
pub const VkFragmentShadingRateTypeNV_VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV:
    VkFragmentShadingRateTypeNV = 2147483647;
pub type VkFragmentShadingRateTypeNV = ::std::os::raw::c_uint;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 0;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV:
    VkFragmentShadingRateNV = 1;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV:
    VkFragmentShadingRateNV = 4;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV:
    VkFragmentShadingRateNV = 5;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV:
    VkFragmentShadingRateNV = 6;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV:
    VkFragmentShadingRateNV = 9;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV:
    VkFragmentShadingRateNV = 10;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 11;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 12;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 13;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV:
    VkFragmentShadingRateNV = 14;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV:
    VkFragmentShadingRateNV = 15;
pub const VkFragmentShadingRateNV_VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV: VkFragmentShadingRateNV =
    2147483647;
pub type VkFragmentShadingRateNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentShadingRateEnums: VkBool32,
    pub supersampleFragmentShadingRates: VkBool32,
    pub noInvocationFragmentShadingRates: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV>() - 32usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::fragmentShadingRateEnums"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV , fragmentShadingRateEnums) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::supersampleFragmentShadingRates"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV , supersampleFragmentShadingRates) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV::noInvocationFragmentShadingRates"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV , noInvocationFragmentShadingRates) - 24usize] ;
};
impl Default for VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV::maxFragmentShadingRateInvocationCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV , maxFragmentShadingRateInvocationCount) - 16usize] ;
};
impl Default for VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub shadingRateType: VkFragmentShadingRateTypeNV,
    pub shadingRate: VkFragmentShadingRateNV,
    pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineFragmentShadingRateEnumStateCreateInfoNV"]
        [::std::mem::size_of::<VkPipelineFragmentShadingRateEnumStateCreateInfoNV>() - 32usize];
    ["Alignment of VkPipelineFragmentShadingRateEnumStateCreateInfoNV"]
        [::std::mem::align_of::<VkPipelineFragmentShadingRateEnumStateCreateInfoNV>() - 8usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::sType"][::std::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::pNext"][::std::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::shadingRateType"][::std::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        shadingRateType
    )
        - 16usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::shadingRate"][::std::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        shadingRate
    )
        - 20usize];
    ["Offset of field: VkPipelineFragmentShadingRateEnumStateCreateInfoNV::combinerOps"][::std::mem::offset_of!(
        VkPipelineFragmentShadingRateEnumStateCreateInfoNV,
        combinerOps
    )
        - 24usize];
};
impl Default for VkPipelineFragmentShadingRateEnumStateCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetFragmentShadingRateEnumNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        shadingRate: VkFragmentShadingRateNV,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetFragmentShadingRateEnumNV(
        commandBuffer: VkCommandBuffer,
        shadingRate: VkFragmentShadingRateNV,
        combinerOps: *const VkFragmentShadingRateCombinerOpKHR,
    );
}
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV : VkAccelerationStructureMotionInstanceTypeNV = 0 ;
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV : VkAccelerationStructureMotionInstanceTypeNV = 1 ;
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV : VkAccelerationStructureMotionInstanceTypeNV = 2 ;
pub const VkAccelerationStructureMotionInstanceTypeNV_VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV : VkAccelerationStructureMotionInstanceTypeNV = 2147483647 ;
pub type VkAccelerationStructureMotionInstanceTypeNV = ::std::os::raw::c_uint;
pub type VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub type VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDeviceOrHostAddressConstKHR {
    pub deviceAddress: VkDeviceAddress,
    pub hostAddress: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceOrHostAddressConstKHR"]
        [::std::mem::size_of::<VkDeviceOrHostAddressConstKHR>() - 8usize];
    ["Alignment of VkDeviceOrHostAddressConstKHR"]
        [::std::mem::align_of::<VkDeviceOrHostAddressConstKHR>() - 8usize];
    ["Offset of field: VkDeviceOrHostAddressConstKHR::deviceAddress"]
        [::std::mem::offset_of!(VkDeviceOrHostAddressConstKHR, deviceAddress) - 0usize];
    ["Offset of field: VkDeviceOrHostAddressConstKHR::hostAddress"]
        [::std::mem::offset_of!(VkDeviceOrHostAddressConstKHR, hostAddress) - 0usize];
};
impl Default for VkDeviceOrHostAddressConstKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryMotionTrianglesDataNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryMotionTrianglesDataNV"]
        [::std::mem::size_of::<VkAccelerationStructureGeometryMotionTrianglesDataNV>() - 24usize];
    ["Alignment of VkAccelerationStructureGeometryMotionTrianglesDataNV"]
        [::std::mem::align_of::<VkAccelerationStructureGeometryMotionTrianglesDataNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryMotionTrianglesDataNV::sType"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryMotionTrianglesDataNV,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryMotionTrianglesDataNV::pNext"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryMotionTrianglesDataNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryMotionTrianglesDataNV::vertexData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryMotionTrianglesDataNV,
        vertexData
    )
        - 16usize];
};
impl Default for VkAccelerationStructureGeometryMotionTrianglesDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMotionInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxInstances: u32,
    pub flags: VkAccelerationStructureMotionInfoFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMotionInfoNV"]
        [::std::mem::size_of::<VkAccelerationStructureMotionInfoNV>() - 24usize];
    ["Alignment of VkAccelerationStructureMotionInfoNV"]
        [::std::mem::align_of::<VkAccelerationStructureMotionInfoNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureMotionInfoNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureMotionInfoNV, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::maxInstances"]
        [::std::mem::offset_of!(VkAccelerationStructureMotionInfoNV, maxInstances) - 16usize];
    ["Offset of field: VkAccelerationStructureMotionInfoNV::flags"]
        [::std::mem::offset_of!(VkAccelerationStructureMotionInfoNV, flags) - 20usize];
};
impl Default for VkAccelerationStructureMotionInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkAccelerationStructureMatrixMotionInstanceNV {
    pub transformT0: VkTransformMatrixKHR,
    pub transformT1: VkTransformMatrixKHR,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMatrixMotionInstanceNV"]
        [::std::mem::size_of::<VkAccelerationStructureMatrixMotionInstanceNV>() - 112usize];
    ["Alignment of VkAccelerationStructureMatrixMotionInstanceNV"]
        [::std::mem::align_of::<VkAccelerationStructureMatrixMotionInstanceNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMatrixMotionInstanceNV::transformT0"][::std::mem::offset_of!(
        VkAccelerationStructureMatrixMotionInstanceNV,
        transformT0
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureMatrixMotionInstanceNV::transformT1"][::std::mem::offset_of!(
        VkAccelerationStructureMatrixMotionInstanceNV,
        transformT1
    ) - 48usize];
    ["Offset of field: VkAccelerationStructureMatrixMotionInstanceNV::accelerationStructureReference"] [:: std :: mem :: offset_of ! (VkAccelerationStructureMatrixMotionInstanceNV , accelerationStructureReference) - 104usize] ;
};
impl VkAccelerationStructureMatrixMotionInstanceNV {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceCustomIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceCustomIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mask_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mask_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceShaderBindingTableRecordOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceShaderBindingTableRecordOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> VkGeometryInstanceFlagsKHR {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::std::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::std::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkSRTDataNV {
    pub sx: f32,
    pub a: f32,
    pub b: f32,
    pub pvx: f32,
    pub sy: f32,
    pub c: f32,
    pub pvy: f32,
    pub sz: f32,
    pub pvz: f32,
    pub qx: f32,
    pub qy: f32,
    pub qz: f32,
    pub qw: f32,
    pub tx: f32,
    pub ty: f32,
    pub tz: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSRTDataNV"][::std::mem::size_of::<VkSRTDataNV>() - 64usize];
    ["Alignment of VkSRTDataNV"][::std::mem::align_of::<VkSRTDataNV>() - 4usize];
    ["Offset of field: VkSRTDataNV::sx"][::std::mem::offset_of!(VkSRTDataNV, sx) - 0usize];
    ["Offset of field: VkSRTDataNV::a"][::std::mem::offset_of!(VkSRTDataNV, a) - 4usize];
    ["Offset of field: VkSRTDataNV::b"][::std::mem::offset_of!(VkSRTDataNV, b) - 8usize];
    ["Offset of field: VkSRTDataNV::pvx"][::std::mem::offset_of!(VkSRTDataNV, pvx) - 12usize];
    ["Offset of field: VkSRTDataNV::sy"][::std::mem::offset_of!(VkSRTDataNV, sy) - 16usize];
    ["Offset of field: VkSRTDataNV::c"][::std::mem::offset_of!(VkSRTDataNV, c) - 20usize];
    ["Offset of field: VkSRTDataNV::pvy"][::std::mem::offset_of!(VkSRTDataNV, pvy) - 24usize];
    ["Offset of field: VkSRTDataNV::sz"][::std::mem::offset_of!(VkSRTDataNV, sz) - 28usize];
    ["Offset of field: VkSRTDataNV::pvz"][::std::mem::offset_of!(VkSRTDataNV, pvz) - 32usize];
    ["Offset of field: VkSRTDataNV::qx"][::std::mem::offset_of!(VkSRTDataNV, qx) - 36usize];
    ["Offset of field: VkSRTDataNV::qy"][::std::mem::offset_of!(VkSRTDataNV, qy) - 40usize];
    ["Offset of field: VkSRTDataNV::qz"][::std::mem::offset_of!(VkSRTDataNV, qz) - 44usize];
    ["Offset of field: VkSRTDataNV::qw"][::std::mem::offset_of!(VkSRTDataNV, qw) - 48usize];
    ["Offset of field: VkSRTDataNV::tx"][::std::mem::offset_of!(VkSRTDataNV, tx) - 52usize];
    ["Offset of field: VkSRTDataNV::ty"][::std::mem::offset_of!(VkSRTDataNV, ty) - 56usize];
    ["Offset of field: VkSRTDataNV::tz"][::std::mem::offset_of!(VkSRTDataNV, tz) - 60usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkAccelerationStructureSRTMotionInstanceNV {
    pub transformT0: VkSRTDataNV,
    pub transformT1: VkSRTDataNV,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub accelerationStructureReference: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureSRTMotionInstanceNV"]
        [::std::mem::size_of::<VkAccelerationStructureSRTMotionInstanceNV>() - 144usize];
    ["Alignment of VkAccelerationStructureSRTMotionInstanceNV"]
        [::std::mem::align_of::<VkAccelerationStructureSRTMotionInstanceNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureSRTMotionInstanceNV::transformT0"]
        [::std::mem::offset_of!(VkAccelerationStructureSRTMotionInstanceNV, transformT0) - 0usize];
    ["Offset of field: VkAccelerationStructureSRTMotionInstanceNV::transformT1"]
        [::std::mem::offset_of!(VkAccelerationStructureSRTMotionInstanceNV, transformT1) - 64usize];
    ["Offset of field: VkAccelerationStructureSRTMotionInstanceNV::accelerationStructureReference"] [:: std :: mem :: offset_of ! (VkAccelerationStructureSRTMotionInstanceNV , accelerationStructureReference) - 136usize] ;
};
impl VkAccelerationStructureSRTMotionInstanceNV {
    #[inline]
    pub fn instanceCustomIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceCustomIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceCustomIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceCustomIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mask(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_mask(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mask_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mask_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn instanceShaderBindingTableRecordOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_instanceShaderBindingTableRecordOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn instanceShaderBindingTableRecordOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_instanceShaderBindingTableRecordOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn flags(&self) -> VkGeometryInstanceFlagsKHR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn flags_raw(this: *const Self) -> VkGeometryInstanceFlagsKHR {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_flags_raw(this: *mut Self, val: VkGeometryInstanceFlagsKHR) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        instanceCustomIndex: u32,
        mask: u32,
        instanceShaderBindingTableRecordOffset: u32,
        flags: VkGeometryInstanceFlagsKHR,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let instanceCustomIndex: u32 = unsafe { ::std::mem::transmute(instanceCustomIndex) };
            instanceCustomIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let mask: u32 = unsafe { ::std::mem::transmute(mask) };
            mask as u64
        });
        __bindgen_bitfield_unit.set(32usize, 24u8, {
            let instanceShaderBindingTableRecordOffset: u32 =
                unsafe { ::std::mem::transmute(instanceShaderBindingTableRecordOffset) };
            instanceShaderBindingTableRecordOffset as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkAccelerationStructureMotionInstanceDataNV {
    pub staticInstance: VkAccelerationStructureInstanceKHR,
    pub matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV,
    pub srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMotionInstanceDataNV"]
        [::std::mem::size_of::<VkAccelerationStructureMotionInstanceDataNV>() - 144usize];
    ["Alignment of VkAccelerationStructureMotionInstanceDataNV"]
        [::std::mem::align_of::<VkAccelerationStructureMotionInstanceDataNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceDataNV::staticInstance"][::std::mem::offset_of!(
        VkAccelerationStructureMotionInstanceDataNV,
        staticInstance
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceDataNV::matrixMotionInstance"][::std::mem::offset_of!(
        VkAccelerationStructureMotionInstanceDataNV,
        matrixMotionInstance
    )
        - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceDataNV::srtMotionInstance"][::std::mem::offset_of!(
        VkAccelerationStructureMotionInstanceDataNV,
        srtMotionInstance
    ) - 0usize];
};
impl Default for VkAccelerationStructureMotionInstanceDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureMotionInstanceNV {
    pub type_: VkAccelerationStructureMotionInstanceTypeNV,
    pub flags: VkAccelerationStructureMotionInstanceFlagsNV,
    pub data: VkAccelerationStructureMotionInstanceDataNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureMotionInstanceNV"]
        [::std::mem::size_of::<VkAccelerationStructureMotionInstanceNV>() - 152usize];
    ["Alignment of VkAccelerationStructureMotionInstanceNV"]
        [::std::mem::align_of::<VkAccelerationStructureMotionInstanceNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceNV::type_"]
        [::std::mem::offset_of!(VkAccelerationStructureMotionInstanceNV, type_) - 0usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceNV::flags"]
        [::std::mem::offset_of!(VkAccelerationStructureMotionInstanceNV, flags) - 4usize];
    ["Offset of field: VkAccelerationStructureMotionInstanceNV::data"]
        [::std::mem::offset_of!(VkAccelerationStructureMotionInstanceNV, data) - 8usize];
};
impl Default for VkAccelerationStructureMotionInstanceNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingMotionBlur: VkBool32,
    pub rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceRayTracingMotionBlurFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingMotionBlurFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingMotionBlurFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::rayTracingMotionBlur"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingMotionBlurFeaturesNV,
        rayTracingMotionBlur
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceRayTracingMotionBlurFeaturesNV::rayTracingMotionBlurPipelineTraceRaysIndirect"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV , rayTracingMotionBlurPipelineTraceRaysIndirect) - 20usize] ;
};
impl Default for VkPhysicalDeviceRayTracingMotionBlurFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub ycbcr2plane444Formats: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT::ycbcr2plane444Formats"][::std::mem::offset_of!(
        VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT,
        ycbcr2plane444Formats
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMapDeferred: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMap2FeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2FeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2FeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2FeaturesEXT::fragmentDensityMapDeferred"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT , fragmentDensityMapDeferred) - 16usize] ;
};
impl Default for VkPhysicalDeviceFragmentDensityMap2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subsampledLoads: VkBool32,
    pub subsampledCoarseReconstructionEarlyAccess: VkBool32,
    pub maxSubsampledArrayLayers: u32,
    pub maxDescriptorSetSubsampledSamplers: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMap2PropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMap2PropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFragmentDensityMap2PropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::subsampledLoads"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMap2PropertiesEXT,
        subsampledLoads
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::subsampledCoarseReconstructionEarlyAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT , subsampledCoarseReconstructionEarlyAccess) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::maxSubsampledArrayLayers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT , maxSubsampledArrayLayers) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceFragmentDensityMap2PropertiesEXT::maxDescriptorSetSubsampledSamplers"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMap2PropertiesEXT , maxDescriptorSetSubsampledSamplers) - 28usize] ;
};
impl Default for VkPhysicalDeviceFragmentDensityMap2PropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyCommandTransformInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub transform: VkSurfaceTransformFlagBitsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyCommandTransformInfoQCOM"]
        [::std::mem::size_of::<VkCopyCommandTransformInfoQCOM>() - 24usize];
    ["Alignment of VkCopyCommandTransformInfoQCOM"]
        [::std::mem::align_of::<VkCopyCommandTransformInfoQCOM>() - 8usize];
    ["Offset of field: VkCopyCommandTransformInfoQCOM::sType"]
        [::std::mem::offset_of!(VkCopyCommandTransformInfoQCOM, sType) - 0usize];
    ["Offset of field: VkCopyCommandTransformInfoQCOM::pNext"]
        [::std::mem::offset_of!(VkCopyCommandTransformInfoQCOM, pNext) - 8usize];
    ["Offset of field: VkCopyCommandTransformInfoQCOM::transform"]
        [::std::mem::offset_of!(VkCopyCommandTransformInfoQCOM, transform) - 16usize];
};
impl Default for VkCopyCommandTransformInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_DEFAULT_EXT:
    VkImageCompressionFlagBitsEXT = 0;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT:
    VkImageCompressionFlagBitsEXT = 1;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT:
    VkImageCompressionFlagBitsEXT = 2;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_DISABLED_EXT:
    VkImageCompressionFlagBitsEXT = 4;
pub const VkImageCompressionFlagBitsEXT_VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT:
    VkImageCompressionFlagBitsEXT = 2147483647;
pub type VkImageCompressionFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkImageCompressionFlagsEXT = VkFlags;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 0;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 1;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 2;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 4;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 8;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 16;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 32;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 64;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 128;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 256;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 512;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 1024;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 2048;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 4096;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 8192;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 16384;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 32768;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 65536;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 131072;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 262144;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 524288;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 1048576;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 2097152;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 4194304;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT:
    VkImageCompressionFixedRateFlagBitsEXT = 8388608;
pub const VkImageCompressionFixedRateFlagBitsEXT_VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT : VkImageCompressionFixedRateFlagBitsEXT = 2147483647 ;
pub type VkImageCompressionFixedRateFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkImageCompressionFixedRateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageCompressionControl: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageCompressionControlFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceImageCompressionControlFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageCompressionControlFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceImageCompressionControlFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlFeaturesEXT::imageCompressionControl"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceImageCompressionControlFeaturesEXT , imageCompressionControl) - 16usize] ;
};
impl Default for VkPhysicalDeviceImageCompressionControlFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCompressionControlEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkImageCompressionFlagsEXT,
    pub compressionControlPlaneCount: u32,
    pub pFixedRateFlags: *mut VkImageCompressionFixedRateFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCompressionControlEXT"]
        [::std::mem::size_of::<VkImageCompressionControlEXT>() - 32usize];
    ["Alignment of VkImageCompressionControlEXT"]
        [::std::mem::align_of::<VkImageCompressionControlEXT>() - 8usize];
    ["Offset of field: VkImageCompressionControlEXT::sType"]
        [::std::mem::offset_of!(VkImageCompressionControlEXT, sType) - 0usize];
    ["Offset of field: VkImageCompressionControlEXT::pNext"]
        [::std::mem::offset_of!(VkImageCompressionControlEXT, pNext) - 8usize];
    ["Offset of field: VkImageCompressionControlEXT::flags"]
        [::std::mem::offset_of!(VkImageCompressionControlEXT, flags) - 16usize];
    ["Offset of field: VkImageCompressionControlEXT::compressionControlPlaneCount"][::std::mem::offset_of!(
        VkImageCompressionControlEXT,
        compressionControlPlaneCount
    ) - 20usize];
    ["Offset of field: VkImageCompressionControlEXT::pFixedRateFlags"]
        [::std::mem::offset_of!(VkImageCompressionControlEXT, pFixedRateFlags) - 24usize];
};
impl Default for VkImageCompressionControlEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageCompressionPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageCompressionFlags: VkImageCompressionFlagsEXT,
    pub imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageCompressionPropertiesEXT"]
        [::std::mem::size_of::<VkImageCompressionPropertiesEXT>() - 24usize];
    ["Alignment of VkImageCompressionPropertiesEXT"]
        [::std::mem::align_of::<VkImageCompressionPropertiesEXT>() - 8usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkImageCompressionPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkImageCompressionPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::imageCompressionFlags"]
        [::std::mem::offset_of!(VkImageCompressionPropertiesEXT, imageCompressionFlags) - 16usize];
    ["Offset of field: VkImageCompressionPropertiesEXT::imageCompressionFixedRateFlags"][::std::mem::offset_of!(
        VkImageCompressionPropertiesEXT,
        imageCompressionFixedRateFlags
    )
        - 20usize];
};
impl Default for VkImageCompressionPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub attachmentFeedbackLoopLayout: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"][::std::mem::size_of::<
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT"][::std::mem::align_of::<
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT::attachmentFeedbackLoopLayout"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT , attachmentFeedbackLoopLayout) - 16usize] ;
};
impl Default for VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevice4444FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub formatA4R4G4B4: VkBool32,
    pub formatA4B4G4R4: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevice4444FormatsFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDevice4444FormatsFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDevice4444FormatsFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDevice4444FormatsFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::formatA4R4G4B4"]
        [::std::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4R4G4B4) - 16usize];
    ["Offset of field: VkPhysicalDevice4444FormatsFeaturesEXT::formatA4B4G4R4"]
        [::std::mem::offset_of!(VkPhysicalDevice4444FormatsFeaturesEXT, formatA4B4G4R4) - 20usize];
};
impl Default for VkPhysicalDevice4444FormatsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT:
    VkDeviceFaultAddressTypeEXT = 0;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT:
    VkDeviceFaultAddressTypeEXT = 1;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT:
    VkDeviceFaultAddressTypeEXT = 2;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT:
    VkDeviceFaultAddressTypeEXT = 3;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT : VkDeviceFaultAddressTypeEXT = 4 ;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT : VkDeviceFaultAddressTypeEXT = 5 ;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT:
    VkDeviceFaultAddressTypeEXT = 6;
pub const VkDeviceFaultAddressTypeEXT_VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT:
    VkDeviceFaultAddressTypeEXT = 2147483647;
pub type VkDeviceFaultAddressTypeEXT = ::std::os::raw::c_uint;
pub const VkDeviceFaultVendorBinaryHeaderVersionEXT_VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT : VkDeviceFaultVendorBinaryHeaderVersionEXT = 1 ;
pub const VkDeviceFaultVendorBinaryHeaderVersionEXT_VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT : VkDeviceFaultVendorBinaryHeaderVersionEXT = 2147483647 ;
pub type VkDeviceFaultVendorBinaryHeaderVersionEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFaultFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceFault: VkBool32,
    pub deviceFaultVendorBinary: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFaultFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceFaultFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceFaultFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceFaultFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFaultFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFaultFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::deviceFault"]
        [::std::mem::offset_of!(VkPhysicalDeviceFaultFeaturesEXT, deviceFault) - 16usize];
    ["Offset of field: VkPhysicalDeviceFaultFeaturesEXT::deviceFaultVendorBinary"][::std::mem::offset_of!(
        VkPhysicalDeviceFaultFeaturesEXT,
        deviceFaultVendorBinary
    ) - 20usize];
};
impl Default for VkPhysicalDeviceFaultFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceFaultCountsEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub addressInfoCount: u32,
    pub vendorInfoCount: u32,
    pub vendorBinarySize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultCountsEXT"][::std::mem::size_of::<VkDeviceFaultCountsEXT>() - 32usize];
    ["Alignment of VkDeviceFaultCountsEXT"]
        [::std::mem::align_of::<VkDeviceFaultCountsEXT>() - 8usize];
    ["Offset of field: VkDeviceFaultCountsEXT::sType"]
        [::std::mem::offset_of!(VkDeviceFaultCountsEXT, sType) - 0usize];
    ["Offset of field: VkDeviceFaultCountsEXT::pNext"]
        [::std::mem::offset_of!(VkDeviceFaultCountsEXT, pNext) - 8usize];
    ["Offset of field: VkDeviceFaultCountsEXT::addressInfoCount"]
        [::std::mem::offset_of!(VkDeviceFaultCountsEXT, addressInfoCount) - 16usize];
    ["Offset of field: VkDeviceFaultCountsEXT::vendorInfoCount"]
        [::std::mem::offset_of!(VkDeviceFaultCountsEXT, vendorInfoCount) - 20usize];
    ["Offset of field: VkDeviceFaultCountsEXT::vendorBinarySize"]
        [::std::mem::offset_of!(VkDeviceFaultCountsEXT, vendorBinarySize) - 24usize];
};
impl Default for VkDeviceFaultCountsEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceFaultAddressInfoEXT {
    pub addressType: VkDeviceFaultAddressTypeEXT,
    pub reportedAddress: VkDeviceAddress,
    pub addressPrecision: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultAddressInfoEXT"]
        [::std::mem::size_of::<VkDeviceFaultAddressInfoEXT>() - 24usize];
    ["Alignment of VkDeviceFaultAddressInfoEXT"]
        [::std::mem::align_of::<VkDeviceFaultAddressInfoEXT>() - 8usize];
    ["Offset of field: VkDeviceFaultAddressInfoEXT::addressType"]
        [::std::mem::offset_of!(VkDeviceFaultAddressInfoEXT, addressType) - 0usize];
    ["Offset of field: VkDeviceFaultAddressInfoEXT::reportedAddress"]
        [::std::mem::offset_of!(VkDeviceFaultAddressInfoEXT, reportedAddress) - 8usize];
    ["Offset of field: VkDeviceFaultAddressInfoEXT::addressPrecision"]
        [::std::mem::offset_of!(VkDeviceFaultAddressInfoEXT, addressPrecision) - 16usize];
};
impl Default for VkDeviceFaultAddressInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceFaultVendorInfoEXT {
    pub description: [::std::os::raw::c_char; 256usize],
    pub vendorFaultCode: u64,
    pub vendorFaultData: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultVendorInfoEXT"]
        [::std::mem::size_of::<VkDeviceFaultVendorInfoEXT>() - 272usize];
    ["Alignment of VkDeviceFaultVendorInfoEXT"]
        [::std::mem::align_of::<VkDeviceFaultVendorInfoEXT>() - 8usize];
    ["Offset of field: VkDeviceFaultVendorInfoEXT::description"]
        [::std::mem::offset_of!(VkDeviceFaultVendorInfoEXT, description) - 0usize];
    ["Offset of field: VkDeviceFaultVendorInfoEXT::vendorFaultCode"]
        [::std::mem::offset_of!(VkDeviceFaultVendorInfoEXT, vendorFaultCode) - 256usize];
    ["Offset of field: VkDeviceFaultVendorInfoEXT::vendorFaultData"]
        [::std::mem::offset_of!(VkDeviceFaultVendorInfoEXT, vendorFaultData) - 264usize];
};
impl Default for VkDeviceFaultVendorInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceFaultInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub description: [::std::os::raw::c_char; 256usize],
    pub pAddressInfos: *mut VkDeviceFaultAddressInfoEXT,
    pub pVendorInfos: *mut VkDeviceFaultVendorInfoEXT,
    pub pVendorBinaryData: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultInfoEXT"][::std::mem::size_of::<VkDeviceFaultInfoEXT>() - 296usize];
    ["Alignment of VkDeviceFaultInfoEXT"][::std::mem::align_of::<VkDeviceFaultInfoEXT>() - 8usize];
    ["Offset of field: VkDeviceFaultInfoEXT::sType"]
        [::std::mem::offset_of!(VkDeviceFaultInfoEXT, sType) - 0usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pNext"]
        [::std::mem::offset_of!(VkDeviceFaultInfoEXT, pNext) - 8usize];
    ["Offset of field: VkDeviceFaultInfoEXT::description"]
        [::std::mem::offset_of!(VkDeviceFaultInfoEXT, description) - 16usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pAddressInfos"]
        [::std::mem::offset_of!(VkDeviceFaultInfoEXT, pAddressInfos) - 272usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pVendorInfos"]
        [::std::mem::offset_of!(VkDeviceFaultInfoEXT, pVendorInfos) - 280usize];
    ["Offset of field: VkDeviceFaultInfoEXT::pVendorBinaryData"]
        [::std::mem::offset_of!(VkDeviceFaultInfoEXT, pVendorBinaryData) - 288usize];
};
impl Default for VkDeviceFaultInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    pub headerSize: u32,
    pub headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT,
    pub vendorID: u32,
    pub deviceID: u32,
    pub driverVersion: u32,
    pub pipelineCacheUUID: [u8; 16usize],
    pub applicationNameOffset: u32,
    pub applicationVersion: u32,
    pub engineNameOffset: u32,
    pub engineVersion: u32,
    pub apiVersion: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceFaultVendorBinaryHeaderVersionOneEXT"]
        [::std::mem::size_of::<VkDeviceFaultVendorBinaryHeaderVersionOneEXT>() - 56usize];
    ["Alignment of VkDeviceFaultVendorBinaryHeaderVersionOneEXT"]
        [::std::mem::align_of::<VkDeviceFaultVendorBinaryHeaderVersionOneEXT>() - 4usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::headerSize"]
        [::std::mem::offset_of!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, headerSize) - 0usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::headerVersion"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        headerVersion
    ) - 4usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::vendorID"]
        [::std::mem::offset_of!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, vendorID) - 8usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::deviceID"]
        [::std::mem::offset_of!(VkDeviceFaultVendorBinaryHeaderVersionOneEXT, deviceID) - 12usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::driverVersion"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        driverVersion
    ) - 16usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::pipelineCacheUUID"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        pipelineCacheUUID
    )
        - 20usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::applicationNameOffset"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        applicationNameOffset
    )
        - 36usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::applicationVersion"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        applicationVersion
    )
        - 40usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::engineNameOffset"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        engineNameOffset
    )
        - 44usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::engineVersion"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        engineVersion
    ) - 48usize];
    ["Offset of field: VkDeviceFaultVendorBinaryHeaderVersionOneEXT::apiVersion"][::std::mem::offset_of!(
        VkDeviceFaultVendorBinaryHeaderVersionOneEXT,
        apiVersion
    ) - 52usize];
};
impl Default for VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDeviceFaultInfoEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pFaultCounts: *mut VkDeviceFaultCountsEXT,
        pFaultInfo: *mut VkDeviceFaultInfoEXT,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetDeviceFaultInfoEXT(
        device: VkDevice,
        pFaultCounts: *mut VkDeviceFaultCountsEXT,
        pFaultInfo: *mut VkDeviceFaultInfoEXT,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rasterizationOrderColorAttachmentAccess: VkBool32,
    pub rasterizationOrderDepthAttachmentAccess: VkBool32,
    pub rasterizationOrderStencilAttachmentAccess: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"][::std::mem::size_of::<
        VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
    >() - 32usize];
    ["Alignment of VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT>()
            - 8usize];
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::rasterizationOrderColorAttachmentAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT , rasterizationOrderColorAttachmentAccess) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::rasterizationOrderDepthAttachmentAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT , rasterizationOrderDepthAttachmentAccess) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT::rasterizationOrderStencilAttachmentAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT , rasterizationOrderStencilAttachmentAccess) - 24usize] ;
};
impl Default for VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM =
    VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub formatRgba10x6WithoutYCbCrSampler: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT::formatRgba10x6WithoutYCbCrSampler"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT , formatRgba10x6WithoutYCbCrSampler) - 16usize] ;
};
impl Default for VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub mutableDescriptorType: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT::mutableDescriptorType"][::std::mem::offset_of!(
        VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT,
        mutableDescriptorType
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE =
    VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMutableDescriptorTypeListEXT {
    pub descriptorTypeCount: u32,
    pub pDescriptorTypes: *const VkDescriptorType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMutableDescriptorTypeListEXT"]
        [::std::mem::size_of::<VkMutableDescriptorTypeListEXT>() - 16usize];
    ["Alignment of VkMutableDescriptorTypeListEXT"]
        [::std::mem::align_of::<VkMutableDescriptorTypeListEXT>() - 8usize];
    ["Offset of field: VkMutableDescriptorTypeListEXT::descriptorTypeCount"]
        [::std::mem::offset_of!(VkMutableDescriptorTypeListEXT, descriptorTypeCount) - 0usize];
    ["Offset of field: VkMutableDescriptorTypeListEXT::pDescriptorTypes"]
        [::std::mem::offset_of!(VkMutableDescriptorTypeListEXT, pDescriptorTypes) - 8usize];
};
impl Default for VkMutableDescriptorTypeListEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMutableDescriptorTypeCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub mutableDescriptorTypeListCount: u32,
    pub pMutableDescriptorTypeLists: *const VkMutableDescriptorTypeListEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMutableDescriptorTypeCreateInfoEXT"]
        [::std::mem::size_of::<VkMutableDescriptorTypeCreateInfoEXT>() - 32usize];
    ["Alignment of VkMutableDescriptorTypeCreateInfoEXT"]
        [::std::mem::align_of::<VkMutableDescriptorTypeCreateInfoEXT>() - 8usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkMutableDescriptorTypeCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMutableDescriptorTypeCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::mutableDescriptorTypeListCount"][::std::mem::offset_of!(
        VkMutableDescriptorTypeCreateInfoEXT,
        mutableDescriptorTypeListCount
    )
        - 16usize];
    ["Offset of field: VkMutableDescriptorTypeCreateInfoEXT::pMutableDescriptorTypeLists"][::std::mem::offset_of!(
        VkMutableDescriptorTypeCreateInfoEXT,
        pMutableDescriptorTypeLists
    )
        - 24usize];
};
impl Default for VkMutableDescriptorTypeCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vertexInputDynamicState: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT::vertexInputDynamicState"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT , vertexInputDynamicState) - 16usize] ;
};
impl Default for VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputBindingDescription2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub binding: u32,
    pub stride: u32,
    pub inputRate: VkVertexInputRate,
    pub divisor: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputBindingDescription2EXT"]
        [::std::mem::size_of::<VkVertexInputBindingDescription2EXT>() - 32usize];
    ["Alignment of VkVertexInputBindingDescription2EXT"]
        [::std::mem::align_of::<VkVertexInputBindingDescription2EXT>() - 8usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::sType"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription2EXT, sType) - 0usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::pNext"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription2EXT, pNext) - 8usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::binding"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription2EXT, binding) - 16usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::stride"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription2EXT, stride) - 20usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::inputRate"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription2EXT, inputRate) - 24usize];
    ["Offset of field: VkVertexInputBindingDescription2EXT::divisor"]
        [::std::mem::offset_of!(VkVertexInputBindingDescription2EXT, divisor) - 28usize];
};
impl Default for VkVertexInputBindingDescription2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkVertexInputAttributeDescription2EXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub location: u32,
    pub binding: u32,
    pub format: VkFormat,
    pub offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkVertexInputAttributeDescription2EXT"]
        [::std::mem::size_of::<VkVertexInputAttributeDescription2EXT>() - 32usize];
    ["Alignment of VkVertexInputAttributeDescription2EXT"]
        [::std::mem::align_of::<VkVertexInputAttributeDescription2EXT>() - 8usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::sType"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription2EXT, sType) - 0usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::pNext"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription2EXT, pNext) - 8usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::location"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription2EXT, location) - 16usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::binding"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription2EXT, binding) - 20usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::format"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription2EXT, format) - 24usize];
    ["Offset of field: VkVertexInputAttributeDescription2EXT::offset"]
        [::std::mem::offset_of!(VkVertexInputAttributeDescription2EXT, offset) - 28usize];
};
impl Default for VkVertexInputAttributeDescription2EXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetVertexInputEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        vertexBindingDescriptionCount: u32,
        pVertexBindingDescriptions: *const VkVertexInputBindingDescription2EXT,
        vertexAttributeDescriptionCount: u32,
        pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription2EXT,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetVertexInputEXT(
        commandBuffer: VkCommandBuffer,
        vertexBindingDescriptionCount: u32,
        pVertexBindingDescriptions: *const VkVertexInputBindingDescription2EXT,
        vertexAttributeDescriptionCount: u32,
        pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription2EXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDrmPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hasPrimary: VkBool32,
    pub hasRender: VkBool32,
    pub primaryMajor: i64,
    pub primaryMinor: i64,
    pub renderMajor: i64,
    pub renderMinor: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDrmPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDrmPropertiesEXT>() - 56usize];
    ["Alignment of VkPhysicalDeviceDrmPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDrmPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::hasPrimary"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, hasPrimary) - 16usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::hasRender"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, hasRender) - 20usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::primaryMajor"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, primaryMajor) - 24usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::primaryMinor"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, primaryMinor) - 32usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::renderMajor"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, renderMajor) - 40usize];
    ["Offset of field: VkPhysicalDeviceDrmPropertiesEXT::renderMinor"]
        [::std::mem::offset_of!(VkPhysicalDeviceDrmPropertiesEXT, renderMinor) - 48usize];
};
impl Default for VkPhysicalDeviceDrmPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkDeviceAddressBindingTypeEXT_VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT:
    VkDeviceAddressBindingTypeEXT = 0;
pub const VkDeviceAddressBindingTypeEXT_VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT:
    VkDeviceAddressBindingTypeEXT = 1;
pub const VkDeviceAddressBindingTypeEXT_VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT:
    VkDeviceAddressBindingTypeEXT = 2147483647;
pub type VkDeviceAddressBindingTypeEXT = ::std::os::raw::c_uint;
pub const VkDeviceAddressBindingFlagBitsEXT_VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT:
    VkDeviceAddressBindingFlagBitsEXT = 1;
pub const VkDeviceAddressBindingFlagBitsEXT_VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT:
    VkDeviceAddressBindingFlagBitsEXT = 2147483647;
pub type VkDeviceAddressBindingFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkDeviceAddressBindingFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub reportAddressBinding: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAddressBindingReportFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceAddressBindingReportFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceAddressBindingReportFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceAddressBindingReportFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceAddressBindingReportFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceAddressBindingReportFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAddressBindingReportFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceAddressBindingReportFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceAddressBindingReportFeaturesEXT::reportAddressBinding"][::std::mem::offset_of!(
        VkPhysicalDeviceAddressBindingReportFeaturesEXT,
        reportAddressBinding
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceAddressBindingReportFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceAddressBindingCallbackDataEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkDeviceAddressBindingFlagsEXT,
    pub baseAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
    pub bindingType: VkDeviceAddressBindingTypeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceAddressBindingCallbackDataEXT"]
        [::std::mem::size_of::<VkDeviceAddressBindingCallbackDataEXT>() - 48usize];
    ["Alignment of VkDeviceAddressBindingCallbackDataEXT"]
        [::std::mem::align_of::<VkDeviceAddressBindingCallbackDataEXT>() - 8usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::sType"]
        [::std::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, sType) - 0usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::pNext"]
        [::std::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, pNext) - 8usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::flags"]
        [::std::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, flags) - 16usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::baseAddress"]
        [::std::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, baseAddress) - 24usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::size"]
        [::std::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, size) - 32usize];
    ["Offset of field: VkDeviceAddressBindingCallbackDataEXT::bindingType"]
        [::std::mem::offset_of!(VkDeviceAddressBindingCallbackDataEXT, bindingType) - 40usize];
};
impl Default for VkDeviceAddressBindingCallbackDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthClipControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClipControl: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClipControlFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDepthClipControlFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDepthClipControlFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDepthClipControlFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClipControlFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClipControlFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClipControlFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClipControlFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClipControlFeaturesEXT::depthClipControl"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthClipControlFeaturesEXT,
        depthClipControl
    ) - 16usize];
};
impl Default for VkPhysicalDeviceDepthClipControlFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportDepthClipControlCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub negativeOneToOne: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportDepthClipControlCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineViewportDepthClipControlCreateInfoEXT>() - 24usize];
    ["Alignment of VkPipelineViewportDepthClipControlCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineViewportDepthClipControlCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineViewportDepthClipControlCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkPipelineViewportDepthClipControlCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineViewportDepthClipControlCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPipelineViewportDepthClipControlCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPipelineViewportDepthClipControlCreateInfoEXT::negativeOneToOne"][::std::mem::offset_of!(
        VkPipelineViewportDepthClipControlCreateInfoEXT,
        negativeOneToOne
    )
        - 16usize];
};
impl Default for VkPipelineViewportDepthClipControlCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub primitiveTopologyListRestart: VkBool32,
    pub primitiveTopologyPatchListRestart: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"][::std::mem::size_of::<
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
    >() - 24usize];
    ["Alignment of VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT"][::std::mem::align_of::<
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
    >() - 8usize];
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::primitiveTopologyListRestart"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT , primitiveTopologyListRestart) - 16usize] ;
    ["Offset of field: VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT::primitiveTopologyPatchListRestart"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT , primitiveTopologyPatchListRestart) - 20usize] ;
};
impl Default for VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentModeFifoLatestReady: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT::presentModeFifoLatestReady"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT , presentModeFifoLatestReady) - 16usize] ;
};
impl Default for VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassShadingPipelineCreateInfoHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub renderPass: VkRenderPass,
    pub subpass: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassShadingPipelineCreateInfoHUAWEI"]
        [::std::mem::size_of::<VkSubpassShadingPipelineCreateInfoHUAWEI>() - 32usize];
    ["Alignment of VkSubpassShadingPipelineCreateInfoHUAWEI"]
        [::std::mem::align_of::<VkSubpassShadingPipelineCreateInfoHUAWEI>() - 8usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::sType"]
        [::std::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, sType) - 0usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::pNext"]
        [::std::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, pNext) - 8usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::renderPass"]
        [::std::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, renderPass) - 16usize];
    ["Offset of field: VkSubpassShadingPipelineCreateInfoHUAWEI::subpass"]
        [::std::mem::offset_of!(VkSubpassShadingPipelineCreateInfoHUAWEI, subpass) - 24usize];
};
impl Default for VkSubpassShadingPipelineCreateInfoHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subpassShading: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"]
        [::std::mem::size_of::<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI>() - 24usize];
    ["Alignment of VkPhysicalDeviceSubpassShadingFeaturesHUAWEI"]
        [::std::mem::align_of::<VkPhysicalDeviceSubpassShadingFeaturesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubpassShadingFeaturesHUAWEI, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingFeaturesHUAWEI::subpassShading"][::std::mem::offset_of!(
        VkPhysicalDeviceSubpassShadingFeaturesHUAWEI,
        subpassShading
    ) - 16usize];
};
impl Default for VkPhysicalDeviceSubpassShadingFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxSubpassShadingWorkgroupSizeAspectRatio: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubpassShadingPropertiesHUAWEI"]
        [::std::mem::size_of::<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>() - 24usize];
    ["Alignment of VkPhysicalDeviceSubpassShadingPropertiesHUAWEI"]
        [::std::mem::align_of::<VkPhysicalDeviceSubpassShadingPropertiesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubpassShadingPropertiesHUAWEI, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubpassShadingPropertiesHUAWEI::maxSubpassShadingWorkgroupSizeAspectRatio"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceSubpassShadingPropertiesHUAWEI , maxSubpassShadingWorkgroupSizeAspectRatio) - 16usize] ;
};
impl Default for VkPhysicalDeviceSubpassShadingPropertiesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        renderpass: VkRenderPass,
        pMaxWorkgroupSize: *mut VkExtent2D,
    ) -> VkResult,
>;
pub type PFN_vkCmdSubpassShadingHUAWEI =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer)>;
unsafe extern "system" {
    pub fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(
        device: VkDevice,
        renderpass: VkRenderPass,
        pMaxWorkgroupSize: *mut VkExtent2D,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdSubpassShadingHUAWEI(commandBuffer: VkCommandBuffer);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub invocationMask: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"]
        [::std::mem::size_of::<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI>() - 24usize];
    ["Alignment of VkPhysicalDeviceInvocationMaskFeaturesHUAWEI"]
        [::std::mem::align_of::<VkPhysicalDeviceInvocationMaskFeaturesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceInvocationMaskFeaturesHUAWEI, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceInvocationMaskFeaturesHUAWEI::invocationMask"][::std::mem::offset_of!(
        VkPhysicalDeviceInvocationMaskFeaturesHUAWEI,
        invocationMask
    ) - 16usize];
};
impl Default for VkPhysicalDeviceInvocationMaskFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdBindInvocationMaskHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdBindInvocationMaskHUAWEI(
        commandBuffer: VkCommandBuffer,
        imageView: VkImageView,
        imageLayout: VkImageLayout,
    );
}
pub type VkRemoteAddressNV = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMemoryGetRemoteAddressInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub memory: VkDeviceMemory,
    pub handleType: VkExternalMemoryHandleTypeFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMemoryGetRemoteAddressInfoNV"]
        [::std::mem::size_of::<VkMemoryGetRemoteAddressInfoNV>() - 32usize];
    ["Alignment of VkMemoryGetRemoteAddressInfoNV"]
        [::std::mem::align_of::<VkMemoryGetRemoteAddressInfoNV>() - 8usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::sType"]
        [::std::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, sType) - 0usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::pNext"]
        [::std::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, pNext) - 8usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::memory"]
        [::std::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, memory) - 16usize];
    ["Offset of field: VkMemoryGetRemoteAddressInfoNV::handleType"]
        [::std::mem::offset_of!(VkMemoryGetRemoteAddressInfoNV, handleType) - 24usize];
};
impl Default for VkMemoryGetRemoteAddressInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub externalMemoryRDMA: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceExternalMemoryRDMAFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceExternalMemoryRDMAFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExternalMemoryRDMAFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExternalMemoryRDMAFeaturesNV::externalMemoryRDMA"][::std::mem::offset_of!(
        VkPhysicalDeviceExternalMemoryRDMAFeaturesNV,
        externalMemoryRDMA
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceExternalMemoryRDMAFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetMemoryRemoteAddressNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pMemoryGetRemoteAddressInfo: *const VkMemoryGetRemoteAddressInfoNV,
        pAddress: *mut VkRemoteAddressNV,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetMemoryRemoteAddressNV(
        device: VkDevice,
        pMemoryGetRemoteAddressInfo: *const VkMemoryGetRemoteAddressInfoNV,
        pAddress: *mut VkRemoteAddressNV,
    ) -> VkResult;
}
pub type VkPipelineInfoEXT = VkPipelineInfoKHR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelinePropertiesIdentifierEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineIdentifier: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelinePropertiesIdentifierEXT"]
        [::std::mem::size_of::<VkPipelinePropertiesIdentifierEXT>() - 32usize];
    ["Alignment of VkPipelinePropertiesIdentifierEXT"]
        [::std::mem::align_of::<VkPipelinePropertiesIdentifierEXT>() - 8usize];
    ["Offset of field: VkPipelinePropertiesIdentifierEXT::sType"]
        [::std::mem::offset_of!(VkPipelinePropertiesIdentifierEXT, sType) - 0usize];
    ["Offset of field: VkPipelinePropertiesIdentifierEXT::pNext"]
        [::std::mem::offset_of!(VkPipelinePropertiesIdentifierEXT, pNext) - 8usize];
    ["Offset of field: VkPipelinePropertiesIdentifierEXT::pipelineIdentifier"]
        [::std::mem::offset_of!(VkPipelinePropertiesIdentifierEXT, pipelineIdentifier) - 16usize];
};
impl Default for VkPipelinePropertiesIdentifierEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelinePropertiesIdentifier: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelinePropertiesFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDevicePipelinePropertiesFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelinePropertiesFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDevicePipelinePropertiesFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelinePropertiesFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelinePropertiesFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelinePropertiesFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePipelinePropertiesFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelinePropertiesFeaturesEXT::pipelinePropertiesIdentifier"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelinePropertiesFeaturesEXT , pipelinePropertiesIdentifier) - 16usize] ;
};
impl Default for VkPhysicalDevicePipelinePropertiesFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPipelinePropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoEXT,
        pPipelineProperties: *mut VkBaseOutStructure,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetPipelinePropertiesEXT(
        device: VkDevice,
        pPipelineInfo: *const VkPipelineInfoEXT,
        pPipelineProperties: *mut VkBaseOutStructure,
    ) -> VkResult;
}
pub const VkFrameBoundaryFlagBitsEXT_VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT:
    VkFrameBoundaryFlagBitsEXT = 1;
pub const VkFrameBoundaryFlagBitsEXT_VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT:
    VkFrameBoundaryFlagBitsEXT = 2147483647;
pub type VkFrameBoundaryFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkFrameBoundaryFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFrameBoundaryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub frameBoundary: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFrameBoundaryFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceFrameBoundaryFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceFrameBoundaryFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceFrameBoundaryFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFrameBoundaryFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceFrameBoundaryFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceFrameBoundaryFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceFrameBoundaryFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceFrameBoundaryFeaturesEXT::frameBoundary"]
        [::std::mem::offset_of!(VkPhysicalDeviceFrameBoundaryFeaturesEXT, frameBoundary) - 16usize];
};
impl Default for VkPhysicalDeviceFrameBoundaryFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkFrameBoundaryEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkFrameBoundaryFlagsEXT,
    pub frameID: u64,
    pub imageCount: u32,
    pub pImages: *const VkImage,
    pub bufferCount: u32,
    pub pBuffers: *const VkBuffer,
    pub tagName: u64,
    pub tagSize: usize,
    pub pTag: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkFrameBoundaryEXT"][::std::mem::size_of::<VkFrameBoundaryEXT>() - 88usize];
    ["Alignment of VkFrameBoundaryEXT"][::std::mem::align_of::<VkFrameBoundaryEXT>() - 8usize];
    ["Offset of field: VkFrameBoundaryEXT::sType"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, sType) - 0usize];
    ["Offset of field: VkFrameBoundaryEXT::pNext"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, pNext) - 8usize];
    ["Offset of field: VkFrameBoundaryEXT::flags"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, flags) - 16usize];
    ["Offset of field: VkFrameBoundaryEXT::frameID"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, frameID) - 24usize];
    ["Offset of field: VkFrameBoundaryEXT::imageCount"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, imageCount) - 32usize];
    ["Offset of field: VkFrameBoundaryEXT::pImages"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, pImages) - 40usize];
    ["Offset of field: VkFrameBoundaryEXT::bufferCount"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, bufferCount) - 48usize];
    ["Offset of field: VkFrameBoundaryEXT::pBuffers"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, pBuffers) - 56usize];
    ["Offset of field: VkFrameBoundaryEXT::tagName"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, tagName) - 64usize];
    ["Offset of field: VkFrameBoundaryEXT::tagSize"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, tagSize) - 72usize];
    ["Offset of field: VkFrameBoundaryEXT::pTag"]
        [::std::mem::offset_of!(VkFrameBoundaryEXT, pTag) - 80usize];
};
impl Default for VkFrameBoundaryEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multisampledRenderToSingleSampled: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"][::std::mem::size_of::<
        VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT>()
            - 8usize];
    ["Offset of field: VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT::multisampledRenderToSingleSampled"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT , multisampledRenderToSingleSampled) - 16usize] ;
};
impl Default for VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassResolvePerformanceQueryEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub optimal: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassResolvePerformanceQueryEXT"]
        [::std::mem::size_of::<VkSubpassResolvePerformanceQueryEXT>() - 24usize];
    ["Alignment of VkSubpassResolvePerformanceQueryEXT"]
        [::std::mem::align_of::<VkSubpassResolvePerformanceQueryEXT>() - 8usize];
    ["Offset of field: VkSubpassResolvePerformanceQueryEXT::sType"]
        [::std::mem::offset_of!(VkSubpassResolvePerformanceQueryEXT, sType) - 0usize];
    ["Offset of field: VkSubpassResolvePerformanceQueryEXT::pNext"]
        [::std::mem::offset_of!(VkSubpassResolvePerformanceQueryEXT, pNext) - 8usize];
    ["Offset of field: VkSubpassResolvePerformanceQueryEXT::optimal"]
        [::std::mem::offset_of!(VkSubpassResolvePerformanceQueryEXT, optimal) - 16usize];
};
impl Default for VkSubpassResolvePerformanceQueryEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMultisampledRenderToSingleSampledInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub multisampledRenderToSingleSampledEnable: VkBool32,
    pub rasterizationSamples: VkSampleCountFlagBits,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultisampledRenderToSingleSampledInfoEXT"]
        [::std::mem::size_of::<VkMultisampledRenderToSingleSampledInfoEXT>() - 24usize];
    ["Alignment of VkMultisampledRenderToSingleSampledInfoEXT"]
        [::std::mem::align_of::<VkMultisampledRenderToSingleSampledInfoEXT>() - 8usize];
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::sType"]
        [::std::mem::offset_of!(VkMultisampledRenderToSingleSampledInfoEXT, sType) - 0usize];
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMultisampledRenderToSingleSampledInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::multisampledRenderToSingleSampledEnable"] [:: std :: mem :: offset_of ! (VkMultisampledRenderToSingleSampledInfoEXT , multisampledRenderToSingleSampledEnable) - 16usize] ;
    ["Offset of field: VkMultisampledRenderToSingleSampledInfoEXT::rasterizationSamples"][::std::mem::offset_of!(
        VkMultisampledRenderToSingleSampledInfoEXT,
        rasterizationSamples
    )
        - 20usize];
};
impl Default for VkMultisampledRenderToSingleSampledInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedDynamicState2: VkBool32,
    pub extendedDynamicState2LogicOp: VkBool32,
    pub extendedDynamicState2PatchControlPoints: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicState2FeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicState2FeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicState2FeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState2FeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::extendedDynamicState2"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicState2FeaturesEXT,
        extendedDynamicState2
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::extendedDynamicState2LogicOp"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState2FeaturesEXT , extendedDynamicState2LogicOp) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState2FeaturesEXT::extendedDynamicState2PatchControlPoints"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState2FeaturesEXT , extendedDynamicState2PatchControlPoints) - 24usize] ;
};
impl Default for VkPhysicalDeviceExtendedDynamicState2FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetPatchControlPointsEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, patchControlPoints: u32),
>;
pub type PFN_vkCmdSetRasterizerDiscardEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthBiasEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32),
>;
pub type PFN_vkCmdSetLogicOpEXT =
    ::std::option::Option<unsafe extern "system" fn(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp)>;
pub type PFN_vkCmdSetPrimitiveRestartEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32),
>;
unsafe extern "system" {
    pub fn vkCmdSetPatchControlPointsEXT(commandBuffer: VkCommandBuffer, patchControlPoints: u32);
}
unsafe extern "system" {
    pub fn vkCmdSetRasterizerDiscardEnableEXT(
        commandBuffer: VkCommandBuffer,
        rasterizerDiscardEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDepthBiasEnableEXT(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetLogicOpEXT(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp);
}
unsafe extern "system" {
    pub fn vkCmdSetPrimitiveRestartEnableEXT(
        commandBuffer: VkCommandBuffer,
        primitiveRestartEnable: VkBool32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub colorWriteEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceColorWriteEnableFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceColorWriteEnableFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceColorWriteEnableFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceColorWriteEnableFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceColorWriteEnableFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceColorWriteEnableFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceColorWriteEnableFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceColorWriteEnableFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceColorWriteEnableFeaturesEXT::colorWriteEnable"][::std::mem::offset_of!(
        VkPhysicalDeviceColorWriteEnableFeaturesEXT,
        colorWriteEnable
    ) - 16usize];
};
impl Default for VkPhysicalDeviceColorWriteEnableFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineColorWriteCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub attachmentCount: u32,
    pub pColorWriteEnables: *const VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineColorWriteCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineColorWriteCreateInfoEXT>() - 32usize];
    ["Alignment of VkPipelineColorWriteCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineColorWriteCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::attachmentCount"]
        [::std::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, attachmentCount) - 16usize];
    ["Offset of field: VkPipelineColorWriteCreateInfoEXT::pColorWriteEnables"]
        [::std::mem::offset_of!(VkPipelineColorWriteCreateInfoEXT, pColorWriteEnables) - 24usize];
};
impl Default for VkPipelineColorWriteCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetColorWriteEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pColorWriteEnables: *const VkBool32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetColorWriteEnableEXT(
        commandBuffer: VkCommandBuffer,
        attachmentCount: u32,
        pColorWriteEnables: *const VkBool32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub primitivesGeneratedQuery: VkBool32,
    pub primitivesGeneratedQueryWithRasterizerDiscard: VkBool32,
    pub primitivesGeneratedQueryWithNonZeroStreams: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::primitivesGeneratedQuery"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT , primitivesGeneratedQuery) - 16usize] ;
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::primitivesGeneratedQueryWithRasterizerDiscard"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT , primitivesGeneratedQueryWithRasterizerDiscard) - 20usize] ;
    ["Offset of field: VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT::primitivesGeneratedQueryWithNonZeroStreams"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT , primitivesGeneratedQueryWithNonZeroStreams) - 24usize] ;
};
impl Default for VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT =
    VkPhysicalDeviceGlobalPriorityQueryFeatures;
pub type VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityProperties;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub minLod: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageViewMinLodFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceImageViewMinLodFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageViewMinLodFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceImageViewMinLodFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageViewMinLodFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageViewMinLodFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageViewMinLodFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageViewMinLodFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageViewMinLodFeaturesEXT::minLod"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageViewMinLodFeaturesEXT, minLod) - 16usize];
};
impl Default for VkPhysicalDeviceImageViewMinLodFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewMinLodCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub minLod: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewMinLodCreateInfoEXT"]
        [::std::mem::size_of::<VkImageViewMinLodCreateInfoEXT>() - 24usize];
    ["Alignment of VkImageViewMinLodCreateInfoEXT"]
        [::std::mem::align_of::<VkImageViewMinLodCreateInfoEXT>() - 8usize];
    ["Offset of field: VkImageViewMinLodCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkImageViewMinLodCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageViewMinLodCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkImageViewMinLodCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkImageViewMinLodCreateInfoEXT::minLod"]
        [::std::mem::offset_of!(VkImageViewMinLodCreateInfoEXT, minLod) - 16usize];
};
impl Default for VkImageViewMinLodCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiDrawFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiDraw: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiDrawFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMultiDrawFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceMultiDrawFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMultiDrawFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiDrawFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiDrawFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawFeaturesEXT::multiDraw"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiDrawFeaturesEXT, multiDraw) - 16usize];
};
impl Default for VkPhysicalDeviceMultiDrawFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiDrawPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxMultiDrawCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiDrawPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMultiDrawPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceMultiDrawPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMultiDrawPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiDrawPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMultiDrawPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiDrawPropertiesEXT::maxMultiDrawCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiDrawPropertiesEXT,
        maxMultiDrawCount
    ) - 16usize];
};
impl Default for VkPhysicalDeviceMultiDrawPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMultiDrawInfoEXT {
    pub firstVertex: u32,
    pub vertexCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiDrawInfoEXT"][::std::mem::size_of::<VkMultiDrawInfoEXT>() - 8usize];
    ["Alignment of VkMultiDrawInfoEXT"][::std::mem::align_of::<VkMultiDrawInfoEXT>() - 4usize];
    ["Offset of field: VkMultiDrawInfoEXT::firstVertex"]
        [::std::mem::offset_of!(VkMultiDrawInfoEXT, firstVertex) - 0usize];
    ["Offset of field: VkMultiDrawInfoEXT::vertexCount"]
        [::std::mem::offset_of!(VkMultiDrawInfoEXT, vertexCount) - 4usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMultiDrawIndexedInfoEXT {
    pub firstIndex: u32,
    pub indexCount: u32,
    pub vertexOffset: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiDrawIndexedInfoEXT"]
        [::std::mem::size_of::<VkMultiDrawIndexedInfoEXT>() - 12usize];
    ["Alignment of VkMultiDrawIndexedInfoEXT"]
        [::std::mem::align_of::<VkMultiDrawIndexedInfoEXT>() - 4usize];
    ["Offset of field: VkMultiDrawIndexedInfoEXT::firstIndex"]
        [::std::mem::offset_of!(VkMultiDrawIndexedInfoEXT, firstIndex) - 0usize];
    ["Offset of field: VkMultiDrawIndexedInfoEXT::indexCount"]
        [::std::mem::offset_of!(VkMultiDrawIndexedInfoEXT, indexCount) - 4usize];
    ["Offset of field: VkMultiDrawIndexedInfoEXT::vertexOffset"]
        [::std::mem::offset_of!(VkMultiDrawIndexedInfoEXT, vertexOffset) - 8usize];
};
pub type PFN_vkCmdDrawMultiEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pVertexInfo: *const VkMultiDrawInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMultiIndexedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pIndexInfo: *const VkMultiDrawIndexedInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
        pVertexOffset: *const i32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdDrawMultiEXT(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pVertexInfo: *const VkMultiDrawInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawMultiIndexedEXT(
        commandBuffer: VkCommandBuffer,
        drawCount: u32,
        pIndexInfo: *const VkMultiDrawIndexedInfoEXT,
        instanceCount: u32,
        firstInstance: u32,
        stride: u32,
        pVertexOffset: *const i32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub image2DViewOf3D: VkBool32,
    pub sampler2DViewOf3D: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceImage2DViewOf3DFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceImage2DViewOf3DFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImage2DViewOf3DFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::image2DViewOf3D"][::std::mem::offset_of!(
        VkPhysicalDeviceImage2DViewOf3DFeaturesEXT,
        image2DViewOf3D
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceImage2DViewOf3DFeaturesEXT::sampler2DViewOf3D"][::std::mem::offset_of!(
        VkPhysicalDeviceImage2DViewOf3DFeaturesEXT,
        sampler2DViewOf3D
    ) - 20usize];
};
impl Default for VkPhysicalDeviceImage2DViewOf3DFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderTileImageFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderTileImageColorReadAccess: VkBool32,
    pub shaderTileImageDepthReadAccess: VkBool32,
    pub shaderTileImageStencilReadAccess: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderTileImageFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderTileImageFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceShaderTileImageFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderTileImageFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderTileImageFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderTileImageFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::shaderTileImageColorReadAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImageFeaturesEXT , shaderTileImageColorReadAccess) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::shaderTileImageDepthReadAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImageFeaturesEXT , shaderTileImageDepthReadAccess) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImageFeaturesEXT::shaderTileImageStencilReadAccess"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImageFeaturesEXT , shaderTileImageStencilReadAccess) - 24usize] ;
};
impl Default for VkPhysicalDeviceShaderTileImageFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderTileImagePropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderTileImageCoherentReadAccelerated: VkBool32,
    pub shaderTileImageReadSampleFromPixelRateInvocation: VkBool32,
    pub shaderTileImageReadFromHelperInvocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderTileImagePropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderTileImagePropertiesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceShaderTileImagePropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderTileImagePropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderTileImagePropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderTileImagePropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::shaderTileImageCoherentReadAccelerated"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImagePropertiesEXT , shaderTileImageCoherentReadAccelerated) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::shaderTileImageReadSampleFromPixelRateInvocation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImagePropertiesEXT , shaderTileImageReadSampleFromPixelRateInvocation) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceShaderTileImagePropertiesEXT::shaderTileImageReadFromHelperInvocation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderTileImagePropertiesEXT , shaderTileImageReadFromHelperInvocation) - 24usize] ;
};
impl Default for VkPhysicalDeviceShaderTileImagePropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMicromapEXT_T {
    _unused: [u8; 0],
}
pub type VkMicromapEXT = *mut VkMicromapEXT_T;
pub const VkMicromapTypeEXT_VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT: VkMicromapTypeEXT = 0;
pub const VkMicromapTypeEXT_VK_MICROMAP_TYPE_MAX_ENUM_EXT: VkMicromapTypeEXT = 2147483647;
pub type VkMicromapTypeEXT = ::std::os::raw::c_uint;
pub const VkBuildMicromapModeEXT_VK_BUILD_MICROMAP_MODE_BUILD_EXT: VkBuildMicromapModeEXT = 0;
pub const VkBuildMicromapModeEXT_VK_BUILD_MICROMAP_MODE_MAX_ENUM_EXT: VkBuildMicromapModeEXT =
    2147483647;
pub type VkBuildMicromapModeEXT = ::std::os::raw::c_uint;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_CLONE_EXT: VkCopyMicromapModeEXT = 0;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_SERIALIZE_EXT: VkCopyMicromapModeEXT = 1;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT: VkCopyMicromapModeEXT = 2;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_COMPACT_EXT: VkCopyMicromapModeEXT = 3;
pub const VkCopyMicromapModeEXT_VK_COPY_MICROMAP_MODE_MAX_ENUM_EXT: VkCopyMicromapModeEXT =
    2147483647;
pub type VkCopyMicromapModeEXT = ::std::os::raw::c_uint;
pub const VkOpacityMicromapFormatEXT_VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT:
    VkOpacityMicromapFormatEXT = 1;
pub const VkOpacityMicromapFormatEXT_VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT:
    VkOpacityMicromapFormatEXT = 2;
pub const VkOpacityMicromapFormatEXT_VK_OPACITY_MICROMAP_FORMAT_MAX_ENUM_EXT:
    VkOpacityMicromapFormatEXT = 2147483647;
pub type VkOpacityMicromapFormatEXT = ::std::os::raw::c_uint;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT : VkOpacityMicromapSpecialIndexEXT = - 1 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT:
    VkOpacityMicromapSpecialIndexEXT = -2;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT : VkOpacityMicromapSpecialIndexEXT = - 3 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT : VkOpacityMicromapSpecialIndexEXT = - 4 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_CLUSTER_GEOMETRY_DISABLE_OPACITY_MICROMAP_NV : VkOpacityMicromapSpecialIndexEXT = - 5 ;
pub const VkOpacityMicromapSpecialIndexEXT_VK_OPACITY_MICROMAP_SPECIAL_INDEX_MAX_ENUM_EXT:
    VkOpacityMicromapSpecialIndexEXT = 2147483647;
pub type VkOpacityMicromapSpecialIndexEXT = ::std::os::raw::c_int;
pub const VkAccelerationStructureCompatibilityKHR_VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR : VkAccelerationStructureCompatibilityKHR = 0 ;
pub const VkAccelerationStructureCompatibilityKHR_VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR : VkAccelerationStructureCompatibilityKHR = 1 ;
pub const VkAccelerationStructureCompatibilityKHR_VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR : VkAccelerationStructureCompatibilityKHR = 2147483647 ;
pub type VkAccelerationStructureCompatibilityKHR = ::std::os::raw::c_uint;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR:
    VkAccelerationStructureBuildTypeKHR = 0;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR:
    VkAccelerationStructureBuildTypeKHR = 1;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR : VkAccelerationStructureBuildTypeKHR = 2 ;
pub const VkAccelerationStructureBuildTypeKHR_VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR:
    VkAccelerationStructureBuildTypeKHR = 2147483647;
pub type VkAccelerationStructureBuildTypeKHR = ::std::os::raw::c_uint;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_PREFER_FAST_TRACE_BIT_EXT:
    VkBuildMicromapFlagBitsEXT = 1;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_PREFER_FAST_BUILD_BIT_EXT:
    VkBuildMicromapFlagBitsEXT = 2;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_ALLOW_COMPACTION_BIT_EXT:
    VkBuildMicromapFlagBitsEXT = 4;
pub const VkBuildMicromapFlagBitsEXT_VK_BUILD_MICROMAP_FLAG_BITS_MAX_ENUM_EXT:
    VkBuildMicromapFlagBitsEXT = 2147483647;
pub type VkBuildMicromapFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkBuildMicromapFlagsEXT = VkFlags;
pub const VkMicromapCreateFlagBitsEXT_VK_MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT:
    VkMicromapCreateFlagBitsEXT = 1;
pub const VkMicromapCreateFlagBitsEXT_VK_MICROMAP_CREATE_FLAG_BITS_MAX_ENUM_EXT:
    VkMicromapCreateFlagBitsEXT = 2147483647;
pub type VkMicromapCreateFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkMicromapCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMicromapUsageEXT {
    pub count: u32,
    pub subdivisionLevel: u32,
    pub format: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapUsageEXT"][::std::mem::size_of::<VkMicromapUsageEXT>() - 12usize];
    ["Alignment of VkMicromapUsageEXT"][::std::mem::align_of::<VkMicromapUsageEXT>() - 4usize];
    ["Offset of field: VkMicromapUsageEXT::count"]
        [::std::mem::offset_of!(VkMicromapUsageEXT, count) - 0usize];
    ["Offset of field: VkMicromapUsageEXT::subdivisionLevel"]
        [::std::mem::offset_of!(VkMicromapUsageEXT, subdivisionLevel) - 4usize];
    ["Offset of field: VkMicromapUsageEXT::format"]
        [::std::mem::offset_of!(VkMicromapUsageEXT, format) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkDeviceOrHostAddressKHR {
    pub deviceAddress: VkDeviceAddress,
    pub hostAddress: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceOrHostAddressKHR"]
        [::std::mem::size_of::<VkDeviceOrHostAddressKHR>() - 8usize];
    ["Alignment of VkDeviceOrHostAddressKHR"]
        [::std::mem::align_of::<VkDeviceOrHostAddressKHR>() - 8usize];
    ["Offset of field: VkDeviceOrHostAddressKHR::deviceAddress"]
        [::std::mem::offset_of!(VkDeviceOrHostAddressKHR, deviceAddress) - 0usize];
    ["Offset of field: VkDeviceOrHostAddressKHR::hostAddress"]
        [::std::mem::offset_of!(VkDeviceOrHostAddressKHR, hostAddress) - 0usize];
};
impl Default for VkDeviceOrHostAddressKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMicromapBuildInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkMicromapTypeEXT,
    pub flags: VkBuildMicromapFlagsEXT,
    pub mode: VkBuildMicromapModeEXT,
    pub dstMicromap: VkMicromapEXT,
    pub usageCountsCount: u32,
    pub pUsageCounts: *const VkMicromapUsageEXT,
    pub ppUsageCounts: *const *const VkMicromapUsageEXT,
    pub data: VkDeviceOrHostAddressConstKHR,
    pub scratchData: VkDeviceOrHostAddressKHR,
    pub triangleArray: VkDeviceOrHostAddressConstKHR,
    pub triangleArrayStride: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapBuildInfoEXT"][::std::mem::size_of::<VkMicromapBuildInfoEXT>() - 96usize];
    ["Alignment of VkMicromapBuildInfoEXT"]
        [::std::mem::align_of::<VkMicromapBuildInfoEXT>() - 8usize];
    ["Offset of field: VkMicromapBuildInfoEXT::sType"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapBuildInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMicromapBuildInfoEXT::type_"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, type_) - 16usize];
    ["Offset of field: VkMicromapBuildInfoEXT::flags"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, flags) - 20usize];
    ["Offset of field: VkMicromapBuildInfoEXT::mode"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, mode) - 24usize];
    ["Offset of field: VkMicromapBuildInfoEXT::dstMicromap"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, dstMicromap) - 32usize];
    ["Offset of field: VkMicromapBuildInfoEXT::usageCountsCount"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, usageCountsCount) - 40usize];
    ["Offset of field: VkMicromapBuildInfoEXT::pUsageCounts"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, pUsageCounts) - 48usize];
    ["Offset of field: VkMicromapBuildInfoEXT::ppUsageCounts"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, ppUsageCounts) - 56usize];
    ["Offset of field: VkMicromapBuildInfoEXT::data"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, data) - 64usize];
    ["Offset of field: VkMicromapBuildInfoEXT::scratchData"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, scratchData) - 72usize];
    ["Offset of field: VkMicromapBuildInfoEXT::triangleArray"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, triangleArray) - 80usize];
    ["Offset of field: VkMicromapBuildInfoEXT::triangleArrayStride"]
        [::std::mem::offset_of!(VkMicromapBuildInfoEXT, triangleArrayStride) - 88usize];
};
impl Default for VkMicromapBuildInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMicromapCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub createFlags: VkMicromapCreateFlagsEXT,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub type_: VkMicromapTypeEXT,
    pub deviceAddress: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapCreateInfoEXT"][::std::mem::size_of::<VkMicromapCreateInfoEXT>() - 64usize];
    ["Alignment of VkMicromapCreateInfoEXT"]
        [::std::mem::align_of::<VkMicromapCreateInfoEXT>() - 8usize];
    ["Offset of field: VkMicromapCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMicromapCreateInfoEXT::createFlags"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, createFlags) - 16usize];
    ["Offset of field: VkMicromapCreateInfoEXT::buffer"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, buffer) - 24usize];
    ["Offset of field: VkMicromapCreateInfoEXT::offset"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, offset) - 32usize];
    ["Offset of field: VkMicromapCreateInfoEXT::size"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, size) - 40usize];
    ["Offset of field: VkMicromapCreateInfoEXT::type_"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, type_) - 48usize];
    ["Offset of field: VkMicromapCreateInfoEXT::deviceAddress"]
        [::std::mem::offset_of!(VkMicromapCreateInfoEXT, deviceAddress) - 56usize];
};
impl Default for VkMicromapCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub micromap: VkBool32,
    pub micromapCaptureReplay: VkBool32,
    pub micromapHostCommands: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpacityMicromapFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceOpacityMicromapFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceOpacityMicromapFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceOpacityMicromapFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpacityMicromapFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpacityMicromapFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::micromap"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpacityMicromapFeaturesEXT, micromap) - 16usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::micromapCaptureReplay"][::std::mem::offset_of!(
        VkPhysicalDeviceOpacityMicromapFeaturesEXT,
        micromapCaptureReplay
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapFeaturesEXT::micromapHostCommands"][::std::mem::offset_of!(
        VkPhysicalDeviceOpacityMicromapFeaturesEXT,
        micromapHostCommands
    )
        - 24usize];
};
impl Default for VkPhysicalDeviceOpacityMicromapFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxOpacity2StateSubdivisionLevel: u32,
    pub maxOpacity4StateSubdivisionLevel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpacityMicromapPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceOpacityMicromapPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceOpacityMicromapPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceOpacityMicromapPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpacityMicromapPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpacityMicromapPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::maxOpacity2StateSubdivisionLevel"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceOpacityMicromapPropertiesEXT , maxOpacity2StateSubdivisionLevel) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceOpacityMicromapPropertiesEXT::maxOpacity4StateSubdivisionLevel"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceOpacityMicromapPropertiesEXT , maxOpacity4StateSubdivisionLevel) - 20usize] ;
};
impl Default for VkPhysicalDeviceOpacityMicromapPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMicromapVersionInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pVersionData: *const u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapVersionInfoEXT"]
        [::std::mem::size_of::<VkMicromapVersionInfoEXT>() - 24usize];
    ["Alignment of VkMicromapVersionInfoEXT"]
        [::std::mem::align_of::<VkMicromapVersionInfoEXT>() - 8usize];
    ["Offset of field: VkMicromapVersionInfoEXT::sType"]
        [::std::mem::offset_of!(VkMicromapVersionInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapVersionInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMicromapVersionInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMicromapVersionInfoEXT::pVersionData"]
        [::std::mem::offset_of!(VkMicromapVersionInfoEXT, pVersionData) - 16usize];
};
impl Default for VkMicromapVersionInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMicromapToMemoryInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkMicromapEXT,
    pub dst: VkDeviceOrHostAddressKHR,
    pub mode: VkCopyMicromapModeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMicromapToMemoryInfoEXT"]
        [::std::mem::size_of::<VkCopyMicromapToMemoryInfoEXT>() - 40usize];
    ["Alignment of VkCopyMicromapToMemoryInfoEXT"]
        [::std::mem::align_of::<VkCopyMicromapToMemoryInfoEXT>() - 8usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::sType"]
        [::std::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, sType) - 0usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::pNext"]
        [::std::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, pNext) - 8usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::src"]
        [::std::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, src) - 16usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::dst"]
        [::std::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, dst) - 24usize];
    ["Offset of field: VkCopyMicromapToMemoryInfoEXT::mode"]
        [::std::mem::offset_of!(VkCopyMicromapToMemoryInfoEXT, mode) - 32usize];
};
impl Default for VkCopyMicromapToMemoryInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMemoryToMicromapInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkDeviceOrHostAddressConstKHR,
    pub dst: VkMicromapEXT,
    pub mode: VkCopyMicromapModeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToMicromapInfoEXT"]
        [::std::mem::size_of::<VkCopyMemoryToMicromapInfoEXT>() - 40usize];
    ["Alignment of VkCopyMemoryToMicromapInfoEXT"]
        [::std::mem::align_of::<VkCopyMemoryToMicromapInfoEXT>() - 8usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::sType"]
        [::std::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, sType) - 0usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::pNext"]
        [::std::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, pNext) - 8usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::src"]
        [::std::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, src) - 16usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::dst"]
        [::std::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, dst) - 24usize];
    ["Offset of field: VkCopyMemoryToMicromapInfoEXT::mode"]
        [::std::mem::offset_of!(VkCopyMemoryToMicromapInfoEXT, mode) - 32usize];
};
impl Default for VkCopyMemoryToMicromapInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMicromapInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkMicromapEXT,
    pub dst: VkMicromapEXT,
    pub mode: VkCopyMicromapModeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMicromapInfoEXT"][::std::mem::size_of::<VkCopyMicromapInfoEXT>() - 40usize];
    ["Alignment of VkCopyMicromapInfoEXT"]
        [::std::mem::align_of::<VkCopyMicromapInfoEXT>() - 8usize];
    ["Offset of field: VkCopyMicromapInfoEXT::sType"]
        [::std::mem::offset_of!(VkCopyMicromapInfoEXT, sType) - 0usize];
    ["Offset of field: VkCopyMicromapInfoEXT::pNext"]
        [::std::mem::offset_of!(VkCopyMicromapInfoEXT, pNext) - 8usize];
    ["Offset of field: VkCopyMicromapInfoEXT::src"]
        [::std::mem::offset_of!(VkCopyMicromapInfoEXT, src) - 16usize];
    ["Offset of field: VkCopyMicromapInfoEXT::dst"]
        [::std::mem::offset_of!(VkCopyMicromapInfoEXT, dst) - 24usize];
    ["Offset of field: VkCopyMicromapInfoEXT::mode"]
        [::std::mem::offset_of!(VkCopyMicromapInfoEXT, mode) - 32usize];
};
impl Default for VkCopyMicromapInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMicromapBuildSizesInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub micromapSize: VkDeviceSize,
    pub buildScratchSize: VkDeviceSize,
    pub discardable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapBuildSizesInfoEXT"]
        [::std::mem::size_of::<VkMicromapBuildSizesInfoEXT>() - 40usize];
    ["Alignment of VkMicromapBuildSizesInfoEXT"]
        [::std::mem::align_of::<VkMicromapBuildSizesInfoEXT>() - 8usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::sType"]
        [::std::mem::offset_of!(VkMicromapBuildSizesInfoEXT, sType) - 0usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::pNext"]
        [::std::mem::offset_of!(VkMicromapBuildSizesInfoEXT, pNext) - 8usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::micromapSize"]
        [::std::mem::offset_of!(VkMicromapBuildSizesInfoEXT, micromapSize) - 16usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::buildScratchSize"]
        [::std::mem::offset_of!(VkMicromapBuildSizesInfoEXT, buildScratchSize) - 24usize];
    ["Offset of field: VkMicromapBuildSizesInfoEXT::discardable"]
        [::std::mem::offset_of!(VkMicromapBuildSizesInfoEXT, discardable) - 32usize];
};
impl Default for VkMicromapBuildSizesInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub indexType: VkIndexType,
    pub indexBuffer: VkDeviceOrHostAddressConstKHR,
    pub indexStride: VkDeviceSize,
    pub baseTriangle: u32,
    pub usageCountsCount: u32,
    pub pUsageCounts: *const VkMicromapUsageEXT,
    pub ppUsageCounts: *const *const VkMicromapUsageEXT,
    pub micromap: VkMicromapEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureTrianglesOpacityMicromapEXT"]
        [::std::mem::size_of::<VkAccelerationStructureTrianglesOpacityMicromapEXT>() - 72usize];
    ["Alignment of VkAccelerationStructureTrianglesOpacityMicromapEXT"]
        [::std::mem::align_of::<VkAccelerationStructureTrianglesOpacityMicromapEXT>() - 8usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::sType"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::pNext"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::indexType"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        indexType
    ) - 16usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::indexBuffer"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        indexBuffer
    )
        - 24usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::indexStride"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        indexStride
    )
        - 32usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::baseTriangle"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        baseTriangle
    )
        - 40usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::usageCountsCount"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        usageCountsCount
    )
        - 44usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::pUsageCounts"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        pUsageCounts
    )
        - 48usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::ppUsageCounts"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        ppUsageCounts
    )
        - 56usize];
    ["Offset of field: VkAccelerationStructureTrianglesOpacityMicromapEXT::micromap"][::std::mem::offset_of!(
        VkAccelerationStructureTrianglesOpacityMicromapEXT,
        micromap
    ) - 64usize];
};
impl Default for VkAccelerationStructureTrianglesOpacityMicromapEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkMicromapTriangleEXT {
    pub dataOffset: u32,
    pub subdivisionLevel: u16,
    pub format: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMicromapTriangleEXT"][::std::mem::size_of::<VkMicromapTriangleEXT>() - 8usize];
    ["Alignment of VkMicromapTriangleEXT"]
        [::std::mem::align_of::<VkMicromapTriangleEXT>() - 4usize];
    ["Offset of field: VkMicromapTriangleEXT::dataOffset"]
        [::std::mem::offset_of!(VkMicromapTriangleEXT, dataOffset) - 0usize];
    ["Offset of field: VkMicromapTriangleEXT::subdivisionLevel"]
        [::std::mem::offset_of!(VkMicromapTriangleEXT, subdivisionLevel) - 4usize];
    ["Offset of field: VkMicromapTriangleEXT::format"]
        [::std::mem::offset_of!(VkMicromapTriangleEXT, format) - 6usize];
};
pub type PFN_vkCreateMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkMicromapCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMicromap: *mut VkMicromapEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        micromap: VkMicromapEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBuildMicromapsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ),
>;
pub type PFN_vkBuildMicromapsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMicromapToMemoryEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkCopyMemoryToMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ) -> VkResult,
>;
pub type PFN_vkWriteMicromapsPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pInfo: *const VkCopyMicromapInfoEXT),
>;
pub type PFN_vkCmdCopyMicromapToMemoryEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ),
>;
pub type PFN_vkCmdCopyMemoryToMicromapEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ),
>;
pub type PFN_vkCmdWriteMicromapsPropertiesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkGetDeviceMicromapCompatibilityEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pVersionInfo: *const VkMicromapVersionInfoEXT,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    ),
>;
pub type PFN_vkGetMicromapBuildSizesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkMicromapBuildInfoEXT,
        pSizeInfo: *mut VkMicromapBuildSizesInfoEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkCreateMicromapEXT(
        device: VkDevice,
        pCreateInfo: *const VkMicromapCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pMicromap: *mut VkMicromapEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyMicromapEXT(
        device: VkDevice,
        micromap: VkMicromapEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCmdBuildMicromapsEXT(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkBuildMicromapsEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkMicromapBuildInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyMicromapEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyMicromapToMemoryEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyMemoryToMicromapEXT(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkWriteMicromapsPropertiesEXT(
        device: VkDevice,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdCopyMicromapEXT(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMicromapInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyMicromapToMemoryEXT(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMicromapToMemoryInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyMemoryToMicromapEXT(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToMicromapInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdWriteMicromapsPropertiesEXT(
        commandBuffer: VkCommandBuffer,
        micromapCount: u32,
        pMicromaps: *const VkMicromapEXT,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceMicromapCompatibilityEXT(
        device: VkDevice,
        pVersionInfo: *const VkMicromapVersionInfoEXT,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    );
}
unsafe extern "system" {
    pub fn vkGetMicromapBuildSizesEXT(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkMicromapBuildInfoEXT,
        pSizeInfo: *mut VkMicromapBuildSizesInfoEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub clustercullingShader: VkBool32,
    pub multiviewClusterCullingShader: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI"]
        [::std::mem::size_of::<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI>() - 24usize];
    ["Alignment of VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI"]
        [::std::mem::align_of::<VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::clustercullingShader"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI,
        clustercullingShader
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI::multiviewClusterCullingShader"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI , multiviewClusterCullingShader) - 20usize] ;
};
impl Default for VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxWorkGroupCount: [u32; 3usize],
    pub maxWorkGroupSize: [u32; 3usize],
    pub maxOutputClusterCount: u32,
    pub indirectBufferOffsetAlignment: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI"]
        [::std::mem::size_of::<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>() - 56usize];
    ["Alignment of VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI"]
        [::std::mem::align_of::<VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::maxWorkGroupCount"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        maxWorkGroupCount
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::maxWorkGroupSize"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI,
        maxWorkGroupSize
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::maxOutputClusterCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI , maxOutputClusterCount) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI::indirectBufferOffsetAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI , indirectBufferOffsetAlignment) - 48usize] ;
};
impl Default for VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub clusterShadingRate: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI"]
        [::std::mem::size_of::<VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI>() - 24usize];
    ["Alignment of VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI"]
        [::std::mem::align_of::<VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI::clusterShadingRate"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI , clusterShadingRate) - 16usize] ;
};
impl Default for VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDrawClusterHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDrawClusterIndirectHUAWEI = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize),
>;
unsafe extern "system" {
    pub fn vkCmdDrawClusterHUAWEI(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawClusterIndirectHUAWEI(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub borderColorSwizzle: VkBool32,
    pub borderColorSwizzleFromImage: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceBorderColorSwizzleFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceBorderColorSwizzleFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceBorderColorSwizzleFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::borderColorSwizzle"][::std::mem::offset_of!(
        VkPhysicalDeviceBorderColorSwizzleFeaturesEXT,
        borderColorSwizzle
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceBorderColorSwizzleFeaturesEXT::borderColorSwizzleFromImage"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT , borderColorSwizzleFromImage) - 20usize] ;
};
impl Default for VkPhysicalDeviceBorderColorSwizzleFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerBorderColorComponentMappingCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub components: VkComponentMapping,
    pub srgb: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerBorderColorComponentMappingCreateInfoEXT"]
        [::std::mem::size_of::<VkSamplerBorderColorComponentMappingCreateInfoEXT>() - 40usize];
    ["Alignment of VkSamplerBorderColorComponentMappingCreateInfoEXT"]
        [::std::mem::align_of::<VkSamplerBorderColorComponentMappingCreateInfoEXT>() - 8usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkSamplerBorderColorComponentMappingCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkSamplerBorderColorComponentMappingCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::components"][::std::mem::offset_of!(
        VkSamplerBorderColorComponentMappingCreateInfoEXT,
        components
    ) - 16usize];
    ["Offset of field: VkSamplerBorderColorComponentMappingCreateInfoEXT::srgb"]
        [::std::mem::offset_of!(VkSamplerBorderColorComponentMappingCreateInfoEXT, srgb) - 32usize];
};
impl Default for VkSamplerBorderColorComponentMappingCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pageableDeviceLocalMemory: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT::pageableDeviceLocalMemory"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT , pageableDeviceLocalMemory) - 16usize] ;
};
impl Default for VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetDeviceMemoryPriorityEXT = ::std::option::Option<
    unsafe extern "system" fn(device: VkDevice, memory: VkDeviceMemory, priority: f32),
>;
unsafe extern "system" {
    pub fn vkSetDeviceMemoryPriorityEXT(device: VkDevice, memory: VkDeviceMemory, priority: f32);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCorePropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pixelRate: u32,
    pub texelRate: u32,
    pub fmaRate: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCorePropertiesARM"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderCorePropertiesARM>() - 32usize];
    ["Alignment of VkPhysicalDeviceShaderCorePropertiesARM"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderCorePropertiesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::pixelRate"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, pixelRate) - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::texelRate"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, texelRate) - 20usize];
    ["Offset of field: VkPhysicalDeviceShaderCorePropertiesARM::fmaRate"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCorePropertiesARM, fmaRate) - 24usize];
};
impl Default for VkPhysicalDeviceShaderCorePropertiesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDeviceSchedulingControlsFlagsARM = VkFlags64;
pub type VkPhysicalDeviceSchedulingControlsFlagBitsARM = VkFlags64;
pub const VK_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_SHADER_CORE_COUNT_ARM:
    VkPhysicalDeviceSchedulingControlsFlagBitsARM = 1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDeviceQueueShaderCoreControlCreateInfoARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDeviceQueueShaderCoreControlCreateInfoARM"]
        [::std::mem::size_of::<VkDeviceQueueShaderCoreControlCreateInfoARM>() - 24usize];
    ["Alignment of VkDeviceQueueShaderCoreControlCreateInfoARM"]
        [::std::mem::align_of::<VkDeviceQueueShaderCoreControlCreateInfoARM>() - 8usize];
    ["Offset of field: VkDeviceQueueShaderCoreControlCreateInfoARM::sType"]
        [::std::mem::offset_of!(VkDeviceQueueShaderCoreControlCreateInfoARM, sType) - 0usize];
    ["Offset of field: VkDeviceQueueShaderCoreControlCreateInfoARM::pNext"]
        [::std::mem::offset_of!(VkDeviceQueueShaderCoreControlCreateInfoARM, pNext) - 8usize];
    ["Offset of field: VkDeviceQueueShaderCoreControlCreateInfoARM::shaderCoreCount"][::std::mem::offset_of!(
        VkDeviceQueueShaderCoreControlCreateInfoARM,
        shaderCoreCount
    ) - 16usize];
};
impl Default for VkDeviceQueueShaderCoreControlCreateInfoARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSchedulingControlsFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub schedulingControls: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSchedulingControlsFeaturesARM"]
        [::std::mem::size_of::<VkPhysicalDeviceSchedulingControlsFeaturesARM>() - 24usize];
    ["Alignment of VkPhysicalDeviceSchedulingControlsFeaturesARM"]
        [::std::mem::align_of::<VkPhysicalDeviceSchedulingControlsFeaturesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsFeaturesARM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSchedulingControlsFeaturesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsFeaturesARM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSchedulingControlsFeaturesARM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsFeaturesARM::schedulingControls"][::std::mem::offset_of!(
        VkPhysicalDeviceSchedulingControlsFeaturesARM,
        schedulingControls
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceSchedulingControlsFeaturesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSchedulingControlsPropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSchedulingControlsPropertiesARM"]
        [::std::mem::size_of::<VkPhysicalDeviceSchedulingControlsPropertiesARM>() - 24usize];
    ["Alignment of VkPhysicalDeviceSchedulingControlsPropertiesARM"]
        [::std::mem::align_of::<VkPhysicalDeviceSchedulingControlsPropertiesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsPropertiesARM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSchedulingControlsPropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsPropertiesARM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSchedulingControlsPropertiesARM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSchedulingControlsPropertiesARM::schedulingControlsFlags"][::std::mem::offset_of!(
        VkPhysicalDeviceSchedulingControlsPropertiesARM,
        schedulingControlsFlags
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceSchedulingControlsPropertiesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageSlicedViewOf3D: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT::imageSlicedViewOf3D"][::std::mem::offset_of!(
        VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT,
        imageSlicedViewOf3D
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewSlicedCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub sliceOffset: u32,
    pub sliceCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewSlicedCreateInfoEXT"]
        [::std::mem::size_of::<VkImageViewSlicedCreateInfoEXT>() - 24usize];
    ["Alignment of VkImageViewSlicedCreateInfoEXT"]
        [::std::mem::align_of::<VkImageViewSlicedCreateInfoEXT>() - 8usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::sliceOffset"]
        [::std::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, sliceOffset) - 16usize];
    ["Offset of field: VkImageViewSlicedCreateInfoEXT::sliceCount"]
        [::std::mem::offset_of!(VkImageViewSlicedCreateInfoEXT, sliceCount) - 20usize];
};
impl Default for VkImageViewSlicedCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub descriptorSetHostMapping: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"]
        [::std::mem::size_of::<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>() - 24usize];
    ["Alignment of VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE"]
        [::std::mem::align_of::<VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE::descriptorSetHostMapping"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE , descriptorSetHostMapping) - 16usize] ;
};
impl Default for VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetBindingReferenceVALVE {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub descriptorSetLayout: VkDescriptorSetLayout,
    pub binding: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetBindingReferenceVALVE"]
        [::std::mem::size_of::<VkDescriptorSetBindingReferenceVALVE>() - 32usize];
    ["Alignment of VkDescriptorSetBindingReferenceVALVE"]
        [::std::mem::align_of::<VkDescriptorSetBindingReferenceVALVE>() - 8usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::sType"]
        [::std::mem::offset_of!(VkDescriptorSetBindingReferenceVALVE, sType) - 0usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::pNext"]
        [::std::mem::offset_of!(VkDescriptorSetBindingReferenceVALVE, pNext) - 8usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::descriptorSetLayout"][::std::mem::offset_of!(
        VkDescriptorSetBindingReferenceVALVE,
        descriptorSetLayout
    ) - 16usize];
    ["Offset of field: VkDescriptorSetBindingReferenceVALVE::binding"]
        [::std::mem::offset_of!(VkDescriptorSetBindingReferenceVALVE, binding) - 24usize];
};
impl Default for VkDescriptorSetBindingReferenceVALVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDescriptorSetLayoutHostMappingInfoVALVE {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub descriptorOffset: usize,
    pub descriptorSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDescriptorSetLayoutHostMappingInfoVALVE"]
        [::std::mem::size_of::<VkDescriptorSetLayoutHostMappingInfoVALVE>() - 32usize];
    ["Alignment of VkDescriptorSetLayoutHostMappingInfoVALVE"]
        [::std::mem::align_of::<VkDescriptorSetLayoutHostMappingInfoVALVE>() - 8usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::sType"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutHostMappingInfoVALVE, sType) - 0usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::pNext"]
        [::std::mem::offset_of!(VkDescriptorSetLayoutHostMappingInfoVALVE, pNext) - 8usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::descriptorOffset"][::std::mem::offset_of!(
        VkDescriptorSetLayoutHostMappingInfoVALVE,
        descriptorOffset
    ) - 16usize];
    ["Offset of field: VkDescriptorSetLayoutHostMappingInfoVALVE::descriptorSize"][::std::mem::offset_of!(
        VkDescriptorSetLayoutHostMappingInfoVALVE,
        descriptorSize
    ) - 24usize];
};
impl Default for VkDescriptorSetLayoutHostMappingInfoVALVE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pBindingReference: *const VkDescriptorSetBindingReferenceVALVE,
        pHostMapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE,
    ),
>;
pub type PFN_vkGetDescriptorSetHostMappingVALVE = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        ppData: *mut *mut ::std::os::raw::c_void,
    ),
>;
unsafe extern "system" {
    pub fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(
        device: VkDevice,
        pBindingReference: *const VkDescriptorSetBindingReferenceVALVE,
        pHostMapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE,
    );
}
unsafe extern "system" {
    pub fn vkGetDescriptorSetHostMappingVALVE(
        device: VkDevice,
        descriptorSet: VkDescriptorSet,
        ppData: *mut *mut ::std::os::raw::c_void,
    );
}
pub type VkPhysicalDeviceDepthClampZeroOneFeaturesEXT =
    VkPhysicalDeviceDepthClampZeroOneFeaturesKHR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub nonSeamlessCubeMap: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT::nonSeamlessCubeMap"][::std::mem::offset_of!(
        VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT,
        nonSeamlessCubeMap
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRenderPassStripedFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub renderPassStriped: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRenderPassStripedFeaturesARM"]
        [::std::mem::size_of::<VkPhysicalDeviceRenderPassStripedFeaturesARM>() - 24usize];
    ["Alignment of VkPhysicalDeviceRenderPassStripedFeaturesARM"]
        [::std::mem::align_of::<VkPhysicalDeviceRenderPassStripedFeaturesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedFeaturesARM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRenderPassStripedFeaturesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedFeaturesARM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRenderPassStripedFeaturesARM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedFeaturesARM::renderPassStriped"][::std::mem::offset_of!(
        VkPhysicalDeviceRenderPassStripedFeaturesARM,
        renderPassStriped
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceRenderPassStripedFeaturesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRenderPassStripedPropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub renderPassStripeGranularity: VkExtent2D,
    pub maxRenderPassStripes: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRenderPassStripedPropertiesARM"]
        [::std::mem::size_of::<VkPhysicalDeviceRenderPassStripedPropertiesARM>() - 32usize];
    ["Alignment of VkPhysicalDeviceRenderPassStripedPropertiesARM"]
        [::std::mem::align_of::<VkPhysicalDeviceRenderPassStripedPropertiesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRenderPassStripedPropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRenderPassStripedPropertiesARM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::renderPassStripeGranularity"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRenderPassStripedPropertiesARM , renderPassStripeGranularity) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceRenderPassStripedPropertiesARM::maxRenderPassStripes"][::std::mem::offset_of!(
        VkPhysicalDeviceRenderPassStripedPropertiesARM,
        maxRenderPassStripes
    )
        - 24usize];
};
impl Default for VkPhysicalDeviceRenderPassStripedPropertiesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassStripeInfoARM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stripeArea: VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassStripeInfoARM"]
        [::std::mem::size_of::<VkRenderPassStripeInfoARM>() - 32usize];
    ["Alignment of VkRenderPassStripeInfoARM"]
        [::std::mem::align_of::<VkRenderPassStripeInfoARM>() - 8usize];
    ["Offset of field: VkRenderPassStripeInfoARM::sType"]
        [::std::mem::offset_of!(VkRenderPassStripeInfoARM, sType) - 0usize];
    ["Offset of field: VkRenderPassStripeInfoARM::pNext"]
        [::std::mem::offset_of!(VkRenderPassStripeInfoARM, pNext) - 8usize];
    ["Offset of field: VkRenderPassStripeInfoARM::stripeArea"]
        [::std::mem::offset_of!(VkRenderPassStripeInfoARM, stripeArea) - 16usize];
};
impl Default for VkRenderPassStripeInfoARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassStripeBeginInfoARM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stripeInfoCount: u32,
    pub pStripeInfos: *const VkRenderPassStripeInfoARM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassStripeBeginInfoARM"]
        [::std::mem::size_of::<VkRenderPassStripeBeginInfoARM>() - 32usize];
    ["Alignment of VkRenderPassStripeBeginInfoARM"]
        [::std::mem::align_of::<VkRenderPassStripeBeginInfoARM>() - 8usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::sType"]
        [::std::mem::offset_of!(VkRenderPassStripeBeginInfoARM, sType) - 0usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::pNext"]
        [::std::mem::offset_of!(VkRenderPassStripeBeginInfoARM, pNext) - 8usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::stripeInfoCount"]
        [::std::mem::offset_of!(VkRenderPassStripeBeginInfoARM, stripeInfoCount) - 16usize];
    ["Offset of field: VkRenderPassStripeBeginInfoARM::pStripeInfos"]
        [::std::mem::offset_of!(VkRenderPassStripeBeginInfoARM, pStripeInfos) - 24usize];
};
impl Default for VkRenderPassStripeBeginInfoARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassStripeSubmitInfoARM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stripeSemaphoreInfoCount: u32,
    pub pStripeSemaphoreInfos: *const VkSemaphoreSubmitInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassStripeSubmitInfoARM"]
        [::std::mem::size_of::<VkRenderPassStripeSubmitInfoARM>() - 32usize];
    ["Alignment of VkRenderPassStripeSubmitInfoARM"]
        [::std::mem::align_of::<VkRenderPassStripeSubmitInfoARM>() - 8usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::sType"]
        [::std::mem::offset_of!(VkRenderPassStripeSubmitInfoARM, sType) - 0usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::pNext"]
        [::std::mem::offset_of!(VkRenderPassStripeSubmitInfoARM, pNext) - 8usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::stripeSemaphoreInfoCount"][::std::mem::offset_of!(
        VkRenderPassStripeSubmitInfoARM,
        stripeSemaphoreInfoCount
    ) - 16usize];
    ["Offset of field: VkRenderPassStripeSubmitInfoARM::pStripeSemaphoreInfos"]
        [::std::mem::offset_of!(VkRenderPassStripeSubmitInfoARM, pStripeSemaphoreInfos) - 24usize];
};
impl Default for VkRenderPassStripeSubmitInfoARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityMapOffset: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM::fragmentDensityMapOffset"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM , fragmentDensityMapOffset) - 16usize] ;
};
impl Default for VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub fragmentDensityOffsetGranularity: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM::fragmentDensityOffsetGranularity"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM , fragmentDensityOffsetGranularity) - 16usize] ;
};
impl Default for VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub fragmentDensityOffsetCount: u32,
    pub pFragmentDensityOffsets: *const VkOffset2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSubpassFragmentDensityMapOffsetEndInfoQCOM"]
        [::std::mem::size_of::<VkSubpassFragmentDensityMapOffsetEndInfoQCOM>() - 32usize];
    ["Alignment of VkSubpassFragmentDensityMapOffsetEndInfoQCOM"]
        [::std::mem::align_of::<VkSubpassFragmentDensityMapOffsetEndInfoQCOM>() - 8usize];
    ["Offset of field: VkSubpassFragmentDensityMapOffsetEndInfoQCOM::sType"]
        [::std::mem::offset_of!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM, sType) - 0usize];
    ["Offset of field: VkSubpassFragmentDensityMapOffsetEndInfoQCOM::pNext"]
        [::std::mem::offset_of!(VkSubpassFragmentDensityMapOffsetEndInfoQCOM, pNext) - 8usize];
    ["Offset of field: VkSubpassFragmentDensityMapOffsetEndInfoQCOM::fragmentDensityOffsetCount"][::std::mem::offset_of!(
        VkSubpassFragmentDensityMapOffsetEndInfoQCOM,
        fragmentDensityOffsetCount
    )
        - 16usize];
    ["Offset of field: VkSubpassFragmentDensityMapOffsetEndInfoQCOM::pFragmentDensityOffsets"][::std::mem::offset_of!(
        VkSubpassFragmentDensityMapOffsetEndInfoQCOM,
        pFragmentDensityOffsets
    )
        - 24usize];
};
impl Default for VkSubpassFragmentDensityMapOffsetEndInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkCopyMemoryIndirectCommandNV {
    pub srcAddress: VkDeviceAddress,
    pub dstAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryIndirectCommandNV"]
        [::std::mem::size_of::<VkCopyMemoryIndirectCommandNV>() - 24usize];
    ["Alignment of VkCopyMemoryIndirectCommandNV"]
        [::std::mem::align_of::<VkCopyMemoryIndirectCommandNV>() - 8usize];
    ["Offset of field: VkCopyMemoryIndirectCommandNV::srcAddress"]
        [::std::mem::offset_of!(VkCopyMemoryIndirectCommandNV, srcAddress) - 0usize];
    ["Offset of field: VkCopyMemoryIndirectCommandNV::dstAddress"]
        [::std::mem::offset_of!(VkCopyMemoryIndirectCommandNV, dstAddress) - 8usize];
    ["Offset of field: VkCopyMemoryIndirectCommandNV::size"]
        [::std::mem::offset_of!(VkCopyMemoryIndirectCommandNV, size) - 16usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkCopyMemoryToImageIndirectCommandNV {
    pub srcAddress: VkDeviceAddress,
    pub bufferRowLength: u32,
    pub bufferImageHeight: u32,
    pub imageSubresource: VkImageSubresourceLayers,
    pub imageOffset: VkOffset3D,
    pub imageExtent: VkExtent3D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToImageIndirectCommandNV"]
        [::std::mem::size_of::<VkCopyMemoryToImageIndirectCommandNV>() - 56usize];
    ["Alignment of VkCopyMemoryToImageIndirectCommandNV"]
        [::std::mem::align_of::<VkCopyMemoryToImageIndirectCommandNV>() - 8usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::srcAddress"]
        [::std::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, srcAddress) - 0usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::bufferRowLength"]
        [::std::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, bufferRowLength) - 8usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::bufferImageHeight"]
        [::std::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, bufferImageHeight) - 12usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::imageSubresource"]
        [::std::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, imageSubresource) - 16usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::imageOffset"]
        [::std::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, imageOffset) - 32usize];
    ["Offset of field: VkCopyMemoryToImageIndirectCommandNV::imageExtent"]
        [::std::mem::offset_of!(VkCopyMemoryToImageIndirectCommandNV, imageExtent) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub indirectCopy: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCopyMemoryIndirectFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCopyMemoryIndirectFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectFeaturesNV::indirectCopy"][::std::mem::offset_of!(
        VkPhysicalDeviceCopyMemoryIndirectFeaturesNV,
        indirectCopy
    ) - 16usize];
};
impl Default for VkPhysicalDeviceCopyMemoryIndirectFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedQueues: VkQueueFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCopyMemoryIndirectPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCopyMemoryIndirectPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCopyMemoryIndirectPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCopyMemoryIndirectPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCopyMemoryIndirectPropertiesNV::supportedQueues"][::std::mem::offset_of!(
        VkPhysicalDeviceCopyMemoryIndirectPropertiesNV,
        supportedQueues
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceCopyMemoryIndirectPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdCopyMemoryIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdCopyMemoryToImageIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        pImageSubresources: *const VkImageSubresourceLayers,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdCopyMemoryIndirectNV(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyMemoryToImageIndirectNV(
        commandBuffer: VkCommandBuffer,
        copyBufferAddress: VkDeviceAddress,
        copyCount: u32,
        stride: u32,
        dstImage: VkImage,
        dstImageLayout: VkImageLayout,
        pImageSubresources: *const VkImageSubresourceLayers,
    );
}
pub type VkMemoryDecompressionMethodFlagBitsNV = VkFlags64;
pub const VK_MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV:
    VkMemoryDecompressionMethodFlagBitsNV = 1;
pub type VkMemoryDecompressionMethodFlagsNV = VkFlags64;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDecompressMemoryRegionNV {
    pub srcAddress: VkDeviceAddress,
    pub dstAddress: VkDeviceAddress,
    pub compressedSize: VkDeviceSize,
    pub decompressedSize: VkDeviceSize,
    pub decompressionMethod: VkMemoryDecompressionMethodFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDecompressMemoryRegionNV"]
        [::std::mem::size_of::<VkDecompressMemoryRegionNV>() - 40usize];
    ["Alignment of VkDecompressMemoryRegionNV"]
        [::std::mem::align_of::<VkDecompressMemoryRegionNV>() - 8usize];
    ["Offset of field: VkDecompressMemoryRegionNV::srcAddress"]
        [::std::mem::offset_of!(VkDecompressMemoryRegionNV, srcAddress) - 0usize];
    ["Offset of field: VkDecompressMemoryRegionNV::dstAddress"]
        [::std::mem::offset_of!(VkDecompressMemoryRegionNV, dstAddress) - 8usize];
    ["Offset of field: VkDecompressMemoryRegionNV::compressedSize"]
        [::std::mem::offset_of!(VkDecompressMemoryRegionNV, compressedSize) - 16usize];
    ["Offset of field: VkDecompressMemoryRegionNV::decompressedSize"]
        [::std::mem::offset_of!(VkDecompressMemoryRegionNV, decompressedSize) - 24usize];
    ["Offset of field: VkDecompressMemoryRegionNV::decompressionMethod"]
        [::std::mem::offset_of!(VkDecompressMemoryRegionNV, decompressionMethod) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub memoryDecompression: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryDecompressionFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceMemoryDecompressionFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceMemoryDecompressionFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceMemoryDecompressionFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionFeaturesNV::memoryDecompression"][::std::mem::offset_of!(
        VkPhysicalDeviceMemoryDecompressionFeaturesNV,
        memoryDecompression
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceMemoryDecompressionFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub decompressionMethods: VkMemoryDecompressionMethodFlagsNV,
    pub maxDecompressionIndirectCount: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMemoryDecompressionPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceMemoryDecompressionPropertiesNV>() - 32usize];
    ["Alignment of VkPhysicalDeviceMemoryDecompressionPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceMemoryDecompressionPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMemoryDecompressionPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::decompressionMethods"][::std::mem::offset_of!(
        VkPhysicalDeviceMemoryDecompressionPropertiesNV,
        decompressionMethods
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceMemoryDecompressionPropertiesNV::maxDecompressionIndirectCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMemoryDecompressionPropertiesNV , maxDecompressionIndirectCount) - 24usize] ;
};
impl Default for VkPhysicalDeviceMemoryDecompressionPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdDecompressMemoryNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        decompressRegionCount: u32,
        pDecompressMemoryRegions: *const VkDecompressMemoryRegionNV,
    ),
>;
pub type PFN_vkCmdDecompressMemoryIndirectCountNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        indirectCommandsAddress: VkDeviceAddress,
        indirectCommandsCountAddress: VkDeviceAddress,
        stride: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdDecompressMemoryNV(
        commandBuffer: VkCommandBuffer,
        decompressRegionCount: u32,
        pDecompressMemoryRegions: *const VkDecompressMemoryRegionNV,
    );
}
unsafe extern "system" {
    pub fn vkCmdDecompressMemoryIndirectCountNV(
        commandBuffer: VkCommandBuffer,
        indirectCommandsAddress: VkDeviceAddress,
        indirectCommandsCountAddress: VkDeviceAddress,
        stride: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceGeneratedCompute: VkBool32,
    pub deviceGeneratedComputePipelines: VkBool32,
    pub deviceGeneratedComputeCaptureReplay: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV"][::std::mem::size_of::<
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
    >() - 32usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV"][::std::mem::align_of::<
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::deviceGeneratedCompute"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV , deviceGeneratedCompute) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::deviceGeneratedComputePipelines"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV , deviceGeneratedComputePipelines) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV::deviceGeneratedComputeCaptureReplay"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV , deviceGeneratedComputeCaptureReplay) - 24usize] ;
};
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkComputePipelineIndirectBufferInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub deviceAddress: VkDeviceAddress,
    pub size: VkDeviceSize,
    pub pipelineDeviceAddressCaptureReplay: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkComputePipelineIndirectBufferInfoNV"]
        [::std::mem::size_of::<VkComputePipelineIndirectBufferInfoNV>() - 40usize];
    ["Alignment of VkComputePipelineIndirectBufferInfoNV"]
        [::std::mem::align_of::<VkComputePipelineIndirectBufferInfoNV>() - 8usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::sType"]
        [::std::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, sType) - 0usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::pNext"]
        [::std::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, pNext) - 8usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::deviceAddress"]
        [::std::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, deviceAddress) - 16usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::size"]
        [::std::mem::offset_of!(VkComputePipelineIndirectBufferInfoNV, size) - 24usize];
    ["Offset of field: VkComputePipelineIndirectBufferInfoNV::pipelineDeviceAddressCaptureReplay"] [:: std :: mem :: offset_of ! (VkComputePipelineIndirectBufferInfoNV , pipelineDeviceAddressCaptureReplay) - 32usize] ;
};
impl Default for VkComputePipelineIndirectBufferInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineIndirectDeviceAddressInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pipelineBindPoint: VkPipelineBindPoint,
    pub pipeline: VkPipeline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineIndirectDeviceAddressInfoNV"]
        [::std::mem::size_of::<VkPipelineIndirectDeviceAddressInfoNV>() - 32usize];
    ["Alignment of VkPipelineIndirectDeviceAddressInfoNV"]
        [::std::mem::align_of::<VkPipelineIndirectDeviceAddressInfoNV>() - 8usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::sType"]
        [::std::mem::offset_of!(VkPipelineIndirectDeviceAddressInfoNV, sType) - 0usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::pNext"]
        [::std::mem::offset_of!(VkPipelineIndirectDeviceAddressInfoNV, pNext) - 8usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::pipelineBindPoint"][::std::mem::offset_of!(
        VkPipelineIndirectDeviceAddressInfoNV,
        pipelineBindPoint
    ) - 16usize];
    ["Offset of field: VkPipelineIndirectDeviceAddressInfoNV::pipeline"]
        [::std::mem::offset_of!(VkPipelineIndirectDeviceAddressInfoNV, pipeline) - 24usize];
};
impl Default for VkPipelineIndirectDeviceAddressInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBindPipelineIndirectCommandNV {
    pub pipelineAddress: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindPipelineIndirectCommandNV"]
        [::std::mem::size_of::<VkBindPipelineIndirectCommandNV>() - 8usize];
    ["Alignment of VkBindPipelineIndirectCommandNV"]
        [::std::mem::align_of::<VkBindPipelineIndirectCommandNV>() - 8usize];
    ["Offset of field: VkBindPipelineIndirectCommandNV::pipelineAddress"]
        [::std::mem::offset_of!(VkBindPipelineIndirectCommandNV, pipelineAddress) - 0usize];
};
pub type PFN_vkGetPipelineIndirectMemoryRequirementsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkComputePipelineCreateInfo,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdUpdatePipelineIndirectBufferNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    ),
>;
pub type PFN_vkGetPipelineIndirectDeviceAddressNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkPipelineIndirectDeviceAddressInfoNV,
    ) -> VkDeviceAddress,
>;
unsafe extern "system" {
    pub fn vkGetPipelineIndirectMemoryRequirementsNV(
        device: VkDevice,
        pCreateInfo: *const VkComputePipelineCreateInfo,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkCmdUpdatePipelineIndirectBufferNV(
        commandBuffer: VkCommandBuffer,
        pipelineBindPoint: VkPipelineBindPoint,
        pipeline: VkPipeline,
    );
}
unsafe extern "system" {
    pub fn vkGetPipelineIndirectDeviceAddressNV(
        device: VkDevice,
        pInfo: *const VkPipelineIndirectDeviceAddressInfoNV,
    ) -> VkDeviceAddress;
}
pub const VkRayTracingLssIndexingModeNV_VK_RAY_TRACING_LSS_INDEXING_MODE_LIST_NV:
    VkRayTracingLssIndexingModeNV = 0;
pub const VkRayTracingLssIndexingModeNV_VK_RAY_TRACING_LSS_INDEXING_MODE_SUCCESSIVE_NV:
    VkRayTracingLssIndexingModeNV = 1;
pub const VkRayTracingLssIndexingModeNV_VK_RAY_TRACING_LSS_INDEXING_MODE_MAX_ENUM_NV:
    VkRayTracingLssIndexingModeNV = 2147483647;
pub type VkRayTracingLssIndexingModeNV = ::std::os::raw::c_uint;
pub const VkRayTracingLssPrimitiveEndCapsModeNV_VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_NONE_NV : VkRayTracingLssPrimitiveEndCapsModeNV = 0 ;
pub const VkRayTracingLssPrimitiveEndCapsModeNV_VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_CHAINED_NV : VkRayTracingLssPrimitiveEndCapsModeNV = 1 ;
pub const VkRayTracingLssPrimitiveEndCapsModeNV_VK_RAY_TRACING_LSS_PRIMITIVE_END_CAPS_MODE_MAX_ENUM_NV : VkRayTracingLssPrimitiveEndCapsModeNV = 2147483647 ;
pub type VkRayTracingLssPrimitiveEndCapsModeNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub spheres: VkBool32,
    pub linearSweptSpheres: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::spheres"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV,
        spheres
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV::linearSweptSpheres"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV , linearSweptSpheres) - 20usize] ;
};
impl Default for VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryLinearSweptSpheresDataNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexFormat: VkFormat,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
    pub vertexStride: VkDeviceSize,
    pub radiusFormat: VkFormat,
    pub radiusData: VkDeviceOrHostAddressConstKHR,
    pub radiusStride: VkDeviceSize,
    pub indexType: VkIndexType,
    pub indexData: VkDeviceOrHostAddressConstKHR,
    pub indexStride: VkDeviceSize,
    pub indexingMode: VkRayTracingLssIndexingModeNV,
    pub endCapsMode: VkRayTracingLssPrimitiveEndCapsModeNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryLinearSweptSpheresDataNV"][::std::mem::size_of::<
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
    >() - 96usize];
    ["Alignment of VkAccelerationStructureGeometryLinearSweptSpheresDataNV"][::std::mem::align_of::<
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
    >() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::sType"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        sType
    ) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::pNext"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::vertexFormat"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        vertexFormat
    )
        - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::vertexData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        vertexData
    )
        - 24usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::vertexStride"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        vertexStride
    )
        - 32usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::radiusFormat"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        radiusFormat
    )
        - 40usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::radiusData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        radiusData
    )
        - 48usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::radiusStride"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        radiusStride
    )
        - 56usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexType"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexType
    )
        - 64usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexData
    )
        - 72usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexStride"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexStride
    )
        - 80usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::indexingMode"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        indexingMode
    )
        - 88usize];
    ["Offset of field: VkAccelerationStructureGeometryLinearSweptSpheresDataNV::endCapsMode"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryLinearSweptSpheresDataNV,
        endCapsMode
    )
        - 92usize];
};
impl Default for VkAccelerationStructureGeometryLinearSweptSpheresDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometrySpheresDataNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexFormat: VkFormat,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
    pub vertexStride: VkDeviceSize,
    pub radiusFormat: VkFormat,
    pub radiusData: VkDeviceOrHostAddressConstKHR,
    pub radiusStride: VkDeviceSize,
    pub indexType: VkIndexType,
    pub indexData: VkDeviceOrHostAddressConstKHR,
    pub indexStride: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometrySpheresDataNV"]
        [::std::mem::size_of::<VkAccelerationStructureGeometrySpheresDataNV>() - 88usize];
    ["Alignment of VkAccelerationStructureGeometrySpheresDataNV"]
        [::std::mem::align_of::<VkAccelerationStructureGeometrySpheresDataNV>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometrySpheresDataNV, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometrySpheresDataNV, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::vertexFormat"][::std::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        vertexFormat
    ) - 16usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::vertexData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        vertexData
    ) - 24usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::vertexStride"][::std::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        vertexStride
    ) - 32usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::radiusFormat"][::std::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        radiusFormat
    ) - 40usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::radiusData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        radiusData
    ) - 48usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::radiusStride"][::std::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        radiusStride
    ) - 56usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::indexType"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometrySpheresDataNV, indexType) - 64usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::indexData"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometrySpheresDataNV, indexData) - 72usize];
    ["Offset of field: VkAccelerationStructureGeometrySpheresDataNV::indexStride"][::std::mem::offset_of!(
        VkAccelerationStructureGeometrySpheresDataNV,
        indexStride
    ) - 80usize];
};
impl Default for VkAccelerationStructureGeometrySpheresDataNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub linearColorAttachment: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLinearColorAttachmentFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceLinearColorAttachmentFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceLinearColorAttachmentFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceLinearColorAttachmentFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLinearColorAttachmentFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLinearColorAttachmentFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLinearColorAttachmentFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLinearColorAttachmentFeaturesNV::linearColorAttachment"][::std::mem::offset_of!(
        VkPhysicalDeviceLinearColorAttachmentFeaturesNV,
        linearColorAttachment
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceLinearColorAttachmentFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageCompressionControlSwapchain: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"][::std::mem::size_of::<
        VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT>()
            - 8usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT::imageCompressionControlSwapchain"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT , imageCompressionControlSwapchain) - 16usize] ;
};
impl Default for VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageViewSampleWeightCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub filterCenter: VkOffset2D,
    pub filterSize: VkExtent2D,
    pub numPhases: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageViewSampleWeightCreateInfoQCOM"]
        [::std::mem::size_of::<VkImageViewSampleWeightCreateInfoQCOM>() - 40usize];
    ["Alignment of VkImageViewSampleWeightCreateInfoQCOM"]
        [::std::mem::align_of::<VkImageViewSampleWeightCreateInfoQCOM>() - 8usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::sType"]
        [::std::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, sType) - 0usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::pNext"]
        [::std::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, pNext) - 8usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::filterCenter"]
        [::std::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, filterCenter) - 16usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::filterSize"]
        [::std::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, filterSize) - 24usize];
    ["Offset of field: VkImageViewSampleWeightCreateInfoQCOM::numPhases"]
        [::std::mem::offset_of!(VkImageViewSampleWeightCreateInfoQCOM, numPhases) - 32usize];
};
impl Default for VkImageViewSampleWeightCreateInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessingFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub textureSampleWeighted: VkBool32,
    pub textureBoxFilter: VkBool32,
    pub textureBlockMatch: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessingFeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceImageProcessingFeaturesQCOM>() - 32usize];
    ["Alignment of VkPhysicalDeviceImageProcessingFeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceImageProcessingFeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessingFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessingFeaturesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::textureSampleWeighted"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessingFeaturesQCOM,
        textureSampleWeighted
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::textureBoxFilter"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessingFeaturesQCOM,
        textureBoxFilter
    ) - 20usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingFeaturesQCOM::textureBlockMatch"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessingFeaturesQCOM,
        textureBlockMatch
    )
        - 24usize];
};
impl Default for VkPhysicalDeviceImageProcessingFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessingPropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxWeightFilterPhases: u32,
    pub maxWeightFilterDimension: VkExtent2D,
    pub maxBlockMatchRegion: VkExtent2D,
    pub maxBoxFilterBlockSize: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessingPropertiesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceImageProcessingPropertiesQCOM>() - 48usize];
    ["Alignment of VkPhysicalDeviceImageProcessingPropertiesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceImageProcessingPropertiesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessingPropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessingPropertiesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxWeightFilterPhases"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxWeightFilterPhases
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxWeightFilterDimension"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxWeightFilterDimension
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxBlockMatchRegion"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxBlockMatchRegion
    )
        - 28usize];
    ["Offset of field: VkPhysicalDeviceImageProcessingPropertiesQCOM::maxBoxFilterBlockSize"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessingPropertiesQCOM,
        maxBoxFilterBlockSize
    )
        - 36usize];
};
impl Default for VkPhysicalDeviceImageProcessingPropertiesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceNestedCommandBufferFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub nestedCommandBuffer: VkBool32,
    pub nestedCommandBufferRendering: VkBool32,
    pub nestedCommandBufferSimultaneousUse: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceNestedCommandBufferFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceNestedCommandBufferFeaturesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceNestedCommandBufferFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceNestedCommandBufferFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::nestedCommandBuffer"][::std::mem::offset_of!(
        VkPhysicalDeviceNestedCommandBufferFeaturesEXT,
        nestedCommandBuffer
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::nestedCommandBufferRendering"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceNestedCommandBufferFeaturesEXT , nestedCommandBufferRendering) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferFeaturesEXT::nestedCommandBufferSimultaneousUse"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceNestedCommandBufferFeaturesEXT , nestedCommandBufferSimultaneousUse) - 24usize] ;
};
impl Default for VkPhysicalDeviceNestedCommandBufferFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceNestedCommandBufferPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxCommandBufferNestingLevel: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceNestedCommandBufferPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceNestedCommandBufferPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceNestedCommandBufferPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceNestedCommandBufferPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceNestedCommandBufferPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceNestedCommandBufferPropertiesEXT::maxCommandBufferNestingLevel"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceNestedCommandBufferPropertiesEXT , maxCommandBufferNestingLevel) - 16usize] ;
};
impl Default for VkPhysicalDeviceNestedCommandBufferPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkExternalMemoryAcquireUnmodifiedEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub acquireUnmodifiedMemory: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkExternalMemoryAcquireUnmodifiedEXT"]
        [::std::mem::size_of::<VkExternalMemoryAcquireUnmodifiedEXT>() - 24usize];
    ["Alignment of VkExternalMemoryAcquireUnmodifiedEXT"]
        [::std::mem::align_of::<VkExternalMemoryAcquireUnmodifiedEXT>() - 8usize];
    ["Offset of field: VkExternalMemoryAcquireUnmodifiedEXT::sType"]
        [::std::mem::offset_of!(VkExternalMemoryAcquireUnmodifiedEXT, sType) - 0usize];
    ["Offset of field: VkExternalMemoryAcquireUnmodifiedEXT::pNext"]
        [::std::mem::offset_of!(VkExternalMemoryAcquireUnmodifiedEXT, pNext) - 8usize];
    ["Offset of field: VkExternalMemoryAcquireUnmodifiedEXT::acquireUnmodifiedMemory"][::std::mem::offset_of!(
        VkExternalMemoryAcquireUnmodifiedEXT,
        acquireUnmodifiedMemory
    ) - 16usize];
};
impl Default for VkExternalMemoryAcquireUnmodifiedEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedDynamicState3TessellationDomainOrigin: VkBool32,
    pub extendedDynamicState3DepthClampEnable: VkBool32,
    pub extendedDynamicState3PolygonMode: VkBool32,
    pub extendedDynamicState3RasterizationSamples: VkBool32,
    pub extendedDynamicState3SampleMask: VkBool32,
    pub extendedDynamicState3AlphaToCoverageEnable: VkBool32,
    pub extendedDynamicState3AlphaToOneEnable: VkBool32,
    pub extendedDynamicState3LogicOpEnable: VkBool32,
    pub extendedDynamicState3ColorBlendEnable: VkBool32,
    pub extendedDynamicState3ColorBlendEquation: VkBool32,
    pub extendedDynamicState3ColorWriteMask: VkBool32,
    pub extendedDynamicState3RasterizationStream: VkBool32,
    pub extendedDynamicState3ConservativeRasterizationMode: VkBool32,
    pub extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32,
    pub extendedDynamicState3DepthClipEnable: VkBool32,
    pub extendedDynamicState3SampleLocationsEnable: VkBool32,
    pub extendedDynamicState3ColorBlendAdvanced: VkBool32,
    pub extendedDynamicState3ProvokingVertexMode: VkBool32,
    pub extendedDynamicState3LineRasterizationMode: VkBool32,
    pub extendedDynamicState3LineStippleEnable: VkBool32,
    pub extendedDynamicState3DepthClipNegativeOneToOne: VkBool32,
    pub extendedDynamicState3ViewportWScalingEnable: VkBool32,
    pub extendedDynamicState3ViewportSwizzle: VkBool32,
    pub extendedDynamicState3CoverageToColorEnable: VkBool32,
    pub extendedDynamicState3CoverageToColorLocation: VkBool32,
    pub extendedDynamicState3CoverageModulationMode: VkBool32,
    pub extendedDynamicState3CoverageModulationTableEnable: VkBool32,
    pub extendedDynamicState3CoverageModulationTable: VkBool32,
    pub extendedDynamicState3CoverageReductionMode: VkBool32,
    pub extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32,
    pub extendedDynamicState3ShadingRateImageEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicState3FeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT>() - 144usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicState3FeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicState3FeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceExtendedDynamicState3FeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3TessellationDomainOrigin"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3TessellationDomainOrigin) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClampEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3DepthClampEnable) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3PolygonMode"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3PolygonMode) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RasterizationSamples"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3RasterizationSamples) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3SampleMask"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3SampleMask) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3AlphaToCoverageEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3AlphaToCoverageEnable) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3AlphaToOneEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3AlphaToOneEnable) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LogicOpEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3LogicOpEnable) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorBlendEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorBlendEnable) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorBlendEquation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorBlendEquation) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorWriteMask"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorWriteMask) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RasterizationStream"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3RasterizationStream) - 60usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ConservativeRasterizationMode"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ConservativeRasterizationMode) - 64usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ExtraPrimitiveOverestimationSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ExtraPrimitiveOverestimationSize) - 68usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClipEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3DepthClipEnable) - 72usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3SampleLocationsEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3SampleLocationsEnable) - 76usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ColorBlendAdvanced"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ColorBlendAdvanced) - 80usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ProvokingVertexMode"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ProvokingVertexMode) - 84usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LineRasterizationMode"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3LineRasterizationMode) - 88usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3LineStippleEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3LineStippleEnable) - 92usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3DepthClipNegativeOneToOne"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3DepthClipNegativeOneToOne) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ViewportWScalingEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ViewportWScalingEnable) - 100usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ViewportSwizzle"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ViewportSwizzle) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageToColorEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageToColorEnable) - 108usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageToColorLocation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageToColorLocation) - 112usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageModulationMode"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageModulationMode) - 116usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageModulationTableEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageModulationTableEnable) - 120usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageModulationTable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageModulationTable) - 124usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3CoverageReductionMode"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3CoverageReductionMode) - 128usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3RepresentativeFragmentTestEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3RepresentativeFragmentTestEnable) - 132usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3FeaturesEXT::extendedDynamicState3ShadingRateImageEnable"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT , extendedDynamicState3ShadingRateImageEnable) - 136usize] ;
};
impl Default for VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dynamicPrimitiveTopologyUnrestricted: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedDynamicState3PropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceExtendedDynamicState3PropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceExtendedDynamicState3PropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicState3PropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedDynamicState3PropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedDynamicState3PropertiesEXT::dynamicPrimitiveTopologyUnrestricted"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedDynamicState3PropertiesEXT , dynamicPrimitiveTopologyUnrestricted) - 16usize] ;
};
impl Default for VkPhysicalDeviceExtendedDynamicState3PropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkColorBlendEquationEXT {
    pub srcColorBlendFactor: VkBlendFactor,
    pub dstColorBlendFactor: VkBlendFactor,
    pub colorBlendOp: VkBlendOp,
    pub srcAlphaBlendFactor: VkBlendFactor,
    pub dstAlphaBlendFactor: VkBlendFactor,
    pub alphaBlendOp: VkBlendOp,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkColorBlendEquationEXT"][::std::mem::size_of::<VkColorBlendEquationEXT>() - 24usize];
    ["Alignment of VkColorBlendEquationEXT"]
        [::std::mem::align_of::<VkColorBlendEquationEXT>() - 4usize];
    ["Offset of field: VkColorBlendEquationEXT::srcColorBlendFactor"]
        [::std::mem::offset_of!(VkColorBlendEquationEXT, srcColorBlendFactor) - 0usize];
    ["Offset of field: VkColorBlendEquationEXT::dstColorBlendFactor"]
        [::std::mem::offset_of!(VkColorBlendEquationEXT, dstColorBlendFactor) - 4usize];
    ["Offset of field: VkColorBlendEquationEXT::colorBlendOp"]
        [::std::mem::offset_of!(VkColorBlendEquationEXT, colorBlendOp) - 8usize];
    ["Offset of field: VkColorBlendEquationEXT::srcAlphaBlendFactor"]
        [::std::mem::offset_of!(VkColorBlendEquationEXT, srcAlphaBlendFactor) - 12usize];
    ["Offset of field: VkColorBlendEquationEXT::dstAlphaBlendFactor"]
        [::std::mem::offset_of!(VkColorBlendEquationEXT, dstAlphaBlendFactor) - 16usize];
    ["Offset of field: VkColorBlendEquationEXT::alphaBlendOp"]
        [::std::mem::offset_of!(VkColorBlendEquationEXT, alphaBlendOp) - 20usize];
};
impl Default for VkColorBlendEquationEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkColorBlendAdvancedEXT {
    pub advancedBlendOp: VkBlendOp,
    pub srcPremultiplied: VkBool32,
    pub dstPremultiplied: VkBool32,
    pub blendOverlap: VkBlendOverlapEXT,
    pub clampResults: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkColorBlendAdvancedEXT"][::std::mem::size_of::<VkColorBlendAdvancedEXT>() - 20usize];
    ["Alignment of VkColorBlendAdvancedEXT"]
        [::std::mem::align_of::<VkColorBlendAdvancedEXT>() - 4usize];
    ["Offset of field: VkColorBlendAdvancedEXT::advancedBlendOp"]
        [::std::mem::offset_of!(VkColorBlendAdvancedEXT, advancedBlendOp) - 0usize];
    ["Offset of field: VkColorBlendAdvancedEXT::srcPremultiplied"]
        [::std::mem::offset_of!(VkColorBlendAdvancedEXT, srcPremultiplied) - 4usize];
    ["Offset of field: VkColorBlendAdvancedEXT::dstPremultiplied"]
        [::std::mem::offset_of!(VkColorBlendAdvancedEXT, dstPremultiplied) - 8usize];
    ["Offset of field: VkColorBlendAdvancedEXT::blendOverlap"]
        [::std::mem::offset_of!(VkColorBlendAdvancedEXT, blendOverlap) - 12usize];
    ["Offset of field: VkColorBlendAdvancedEXT::clampResults"]
        [::std::mem::offset_of!(VkColorBlendAdvancedEXT, clampResults) - 16usize];
};
impl Default for VkColorBlendAdvancedEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetDepthClampEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32),
>;
pub type PFN_vkCmdSetPolygonModeEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode),
>;
pub type PFN_vkCmdSetRasterizationSamplesEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        rasterizationSamples: VkSampleCountFlagBits,
    ),
>;
pub type PFN_vkCmdSetSampleMaskEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        samples: VkSampleCountFlagBits,
        pSampleMask: *const VkSampleMask,
    ),
>;
pub type PFN_vkCmdSetAlphaToCoverageEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32),
>;
pub type PFN_vkCmdSetAlphaToOneEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32),
>;
pub type PFN_vkCmdSetLogicOpEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32),
>;
pub type PFN_vkCmdSetColorBlendEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEnables: *const VkBool32,
    ),
>;
pub type PFN_vkCmdSetColorBlendEquationEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEquations: *const VkColorBlendEquationEXT,
    ),
>;
pub type PFN_vkCmdSetColorWriteMaskEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorWriteMasks: *const VkColorComponentFlags,
    ),
>;
pub type PFN_vkCmdSetTessellationDomainOriginEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin),
>;
pub type PFN_vkCmdSetRasterizationStreamEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, rasterizationStream: u32),
>;
pub type PFN_vkCmdSetConservativeRasterizationModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    ),
>;
pub type PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: f32),
>;
pub type PFN_vkCmdSetDepthClipEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32),
>;
pub type PFN_vkCmdSetSampleLocationsEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32),
>;
pub type PFN_vkCmdSetColorBlendAdvancedEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendAdvanced: *const VkColorBlendAdvancedEXT,
    ),
>;
pub type PFN_vkCmdSetProvokingVertexModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        provokingVertexMode: VkProvokingVertexModeEXT,
    ),
>;
pub type PFN_vkCmdSetLineRasterizationModeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        lineRasterizationMode: VkLineRasterizationModeEXT,
    ),
>;
pub type PFN_vkCmdSetLineStippleEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32),
>;
pub type PFN_vkCmdSetDepthClipNegativeOneToOneEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32),
>;
pub type PFN_vkCmdSetViewportWScalingEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32),
>;
pub type PFN_vkCmdSetViewportSwizzleNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportSwizzles: *const VkViewportSwizzleNV,
    ),
>;
pub type PFN_vkCmdSetCoverageToColorEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32),
>;
pub type PFN_vkCmdSetCoverageToColorLocationNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, coverageToColorLocation: u32),
>;
pub type PFN_vkCmdSetCoverageModulationModeNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        coverageModulationMode: VkCoverageModulationModeNV,
    ),
>;
pub type PFN_vkCmdSetCoverageModulationTableEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32),
>;
pub type PFN_vkCmdSetCoverageModulationTableNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableCount: u32,
        pCoverageModulationTable: *const f32,
    ),
>;
pub type PFN_vkCmdSetShadingRateImageEnableNV = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32),
>;
pub type PFN_vkCmdSetRepresentativeFragmentTestEnableNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        representativeFragmentTestEnable: VkBool32,
    ),
>;
pub type PFN_vkCmdSetCoverageReductionModeNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        coverageReductionMode: VkCoverageReductionModeNV,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdSetDepthClampEnableEXT(commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetPolygonModeEXT(commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode);
}
unsafe extern "system" {
    pub fn vkCmdSetRasterizationSamplesEXT(
        commandBuffer: VkCommandBuffer,
        rasterizationSamples: VkSampleCountFlagBits,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetSampleMaskEXT(
        commandBuffer: VkCommandBuffer,
        samples: VkSampleCountFlagBits,
        pSampleMask: *const VkSampleMask,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetAlphaToCoverageEnableEXT(
        commandBuffer: VkCommandBuffer,
        alphaToCoverageEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetAlphaToOneEnableEXT(commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetLogicOpEnableEXT(commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetColorBlendEnableEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEnables: *const VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetColorBlendEquationEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendEquations: *const VkColorBlendEquationEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetColorWriteMaskEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorWriteMasks: *const VkColorComponentFlags,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetTessellationDomainOriginEXT(
        commandBuffer: VkCommandBuffer,
        domainOrigin: VkTessellationDomainOrigin,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetRasterizationStreamEXT(commandBuffer: VkCommandBuffer, rasterizationStream: u32);
}
unsafe extern "system" {
    pub fn vkCmdSetConservativeRasterizationModeEXT(
        commandBuffer: VkCommandBuffer,
        conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(
        commandBuffer: VkCommandBuffer,
        extraPrimitiveOverestimationSize: f32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDepthClipEnableEXT(commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32);
}
unsafe extern "system" {
    pub fn vkCmdSetSampleLocationsEnableEXT(
        commandBuffer: VkCommandBuffer,
        sampleLocationsEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetColorBlendAdvancedEXT(
        commandBuffer: VkCommandBuffer,
        firstAttachment: u32,
        attachmentCount: u32,
        pColorBlendAdvanced: *const VkColorBlendAdvancedEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetProvokingVertexModeEXT(
        commandBuffer: VkCommandBuffer,
        provokingVertexMode: VkProvokingVertexModeEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetLineRasterizationModeEXT(
        commandBuffer: VkCommandBuffer,
        lineRasterizationMode: VkLineRasterizationModeEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetLineStippleEnableEXT(
        commandBuffer: VkCommandBuffer,
        stippledLineEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDepthClipNegativeOneToOneEXT(
        commandBuffer: VkCommandBuffer,
        negativeOneToOne: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetViewportWScalingEnableNV(
        commandBuffer: VkCommandBuffer,
        viewportWScalingEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetViewportSwizzleNV(
        commandBuffer: VkCommandBuffer,
        firstViewport: u32,
        viewportCount: u32,
        pViewportSwizzles: *const VkViewportSwizzleNV,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetCoverageToColorEnableNV(
        commandBuffer: VkCommandBuffer,
        coverageToColorEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetCoverageToColorLocationNV(
        commandBuffer: VkCommandBuffer,
        coverageToColorLocation: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetCoverageModulationModeNV(
        commandBuffer: VkCommandBuffer,
        coverageModulationMode: VkCoverageModulationModeNV,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetCoverageModulationTableEnableNV(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetCoverageModulationTableNV(
        commandBuffer: VkCommandBuffer,
        coverageModulationTableCount: u32,
        pCoverageModulationTable: *const f32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetShadingRateImageEnableNV(
        commandBuffer: VkCommandBuffer,
        shadingRateImageEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetRepresentativeFragmentTestEnableNV(
        commandBuffer: VkCommandBuffer,
        representativeFragmentTestEnable: VkBool32,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetCoverageReductionModeNV(
        commandBuffer: VkCommandBuffer,
        coverageReductionMode: VkCoverageReductionModeNV,
    );
}
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_MERGED_EXT: VkSubpassMergeStatusEXT = 0;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT: VkSubpassMergeStatusEXT =
    1;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT:
    VkSubpassMergeStatusEXT = 2;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT:
    VkSubpassMergeStatusEXT = 3;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT:
    VkSubpassMergeStatusEXT = 4;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT:
    VkSubpassMergeStatusEXT = 5;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT:
    VkSubpassMergeStatusEXT = 6;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT : VkSubpassMergeStatusEXT = 7 ;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT:
    VkSubpassMergeStatusEXT = 8;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT:
    VkSubpassMergeStatusEXT = 9;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT:
    VkSubpassMergeStatusEXT = 10;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT : VkSubpassMergeStatusEXT = 11 ;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT:
    VkSubpassMergeStatusEXT = 12;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT:
    VkSubpassMergeStatusEXT = 13;
pub const VkSubpassMergeStatusEXT_VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT: VkSubpassMergeStatusEXT =
    2147483647;
pub type VkSubpassMergeStatusEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub subpassMergeFeedback: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT::subpassMergeFeedback"][::std::mem::offset_of!(
        VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT,
        subpassMergeFeedback
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreationControlEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub disallowMerging: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreationControlEXT"]
        [::std::mem::size_of::<VkRenderPassCreationControlEXT>() - 24usize];
    ["Alignment of VkRenderPassCreationControlEXT"]
        [::std::mem::align_of::<VkRenderPassCreationControlEXT>() - 8usize];
    ["Offset of field: VkRenderPassCreationControlEXT::sType"]
        [::std::mem::offset_of!(VkRenderPassCreationControlEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassCreationControlEXT::pNext"]
        [::std::mem::offset_of!(VkRenderPassCreationControlEXT, pNext) - 8usize];
    ["Offset of field: VkRenderPassCreationControlEXT::disallowMerging"]
        [::std::mem::offset_of!(VkRenderPassCreationControlEXT, disallowMerging) - 16usize];
};
impl Default for VkRenderPassCreationControlEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkRenderPassCreationFeedbackInfoEXT {
    pub postMergeSubpassCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreationFeedbackInfoEXT"]
        [::std::mem::size_of::<VkRenderPassCreationFeedbackInfoEXT>() - 4usize];
    ["Alignment of VkRenderPassCreationFeedbackInfoEXT"]
        [::std::mem::align_of::<VkRenderPassCreationFeedbackInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassCreationFeedbackInfoEXT::postMergeSubpassCount"][::std::mem::offset_of!(
        VkRenderPassCreationFeedbackInfoEXT,
        postMergeSubpassCount
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassCreationFeedbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pRenderPassFeedback: *mut VkRenderPassCreationFeedbackInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassCreationFeedbackCreateInfoEXT"]
        [::std::mem::size_of::<VkRenderPassCreationFeedbackCreateInfoEXT>() - 24usize];
    ["Alignment of VkRenderPassCreationFeedbackCreateInfoEXT"]
        [::std::mem::align_of::<VkRenderPassCreationFeedbackCreateInfoEXT>() - 8usize];
    ["Offset of field: VkRenderPassCreationFeedbackCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkRenderPassCreationFeedbackCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassCreationFeedbackCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkRenderPassCreationFeedbackCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkRenderPassCreationFeedbackCreateInfoEXT::pRenderPassFeedback"][::std::mem::offset_of!(
        VkRenderPassCreationFeedbackCreateInfoEXT,
        pRenderPassFeedback
    )
        - 16usize];
};
impl Default for VkRenderPassCreationFeedbackCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassSubpassFeedbackInfoEXT {
    pub subpassMergeStatus: VkSubpassMergeStatusEXT,
    pub description: [::std::os::raw::c_char; 256usize],
    pub postMergeIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassSubpassFeedbackInfoEXT"]
        [::std::mem::size_of::<VkRenderPassSubpassFeedbackInfoEXT>() - 264usize];
    ["Alignment of VkRenderPassSubpassFeedbackInfoEXT"]
        [::std::mem::align_of::<VkRenderPassSubpassFeedbackInfoEXT>() - 4usize];
    ["Offset of field: VkRenderPassSubpassFeedbackInfoEXT::subpassMergeStatus"]
        [::std::mem::offset_of!(VkRenderPassSubpassFeedbackInfoEXT, subpassMergeStatus) - 0usize];
    ["Offset of field: VkRenderPassSubpassFeedbackInfoEXT::description"]
        [::std::mem::offset_of!(VkRenderPassSubpassFeedbackInfoEXT, description) - 4usize];
    ["Offset of field: VkRenderPassSubpassFeedbackInfoEXT::postMergeIndex"]
        [::std::mem::offset_of!(VkRenderPassSubpassFeedbackInfoEXT, postMergeIndex) - 260usize];
};
impl Default for VkRenderPassSubpassFeedbackInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRenderPassSubpassFeedbackCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pSubpassFeedback: *mut VkRenderPassSubpassFeedbackInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRenderPassSubpassFeedbackCreateInfoEXT"]
        [::std::mem::size_of::<VkRenderPassSubpassFeedbackCreateInfoEXT>() - 24usize];
    ["Alignment of VkRenderPassSubpassFeedbackCreateInfoEXT"]
        [::std::mem::align_of::<VkRenderPassSubpassFeedbackCreateInfoEXT>() - 8usize];
    ["Offset of field: VkRenderPassSubpassFeedbackCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkRenderPassSubpassFeedbackCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkRenderPassSubpassFeedbackCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkRenderPassSubpassFeedbackCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkRenderPassSubpassFeedbackCreateInfoEXT::pSubpassFeedback"][::std::mem::offset_of!(
        VkRenderPassSubpassFeedbackCreateInfoEXT,
        pSubpassFeedback
    ) - 16usize];
};
impl Default for VkRenderPassSubpassFeedbackCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkDirectDriverLoadingModeLUNARG_VK_DIRECT_DRIVER_LOADING_MODE_EXCLUSIVE_LUNARG:
    VkDirectDriverLoadingModeLUNARG = 0;
pub const VkDirectDriverLoadingModeLUNARG_VK_DIRECT_DRIVER_LOADING_MODE_INCLUSIVE_LUNARG:
    VkDirectDriverLoadingModeLUNARG = 1;
pub const VkDirectDriverLoadingModeLUNARG_VK_DIRECT_DRIVER_LOADING_MODE_MAX_ENUM_LUNARG:
    VkDirectDriverLoadingModeLUNARG = 2147483647;
pub type VkDirectDriverLoadingModeLUNARG = ::std::os::raw::c_uint;
pub type VkDirectDriverLoadingFlagsLUNARG = VkFlags;
pub type PFN_vkGetInstanceProcAddrLUNARG = ::std::option::Option<
    unsafe extern "system" fn(
        instance: VkInstance,
        pName: *const ::std::os::raw::c_char,
    ) -> PFN_vkVoidFunction,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDirectDriverLoadingInfoLUNARG {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkDirectDriverLoadingFlagsLUNARG,
    pub pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDirectDriverLoadingInfoLUNARG"]
        [::std::mem::size_of::<VkDirectDriverLoadingInfoLUNARG>() - 32usize];
    ["Alignment of VkDirectDriverLoadingInfoLUNARG"]
        [::std::mem::align_of::<VkDirectDriverLoadingInfoLUNARG>() - 8usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::sType"]
        [::std::mem::offset_of!(VkDirectDriverLoadingInfoLUNARG, sType) - 0usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::pNext"]
        [::std::mem::offset_of!(VkDirectDriverLoadingInfoLUNARG, pNext) - 8usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::flags"]
        [::std::mem::offset_of!(VkDirectDriverLoadingInfoLUNARG, flags) - 16usize];
    ["Offset of field: VkDirectDriverLoadingInfoLUNARG::pfnGetInstanceProcAddr"]
        [::std::mem::offset_of!(VkDirectDriverLoadingInfoLUNARG, pfnGetInstanceProcAddr) - 24usize];
};
impl Default for VkDirectDriverLoadingInfoLUNARG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDirectDriverLoadingListLUNARG {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub mode: VkDirectDriverLoadingModeLUNARG,
    pub driverCount: u32,
    pub pDrivers: *const VkDirectDriverLoadingInfoLUNARG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDirectDriverLoadingListLUNARG"]
        [::std::mem::size_of::<VkDirectDriverLoadingListLUNARG>() - 32usize];
    ["Alignment of VkDirectDriverLoadingListLUNARG"]
        [::std::mem::align_of::<VkDirectDriverLoadingListLUNARG>() - 8usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::sType"]
        [::std::mem::offset_of!(VkDirectDriverLoadingListLUNARG, sType) - 0usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::pNext"]
        [::std::mem::offset_of!(VkDirectDriverLoadingListLUNARG, pNext) - 8usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::mode"]
        [::std::mem::offset_of!(VkDirectDriverLoadingListLUNARG, mode) - 16usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::driverCount"]
        [::std::mem::offset_of!(VkDirectDriverLoadingListLUNARG, driverCount) - 20usize];
    ["Offset of field: VkDirectDriverLoadingListLUNARG::pDrivers"]
        [::std::mem::offset_of!(VkDirectDriverLoadingListLUNARG, pDrivers) - 24usize];
};
impl Default for VkDirectDriverLoadingListLUNARG {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderModuleIdentifier: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT::shaderModuleIdentifier"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT , shaderModuleIdentifier) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderModuleIdentifierAlgorithmUUID: [u8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>() - 32usize];
    ["Alignment of VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT::shaderModuleIdentifierAlgorithmUUID"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT , shaderModuleIdentifierAlgorithmUUID) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub identifierSize: u32,
    pub pIdentifier: *const u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineShaderStageModuleIdentifierCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineShaderStageModuleIdentifierCreateInfoEXT>() - 32usize];
    ["Alignment of VkPipelineShaderStageModuleIdentifierCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineShaderStageModuleIdentifierCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::sType"][::std::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::pNext"][::std::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::identifierSize"][::std::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        identifierSize
    )
        - 16usize];
    ["Offset of field: VkPipelineShaderStageModuleIdentifierCreateInfoEXT::pIdentifier"][::std::mem::offset_of!(
        VkPipelineShaderStageModuleIdentifierCreateInfoEXT,
        pIdentifier
    )
        - 24usize];
};
impl Default for VkPipelineShaderStageModuleIdentifierCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderModuleIdentifierEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub identifierSize: u32,
    pub identifier: [u8; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderModuleIdentifierEXT"]
        [::std::mem::size_of::<VkShaderModuleIdentifierEXT>() - 56usize];
    ["Alignment of VkShaderModuleIdentifierEXT"]
        [::std::mem::align_of::<VkShaderModuleIdentifierEXT>() - 8usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::sType"]
        [::std::mem::offset_of!(VkShaderModuleIdentifierEXT, sType) - 0usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::pNext"]
        [::std::mem::offset_of!(VkShaderModuleIdentifierEXT, pNext) - 8usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::identifierSize"]
        [::std::mem::offset_of!(VkShaderModuleIdentifierEXT, identifierSize) - 16usize];
    ["Offset of field: VkShaderModuleIdentifierEXT::identifier"]
        [::std::mem::offset_of!(VkShaderModuleIdentifierEXT, identifier) - 20usize];
};
impl Default for VkShaderModuleIdentifierEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetShaderModuleIdentifierEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    ),
>;
pub type PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkGetShaderModuleIdentifierEXT(
        device: VkDevice,
        shaderModule: VkShaderModule,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    );
}
unsafe extern "system" {
    pub fn vkGetShaderModuleCreateInfoIdentifierEXT(
        device: VkDevice,
        pCreateInfo: *const VkShaderModuleCreateInfo,
        pIdentifier: *mut VkShaderModuleIdentifierEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOpticalFlowSessionNV_T {
    _unused: [u8; 0],
}
pub type VkOpticalFlowSessionNV = *mut VkOpticalFlowSessionNV_T;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV:
    VkOpticalFlowPerformanceLevelNV = 0;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV:
    VkOpticalFlowPerformanceLevelNV = 1;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV:
    VkOpticalFlowPerformanceLevelNV = 2;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV:
    VkOpticalFlowPerformanceLevelNV = 3;
pub const VkOpticalFlowPerformanceLevelNV_VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MAX_ENUM_NV:
    VkOpticalFlowPerformanceLevelNV = 2147483647;
pub type VkOpticalFlowPerformanceLevelNV = ::std::os::raw::c_uint;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV:
    VkOpticalFlowSessionBindingPointNV = 0;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV:
    VkOpticalFlowSessionBindingPointNV = 1;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV:
    VkOpticalFlowSessionBindingPointNV = 2;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV:
    VkOpticalFlowSessionBindingPointNV = 3;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV : VkOpticalFlowSessionBindingPointNV = 4 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV : VkOpticalFlowSessionBindingPointNV = 5 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV:
    VkOpticalFlowSessionBindingPointNV = 6;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV : VkOpticalFlowSessionBindingPointNV = 7 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV : VkOpticalFlowSessionBindingPointNV = 8 ;
pub const VkOpticalFlowSessionBindingPointNV_VK_OPTICAL_FLOW_SESSION_BINDING_POINT_MAX_ENUM_NV:
    VkOpticalFlowSessionBindingPointNV = 2147483647;
pub type VkOpticalFlowSessionBindingPointNV = ::std::os::raw::c_uint;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 0;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 1;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 2;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 4;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 8;
pub const VkOpticalFlowGridSizeFlagBitsNV_VK_OPTICAL_FLOW_GRID_SIZE_FLAG_BITS_MAX_ENUM_NV:
    VkOpticalFlowGridSizeFlagBitsNV = 2147483647;
pub type VkOpticalFlowGridSizeFlagBitsNV = ::std::os::raw::c_uint;
pub type VkOpticalFlowGridSizeFlagsNV = VkFlags;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_UNKNOWN_NV:
    VkOpticalFlowUsageFlagBitsNV = 0;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_INPUT_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 1;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_OUTPUT_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 2;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_HINT_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 4;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_COST_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 8;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_GLOBAL_FLOW_BIT_NV:
    VkOpticalFlowUsageFlagBitsNV = 16;
pub const VkOpticalFlowUsageFlagBitsNV_VK_OPTICAL_FLOW_USAGE_FLAG_BITS_MAX_ENUM_NV:
    VkOpticalFlowUsageFlagBitsNV = 2147483647;
pub type VkOpticalFlowUsageFlagBitsNV = ::std::os::raw::c_uint;
pub type VkOpticalFlowUsageFlagsNV = VkFlags;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV:
    VkOpticalFlowSessionCreateFlagBitsNV = 1;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV:
    VkOpticalFlowSessionCreateFlagBitsNV = 2;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV : VkOpticalFlowSessionCreateFlagBitsNV = 4 ;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV : VkOpticalFlowSessionCreateFlagBitsNV = 8 ;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV : VkOpticalFlowSessionCreateFlagBitsNV = 16 ;
pub const VkOpticalFlowSessionCreateFlagBitsNV_VK_OPTICAL_FLOW_SESSION_CREATE_FLAG_BITS_MAX_ENUM_NV : VkOpticalFlowSessionCreateFlagBitsNV = 2147483647 ;
pub type VkOpticalFlowSessionCreateFlagBitsNV = ::std::os::raw::c_uint;
pub type VkOpticalFlowSessionCreateFlagsNV = VkFlags;
pub const VkOpticalFlowExecuteFlagBitsNV_VK_OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV:
    VkOpticalFlowExecuteFlagBitsNV = 1;
pub const VkOpticalFlowExecuteFlagBitsNV_VK_OPTICAL_FLOW_EXECUTE_FLAG_BITS_MAX_ENUM_NV:
    VkOpticalFlowExecuteFlagBitsNV = 2147483647;
pub type VkOpticalFlowExecuteFlagBitsNV = ::std::os::raw::c_uint;
pub type VkOpticalFlowExecuteFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceOpticalFlowFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub opticalFlow: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpticalFlowFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceOpticalFlowFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceOpticalFlowFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceOpticalFlowFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowFeaturesNV::opticalFlow"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowFeaturesNV, opticalFlow) - 16usize];
};
impl Default for VkPhysicalDeviceOpticalFlowFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceOpticalFlowPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV,
    pub supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV,
    pub hintSupported: VkBool32,
    pub costSupported: VkBool32,
    pub bidirectionalFlowSupported: VkBool32,
    pub globalFlowSupported: VkBool32,
    pub minWidth: u32,
    pub minHeight: u32,
    pub maxWidth: u32,
    pub maxHeight: u32,
    pub maxNumRegionsOfInterest: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceOpticalFlowPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceOpticalFlowPropertiesNV>() - 64usize];
    ["Alignment of VkPhysicalDeviceOpticalFlowPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceOpticalFlowPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::supportedOutputGridSizes"][::std::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        supportedOutputGridSizes
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::supportedHintGridSizes"][::std::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        supportedHintGridSizes
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::hintSupported"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, hintSupported) - 24usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::costSupported"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, costSupported) - 28usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::bidirectionalFlowSupported"][::std::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        bidirectionalFlowSupported
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::globalFlowSupported"][::std::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        globalFlowSupported
    ) - 36usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::minWidth"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, minWidth) - 40usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::minHeight"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, minHeight) - 44usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::maxWidth"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, maxWidth) - 48usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::maxHeight"]
        [::std::mem::offset_of!(VkPhysicalDeviceOpticalFlowPropertiesNV, maxHeight) - 52usize];
    ["Offset of field: VkPhysicalDeviceOpticalFlowPropertiesNV::maxNumRegionsOfInterest"][::std::mem::offset_of!(
        VkPhysicalDeviceOpticalFlowPropertiesNV,
        maxNumRegionsOfInterest
    )
        - 56usize];
};
impl Default for VkPhysicalDeviceOpticalFlowPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOpticalFlowImageFormatInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub usage: VkOpticalFlowUsageFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowImageFormatInfoNV"]
        [::std::mem::size_of::<VkOpticalFlowImageFormatInfoNV>() - 24usize];
    ["Alignment of VkOpticalFlowImageFormatInfoNV"]
        [::std::mem::align_of::<VkOpticalFlowImageFormatInfoNV>() - 8usize];
    ["Offset of field: VkOpticalFlowImageFormatInfoNV::sType"]
        [::std::mem::offset_of!(VkOpticalFlowImageFormatInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowImageFormatInfoNV::pNext"]
        [::std::mem::offset_of!(VkOpticalFlowImageFormatInfoNV, pNext) - 8usize];
    ["Offset of field: VkOpticalFlowImageFormatInfoNV::usage"]
        [::std::mem::offset_of!(VkOpticalFlowImageFormatInfoNV, usage) - 16usize];
};
impl Default for VkOpticalFlowImageFormatInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOpticalFlowImageFormatPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub format: VkFormat,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowImageFormatPropertiesNV"]
        [::std::mem::size_of::<VkOpticalFlowImageFormatPropertiesNV>() - 24usize];
    ["Alignment of VkOpticalFlowImageFormatPropertiesNV"]
        [::std::mem::align_of::<VkOpticalFlowImageFormatPropertiesNV>() - 8usize];
    ["Offset of field: VkOpticalFlowImageFormatPropertiesNV::sType"]
        [::std::mem::offset_of!(VkOpticalFlowImageFormatPropertiesNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowImageFormatPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkOpticalFlowImageFormatPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkOpticalFlowImageFormatPropertiesNV::format"]
        [::std::mem::offset_of!(VkOpticalFlowImageFormatPropertiesNV, format) - 16usize];
};
impl Default for VkOpticalFlowImageFormatPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOpticalFlowSessionCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub width: u32,
    pub height: u32,
    pub imageFormat: VkFormat,
    pub flowVectorFormat: VkFormat,
    pub costFormat: VkFormat,
    pub outputGridSize: VkOpticalFlowGridSizeFlagsNV,
    pub hintGridSize: VkOpticalFlowGridSizeFlagsNV,
    pub performanceLevel: VkOpticalFlowPerformanceLevelNV,
    pub flags: VkOpticalFlowSessionCreateFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowSessionCreateInfoNV"]
        [::std::mem::size_of::<VkOpticalFlowSessionCreateInfoNV>() - 56usize];
    ["Alignment of VkOpticalFlowSessionCreateInfoNV"]
        [::std::mem::align_of::<VkOpticalFlowSessionCreateInfoNV>() - 8usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::width"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, width) - 16usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::height"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, height) - 20usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::imageFormat"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, imageFormat) - 24usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::flowVectorFormat"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, flowVectorFormat) - 28usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::costFormat"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, costFormat) - 32usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::outputGridSize"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, outputGridSize) - 36usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::hintGridSize"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, hintGridSize) - 40usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::performanceLevel"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, performanceLevel) - 44usize];
    ["Offset of field: VkOpticalFlowSessionCreateInfoNV::flags"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreateInfoNV, flags) - 48usize];
};
impl Default for VkOpticalFlowSessionCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOpticalFlowSessionCreatePrivateDataInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub id: u32,
    pub size: u32,
    pub pPrivateData: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowSessionCreatePrivateDataInfoNV"]
        [::std::mem::size_of::<VkOpticalFlowSessionCreatePrivateDataInfoNV>() - 32usize];
    ["Alignment of VkOpticalFlowSessionCreatePrivateDataInfoNV"]
        [::std::mem::align_of::<VkOpticalFlowSessionCreatePrivateDataInfoNV>() - 8usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::sType"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::pNext"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, pNext) - 8usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::id"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, id) - 16usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::size"]
        [::std::mem::offset_of!(VkOpticalFlowSessionCreatePrivateDataInfoNV, size) - 20usize];
    ["Offset of field: VkOpticalFlowSessionCreatePrivateDataInfoNV::pPrivateData"][::std::mem::offset_of!(
        VkOpticalFlowSessionCreatePrivateDataInfoNV,
        pPrivateData
    ) - 24usize];
};
impl Default for VkOpticalFlowSessionCreatePrivateDataInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOpticalFlowExecuteInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkOpticalFlowExecuteFlagsNV,
    pub regionCount: u32,
    pub pRegions: *const VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOpticalFlowExecuteInfoNV"]
        [::std::mem::size_of::<VkOpticalFlowExecuteInfoNV>() - 32usize];
    ["Alignment of VkOpticalFlowExecuteInfoNV"]
        [::std::mem::align_of::<VkOpticalFlowExecuteInfoNV>() - 8usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::sType"]
        [::std::mem::offset_of!(VkOpticalFlowExecuteInfoNV, sType) - 0usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::pNext"]
        [::std::mem::offset_of!(VkOpticalFlowExecuteInfoNV, pNext) - 8usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::flags"]
        [::std::mem::offset_of!(VkOpticalFlowExecuteInfoNV, flags) - 16usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::regionCount"]
        [::std::mem::offset_of!(VkOpticalFlowExecuteInfoNV, regionCount) - 20usize];
    ["Offset of field: VkOpticalFlowExecuteInfoNV::pRegions"]
        [::std::mem::offset_of!(VkOpticalFlowExecuteInfoNV, pRegions) - 24usize];
};
impl Default for VkOpticalFlowExecuteInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pOpticalFlowImageFormatInfo: *const VkOpticalFlowImageFormatInfoNV,
        pFormatCount: *mut u32,
        pImageFormatProperties: *mut VkOpticalFlowImageFormatPropertiesNV,
    ) -> VkResult,
>;
pub type PFN_vkCreateOpticalFlowSessionNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkOpticalFlowSessionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pSession: *mut VkOpticalFlowSessionNV,
    ) -> VkResult,
>;
pub type PFN_vkDestroyOpticalFlowSessionNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkBindOpticalFlowSessionImageNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        bindingPoint: VkOpticalFlowSessionBindingPointNV,
        view: VkImageView,
        layout: VkImageLayout,
    ) -> VkResult,
>;
pub type PFN_vkCmdOpticalFlowExecuteNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        session: VkOpticalFlowSessionNV,
        pExecuteInfo: *const VkOpticalFlowExecuteInfoNV,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(
        physicalDevice: VkPhysicalDevice,
        pOpticalFlowImageFormatInfo: *const VkOpticalFlowImageFormatInfoNV,
        pFormatCount: *mut u32,
        pImageFormatProperties: *mut VkOpticalFlowImageFormatPropertiesNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCreateOpticalFlowSessionNV(
        device: VkDevice,
        pCreateInfo: *const VkOpticalFlowSessionCreateInfoNV,
        pAllocator: *const VkAllocationCallbacks,
        pSession: *mut VkOpticalFlowSessionNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyOpticalFlowSessionNV(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkBindOpticalFlowSessionImageNV(
        device: VkDevice,
        session: VkOpticalFlowSessionNV,
        bindingPoint: VkOpticalFlowSessionBindingPointNV,
        view: VkImageView,
        layout: VkImageLayout,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdOpticalFlowExecuteNV(
        commandBuffer: VkCommandBuffer,
        session: VkOpticalFlowSessionNV,
        pExecuteInfo: *const VkOpticalFlowExecuteInfoNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub legacyDithering: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLegacyDitheringFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceLegacyDitheringFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceLegacyDitheringFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceLegacyDitheringFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLegacyDitheringFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLegacyDitheringFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLegacyDitheringFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLegacyDitheringFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLegacyDitheringFeaturesEXT::legacyDithering"][::std::mem::offset_of!(
        VkPhysicalDeviceLegacyDitheringFeaturesEXT,
        legacyDithering
    ) - 16usize];
};
impl Default for VkPhysicalDeviceLegacyDitheringFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkPhysicalDevicePipelineProtectedAccessFeaturesEXT =
    VkPhysicalDevicePipelineProtectedAccessFeatures;
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_DRIVER_CONTROL_AMD: VkAntiLagModeAMD = 0;
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_ON_AMD: VkAntiLagModeAMD = 1;
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_OFF_AMD: VkAntiLagModeAMD = 2;
pub const VkAntiLagModeAMD_VK_ANTI_LAG_MODE_MAX_ENUM_AMD: VkAntiLagModeAMD = 2147483647;
pub type VkAntiLagModeAMD = ::std::os::raw::c_uint;
pub const VkAntiLagStageAMD_VK_ANTI_LAG_STAGE_INPUT_AMD: VkAntiLagStageAMD = 0;
pub const VkAntiLagStageAMD_VK_ANTI_LAG_STAGE_PRESENT_AMD: VkAntiLagStageAMD = 1;
pub const VkAntiLagStageAMD_VK_ANTI_LAG_STAGE_MAX_ENUM_AMD: VkAntiLagStageAMD = 2147483647;
pub type VkAntiLagStageAMD = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceAntiLagFeaturesAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub antiLag: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAntiLagFeaturesAMD"]
        [::std::mem::size_of::<VkPhysicalDeviceAntiLagFeaturesAMD>() - 24usize];
    ["Alignment of VkPhysicalDeviceAntiLagFeaturesAMD"]
        [::std::mem::align_of::<VkPhysicalDeviceAntiLagFeaturesAMD>() - 8usize];
    ["Offset of field: VkPhysicalDeviceAntiLagFeaturesAMD::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceAntiLagFeaturesAMD, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAntiLagFeaturesAMD::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceAntiLagFeaturesAMD, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceAntiLagFeaturesAMD::antiLag"]
        [::std::mem::offset_of!(VkPhysicalDeviceAntiLagFeaturesAMD, antiLag) - 16usize];
};
impl Default for VkPhysicalDeviceAntiLagFeaturesAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAntiLagPresentationInfoAMD {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub stage: VkAntiLagStageAMD,
    pub frameIndex: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAntiLagPresentationInfoAMD"]
        [::std::mem::size_of::<VkAntiLagPresentationInfoAMD>() - 32usize];
    ["Alignment of VkAntiLagPresentationInfoAMD"]
        [::std::mem::align_of::<VkAntiLagPresentationInfoAMD>() - 8usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::sType"]
        [::std::mem::offset_of!(VkAntiLagPresentationInfoAMD, sType) - 0usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::pNext"]
        [::std::mem::offset_of!(VkAntiLagPresentationInfoAMD, pNext) - 8usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::stage"]
        [::std::mem::offset_of!(VkAntiLagPresentationInfoAMD, stage) - 16usize];
    ["Offset of field: VkAntiLagPresentationInfoAMD::frameIndex"]
        [::std::mem::offset_of!(VkAntiLagPresentationInfoAMD, frameIndex) - 24usize];
};
impl Default for VkAntiLagPresentationInfoAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAntiLagDataAMD {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub mode: VkAntiLagModeAMD,
    pub maxFPS: u32,
    pub pPresentationInfo: *const VkAntiLagPresentationInfoAMD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAntiLagDataAMD"][::std::mem::size_of::<VkAntiLagDataAMD>() - 32usize];
    ["Alignment of VkAntiLagDataAMD"][::std::mem::align_of::<VkAntiLagDataAMD>() - 8usize];
    ["Offset of field: VkAntiLagDataAMD::sType"]
        [::std::mem::offset_of!(VkAntiLagDataAMD, sType) - 0usize];
    ["Offset of field: VkAntiLagDataAMD::pNext"]
        [::std::mem::offset_of!(VkAntiLagDataAMD, pNext) - 8usize];
    ["Offset of field: VkAntiLagDataAMD::mode"]
        [::std::mem::offset_of!(VkAntiLagDataAMD, mode) - 16usize];
    ["Offset of field: VkAntiLagDataAMD::maxFPS"]
        [::std::mem::offset_of!(VkAntiLagDataAMD, maxFPS) - 20usize];
    ["Offset of field: VkAntiLagDataAMD::pPresentationInfo"]
        [::std::mem::offset_of!(VkAntiLagDataAMD, pPresentationInfo) - 24usize];
};
impl Default for VkAntiLagDataAMD {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkAntiLagUpdateAMD =
    ::std::option::Option<unsafe extern "system" fn(device: VkDevice, pData: *const VkAntiLagDataAMD)>;
unsafe extern "system" {
    pub fn vkAntiLagUpdateAMD(device: VkDevice, pData: *const VkAntiLagDataAMD);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderEXT_T {
    _unused: [u8; 0],
}
pub type VkShaderEXT = *mut VkShaderEXT_T;
pub const VkShaderCodeTypeEXT_VK_SHADER_CODE_TYPE_BINARY_EXT: VkShaderCodeTypeEXT = 0;
pub const VkShaderCodeTypeEXT_VK_SHADER_CODE_TYPE_SPIRV_EXT: VkShaderCodeTypeEXT = 1;
pub const VkShaderCodeTypeEXT_VK_SHADER_CODE_TYPE_MAX_ENUM_EXT: VkShaderCodeTypeEXT = 2147483647;
pub type VkShaderCodeTypeEXT = ::std::os::raw::c_uint;
pub const VkDepthClampModeEXT_VK_DEPTH_CLAMP_MODE_VIEWPORT_RANGE_EXT: VkDepthClampModeEXT = 0;
pub const VkDepthClampModeEXT_VK_DEPTH_CLAMP_MODE_USER_DEFINED_RANGE_EXT: VkDepthClampModeEXT = 1;
pub const VkDepthClampModeEXT_VK_DEPTH_CLAMP_MODE_MAX_ENUM_EXT: VkDepthClampModeEXT = 2147483647;
pub type VkDepthClampModeEXT = ::std::os::raw::c_uint;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_LINK_STAGE_BIT_EXT: VkShaderCreateFlagBitsEXT =
    1;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 2;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 4;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_NO_TASK_SHADER_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 8;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 16;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 32;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 64;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_INDIRECT_BINDABLE_BIT_EXT:
    VkShaderCreateFlagBitsEXT = 128;
pub const VkShaderCreateFlagBitsEXT_VK_SHADER_CREATE_FLAG_BITS_MAX_ENUM_EXT:
    VkShaderCreateFlagBitsEXT = 2147483647;
pub type VkShaderCreateFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkShaderCreateFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderObjectFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderObject: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderObjectFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderObjectFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderObjectFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderObjectFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderObjectFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderObjectFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectFeaturesEXT::shaderObject"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderObjectFeaturesEXT, shaderObject) - 16usize];
};
impl Default for VkPhysicalDeviceShaderObjectFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderObjectPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderBinaryUUID: [u8; 16usize],
    pub shaderBinaryVersion: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderObjectPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderObjectPropertiesEXT>() - 40usize];
    ["Alignment of VkPhysicalDeviceShaderObjectPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderObjectPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderObjectPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderObjectPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::shaderBinaryUUID"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderObjectPropertiesEXT,
        shaderBinaryUUID
    ) - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderObjectPropertiesEXT::shaderBinaryVersion"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderObjectPropertiesEXT,
        shaderBinaryVersion
    )
        - 32usize];
};
impl Default for VkPhysicalDeviceShaderObjectPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkShaderCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkShaderCreateFlagsEXT,
    pub stage: VkShaderStageFlagBits,
    pub nextStage: VkShaderStageFlags,
    pub codeType: VkShaderCodeTypeEXT,
    pub codeSize: usize,
    pub pCode: *const ::std::os::raw::c_void,
    pub pName: *const ::std::os::raw::c_char,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
    pub pSpecializationInfo: *const VkSpecializationInfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkShaderCreateInfoEXT"][::std::mem::size_of::<VkShaderCreateInfoEXT>() - 96usize];
    ["Alignment of VkShaderCreateInfoEXT"]
        [::std::mem::align_of::<VkShaderCreateInfoEXT>() - 8usize];
    ["Offset of field: VkShaderCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkShaderCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkShaderCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkShaderCreateInfoEXT::stage"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, stage) - 20usize];
    ["Offset of field: VkShaderCreateInfoEXT::nextStage"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, nextStage) - 24usize];
    ["Offset of field: VkShaderCreateInfoEXT::codeType"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, codeType) - 28usize];
    ["Offset of field: VkShaderCreateInfoEXT::codeSize"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, codeSize) - 32usize];
    ["Offset of field: VkShaderCreateInfoEXT::pCode"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, pCode) - 40usize];
    ["Offset of field: VkShaderCreateInfoEXT::pName"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, pName) - 48usize];
    ["Offset of field: VkShaderCreateInfoEXT::setLayoutCount"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, setLayoutCount) - 56usize];
    ["Offset of field: VkShaderCreateInfoEXT::pSetLayouts"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, pSetLayouts) - 64usize];
    ["Offset of field: VkShaderCreateInfoEXT::pushConstantRangeCount"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, pushConstantRangeCount) - 72usize];
    ["Offset of field: VkShaderCreateInfoEXT::pPushConstantRanges"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, pPushConstantRanges) - 80usize];
    ["Offset of field: VkShaderCreateInfoEXT::pSpecializationInfo"]
        [::std::mem::offset_of!(VkShaderCreateInfoEXT, pSpecializationInfo) - 88usize];
};
impl Default for VkShaderCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type VkShaderRequiredSubgroupSizeCreateInfoEXT =
    VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDepthClampRangeEXT {
    pub minDepthClamp: f32,
    pub maxDepthClamp: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDepthClampRangeEXT"][::std::mem::size_of::<VkDepthClampRangeEXT>() - 8usize];
    ["Alignment of VkDepthClampRangeEXT"][::std::mem::align_of::<VkDepthClampRangeEXT>() - 4usize];
    ["Offset of field: VkDepthClampRangeEXT::minDepthClamp"]
        [::std::mem::offset_of!(VkDepthClampRangeEXT, minDepthClamp) - 0usize];
    ["Offset of field: VkDepthClampRangeEXT::maxDepthClamp"]
        [::std::mem::offset_of!(VkDepthClampRangeEXT, maxDepthClamp) - 4usize];
};
pub type PFN_vkCreateShadersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        createInfoCount: u32,
        pCreateInfos: *const VkShaderCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pShaders: *mut VkShaderEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyShaderEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shader: VkShaderEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkGetShaderBinaryDataEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        shader: VkShaderEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdBindShadersEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        stageCount: u32,
        pStages: *const VkShaderStageFlagBits,
        pShaders: *const VkShaderEXT,
    ),
>;
pub type PFN_vkCmdSetDepthClampRangeEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        depthClampMode: VkDepthClampModeEXT,
        pDepthClampRange: *const VkDepthClampRangeEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkCreateShadersEXT(
        device: VkDevice,
        createInfoCount: u32,
        pCreateInfos: *const VkShaderCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pShaders: *mut VkShaderEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyShaderEXT(
        device: VkDevice,
        shader: VkShaderEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkGetShaderBinaryDataEXT(
        device: VkDevice,
        shader: VkShaderEXT,
        pDataSize: *mut usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdBindShadersEXT(
        commandBuffer: VkCommandBuffer,
        stageCount: u32,
        pStages: *const VkShaderStageFlagBits,
        pShaders: *const VkShaderEXT,
    );
}
unsafe extern "system" {
    pub fn vkCmdSetDepthClampRangeEXT(
        commandBuffer: VkCommandBuffer,
        depthClampMode: VkDepthClampModeEXT,
        pDepthClampRange: *const VkDepthClampRangeEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub tileProperties: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceTilePropertiesFeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceTilePropertiesFeaturesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceTilePropertiesFeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceTilePropertiesFeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceTilePropertiesFeaturesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceTilePropertiesFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceTilePropertiesFeaturesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceTilePropertiesFeaturesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceTilePropertiesFeaturesQCOM::tileProperties"][::std::mem::offset_of!(
        VkPhysicalDeviceTilePropertiesFeaturesQCOM,
        tileProperties
    ) - 16usize];
};
impl Default for VkPhysicalDeviceTilePropertiesFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkTilePropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub tileSize: VkExtent3D,
    pub apronSize: VkExtent2D,
    pub origin: VkOffset2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTilePropertiesQCOM"][::std::mem::size_of::<VkTilePropertiesQCOM>() - 48usize];
    ["Alignment of VkTilePropertiesQCOM"][::std::mem::align_of::<VkTilePropertiesQCOM>() - 8usize];
    ["Offset of field: VkTilePropertiesQCOM::sType"]
        [::std::mem::offset_of!(VkTilePropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkTilePropertiesQCOM::pNext"]
        [::std::mem::offset_of!(VkTilePropertiesQCOM, pNext) - 8usize];
    ["Offset of field: VkTilePropertiesQCOM::tileSize"]
        [::std::mem::offset_of!(VkTilePropertiesQCOM, tileSize) - 16usize];
    ["Offset of field: VkTilePropertiesQCOM::apronSize"]
        [::std::mem::offset_of!(VkTilePropertiesQCOM, apronSize) - 28usize];
    ["Offset of field: VkTilePropertiesQCOM::origin"]
        [::std::mem::offset_of!(VkTilePropertiesQCOM, origin) - 36usize];
};
impl Default for VkTilePropertiesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetFramebufferTilePropertiesQCOM = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pPropertiesCount: *mut u32,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult,
>;
pub type PFN_vkGetDynamicRenderingTilePropertiesQCOM = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pRenderingInfo: *const VkRenderingInfo,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult,
>;
unsafe extern "system" {
    pub fn vkGetFramebufferTilePropertiesQCOM(
        device: VkDevice,
        framebuffer: VkFramebuffer,
        pPropertiesCount: *mut u32,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetDynamicRenderingTilePropertiesQCOM(
        device: VkDevice,
        pRenderingInfo: *const VkRenderingInfo,
        pProperties: *mut VkTilePropertiesQCOM,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub amigoProfiling: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAmigoProfilingFeaturesSEC"]
        [::std::mem::size_of::<VkPhysicalDeviceAmigoProfilingFeaturesSEC>() - 24usize];
    ["Alignment of VkPhysicalDeviceAmigoProfilingFeaturesSEC"]
        [::std::mem::align_of::<VkPhysicalDeviceAmigoProfilingFeaturesSEC>() - 8usize];
    ["Offset of field: VkPhysicalDeviceAmigoProfilingFeaturesSEC::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceAmigoProfilingFeaturesSEC, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAmigoProfilingFeaturesSEC::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceAmigoProfilingFeaturesSEC, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceAmigoProfilingFeaturesSEC::amigoProfiling"][::std::mem::offset_of!(
        VkPhysicalDeviceAmigoProfilingFeaturesSEC,
        amigoProfiling
    ) - 16usize];
};
impl Default for VkPhysicalDeviceAmigoProfilingFeaturesSEC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAmigoProfilingSubmitInfoSEC {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub firstDrawTimestamp: u64,
    pub swapBufferTimestamp: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAmigoProfilingSubmitInfoSEC"]
        [::std::mem::size_of::<VkAmigoProfilingSubmitInfoSEC>() - 32usize];
    ["Alignment of VkAmigoProfilingSubmitInfoSEC"]
        [::std::mem::align_of::<VkAmigoProfilingSubmitInfoSEC>() - 8usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::sType"]
        [::std::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, sType) - 0usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::pNext"]
        [::std::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, pNext) - 8usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::firstDrawTimestamp"]
        [::std::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, firstDrawTimestamp) - 16usize];
    ["Offset of field: VkAmigoProfilingSubmitInfoSEC::swapBufferTimestamp"]
        [::std::mem::offset_of!(VkAmigoProfilingSubmitInfoSEC, swapBufferTimestamp) - 24usize];
};
impl Default for VkAmigoProfilingSubmitInfoSEC {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiviewPerViewViewports: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM::multiviewPerViewViewports"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM , multiviewPerViewViewports) - 16usize] ;
};
impl Default for VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkRayTracingInvocationReorderModeNV_VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV:
    VkRayTracingInvocationReorderModeNV = 0;
pub const VkRayTracingInvocationReorderModeNV_VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV:
    VkRayTracingInvocationReorderModeNV = 1;
pub const VkRayTracingInvocationReorderModeNV_VK_RAY_TRACING_INVOCATION_REORDER_MODE_MAX_ENUM_NV:
    VkRayTracingInvocationReorderModeNV = 2147483647;
pub type VkRayTracingInvocationReorderModeNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV"][::std::mem::size_of::<
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV"][::std::mem::align_of::<
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV::rayTracingInvocationReorderReorderingHint"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV , rayTracingInvocationReorderReorderingHint) - 16usize] ;
};
impl Default for VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingInvocationReorder: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV::rayTracingInvocationReorder"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV , rayTracingInvocationReorder) - 16usize] ;
};
impl Default for VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_ROW_MAJOR_NV:
    VkCooperativeVectorMatrixLayoutNV = 0;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_COLUMN_MAJOR_NV:
    VkCooperativeVectorMatrixLayoutNV = 1;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_INFERENCING_OPTIMAL_NV : VkCooperativeVectorMatrixLayoutNV = 2 ;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_TRAINING_OPTIMAL_NV : VkCooperativeVectorMatrixLayoutNV = 3 ;
pub const VkCooperativeVectorMatrixLayoutNV_VK_COOPERATIVE_VECTOR_MATRIX_LAYOUT_MAX_ENUM_NV:
    VkCooperativeVectorMatrixLayoutNV = 2147483647;
pub type VkCooperativeVectorMatrixLayoutNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeVectorPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeVectorSupportedStages: VkShaderStageFlags,
    pub cooperativeVectorTrainingFloat16Accumulation: VkBool32,
    pub cooperativeVectorTrainingFloat32Accumulation: VkBool32,
    pub maxCooperativeVectorComponents: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeVectorPropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeVectorPropertiesNV>() - 32usize];
    ["Alignment of VkPhysicalDeviceCooperativeVectorPropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeVectorPropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeVectorPropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeVectorPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::cooperativeVectorSupportedStages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , cooperativeVectorSupportedStages) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::cooperativeVectorTrainingFloat16Accumulation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , cooperativeVectorTrainingFloat16Accumulation) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::cooperativeVectorTrainingFloat32Accumulation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , cooperativeVectorTrainingFloat32Accumulation) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeVectorPropertiesNV::maxCooperativeVectorComponents"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeVectorPropertiesNV , maxCooperativeVectorComponents) - 28usize] ;
};
impl Default for VkPhysicalDeviceCooperativeVectorPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeVectorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeVector: VkBool32,
    pub cooperativeVectorTraining: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeVectorFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeVectorFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCooperativeVectorFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeVectorFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeVectorFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeVectorFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::cooperativeVector"][::std::mem::offset_of!(
        VkPhysicalDeviceCooperativeVectorFeaturesNV,
        cooperativeVector
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceCooperativeVectorFeaturesNV::cooperativeVectorTraining"][::std::mem::offset_of!(
        VkPhysicalDeviceCooperativeVectorFeaturesNV,
        cooperativeVectorTraining
    )
        - 20usize];
};
impl Default for VkPhysicalDeviceCooperativeVectorFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCooperativeVectorPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub inputType: VkComponentTypeKHR,
    pub inputInterpretation: VkComponentTypeKHR,
    pub matrixInterpretation: VkComponentTypeKHR,
    pub biasInterpretation: VkComponentTypeKHR,
    pub resultType: VkComponentTypeKHR,
    pub transpose: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeVectorPropertiesNV"]
        [::std::mem::size_of::<VkCooperativeVectorPropertiesNV>() - 40usize];
    ["Alignment of VkCooperativeVectorPropertiesNV"]
        [::std::mem::align_of::<VkCooperativeVectorPropertiesNV>() - 8usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::sType"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, sType) - 0usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::inputType"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, inputType) - 16usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::inputInterpretation"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, inputInterpretation) - 20usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::matrixInterpretation"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, matrixInterpretation) - 24usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::biasInterpretation"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, biasInterpretation) - 28usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::resultType"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, resultType) - 32usize];
    ["Offset of field: VkCooperativeVectorPropertiesNV::transpose"]
        [::std::mem::offset_of!(VkCooperativeVectorPropertiesNV, transpose) - 36usize];
};
impl Default for VkCooperativeVectorPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkConvertCooperativeVectorMatrixInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub srcSize: usize,
    pub srcData: VkDeviceOrHostAddressConstKHR,
    pub pDstSize: *mut usize,
    pub dstData: VkDeviceOrHostAddressKHR,
    pub srcComponentType: VkComponentTypeKHR,
    pub dstComponentType: VkComponentTypeKHR,
    pub numRows: u32,
    pub numColumns: u32,
    pub srcLayout: VkCooperativeVectorMatrixLayoutNV,
    pub srcStride: usize,
    pub dstLayout: VkCooperativeVectorMatrixLayoutNV,
    pub dstStride: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkConvertCooperativeVectorMatrixInfoNV"]
        [::std::mem::size_of::<VkConvertCooperativeVectorMatrixInfoNV>() - 96usize];
    ["Alignment of VkConvertCooperativeVectorMatrixInfoNV"]
        [::std::mem::align_of::<VkConvertCooperativeVectorMatrixInfoNV>() - 8usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::sType"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, sType) - 0usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::pNext"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, pNext) - 8usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcSize"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcSize) - 16usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcData"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcData) - 24usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::pDstSize"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, pDstSize) - 32usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstData"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, dstData) - 40usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcComponentType"][::std::mem::offset_of!(
        VkConvertCooperativeVectorMatrixInfoNV,
        srcComponentType
    ) - 48usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstComponentType"][::std::mem::offset_of!(
        VkConvertCooperativeVectorMatrixInfoNV,
        dstComponentType
    ) - 52usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::numRows"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, numRows) - 56usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::numColumns"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, numColumns) - 60usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcLayout"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcLayout) - 64usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::srcStride"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, srcStride) - 72usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstLayout"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, dstLayout) - 80usize];
    ["Offset of field: VkConvertCooperativeVectorMatrixInfoNV::dstStride"]
        [::std::mem::offset_of!(VkConvertCooperativeVectorMatrixInfoNV, dstStride) - 88usize];
};
impl Default for VkConvertCooperativeVectorMatrixInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceCooperativeVectorPropertiesNV = ::std::option::Option<
    unsafe extern "system" fn(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeVectorPropertiesNV,
    ) -> VkResult,
>;
pub type PFN_vkConvertCooperativeVectorMatrixNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkConvertCooperativeVectorMatrixInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkCmdConvertCooperativeVectorMatrixNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkConvertCooperativeVectorMatrixInfoNV,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceCooperativeVectorPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeVectorPropertiesNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkConvertCooperativeVectorMatrixNV(
        device: VkDevice,
        pInfo: *const VkConvertCooperativeVectorMatrixInfoNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdConvertCooperativeVectorMatrixNV(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkConvertCooperativeVectorMatrixInfoNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedSparseAddressSpace: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV::extendedSparseAddressSpace"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV , extendedSparseAddressSpace) - 16usize] ;
};
impl Default for VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub extendedSparseAddressSpaceSize: VkDeviceSize,
    pub extendedSparseImageUsageFlags: VkImageUsageFlags,
    pub extendedSparseBufferUsageFlags: VkBufferUsageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV>() - 32usize];
    ["Alignment of VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::extendedSparseAddressSpaceSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV , extendedSparseAddressSpaceSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::extendedSparseImageUsageFlags"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV , extendedSparseImageUsageFlags) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV::extendedSparseBufferUsageFlags"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV , extendedSparseBufferUsageFlags) - 28usize] ;
};
impl Default for VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub legacyVertexAttributes: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT::legacyVertexAttributes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT , legacyVertexAttributes) - 16usize] ;
};
impl Default for VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub nativeUnalignedPerformance: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT::nativeUnalignedPerformance"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT , nativeUnalignedPerformance) - 16usize] ;
};
impl Default for VkPhysicalDeviceLegacyVertexAttributesPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_BOOL32_EXT: VkLayerSettingTypeEXT = 0;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_INT32_EXT: VkLayerSettingTypeEXT = 1;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_INT64_EXT: VkLayerSettingTypeEXT = 2;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_UINT32_EXT: VkLayerSettingTypeEXT = 3;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_UINT64_EXT: VkLayerSettingTypeEXT = 4;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_FLOAT32_EXT: VkLayerSettingTypeEXT = 5;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_FLOAT64_EXT: VkLayerSettingTypeEXT = 6;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_STRING_EXT: VkLayerSettingTypeEXT = 7;
pub const VkLayerSettingTypeEXT_VK_LAYER_SETTING_TYPE_MAX_ENUM_EXT: VkLayerSettingTypeEXT =
    2147483647;
pub type VkLayerSettingTypeEXT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerSettingEXT {
    pub pLayerName: *const ::std::os::raw::c_char,
    pub pSettingName: *const ::std::os::raw::c_char,
    pub type_: VkLayerSettingTypeEXT,
    pub valueCount: u32,
    pub pValues: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLayerSettingEXT"][::std::mem::size_of::<VkLayerSettingEXT>() - 32usize];
    ["Alignment of VkLayerSettingEXT"][::std::mem::align_of::<VkLayerSettingEXT>() - 8usize];
    ["Offset of field: VkLayerSettingEXT::pLayerName"]
        [::std::mem::offset_of!(VkLayerSettingEXT, pLayerName) - 0usize];
    ["Offset of field: VkLayerSettingEXT::pSettingName"]
        [::std::mem::offset_of!(VkLayerSettingEXT, pSettingName) - 8usize];
    ["Offset of field: VkLayerSettingEXT::type_"]
        [::std::mem::offset_of!(VkLayerSettingEXT, type_) - 16usize];
    ["Offset of field: VkLayerSettingEXT::valueCount"]
        [::std::mem::offset_of!(VkLayerSettingEXT, valueCount) - 20usize];
    ["Offset of field: VkLayerSettingEXT::pValues"]
        [::std::mem::offset_of!(VkLayerSettingEXT, pValues) - 24usize];
};
impl Default for VkLayerSettingEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLayerSettingsCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub settingCount: u32,
    pub pSettings: *const VkLayerSettingEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLayerSettingsCreateInfoEXT"]
        [::std::mem::size_of::<VkLayerSettingsCreateInfoEXT>() - 32usize];
    ["Alignment of VkLayerSettingsCreateInfoEXT"]
        [::std::mem::align_of::<VkLayerSettingsCreateInfoEXT>() - 8usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkLayerSettingsCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkLayerSettingsCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::settingCount"]
        [::std::mem::offset_of!(VkLayerSettingsCreateInfoEXT, settingCount) - 16usize];
    ["Offset of field: VkLayerSettingsCreateInfoEXT::pSettings"]
        [::std::mem::offset_of!(VkLayerSettingsCreateInfoEXT, pSettings) - 24usize];
};
impl Default for VkLayerSettingsCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreBuiltins: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM::shaderCoreBuiltins"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM,
        shaderCoreBuiltins
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCoreMask: u64,
    pub shaderCoreCount: u32,
    pub shaderWarpsPerCore: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>() - 32usize];
    ["Alignment of VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::shaderCoreMask"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM,
        shaderCoreMask
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::shaderCoreCount"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM,
        shaderCoreCount
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM::shaderWarpsPerCore"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM,
        shaderWarpsPerCore
    )
        - 28usize];
};
impl Default for VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineLibraryGroupHandles: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT::pipelineLibraryGroupHandles"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT , pipelineLibraryGroupHandles) - 16usize] ;
};
impl Default for VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub dynamicRenderingUnusedAttachments: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT"][::std::mem::size_of::<
        VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT>()
            - 8usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT::dynamicRenderingUnusedAttachments"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT , dynamicRenderingUnusedAttachments) - 16usize] ;
};
impl Default for VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_SIMULATION_START_NV: VkLatencyMarkerNV = 0;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_SIMULATION_END_NV: VkLatencyMarkerNV = 1;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_RENDERSUBMIT_START_NV: VkLatencyMarkerNV = 2;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_RENDERSUBMIT_END_NV: VkLatencyMarkerNV = 3;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_PRESENT_START_NV: VkLatencyMarkerNV = 4;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_PRESENT_END_NV: VkLatencyMarkerNV = 5;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_INPUT_SAMPLE_NV: VkLatencyMarkerNV = 6;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_TRIGGER_FLASH_NV: VkLatencyMarkerNV = 7;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_START_NV: VkLatencyMarkerNV =
    8;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_RENDERSUBMIT_END_NV: VkLatencyMarkerNV =
    9;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_START_NV: VkLatencyMarkerNV = 10;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_OUT_OF_BAND_PRESENT_END_NV: VkLatencyMarkerNV = 11;
pub const VkLatencyMarkerNV_VK_LATENCY_MARKER_MAX_ENUM_NV: VkLatencyMarkerNV = 2147483647;
pub type VkLatencyMarkerNV = ::std::os::raw::c_uint;
pub const VkOutOfBandQueueTypeNV_VK_OUT_OF_BAND_QUEUE_TYPE_RENDER_NV: VkOutOfBandQueueTypeNV = 0;
pub const VkOutOfBandQueueTypeNV_VK_OUT_OF_BAND_QUEUE_TYPE_PRESENT_NV: VkOutOfBandQueueTypeNV = 1;
pub const VkOutOfBandQueueTypeNV_VK_OUT_OF_BAND_QUEUE_TYPE_MAX_ENUM_NV: VkOutOfBandQueueTypeNV =
    2147483647;
pub type VkOutOfBandQueueTypeNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLatencySleepModeInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub lowLatencyMode: VkBool32,
    pub lowLatencyBoost: VkBool32,
    pub minimumIntervalUs: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySleepModeInfoNV"]
        [::std::mem::size_of::<VkLatencySleepModeInfoNV>() - 32usize];
    ["Alignment of VkLatencySleepModeInfoNV"]
        [::std::mem::align_of::<VkLatencySleepModeInfoNV>() - 8usize];
    ["Offset of field: VkLatencySleepModeInfoNV::sType"]
        [::std::mem::offset_of!(VkLatencySleepModeInfoNV, sType) - 0usize];
    ["Offset of field: VkLatencySleepModeInfoNV::pNext"]
        [::std::mem::offset_of!(VkLatencySleepModeInfoNV, pNext) - 8usize];
    ["Offset of field: VkLatencySleepModeInfoNV::lowLatencyMode"]
        [::std::mem::offset_of!(VkLatencySleepModeInfoNV, lowLatencyMode) - 16usize];
    ["Offset of field: VkLatencySleepModeInfoNV::lowLatencyBoost"]
        [::std::mem::offset_of!(VkLatencySleepModeInfoNV, lowLatencyBoost) - 20usize];
    ["Offset of field: VkLatencySleepModeInfoNV::minimumIntervalUs"]
        [::std::mem::offset_of!(VkLatencySleepModeInfoNV, minimumIntervalUs) - 24usize];
};
impl Default for VkLatencySleepModeInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLatencySleepInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub signalSemaphore: VkSemaphore,
    pub value: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySleepInfoNV"][::std::mem::size_of::<VkLatencySleepInfoNV>() - 32usize];
    ["Alignment of VkLatencySleepInfoNV"][::std::mem::align_of::<VkLatencySleepInfoNV>() - 8usize];
    ["Offset of field: VkLatencySleepInfoNV::sType"]
        [::std::mem::offset_of!(VkLatencySleepInfoNV, sType) - 0usize];
    ["Offset of field: VkLatencySleepInfoNV::pNext"]
        [::std::mem::offset_of!(VkLatencySleepInfoNV, pNext) - 8usize];
    ["Offset of field: VkLatencySleepInfoNV::signalSemaphore"]
        [::std::mem::offset_of!(VkLatencySleepInfoNV, signalSemaphore) - 16usize];
    ["Offset of field: VkLatencySleepInfoNV::value"]
        [::std::mem::offset_of!(VkLatencySleepInfoNV, value) - 24usize];
};
impl Default for VkLatencySleepInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSetLatencyMarkerInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub presentID: u64,
    pub marker: VkLatencyMarkerNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetLatencyMarkerInfoNV"]
        [::std::mem::size_of::<VkSetLatencyMarkerInfoNV>() - 32usize];
    ["Alignment of VkSetLatencyMarkerInfoNV"]
        [::std::mem::align_of::<VkSetLatencyMarkerInfoNV>() - 8usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::sType"]
        [::std::mem::offset_of!(VkSetLatencyMarkerInfoNV, sType) - 0usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::pNext"]
        [::std::mem::offset_of!(VkSetLatencyMarkerInfoNV, pNext) - 8usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::presentID"]
        [::std::mem::offset_of!(VkSetLatencyMarkerInfoNV, presentID) - 16usize];
    ["Offset of field: VkSetLatencyMarkerInfoNV::marker"]
        [::std::mem::offset_of!(VkSetLatencyMarkerInfoNV, marker) - 24usize];
};
impl Default for VkSetLatencyMarkerInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLatencyTimingsFrameReportNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub presentID: u64,
    pub inputSampleTimeUs: u64,
    pub simStartTimeUs: u64,
    pub simEndTimeUs: u64,
    pub renderSubmitStartTimeUs: u64,
    pub renderSubmitEndTimeUs: u64,
    pub presentStartTimeUs: u64,
    pub presentEndTimeUs: u64,
    pub driverStartTimeUs: u64,
    pub driverEndTimeUs: u64,
    pub osRenderQueueStartTimeUs: u64,
    pub osRenderQueueEndTimeUs: u64,
    pub gpuRenderStartTimeUs: u64,
    pub gpuRenderEndTimeUs: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencyTimingsFrameReportNV"]
        [::std::mem::size_of::<VkLatencyTimingsFrameReportNV>() - 128usize];
    ["Alignment of VkLatencyTimingsFrameReportNV"]
        [::std::mem::align_of::<VkLatencyTimingsFrameReportNV>() - 8usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::sType"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, sType) - 0usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::pNext"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, pNext) - 8usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::presentID"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, presentID) - 16usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::inputSampleTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, inputSampleTimeUs) - 24usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::simStartTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, simStartTimeUs) - 32usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::simEndTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, simEndTimeUs) - 40usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::renderSubmitStartTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, renderSubmitStartTimeUs) - 48usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::renderSubmitEndTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, renderSubmitEndTimeUs) - 56usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::presentStartTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, presentStartTimeUs) - 64usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::presentEndTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, presentEndTimeUs) - 72usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::driverStartTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, driverStartTimeUs) - 80usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::driverEndTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, driverEndTimeUs) - 88usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::osRenderQueueStartTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, osRenderQueueStartTimeUs) - 96usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::osRenderQueueEndTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, osRenderQueueEndTimeUs) - 104usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::gpuRenderStartTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, gpuRenderStartTimeUs) - 112usize];
    ["Offset of field: VkLatencyTimingsFrameReportNV::gpuRenderEndTimeUs"]
        [::std::mem::offset_of!(VkLatencyTimingsFrameReportNV, gpuRenderEndTimeUs) - 120usize];
};
impl Default for VkLatencyTimingsFrameReportNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGetLatencyMarkerInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub timingCount: u32,
    pub pTimings: *mut VkLatencyTimingsFrameReportNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGetLatencyMarkerInfoNV"]
        [::std::mem::size_of::<VkGetLatencyMarkerInfoNV>() - 32usize];
    ["Alignment of VkGetLatencyMarkerInfoNV"]
        [::std::mem::align_of::<VkGetLatencyMarkerInfoNV>() - 8usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::sType"]
        [::std::mem::offset_of!(VkGetLatencyMarkerInfoNV, sType) - 0usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::pNext"]
        [::std::mem::offset_of!(VkGetLatencyMarkerInfoNV, pNext) - 8usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::timingCount"]
        [::std::mem::offset_of!(VkGetLatencyMarkerInfoNV, timingCount) - 16usize];
    ["Offset of field: VkGetLatencyMarkerInfoNV::pTimings"]
        [::std::mem::offset_of!(VkGetLatencyMarkerInfoNV, pTimings) - 24usize];
};
impl Default for VkGetLatencyMarkerInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLatencySubmissionPresentIdNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub presentID: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySubmissionPresentIdNV"]
        [::std::mem::size_of::<VkLatencySubmissionPresentIdNV>() - 24usize];
    ["Alignment of VkLatencySubmissionPresentIdNV"]
        [::std::mem::align_of::<VkLatencySubmissionPresentIdNV>() - 8usize];
    ["Offset of field: VkLatencySubmissionPresentIdNV::sType"]
        [::std::mem::offset_of!(VkLatencySubmissionPresentIdNV, sType) - 0usize];
    ["Offset of field: VkLatencySubmissionPresentIdNV::pNext"]
        [::std::mem::offset_of!(VkLatencySubmissionPresentIdNV, pNext) - 8usize];
    ["Offset of field: VkLatencySubmissionPresentIdNV::presentID"]
        [::std::mem::offset_of!(VkLatencySubmissionPresentIdNV, presentID) - 16usize];
};
impl Default for VkLatencySubmissionPresentIdNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSwapchainLatencyCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub latencyModeEnable: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSwapchainLatencyCreateInfoNV"]
        [::std::mem::size_of::<VkSwapchainLatencyCreateInfoNV>() - 24usize];
    ["Alignment of VkSwapchainLatencyCreateInfoNV"]
        [::std::mem::align_of::<VkSwapchainLatencyCreateInfoNV>() - 8usize];
    ["Offset of field: VkSwapchainLatencyCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkSwapchainLatencyCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkSwapchainLatencyCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkSwapchainLatencyCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkSwapchainLatencyCreateInfoNV::latencyModeEnable"]
        [::std::mem::offset_of!(VkSwapchainLatencyCreateInfoNV, latencyModeEnable) - 16usize];
};
impl Default for VkSwapchainLatencyCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkOutOfBandQueueTypeInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub queueType: VkOutOfBandQueueTypeNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkOutOfBandQueueTypeInfoNV"]
        [::std::mem::size_of::<VkOutOfBandQueueTypeInfoNV>() - 24usize];
    ["Alignment of VkOutOfBandQueueTypeInfoNV"]
        [::std::mem::align_of::<VkOutOfBandQueueTypeInfoNV>() - 8usize];
    ["Offset of field: VkOutOfBandQueueTypeInfoNV::sType"]
        [::std::mem::offset_of!(VkOutOfBandQueueTypeInfoNV, sType) - 0usize];
    ["Offset of field: VkOutOfBandQueueTypeInfoNV::pNext"]
        [::std::mem::offset_of!(VkOutOfBandQueueTypeInfoNV, pNext) - 8usize];
    ["Offset of field: VkOutOfBandQueueTypeInfoNV::queueType"]
        [::std::mem::offset_of!(VkOutOfBandQueueTypeInfoNV, queueType) - 16usize];
};
impl Default for VkOutOfBandQueueTypeInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkLatencySurfaceCapabilitiesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub presentModeCount: u32,
    pub pPresentModes: *mut VkPresentModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkLatencySurfaceCapabilitiesNV"]
        [::std::mem::size_of::<VkLatencySurfaceCapabilitiesNV>() - 32usize];
    ["Alignment of VkLatencySurfaceCapabilitiesNV"]
        [::std::mem::align_of::<VkLatencySurfaceCapabilitiesNV>() - 8usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::sType"]
        [::std::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, sType) - 0usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::pNext"]
        [::std::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, pNext) - 8usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::presentModeCount"]
        [::std::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, presentModeCount) - 16usize];
    ["Offset of field: VkLatencySurfaceCapabilitiesNV::pPresentModes"]
        [::std::mem::offset_of!(VkLatencySurfaceCapabilitiesNV, pPresentModes) - 24usize];
};
impl Default for VkLatencySurfaceCapabilitiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkSetLatencySleepModeNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSleepModeInfo: *const VkLatencySleepModeInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkLatencySleepNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSleepInfo: *const VkLatencySleepInfoNV,
    ) -> VkResult,
>;
pub type PFN_vkSetLatencyMarkerNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pLatencyMarkerInfo: *const VkSetLatencyMarkerInfoNV,
    ),
>;
pub type PFN_vkGetLatencyTimingsNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pLatencyMarkerInfo: *mut VkGetLatencyMarkerInfoNV,
    ),
>;
pub type PFN_vkQueueNotifyOutOfBandNV = ::std::option::Option<
    unsafe extern "system" fn(queue: VkQueue, pQueueTypeInfo: *const VkOutOfBandQueueTypeInfoNV),
>;
unsafe extern "system" {
    pub fn vkSetLatencySleepModeNV(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSleepModeInfo: *const VkLatencySleepModeInfoNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkLatencySleepNV(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pSleepInfo: *const VkLatencySleepInfoNV,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkSetLatencyMarkerNV(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pLatencyMarkerInfo: *const VkSetLatencyMarkerInfoNV,
    );
}
unsafe extern "system" {
    pub fn vkGetLatencyTimingsNV(
        device: VkDevice,
        swapchain: VkSwapchainKHR,
        pLatencyMarkerInfo: *mut VkGetLatencyMarkerInfoNV,
    );
}
unsafe extern "system" {
    pub fn vkQueueNotifyOutOfBandNV(
        queue: VkQueue,
        pQueueTypeInfo: *const VkOutOfBandQueueTypeInfoNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub multiviewPerViewRenderAreas: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM"][::std::mem::size_of::<
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM"][::std::mem::align_of::<
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM::multiviewPerViewRenderAreas"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM , multiviewPerViewRenderAreas) - 16usize] ;
};
impl Default for VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub perViewRenderAreaCount: u32,
    pub pPerViewRenderAreas: *const VkRect2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM"]
        [::std::mem::size_of::<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>() - 32usize];
    ["Alignment of VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM"]
        [::std::mem::align_of::<VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM>() - 8usize];
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::sType"][::std::mem::offset_of!(
        VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::pNext"][::std::mem::offset_of!(
        VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM,
        pNext
    ) - 8usize];
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::perViewRenderAreaCount"] [:: std :: mem :: offset_of ! (VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM , perViewRenderAreaCount) - 16usize] ;
    ["Offset of field: VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM::pPerViewRenderAreas"] [:: std :: mem :: offset_of ! (VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM , pPerViewRenderAreas) - 24usize] ;
};
impl Default for VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePerStageDescriptorSetFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub perStageDescriptorSet: VkBool32,
    pub dynamicPipelineLayout: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePerStageDescriptorSetFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDevicePerStageDescriptorSetFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDevicePerStageDescriptorSetFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDevicePerStageDescriptorSetFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePerStageDescriptorSetFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePerStageDescriptorSetFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::perStageDescriptorSet"][::std::mem::offset_of!(
        VkPhysicalDevicePerStageDescriptorSetFeaturesNV,
        perStageDescriptorSet
    )
        - 16usize];
    ["Offset of field: VkPhysicalDevicePerStageDescriptorSetFeaturesNV::dynamicPipelineLayout"][::std::mem::offset_of!(
        VkPhysicalDevicePerStageDescriptorSetFeaturesNV,
        dynamicPipelineLayout
    )
        - 20usize];
};
impl Default for VkPhysicalDevicePerStageDescriptorSetFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkBlockMatchWindowCompareModeQCOM_VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MIN_QCOM:
    VkBlockMatchWindowCompareModeQCOM = 0;
pub const VkBlockMatchWindowCompareModeQCOM_VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_QCOM:
    VkBlockMatchWindowCompareModeQCOM = 1;
pub const VkBlockMatchWindowCompareModeQCOM_VK_BLOCK_MATCH_WINDOW_COMPARE_MODE_MAX_ENUM_QCOM:
    VkBlockMatchWindowCompareModeQCOM = 2147483647;
pub type VkBlockMatchWindowCompareModeQCOM = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessing2FeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub textureBlockMatch2: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessing2FeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceImageProcessing2FeaturesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageProcessing2FeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceImageProcessing2FeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2FeaturesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessing2FeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2FeaturesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessing2FeaturesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2FeaturesQCOM::textureBlockMatch2"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessing2FeaturesQCOM,
        textureBlockMatch2
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceImageProcessing2FeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageProcessing2PropertiesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxBlockMatchWindow: VkExtent2D,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageProcessing2PropertiesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceImageProcessing2PropertiesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageProcessing2PropertiesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceImageProcessing2PropertiesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2PropertiesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessing2PropertiesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2PropertiesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageProcessing2PropertiesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageProcessing2PropertiesQCOM::maxBlockMatchWindow"][::std::mem::offset_of!(
        VkPhysicalDeviceImageProcessing2PropertiesQCOM,
        maxBlockMatchWindow
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceImageProcessing2PropertiesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerBlockMatchWindowCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub windowExtent: VkExtent2D,
    pub windowCompareMode: VkBlockMatchWindowCompareModeQCOM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerBlockMatchWindowCreateInfoQCOM"]
        [::std::mem::size_of::<VkSamplerBlockMatchWindowCreateInfoQCOM>() - 32usize];
    ["Alignment of VkSamplerBlockMatchWindowCreateInfoQCOM"]
        [::std::mem::align_of::<VkSamplerBlockMatchWindowCreateInfoQCOM>() - 8usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::sType"]
        [::std::mem::offset_of!(VkSamplerBlockMatchWindowCreateInfoQCOM, sType) - 0usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::pNext"]
        [::std::mem::offset_of!(VkSamplerBlockMatchWindowCreateInfoQCOM, pNext) - 8usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::windowExtent"]
        [::std::mem::offset_of!(VkSamplerBlockMatchWindowCreateInfoQCOM, windowExtent) - 16usize];
    ["Offset of field: VkSamplerBlockMatchWindowCreateInfoQCOM::windowCompareMode"][::std::mem::offset_of!(
        VkSamplerBlockMatchWindowCreateInfoQCOM,
        windowCompareMode
    ) - 24usize];
};
impl Default for VkSamplerBlockMatchWindowCreateInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_CATMULL_ROM_QCOM:
    VkCubicFilterWeightsQCOM = 0;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_ZERO_TANGENT_CARDINAL_QCOM:
    VkCubicFilterWeightsQCOM = 1;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_B_SPLINE_QCOM: VkCubicFilterWeightsQCOM =
    2;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_MITCHELL_NETRAVALI_QCOM:
    VkCubicFilterWeightsQCOM = 3;
pub const VkCubicFilterWeightsQCOM_VK_CUBIC_FILTER_WEIGHTS_MAX_ENUM_QCOM: VkCubicFilterWeightsQCOM =
    2147483647;
pub type VkCubicFilterWeightsQCOM = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCubicWeightsFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub selectableCubicWeights: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCubicWeightsFeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceCubicWeightsFeaturesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceCubicWeightsFeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceCubicWeightsFeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCubicWeightsFeaturesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCubicWeightsFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCubicWeightsFeaturesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCubicWeightsFeaturesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCubicWeightsFeaturesQCOM::selectableCubicWeights"][::std::mem::offset_of!(
        VkPhysicalDeviceCubicWeightsFeaturesQCOM,
        selectableCubicWeights
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceCubicWeightsFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerCubicWeightsCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub cubicWeights: VkCubicFilterWeightsQCOM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerCubicWeightsCreateInfoQCOM"]
        [::std::mem::size_of::<VkSamplerCubicWeightsCreateInfoQCOM>() - 24usize];
    ["Alignment of VkSamplerCubicWeightsCreateInfoQCOM"]
        [::std::mem::align_of::<VkSamplerCubicWeightsCreateInfoQCOM>() - 8usize];
    ["Offset of field: VkSamplerCubicWeightsCreateInfoQCOM::sType"]
        [::std::mem::offset_of!(VkSamplerCubicWeightsCreateInfoQCOM, sType) - 0usize];
    ["Offset of field: VkSamplerCubicWeightsCreateInfoQCOM::pNext"]
        [::std::mem::offset_of!(VkSamplerCubicWeightsCreateInfoQCOM, pNext) - 8usize];
    ["Offset of field: VkSamplerCubicWeightsCreateInfoQCOM::cubicWeights"]
        [::std::mem::offset_of!(VkSamplerCubicWeightsCreateInfoQCOM, cubicWeights) - 16usize];
};
impl Default for VkSamplerCubicWeightsCreateInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBlitImageCubicWeightsInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub cubicWeights: VkCubicFilterWeightsQCOM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBlitImageCubicWeightsInfoQCOM"]
        [::std::mem::size_of::<VkBlitImageCubicWeightsInfoQCOM>() - 24usize];
    ["Alignment of VkBlitImageCubicWeightsInfoQCOM"]
        [::std::mem::align_of::<VkBlitImageCubicWeightsInfoQCOM>() - 8usize];
    ["Offset of field: VkBlitImageCubicWeightsInfoQCOM::sType"]
        [::std::mem::offset_of!(VkBlitImageCubicWeightsInfoQCOM, sType) - 0usize];
    ["Offset of field: VkBlitImageCubicWeightsInfoQCOM::pNext"]
        [::std::mem::offset_of!(VkBlitImageCubicWeightsInfoQCOM, pNext) - 8usize];
    ["Offset of field: VkBlitImageCubicWeightsInfoQCOM::cubicWeights"]
        [::std::mem::offset_of!(VkBlitImageCubicWeightsInfoQCOM, cubicWeights) - 16usize];
};
impl Default for VkBlitImageCubicWeightsInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub ycbcrDegamma: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceYcbcrDegammaFeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceYcbcrDegammaFeaturesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceYcbcrDegammaFeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceYcbcrDegammaFeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceYcbcrDegammaFeaturesQCOM::ycbcrDegamma"]
        [::std::mem::offset_of!(VkPhysicalDeviceYcbcrDegammaFeaturesQCOM, ycbcrDegamma) - 16usize];
};
impl Default for VkPhysicalDeviceYcbcrDegammaFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub enableYDegamma: VkBool32,
    pub enableCbCrDegamma: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM"]
        [::std::mem::size_of::<VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM>() - 24usize];
    ["Alignment of VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM"]
        [::std::mem::align_of::<VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM>() - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::sType"][::std::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        sType
    ) - 0usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::pNext"][::std::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        pNext
    ) - 8usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::enableYDegamma"][::std::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        enableYDegamma
    )
        - 16usize];
    ["Offset of field: VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM::enableCbCrDegamma"][::std::mem::offset_of!(
        VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM,
        enableCbCrDegamma
    )
        - 20usize];
};
impl Default for VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCubicClampFeaturesQCOM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cubicRangeClamp: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCubicClampFeaturesQCOM"]
        [::std::mem::size_of::<VkPhysicalDeviceCubicClampFeaturesQCOM>() - 24usize];
    ["Alignment of VkPhysicalDeviceCubicClampFeaturesQCOM"]
        [::std::mem::align_of::<VkPhysicalDeviceCubicClampFeaturesQCOM>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCubicClampFeaturesQCOM::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCubicClampFeaturesQCOM, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCubicClampFeaturesQCOM::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCubicClampFeaturesQCOM, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCubicClampFeaturesQCOM::cubicRangeClamp"]
        [::std::mem::offset_of!(VkPhysicalDeviceCubicClampFeaturesQCOM, cubicRangeClamp) - 16usize];
};
impl Default for VkPhysicalDeviceCubicClampFeaturesQCOM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub attachmentFeedbackLoopDynamicState: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT"][::std::mem::size_of::<
        VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT,
    >() - 24usize];
    ["Alignment of VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT>()
            - 8usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT::attachmentFeedbackLoopDynamicState"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT , attachmentFeedbackLoopDynamicState) - 16usize] ;
};
impl Default for VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, aspectMask: VkImageAspectFlags),
>;
unsafe extern "system" {
    pub fn vkCmdSetAttachmentFeedbackLoopEnableEXT(
        commandBuffer: VkCommandBuffer,
        aspectMask: VkImageAspectFlags,
    );
}
pub const VkLayeredDriverUnderlyingApiMSFT_VK_LAYERED_DRIVER_UNDERLYING_API_NONE_MSFT:
    VkLayeredDriverUnderlyingApiMSFT = 0;
pub const VkLayeredDriverUnderlyingApiMSFT_VK_LAYERED_DRIVER_UNDERLYING_API_D3D12_MSFT:
    VkLayeredDriverUnderlyingApiMSFT = 1;
pub const VkLayeredDriverUnderlyingApiMSFT_VK_LAYERED_DRIVER_UNDERLYING_API_MAX_ENUM_MSFT:
    VkLayeredDriverUnderlyingApiMSFT = 2147483647;
pub type VkLayeredDriverUnderlyingApiMSFT = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceLayeredDriverPropertiesMSFT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub underlyingAPI: VkLayeredDriverUnderlyingApiMSFT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceLayeredDriverPropertiesMSFT"]
        [::std::mem::size_of::<VkPhysicalDeviceLayeredDriverPropertiesMSFT>() - 24usize];
    ["Alignment of VkPhysicalDeviceLayeredDriverPropertiesMSFT"]
        [::std::mem::align_of::<VkPhysicalDeviceLayeredDriverPropertiesMSFT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredDriverPropertiesMSFT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredDriverPropertiesMSFT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceLayeredDriverPropertiesMSFT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceLayeredDriverPropertiesMSFT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceLayeredDriverPropertiesMSFT::underlyingAPI"][::std::mem::offset_of!(
        VkPhysicalDeviceLayeredDriverPropertiesMSFT,
        underlyingAPI
    ) - 16usize];
};
impl Default for VkPhysicalDeviceLayeredDriverPropertiesMSFT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub descriptorPoolOverallocation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV::descriptorPoolOverallocation"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV , descriptorPoolOverallocation) - 16usize] ;
};
impl Default for VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_NONE_NV:
    VkDisplaySurfaceStereoTypeNV = 0;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_ONBOARD_DIN_NV:
    VkDisplaySurfaceStereoTypeNV = 1;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_HDMI_3D_NV:
    VkDisplaySurfaceStereoTypeNV = 2;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_INBAND_DISPLAYPORT_NV:
    VkDisplaySurfaceStereoTypeNV = 3;
pub const VkDisplaySurfaceStereoTypeNV_VK_DISPLAY_SURFACE_STEREO_TYPE_MAX_ENUM_NV:
    VkDisplaySurfaceStereoTypeNV = 2147483647;
pub type VkDisplaySurfaceStereoTypeNV = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplaySurfaceStereoCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub stereoType: VkDisplaySurfaceStereoTypeNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplaySurfaceStereoCreateInfoNV"]
        [::std::mem::size_of::<VkDisplaySurfaceStereoCreateInfoNV>() - 24usize];
    ["Alignment of VkDisplaySurfaceStereoCreateInfoNV"]
        [::std::mem::align_of::<VkDisplaySurfaceStereoCreateInfoNV>() - 8usize];
    ["Offset of field: VkDisplaySurfaceStereoCreateInfoNV::sType"]
        [::std::mem::offset_of!(VkDisplaySurfaceStereoCreateInfoNV, sType) - 0usize];
    ["Offset of field: VkDisplaySurfaceStereoCreateInfoNV::pNext"]
        [::std::mem::offset_of!(VkDisplaySurfaceStereoCreateInfoNV, pNext) - 8usize];
    ["Offset of field: VkDisplaySurfaceStereoCreateInfoNV::stereoType"]
        [::std::mem::offset_of!(VkDisplaySurfaceStereoCreateInfoNV, stereoType) - 16usize];
};
impl Default for VkDisplaySurfaceStereoCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkDisplayModeStereoPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub hdmi3DSupported: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDisplayModeStereoPropertiesNV"]
        [::std::mem::size_of::<VkDisplayModeStereoPropertiesNV>() - 24usize];
    ["Alignment of VkDisplayModeStereoPropertiesNV"]
        [::std::mem::align_of::<VkDisplayModeStereoPropertiesNV>() - 8usize];
    ["Offset of field: VkDisplayModeStereoPropertiesNV::sType"]
        [::std::mem::offset_of!(VkDisplayModeStereoPropertiesNV, sType) - 0usize];
    ["Offset of field: VkDisplayModeStereoPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkDisplayModeStereoPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkDisplayModeStereoPropertiesNV::hdmi3DSupported"]
        [::std::mem::offset_of!(VkDisplayModeStereoPropertiesNV, hdmi3DSupported) - 16usize];
};
impl Default for VkDisplayModeStereoPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRawAccessChainsFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderRawAccessChains: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRawAccessChainsFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceRawAccessChainsFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceRawAccessChainsFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceRawAccessChainsFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRawAccessChainsFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRawAccessChainsFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRawAccessChainsFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRawAccessChainsFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRawAccessChainsFeaturesNV::shaderRawAccessChains"][::std::mem::offset_of!(
        VkPhysicalDeviceRawAccessChainsFeaturesNV,
        shaderRawAccessChains
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceRawAccessChainsFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCommandBufferInheritanceFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub commandBufferInheritance: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCommandBufferInheritanceFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCommandBufferInheritanceFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceCommandBufferInheritanceFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCommandBufferInheritanceFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCommandBufferInheritanceFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceCommandBufferInheritanceFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceCommandBufferInheritanceFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceCommandBufferInheritanceFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceCommandBufferInheritanceFeaturesNV::commandBufferInheritance"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCommandBufferInheritanceFeaturesNV , commandBufferInheritance) - 16usize] ;
};
impl Default for VkPhysicalDeviceCommandBufferInheritanceFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderFloat16VectorAtomics: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV::shaderFloat16VectorAtomics"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV , shaderFloat16VectorAtomics) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderReplicatedComposites: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT::shaderReplicatedComposites"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT , shaderReplicatedComposites) - 16usize] ;
};
impl Default for VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingValidationFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingValidation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingValidationFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingValidationFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceRayTracingValidationFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingValidationFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingValidationFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingValidationFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingValidationFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingValidationFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingValidationFeaturesNV::rayTracingValidation"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingValidationFeaturesNV,
        rayTracingValidation
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceRayTracingValidationFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_CLUSTERS_BOTTOM_LEVEL_NV : VkClusterAccelerationStructureTypeNV = 0 ;
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_NV : VkClusterAccelerationStructureTypeNV = 1 ;
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_TRIANGLE_CLUSTER_TEMPLATE_NV : VkClusterAccelerationStructureTypeNV = 2 ;
pub const VkClusterAccelerationStructureTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_NV : VkClusterAccelerationStructureTypeNV = 2147483647 ;
pub type VkClusterAccelerationStructureTypeNV = ::std::os::raw::c_uint;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MOVE_OBJECTS_NV : VkClusterAccelerationStructureOpTypeNV = 0 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_CLUSTERS_BOTTOM_LEVEL_NV : VkClusterAccelerationStructureOpTypeNV = 1 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_NV : VkClusterAccelerationStructureOpTypeNV = 2 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_BUILD_TRIANGLE_CLUSTER_TEMPLATE_NV : VkClusterAccelerationStructureOpTypeNV = 3 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_INSTANTIATE_TRIANGLE_CLUSTER_NV : VkClusterAccelerationStructureOpTypeNV = 4 ;
pub const VkClusterAccelerationStructureOpTypeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV : VkClusterAccelerationStructureOpTypeNV = 2147483647 ;
pub type VkClusterAccelerationStructureOpTypeNV = ::std::os::raw::c_uint;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_IMPLICIT_DESTINATIONS_NV : VkClusterAccelerationStructureOpModeNV = 0 ;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_EXPLICIT_DESTINATIONS_NV : VkClusterAccelerationStructureOpModeNV = 1 ;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_COMPUTE_SIZES_NV : VkClusterAccelerationStructureOpModeNV = 2 ;
pub const VkClusterAccelerationStructureOpModeNV_VK_CLUSTER_ACCELERATION_STRUCTURE_OP_MODE_MAX_ENUM_NV : VkClusterAccelerationStructureOpModeNV = 2147483647 ;
pub type VkClusterAccelerationStructureOpModeNV = ::std::os::raw::c_uint;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_IMPLICIT_DATA_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SCRATCH_DATA_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 2 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_ADDRESS_ARRAY_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 4 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_DST_SIZES_ARRAY_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 8 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_ARRAY_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 16 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_INDIRECTED_SRC_INFOS_COUNT_BIT_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 32 ;
pub const VkClusterAccelerationStructureAddressResolutionFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_ADDRESS_RESOLUTION_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureAddressResolutionFlagBitsNV = 2147483647 ;
pub type VkClusterAccelerationStructureAddressResolutionFlagBitsNV = ::std::os::raw::c_uint;
pub type VkClusterAccelerationStructureAddressResolutionFlagsNV = VkFlags;
pub const VkClusterAccelerationStructureClusterFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_ALLOW_DISABLE_OPACITY_MICROMAPS_NV : VkClusterAccelerationStructureClusterFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureClusterFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_CLUSTER_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureClusterFlagBitsNV = 2147483647 ;
pub type VkClusterAccelerationStructureClusterFlagBitsNV = ::std::os::raw::c_uint;
pub type VkClusterAccelerationStructureClusterFlagsNV = VkFlags;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_CULL_DISABLE_BIT_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_NO_DUPLICATE_ANYHIT_INVOCATION_BIT_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 2 ;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_OPAQUE_BIT_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 4 ;
pub const VkClusterAccelerationStructureGeometryFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_GEOMETRY_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureGeometryFlagBitsNV = 2147483647 ;
pub type VkClusterAccelerationStructureGeometryFlagBitsNV = ::std::os::raw::c_uint;
pub type VkClusterAccelerationStructureGeometryFlagsNV = VkFlags;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_8BIT_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 1 ;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_16BIT_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 2 ;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_32BIT_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 4 ;
pub const VkClusterAccelerationStructureIndexFormatFlagBitsNV_VK_CLUSTER_ACCELERATION_STRUCTURE_INDEX_FORMAT_FLAG_BITS_MAX_ENUM_NV : VkClusterAccelerationStructureIndexFormatFlagBitsNV = 2147483647 ;
pub type VkClusterAccelerationStructureIndexFormatFlagBitsNV = ::std::os::raw::c_uint;
pub type VkClusterAccelerationStructureIndexFormatFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceClusterAccelerationStructureFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub clusterAccelerationStructure: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterAccelerationStructureFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceClusterAccelerationStructureFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDeviceClusterAccelerationStructureFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceClusterAccelerationStructureFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructureFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructureFeaturesNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructureFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructureFeaturesNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructureFeaturesNV::clusterAccelerationStructure"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructureFeaturesNV , clusterAccelerationStructure) - 16usize] ;
};
impl Default for VkPhysicalDeviceClusterAccelerationStructureFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceClusterAccelerationStructurePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxVerticesPerCluster: u32,
    pub maxTrianglesPerCluster: u32,
    pub clusterScratchByteAlignment: u32,
    pub clusterByteAlignment: u32,
    pub clusterTemplateByteAlignment: u32,
    pub clusterBottomLevelByteAlignment: u32,
    pub clusterTemplateBoundsByteAlignment: u32,
    pub maxClusterGeometryIndex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceClusterAccelerationStructurePropertiesNV"][::std::mem::size_of::<
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
    >() - 48usize];
    ["Alignment of VkPhysicalDeviceClusterAccelerationStructurePropertiesNV"][::std::mem::align_of::<
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
    >() - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceClusterAccelerationStructurePropertiesNV,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::maxVerticesPerCluster"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , maxVerticesPerCluster) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::maxTrianglesPerCluster"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , maxTrianglesPerCluster) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterScratchByteAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterScratchByteAlignment) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterByteAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterByteAlignment) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterTemplateByteAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterTemplateByteAlignment) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterBottomLevelByteAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterBottomLevelByteAlignment) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::clusterTemplateBoundsByteAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , clusterTemplateBoundsByteAlignment) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceClusterAccelerationStructurePropertiesNV::maxClusterGeometryIndex"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceClusterAccelerationStructurePropertiesNV , maxClusterGeometryIndex) - 44usize] ;
};
impl Default for VkPhysicalDeviceClusterAccelerationStructurePropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClusterAccelerationStructureClustersBottomLevelInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTotalClusterCount: u32,
    pub maxClusterCountPerAccelerationStructure: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureClustersBottomLevelInputNV"][::std::mem::size_of::<
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
    >() - 24usize];
    ["Alignment of VkClusterAccelerationStructureClustersBottomLevelInputNV"][::std::mem::align_of::<
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
    >() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::sType"][::std::mem::offset_of!(
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::pNext"][::std::mem::offset_of!(
        VkClusterAccelerationStructureClustersBottomLevelInputNV,
        pNext
    )
        - 8usize];
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::maxTotalClusterCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureClustersBottomLevelInputNV , maxTotalClusterCount) - 16usize] ;
    ["Offset of field: VkClusterAccelerationStructureClustersBottomLevelInputNV::maxClusterCountPerAccelerationStructure"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureClustersBottomLevelInputNV , maxClusterCountPerAccelerationStructure) - 20usize] ;
};
impl Default for VkClusterAccelerationStructureClustersBottomLevelInputNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClusterAccelerationStructureTriangleClusterInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vertexFormat: VkFormat,
    pub maxGeometryIndexValue: u32,
    pub maxClusterUniqueGeometryCount: u32,
    pub maxClusterTriangleCount: u32,
    pub maxClusterVertexCount: u32,
    pub maxTotalTriangleCount: u32,
    pub maxTotalVertexCount: u32,
    pub minPositionTruncateBitCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureTriangleClusterInputNV"]
        [::std::mem::size_of::<VkClusterAccelerationStructureTriangleClusterInputNV>() - 48usize];
    ["Alignment of VkClusterAccelerationStructureTriangleClusterInputNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureTriangleClusterInputNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::sType"][::std::mem::offset_of!(
        VkClusterAccelerationStructureTriangleClusterInputNV,
        sType
    ) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::pNext"][::std::mem::offset_of!(
        VkClusterAccelerationStructureTriangleClusterInputNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::vertexFormat"][::std::mem::offset_of!(
        VkClusterAccelerationStructureTriangleClusterInputNV,
        vertexFormat
    )
        - 16usize];
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxGeometryIndexValue"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxGeometryIndexValue) - 20usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxClusterUniqueGeometryCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxClusterUniqueGeometryCount) - 24usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxClusterTriangleCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxClusterTriangleCount) - 28usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxClusterVertexCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxClusterVertexCount) - 32usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxTotalTriangleCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxTotalTriangleCount) - 36usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::maxTotalVertexCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , maxTotalVertexCount) - 40usize] ;
    ["Offset of field: VkClusterAccelerationStructureTriangleClusterInputNV::minPositionTruncateBitCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureTriangleClusterInputNV , minPositionTruncateBitCount) - 44usize] ;
};
impl Default for VkClusterAccelerationStructureTriangleClusterInputNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClusterAccelerationStructureMoveObjectsInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub type_: VkClusterAccelerationStructureTypeNV,
    pub noMoveOverlap: VkBool32,
    pub maxMovedBytes: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureMoveObjectsInputNV"]
        [::std::mem::size_of::<VkClusterAccelerationStructureMoveObjectsInputNV>() - 32usize];
    ["Alignment of VkClusterAccelerationStructureMoveObjectsInputNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureMoveObjectsInputNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::sType"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureMoveObjectsInputNV, sType) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::pNext"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureMoveObjectsInputNV, pNext) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::type_"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureMoveObjectsInputNV, type_) - 16usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::noMoveOverlap"][::std::mem::offset_of!(
        VkClusterAccelerationStructureMoveObjectsInputNV,
        noMoveOverlap
    )
        - 20usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInputNV::maxMovedBytes"][::std::mem::offset_of!(
        VkClusterAccelerationStructureMoveObjectsInputNV,
        maxMovedBytes
    )
        - 24usize];
};
impl Default for VkClusterAccelerationStructureMoveObjectsInputNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkClusterAccelerationStructureOpInputNV {
    pub pClustersBottomLevel: *mut VkClusterAccelerationStructureClustersBottomLevelInputNV,
    pub pTriangleClusters: *mut VkClusterAccelerationStructureTriangleClusterInputNV,
    pub pMoveObjects: *mut VkClusterAccelerationStructureMoveObjectsInputNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureOpInputNV"]
        [::std::mem::size_of::<VkClusterAccelerationStructureOpInputNV>() - 8usize];
    ["Alignment of VkClusterAccelerationStructureOpInputNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureOpInputNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureOpInputNV::pClustersBottomLevel"][::std::mem::offset_of!(
        VkClusterAccelerationStructureOpInputNV,
        pClustersBottomLevel
    ) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureOpInputNV::pTriangleClusters"][::std::mem::offset_of!(
        VkClusterAccelerationStructureOpInputNV,
        pTriangleClusters
    ) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureOpInputNV::pMoveObjects"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureOpInputNV, pMoveObjects) - 0usize];
};
impl Default for VkClusterAccelerationStructureOpInputNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClusterAccelerationStructureInputInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxAccelerationStructureCount: u32,
    pub flags: VkBuildAccelerationStructureFlagsKHR,
    pub opType: VkClusterAccelerationStructureOpTypeNV,
    pub opMode: VkClusterAccelerationStructureOpModeNV,
    pub opInput: VkClusterAccelerationStructureOpInputNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureInputInfoNV"]
        [::std::mem::size_of::<VkClusterAccelerationStructureInputInfoNV>() - 40usize];
    ["Alignment of VkClusterAccelerationStructureInputInfoNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureInputInfoNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::sType"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, sType) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::pNext"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, pNext) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::maxAccelerationStructureCount"][::std::mem::offset_of!(
        VkClusterAccelerationStructureInputInfoNV,
        maxAccelerationStructureCount
    )
        - 16usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::flags"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, flags) - 20usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::opType"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, opType) - 24usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::opMode"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, opMode) - 28usize];
    ["Offset of field: VkClusterAccelerationStructureInputInfoNV::opInput"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureInputInfoNV, opInput) - 32usize];
};
impl Default for VkClusterAccelerationStructureInputInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkStridedDeviceAddressRegionKHR {
    pub deviceAddress: VkDeviceAddress,
    pub stride: VkDeviceSize,
    pub size: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkStridedDeviceAddressRegionKHR"]
        [::std::mem::size_of::<VkStridedDeviceAddressRegionKHR>() - 24usize];
    ["Alignment of VkStridedDeviceAddressRegionKHR"]
        [::std::mem::align_of::<VkStridedDeviceAddressRegionKHR>() - 8usize];
    ["Offset of field: VkStridedDeviceAddressRegionKHR::deviceAddress"]
        [::std::mem::offset_of!(VkStridedDeviceAddressRegionKHR, deviceAddress) - 0usize];
    ["Offset of field: VkStridedDeviceAddressRegionKHR::stride"]
        [::std::mem::offset_of!(VkStridedDeviceAddressRegionKHR, stride) - 8usize];
    ["Offset of field: VkStridedDeviceAddressRegionKHR::size"]
        [::std::mem::offset_of!(VkStridedDeviceAddressRegionKHR, size) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkClusterAccelerationStructureCommandsInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub input: VkClusterAccelerationStructureInputInfoNV,
    pub dstImplicitData: VkDeviceAddress,
    pub scratchData: VkDeviceAddress,
    pub dstAddressesArray: VkStridedDeviceAddressRegionKHR,
    pub dstSizesArray: VkStridedDeviceAddressRegionKHR,
    pub srcInfosArray: VkStridedDeviceAddressRegionKHR,
    pub srcInfosCount: VkDeviceAddress,
    pub addressResolutionFlags: VkClusterAccelerationStructureAddressResolutionFlagsNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureCommandsInfoNV"]
        [::std::mem::size_of::<VkClusterAccelerationStructureCommandsInfoNV>() - 160usize];
    ["Alignment of VkClusterAccelerationStructureCommandsInfoNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureCommandsInfoNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::sType"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureCommandsInfoNV, sType) - 0usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::pNext"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureCommandsInfoNV, pNext) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::input"]
        [::std::mem::offset_of!(VkClusterAccelerationStructureCommandsInfoNV, input) - 16usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::dstImplicitData"][::std::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        dstImplicitData
    ) - 56usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::scratchData"][::std::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        scratchData
    ) - 64usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::dstAddressesArray"][::std::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        dstAddressesArray
    )
        - 72usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::dstSizesArray"][::std::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        dstSizesArray
    ) - 96usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::srcInfosArray"][::std::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        srcInfosArray
    ) - 120usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::srcInfosCount"][::std::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        srcInfosCount
    ) - 144usize];
    ["Offset of field: VkClusterAccelerationStructureCommandsInfoNV::addressResolutionFlags"][::std::mem::offset_of!(
        VkClusterAccelerationStructureCommandsInfoNV,
        addressResolutionFlags
    )
        - 152usize];
};
impl Default for VkClusterAccelerationStructureCommandsInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkStridedDeviceAddressNV {
    pub startAddress: VkDeviceAddress,
    pub strideInBytes: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkStridedDeviceAddressNV"]
        [::std::mem::size_of::<VkStridedDeviceAddressNV>() - 16usize];
    ["Alignment of VkStridedDeviceAddressNV"]
        [::std::mem::align_of::<VkStridedDeviceAddressNV>() - 8usize];
    ["Offset of field: VkStridedDeviceAddressNV::startAddress"]
        [::std::mem::offset_of!(VkStridedDeviceAddressNV, startAddress) - 0usize];
    ["Offset of field: VkStridedDeviceAddressNV::strideInBytes"]
        [::std::mem::offset_of!(VkStridedDeviceAddressNV, strideInBytes) - 8usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV"][::std::mem::size_of::<
        VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV,
    >() - 4usize];
    ["Alignment of VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV>()
            - 4usize];
};
impl VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV {
    #[inline]
    pub fn geometryIndex(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_geometryIndex(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn geometryIndex_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_geometryIndex_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn geometryFlags(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_geometryFlags(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn geometryFlags_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_geometryFlags_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        geometryIndex: u32,
        reserved: u32,
        geometryFlags: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let geometryIndex: u32 = unsafe { ::std::mem::transmute(geometryIndex) };
            geometryIndex as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let geometryFlags: u32 = unsafe { ::std::mem::transmute(geometryFlags) };
            geometryFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClusterAccelerationStructureMoveObjectsInfoNV {
    pub srcAccelerationStructure: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureMoveObjectsInfoNV"]
        [::std::mem::size_of::<VkClusterAccelerationStructureMoveObjectsInfoNV>() - 8usize];
    ["Alignment of VkClusterAccelerationStructureMoveObjectsInfoNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureMoveObjectsInfoNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureMoveObjectsInfoNV::srcAccelerationStructure"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureMoveObjectsInfoNV , srcAccelerationStructure) - 0usize] ;
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV {
    pub clusterReferencesCount: u32,
    pub clusterReferencesStride: u32,
    pub clusterReferences: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV"][::std::mem::size_of::<
        VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV,
    >() - 16usize];
    ["Alignment of VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV>()
            - 8usize];
    ["Offset of field: VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV::clusterReferencesCount"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV , clusterReferencesCount) - 0usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV::clusterReferencesStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV , clusterReferencesStride) - 4usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV::clusterReferences"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildClustersBottomLevelInfoNV , clusterReferences) - 8usize] ;
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClusterAccelerationStructureBuildTriangleClusterInfoNV {
    pub clusterID: u32,
    pub clusterFlags: VkClusterAccelerationStructureClusterFlagsNV,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub baseGeometryIndexAndGeometryFlags:
        VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV,
    pub indexBufferStride: u16,
    pub vertexBufferStride: u16,
    pub geometryIndexAndFlagsBufferStride: u16,
    pub opacityMicromapIndexBufferStride: u16,
    pub indexBuffer: VkDeviceAddress,
    pub vertexBuffer: VkDeviceAddress,
    pub geometryIndexAndFlagsBuffer: VkDeviceAddress,
    pub opacityMicromapArray: VkDeviceAddress,
    pub opacityMicromapIndexBuffer: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureBuildTriangleClusterInfoNV"][::std::mem::size_of::<
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
    >() - 64usize];
    ["Alignment of VkClusterAccelerationStructureBuildTriangleClusterInfoNV"][::std::mem::align_of::<
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
    >() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::clusterID"][::std::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        clusterID
    )
        - 0usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::clusterFlags"][::std::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        clusterFlags
    )
        - 4usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::baseGeometryIndexAndGeometryFlags"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , baseGeometryIndexAndGeometryFlags) - 12usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::indexBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , indexBufferStride) - 16usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::vertexBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , vertexBufferStride) - 18usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::geometryIndexAndFlagsBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , geometryIndexAndFlagsBufferStride) - 20usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::opacityMicromapIndexBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , opacityMicromapIndexBufferStride) - 22usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::indexBuffer"][::std::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        indexBuffer
    )
        - 24usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::vertexBuffer"][::std::mem::offset_of!(
        VkClusterAccelerationStructureBuildTriangleClusterInfoNV,
        vertexBuffer
    )
        - 32usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::geometryIndexAndFlagsBuffer"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , geometryIndexAndFlagsBuffer) - 40usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::opacityMicromapArray"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , opacityMicromapArray) - 48usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterInfoNV::opacityMicromapIndexBuffer"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterInfoNV , opacityMicromapIndexBuffer) - 56usize] ;
};
impl VkClusterAccelerationStructureBuildTriangleClusterInfoNV {
    #[inline]
    pub fn triangleCount(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_triangleCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn triangleCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_triangleCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vertexCount(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_vertexCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vertexCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vertexCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn positionTruncateBitCount(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_positionTruncateBitCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn positionTruncateBitCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_positionTruncateBitCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn indexType(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_indexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn indexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_indexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn opacityMicromapIndexType(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_opacityMicromapIndexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn opacityMicromapIndexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_opacityMicromapIndexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triangleCount: u32,
        vertexCount: u32,
        positionTruncateBitCount: u32,
        indexType: u32,
        opacityMicromapIndexType: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let triangleCount: u32 = unsafe { ::std::mem::transmute(triangleCount) };
            triangleCount as u64
        });
        __bindgen_bitfield_unit.set(9usize, 9u8, {
            let vertexCount: u32 = unsafe { ::std::mem::transmute(vertexCount) };
            vertexCount as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let positionTruncateBitCount: u32 =
                unsafe { ::std::mem::transmute(positionTruncateBitCount) };
            positionTruncateBitCount as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let indexType: u32 = unsafe { ::std::mem::transmute(indexType) };
            indexType as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let opacityMicromapIndexType: u32 =
                unsafe { ::std::mem::transmute(opacityMicromapIndexType) };
            opacityMicromapIndexType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV {
    pub clusterID: u32,
    pub clusterFlags: VkClusterAccelerationStructureClusterFlagsNV,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub baseGeometryIndexAndGeometryFlags:
        VkClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV,
    pub indexBufferStride: u16,
    pub vertexBufferStride: u16,
    pub geometryIndexAndFlagsBufferStride: u16,
    pub opacityMicromapIndexBufferStride: u16,
    pub indexBuffer: VkDeviceAddress,
    pub vertexBuffer: VkDeviceAddress,
    pub geometryIndexAndFlagsBuffer: VkDeviceAddress,
    pub opacityMicromapArray: VkDeviceAddress,
    pub opacityMicromapIndexBuffer: VkDeviceAddress,
    pub instantiationBoundingBoxLimit: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV"][::std::mem::size_of::<
        VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV,
    >() - 72usize];
    ["Alignment of VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV>(
        ) - 8usize];
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::clusterID"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , clusterID) - 0usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::clusterFlags"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , clusterFlags) - 4usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::baseGeometryIndexAndGeometryFlags"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , baseGeometryIndexAndGeometryFlags) - 12usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::indexBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , indexBufferStride) - 16usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::vertexBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , vertexBufferStride) - 18usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::geometryIndexAndFlagsBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , geometryIndexAndFlagsBufferStride) - 20usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::opacityMicromapIndexBufferStride"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , opacityMicromapIndexBufferStride) - 22usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::indexBuffer"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , indexBuffer) - 24usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::vertexBuffer"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , vertexBuffer) - 32usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::geometryIndexAndFlagsBuffer"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , geometryIndexAndFlagsBuffer) - 40usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::opacityMicromapArray"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , opacityMicromapArray) - 48usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::opacityMicromapIndexBuffer"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , opacityMicromapIndexBuffer) - 56usize] ;
    ["Offset of field: VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV::instantiationBoundingBoxLimit"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV , instantiationBoundingBoxLimit) - 64usize] ;
};
impl VkClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV {
    #[inline]
    pub fn triangleCount(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_triangleCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn triangleCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_triangleCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vertexCount(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_vertexCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vertexCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vertexCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn positionTruncateBitCount(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_positionTruncateBitCount(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn positionTruncateBitCount_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_positionTruncateBitCount_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn indexType(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_indexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn indexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_indexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn opacityMicromapIndexType(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_opacityMicromapIndexType(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn opacityMicromapIndexType_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_opacityMicromapIndexType_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        triangleCount: u32,
        vertexCount: u32,
        positionTruncateBitCount: u32,
        indexType: u32,
        opacityMicromapIndexType: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let triangleCount: u32 = unsafe { ::std::mem::transmute(triangleCount) };
            triangleCount as u64
        });
        __bindgen_bitfield_unit.set(9usize, 9u8, {
            let vertexCount: u32 = unsafe { ::std::mem::transmute(vertexCount) };
            vertexCount as u64
        });
        __bindgen_bitfield_unit.set(18usize, 6u8, {
            let positionTruncateBitCount: u32 =
                unsafe { ::std::mem::transmute(positionTruncateBitCount) };
            positionTruncateBitCount as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let indexType: u32 = unsafe { ::std::mem::transmute(indexType) };
            indexType as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let opacityMicromapIndexType: u32 =
                unsafe { ::std::mem::transmute(opacityMicromapIndexType) };
            opacityMicromapIndexType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkClusterAccelerationStructureInstantiateClusterInfoNV {
    pub clusterIdOffset: u32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub clusterTemplateAddress: VkDeviceAddress,
    pub vertexBuffer: VkStridedDeviceAddressNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkClusterAccelerationStructureInstantiateClusterInfoNV"]
        [::std::mem::size_of::<VkClusterAccelerationStructureInstantiateClusterInfoNV>() - 32usize];
    ["Alignment of VkClusterAccelerationStructureInstantiateClusterInfoNV"]
        [::std::mem::align_of::<VkClusterAccelerationStructureInstantiateClusterInfoNV>() - 8usize];
    ["Offset of field: VkClusterAccelerationStructureInstantiateClusterInfoNV::clusterIdOffset"][::std::mem::offset_of!(
        VkClusterAccelerationStructureInstantiateClusterInfoNV,
        clusterIdOffset
    )
        - 0usize];
    ["Offset of field: VkClusterAccelerationStructureInstantiateClusterInfoNV::clusterTemplateAddress"] [:: std :: mem :: offset_of ! (VkClusterAccelerationStructureInstantiateClusterInfoNV , clusterTemplateAddress) - 8usize] ;
    ["Offset of field: VkClusterAccelerationStructureInstantiateClusterInfoNV::vertexBuffer"][::std::mem::offset_of!(
        VkClusterAccelerationStructureInstantiateClusterInfoNV,
        vertexBuffer
    )
        - 16usize];
};
impl VkClusterAccelerationStructureInstantiateClusterInfoNV {
    #[inline]
    pub fn geometryIndexOffset(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_geometryIndexOffset(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn geometryIndexOffset_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_geometryIndexOffset_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> u32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        geometryIndexOffset: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let geometryIndexOffset: u32 = unsafe { ::std::mem::transmute(geometryIndexOffset) };
            geometryIndexOffset as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureBuildSizesInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructureSize: VkDeviceSize,
    pub updateScratchSize: VkDeviceSize,
    pub buildScratchSize: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureBuildSizesInfoKHR"]
        [::std::mem::size_of::<VkAccelerationStructureBuildSizesInfoKHR>() - 40usize];
    ["Alignment of VkAccelerationStructureBuildSizesInfoKHR"]
        [::std::mem::align_of::<VkAccelerationStructureBuildSizesInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildSizesInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildSizesInfoKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::accelerationStructureSize"][::std::mem::offset_of!(
        VkAccelerationStructureBuildSizesInfoKHR,
        accelerationStructureSize
    )
        - 16usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::updateScratchSize"][::std::mem::offset_of!(
        VkAccelerationStructureBuildSizesInfoKHR,
        updateScratchSize
    ) - 24usize];
    ["Offset of field: VkAccelerationStructureBuildSizesInfoKHR::buildScratchSize"][::std::mem::offset_of!(
        VkAccelerationStructureBuildSizesInfoKHR,
        buildScratchSize
    ) - 32usize];
};
impl Default for VkAccelerationStructureBuildSizesInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub allowClusterAccelerationStructure: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV"][::std::mem::size_of::<
        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV,
    >() - 24usize];
    ["Alignment of VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV"]
        [::std::mem::align_of::<VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV>()
            - 8usize];
    ["Offset of field: VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV::sType"][::std::mem::offset_of!(
        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV::pNext"][::std::mem::offset_of!(
        VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV,
        pNext
    )
        - 8usize];
    ["Offset of field: VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV::allowClusterAccelerationStructure"] [:: std :: mem :: offset_of ! (VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV , allowClusterAccelerationStructure) - 16usize] ;
};
impl Default for VkRayTracingPipelineClusterAccelerationStructureCreateInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetClusterAccelerationStructureBuildSizesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkClusterAccelerationStructureInputInfoNV,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    ),
>;
pub type PFN_vkCmdBuildClusterAccelerationStructureIndirectNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pCommandInfos: *const VkClusterAccelerationStructureCommandsInfoNV,
    ),
>;
unsafe extern "system" {
    pub fn vkGetClusterAccelerationStructureBuildSizesNV(
        device: VkDevice,
        pInfo: *const VkClusterAccelerationStructureInputInfoNV,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdBuildClusterAccelerationStructureIndirectNV(
        commandBuffer: VkCommandBuffer,
        pCommandInfos: *const VkClusterAccelerationStructureCommandsInfoNV,
    );
}
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_INSTANCE_NV : VkPartitionedAccelerationStructureOpTypeNV = 0 ;
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_UPDATE_INSTANCE_NV : VkPartitionedAccelerationStructureOpTypeNV = 1 ;
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_WRITE_PARTITION_TRANSLATION_NV : VkPartitionedAccelerationStructureOpTypeNV = 2 ;
pub const VkPartitionedAccelerationStructureOpTypeNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_OP_TYPE_MAX_ENUM_NV : VkPartitionedAccelerationStructureOpTypeNV = 2147483647 ;
pub type VkPartitionedAccelerationStructureOpTypeNV = ::std::os::raw::c_uint;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FACING_CULL_DISABLE_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 1 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_TRIANGLE_FLIP_FACING_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 2 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_OPAQUE_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 4 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_FORCE_NO_OPAQUE_BIT_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 8 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_ENABLE_EXPLICIT_BOUNDING_BOX_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 16 ;
pub const VkPartitionedAccelerationStructureInstanceFlagBitsNV_VK_PARTITIONED_ACCELERATION_STRUCTURE_INSTANCE_FLAG_BITS_MAX_ENUM_NV : VkPartitionedAccelerationStructureInstanceFlagBitsNV = 2147483647 ;
pub type VkPartitionedAccelerationStructureInstanceFlagBitsNV = ::std::os::raw::c_uint;
pub type VkPartitionedAccelerationStructureInstanceFlagsNV = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub partitionedAccelerationStructure: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV"][::std::mem::size_of::<
        VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV,
    >() - 24usize];
    ["Alignment of VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV"][::std::mem::align_of::<
        VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV,
    >() - 8usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV::partitionedAccelerationStructure"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV , partitionedAccelerationStructure) - 16usize] ;
};
impl Default for VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxPartitionCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV"][::std::mem::size_of::<
        VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV,
    >() - 24usize];
    ["Alignment of VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV>()
            - 8usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV,
        sType
    )
        - 0usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV,
        pNext
    )
        - 8usize];
    ["Offset of field: VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV::maxPartitionCount"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV , maxPartitionCount) - 16usize] ;
};
impl Default for VkPhysicalDevicePartitionedAccelerationStructurePropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPartitionedAccelerationStructureFlagsNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub enablePartitionTranslation: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureFlagsNV"]
        [::std::mem::size_of::<VkPartitionedAccelerationStructureFlagsNV>() - 24usize];
    ["Alignment of VkPartitionedAccelerationStructureFlagsNV"]
        [::std::mem::align_of::<VkPartitionedAccelerationStructureFlagsNV>() - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureFlagsNV::sType"]
        [::std::mem::offset_of!(VkPartitionedAccelerationStructureFlagsNV, sType) - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureFlagsNV::pNext"]
        [::std::mem::offset_of!(VkPartitionedAccelerationStructureFlagsNV, pNext) - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureFlagsNV::enablePartitionTranslation"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureFlagsNV,
        enablePartitionTranslation
    )
        - 16usize];
};
impl Default for VkPartitionedAccelerationStructureFlagsNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBuildPartitionedAccelerationStructureIndirectCommandNV {
    pub opType: VkPartitionedAccelerationStructureOpTypeNV,
    pub argCount: u32,
    pub argData: VkStridedDeviceAddressNV,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBuildPartitionedAccelerationStructureIndirectCommandNV"][::std::mem::size_of::<
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
    >() - 24usize];
    ["Alignment of VkBuildPartitionedAccelerationStructureIndirectCommandNV"][::std::mem::align_of::<
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
    >() - 8usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureIndirectCommandNV::opType"][::std::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
        opType
    )
        - 0usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureIndirectCommandNV::argCount"][::std::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
        argCount
    )
        - 4usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureIndirectCommandNV::argData"][::std::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureIndirectCommandNV,
        argData
    )
        - 8usize];
};
impl Default for VkBuildPartitionedAccelerationStructureIndirectCommandNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureWriteInstanceDataNV {
    pub transform: VkTransformMatrixKHR,
    pub explicitAABB: [f32; 6usize],
    pub instanceID: u32,
    pub instanceMask: u32,
    pub instanceContributionToHitGroupIndex: u32,
    pub instanceFlags: VkPartitionedAccelerationStructureInstanceFlagsNV,
    pub instanceIndex: u32,
    pub partitionIndex: u32,
    pub accelerationStructure: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureWriteInstanceDataNV"]
        [::std::mem::size_of::<VkPartitionedAccelerationStructureWriteInstanceDataNV>() - 104usize];
    ["Alignment of VkPartitionedAccelerationStructureWriteInstanceDataNV"]
        [::std::mem::align_of::<VkPartitionedAccelerationStructureWriteInstanceDataNV>() - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::transform"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        transform
    )
        - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::explicitAABB"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        explicitAABB
    )
        - 48usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceID"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceID
    )
        - 72usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceMask"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceMask
    )
        - 76usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceContributionToHitGroupIndex"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureWriteInstanceDataNV , instanceContributionToHitGroupIndex) - 80usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceFlags"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceFlags
    )
        - 84usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::instanceIndex"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        instanceIndex
    )
        - 88usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::partitionIndex"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureWriteInstanceDataNV,
        partitionIndex
    )
        - 92usize];
    ["Offset of field: VkPartitionedAccelerationStructureWriteInstanceDataNV::accelerationStructure"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureWriteInstanceDataNV , accelerationStructure) - 96usize] ;
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureUpdateInstanceDataNV {
    pub instanceIndex: u32,
    pub instanceContributionToHitGroupIndex: u32,
    pub accelerationStructure: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureUpdateInstanceDataNV"]
        [::std::mem::size_of::<VkPartitionedAccelerationStructureUpdateInstanceDataNV>() - 16usize];
    ["Alignment of VkPartitionedAccelerationStructureUpdateInstanceDataNV"]
        [::std::mem::align_of::<VkPartitionedAccelerationStructureUpdateInstanceDataNV>() - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureUpdateInstanceDataNV::instanceIndex"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureUpdateInstanceDataNV,
        instanceIndex
    )
        - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureUpdateInstanceDataNV::instanceContributionToHitGroupIndex"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureUpdateInstanceDataNV , instanceContributionToHitGroupIndex) - 4usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureUpdateInstanceDataNV::accelerationStructure"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureUpdateInstanceDataNV , accelerationStructure) - 8usize] ;
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkPartitionedAccelerationStructureWritePartitionTranslationDataNV {
    pub partitionIndex: u32,
    pub partitionTranslation: [f32; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureWritePartitionTranslationDataNV"]
        [::std::mem::size_of::<VkPartitionedAccelerationStructureWritePartitionTranslationDataNV>(
        ) - 16usize];
    ["Alignment of VkPartitionedAccelerationStructureWritePartitionTranslationDataNV"]
        [::std::mem::align_of::<VkPartitionedAccelerationStructureWritePartitionTranslationDataNV>(
        ) - 4usize];
    ["Offset of field: VkPartitionedAccelerationStructureWritePartitionTranslationDataNV::partitionIndex"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureWritePartitionTranslationDataNV , partitionIndex) - 0usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureWritePartitionTranslationDataNV::partitionTranslation"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureWritePartitionTranslationDataNV , partitionTranslation) - 4usize] ;
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetPartitionedAccelerationStructureNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetPartitionedAccelerationStructureNV"]
        [::std::mem::size_of::<VkWriteDescriptorSetPartitionedAccelerationStructureNV>() - 32usize];
    ["Alignment of VkWriteDescriptorSetPartitionedAccelerationStructureNV"]
        [::std::mem::align_of::<VkWriteDescriptorSetPartitionedAccelerationStructureNV>() - 8usize];
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::sType"][::std::mem::offset_of!(
        VkWriteDescriptorSetPartitionedAccelerationStructureNV,
        sType
    ) - 0usize];
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::pNext"][::std::mem::offset_of!(
        VkWriteDescriptorSetPartitionedAccelerationStructureNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::accelerationStructureCount"] [:: std :: mem :: offset_of ! (VkWriteDescriptorSetPartitionedAccelerationStructureNV , accelerationStructureCount) - 16usize] ;
    ["Offset of field: VkWriteDescriptorSetPartitionedAccelerationStructureNV::pAccelerationStructures"] [:: std :: mem :: offset_of ! (VkWriteDescriptorSetPartitionedAccelerationStructureNV , pAccelerationStructures) - 24usize] ;
};
impl Default for VkWriteDescriptorSetPartitionedAccelerationStructureNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPartitionedAccelerationStructureInstancesInputNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub flags: VkBuildAccelerationStructureFlagsKHR,
    pub instanceCount: u32,
    pub maxInstancePerPartitionCount: u32,
    pub partitionCount: u32,
    pub maxInstanceInGlobalPartitionCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPartitionedAccelerationStructureInstancesInputNV"]
        [::std::mem::size_of::<VkPartitionedAccelerationStructureInstancesInputNV>() - 40usize];
    ["Alignment of VkPartitionedAccelerationStructureInstancesInputNV"]
        [::std::mem::align_of::<VkPartitionedAccelerationStructureInstancesInputNV>() - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::sType"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        sType
    ) - 0usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::pNext"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        pNext
    ) - 8usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::flags"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        flags
    ) - 16usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::instanceCount"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        instanceCount
    )
        - 20usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::maxInstancePerPartitionCount"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureInstancesInputNV , maxInstancePerPartitionCount) - 24usize] ;
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::partitionCount"][::std::mem::offset_of!(
        VkPartitionedAccelerationStructureInstancesInputNV,
        partitionCount
    )
        - 28usize];
    ["Offset of field: VkPartitionedAccelerationStructureInstancesInputNV::maxInstanceInGlobalPartitionCount"] [:: std :: mem :: offset_of ! (VkPartitionedAccelerationStructureInstancesInputNV , maxInstanceInGlobalPartitionCount) - 32usize] ;
};
impl Default for VkPartitionedAccelerationStructureInstancesInputNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBuildPartitionedAccelerationStructureInfoNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub input: VkPartitionedAccelerationStructureInstancesInputNV,
    pub srcAccelerationStructureData: VkDeviceAddress,
    pub dstAccelerationStructureData: VkDeviceAddress,
    pub scratchData: VkDeviceAddress,
    pub srcInfos: VkDeviceAddress,
    pub srcInfosCount: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBuildPartitionedAccelerationStructureInfoNV"]
        [::std::mem::size_of::<VkBuildPartitionedAccelerationStructureInfoNV>() - 96usize];
    ["Alignment of VkBuildPartitionedAccelerationStructureInfoNV"]
        [::std::mem::align_of::<VkBuildPartitionedAccelerationStructureInfoNV>() - 8usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::sType"]
        [::std::mem::offset_of!(VkBuildPartitionedAccelerationStructureInfoNV, sType) - 0usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::pNext"]
        [::std::mem::offset_of!(VkBuildPartitionedAccelerationStructureInfoNV, pNext) - 8usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::input"]
        [::std::mem::offset_of!(VkBuildPartitionedAccelerationStructureInfoNV, input) - 16usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::srcAccelerationStructureData"] [:: std :: mem :: offset_of ! (VkBuildPartitionedAccelerationStructureInfoNV , srcAccelerationStructureData) - 56usize] ;
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::dstAccelerationStructureData"] [:: std :: mem :: offset_of ! (VkBuildPartitionedAccelerationStructureInfoNV , dstAccelerationStructureData) - 64usize] ;
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::scratchData"][::std::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureInfoNV,
        scratchData
    ) - 72usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::srcInfos"]
        [::std::mem::offset_of!(VkBuildPartitionedAccelerationStructureInfoNV, srcInfos) - 80usize];
    ["Offset of field: VkBuildPartitionedAccelerationStructureInfoNV::srcInfosCount"][::std::mem::offset_of!(
        VkBuildPartitionedAccelerationStructureInfoNV,
        srcInfosCount
    ) - 88usize];
};
impl Default for VkBuildPartitionedAccelerationStructureInfoNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPartitionedAccelerationStructuresBuildSizesNV = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkPartitionedAccelerationStructureInstancesInputNV,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    ),
>;
pub type PFN_vkCmdBuildPartitionedAccelerationStructuresNV = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pBuildInfo: *const VkBuildPartitionedAccelerationStructureInfoNV,
    ),
>;
unsafe extern "system" {
    pub fn vkGetPartitionedAccelerationStructuresBuildSizesNV(
        device: VkDevice,
        pInfo: *const VkPartitionedAccelerationStructureInstancesInputNV,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdBuildPartitionedAccelerationStructuresNV(
        commandBuffer: VkCommandBuffer,
        pBuildInfo: *const VkBuildPartitionedAccelerationStructureInfoNV,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectExecutionSetEXT_T {
    _unused: [u8; 0],
}
pub type VkIndirectExecutionSetEXT = *mut VkIndirectExecutionSetEXT_T;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutEXT_T {
    _unused: [u8; 0],
}
pub type VkIndirectCommandsLayoutEXT = *mut VkIndirectCommandsLayoutEXT_T;
pub const VkIndirectExecutionSetInfoTypeEXT_VK_INDIRECT_EXECUTION_SET_INFO_TYPE_PIPELINES_EXT:
    VkIndirectExecutionSetInfoTypeEXT = 0;
pub const VkIndirectExecutionSetInfoTypeEXT_VK_INDIRECT_EXECUTION_SET_INFO_TYPE_SHADER_OBJECTS_EXT : VkIndirectExecutionSetInfoTypeEXT = 1 ;
pub const VkIndirectExecutionSetInfoTypeEXT_VK_INDIRECT_EXECUTION_SET_INFO_TYPE_MAX_ENUM_EXT:
    VkIndirectExecutionSetInfoTypeEXT = 2147483647;
pub type VkIndirectExecutionSetInfoTypeEXT = ::std::os::raw::c_uint;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_EXECUTION_SET_EXT:
    VkIndirectCommandsTokenTypeEXT = 0;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_EXT:
    VkIndirectCommandsTokenTypeEXT = 1;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_SEQUENCE_INDEX_EXT:
    VkIndirectCommandsTokenTypeEXT = 2;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_EXT:
    VkIndirectCommandsTokenTypeEXT = 3;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_EXT:
    VkIndirectCommandsTokenTypeEXT = 4;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_EXT:
    VkIndirectCommandsTokenTypeEXT = 5;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_EXT:
    VkIndirectCommandsTokenTypeEXT = 6;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_COUNT_EXT:
    VkIndirectCommandsTokenTypeEXT = 7;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_COUNT_EXT:
    VkIndirectCommandsTokenTypeEXT = 8;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_EXT:
    VkIndirectCommandsTokenTypeEXT = 9;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV_EXT:
    VkIndirectCommandsTokenTypeEXT = 1000202002;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_NV_EXT : VkIndirectCommandsTokenTypeEXT = 1000202003 ;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_EXT:
    VkIndirectCommandsTokenTypeEXT = 1000328000;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_COUNT_EXT : VkIndirectCommandsTokenTypeEXT = 1000328001 ;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_TRACE_RAYS2_EXT:
    VkIndirectCommandsTokenTypeEXT = 1000386004;
pub const VkIndirectCommandsTokenTypeEXT_VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_EXT:
    VkIndirectCommandsTokenTypeEXT = 2147483647;
pub type VkIndirectCommandsTokenTypeEXT = ::std::os::raw::c_uint;
pub const VkIndirectCommandsInputModeFlagBitsEXT_VK_INDIRECT_COMMANDS_INPUT_MODE_VULKAN_INDEX_BUFFER_EXT : VkIndirectCommandsInputModeFlagBitsEXT = 1 ;
pub const VkIndirectCommandsInputModeFlagBitsEXT_VK_INDIRECT_COMMANDS_INPUT_MODE_DXGI_INDEX_BUFFER_EXT : VkIndirectCommandsInputModeFlagBitsEXT = 2 ;
pub const VkIndirectCommandsInputModeFlagBitsEXT_VK_INDIRECT_COMMANDS_INPUT_MODE_FLAG_BITS_MAX_ENUM_EXT : VkIndirectCommandsInputModeFlagBitsEXT = 2147483647 ;
pub type VkIndirectCommandsInputModeFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkIndirectCommandsInputModeFlagsEXT = VkFlags;
pub const VkIndirectCommandsLayoutUsageFlagBitsEXT_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_EXT : VkIndirectCommandsLayoutUsageFlagBitsEXT = 1 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsEXT_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_EXT : VkIndirectCommandsLayoutUsageFlagBitsEXT = 2 ;
pub const VkIndirectCommandsLayoutUsageFlagBitsEXT_VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_EXT : VkIndirectCommandsLayoutUsageFlagBitsEXT = 2147483647 ;
pub type VkIndirectCommandsLayoutUsageFlagBitsEXT = ::std::os::raw::c_uint;
pub type VkIndirectCommandsLayoutUsageFlagsEXT = VkFlags;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub deviceGeneratedCommands: VkBool32,
    pub dynamicGeneratedPipelineLayout: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::deviceGeneratedCommands"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT , deviceGeneratedCommands) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT::dynamicGeneratedPipelineLayout"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT , dynamicGeneratedPipelineLayout) - 20usize] ;
};
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxIndirectPipelineCount: u32,
    pub maxIndirectShaderObjectCount: u32,
    pub maxIndirectSequenceCount: u32,
    pub maxIndirectCommandsTokenCount: u32,
    pub maxIndirectCommandsTokenOffset: u32,
    pub maxIndirectCommandsIndirectStride: u32,
    pub supportedIndirectCommandsInputModes: VkIndirectCommandsInputModeFlagsEXT,
    pub supportedIndirectCommandsShaderStages: VkShaderStageFlags,
    pub supportedIndirectCommandsShaderStagesPipelineBinding: VkShaderStageFlags,
    pub supportedIndirectCommandsShaderStagesShaderBinding: VkShaderStageFlags,
    pub deviceGeneratedCommandsTransformFeedback: VkBool32,
    pub deviceGeneratedCommandsMultiDrawIndirectCount: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT>() - 64usize];
    ["Alignment of VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectPipelineCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectPipelineCount) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectShaderObjectCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectShaderObjectCount) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectSequenceCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectSequenceCount) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectCommandsTokenCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectCommandsTokenCount) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectCommandsTokenOffset"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectCommandsTokenOffset) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::maxIndirectCommandsIndirectStride"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , maxIndirectCommandsIndirectStride) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsInputModes"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsInputModes) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsShaderStages"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsShaderStages) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsShaderStagesPipelineBinding"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsShaderStagesPipelineBinding) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::supportedIndirectCommandsShaderStagesShaderBinding"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , supportedIndirectCommandsShaderStagesShaderBinding) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::deviceGeneratedCommandsTransformFeedback"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , deviceGeneratedCommandsTransformFeedback) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT::deviceGeneratedCommandsMultiDrawIndirectCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT , deviceGeneratedCommandsMultiDrawIndirectCount) - 60usize] ;
};
impl Default for VkPhysicalDeviceDeviceGeneratedCommandsPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub indirectExecutionSet: VkIndirectExecutionSetEXT,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutEXT,
    pub maxSequenceCount: u32,
    pub maxDrawCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsMemoryRequirementsInfoEXT"]
        [::std::mem::size_of::<VkGeneratedCommandsMemoryRequirementsInfoEXT>() - 40usize];
    ["Alignment of VkGeneratedCommandsMemoryRequirementsInfoEXT"]
        [::std::mem::align_of::<VkGeneratedCommandsMemoryRequirementsInfoEXT>() - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::sType"]
        [::std::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::pNext"]
        [::std::mem::offset_of!(VkGeneratedCommandsMemoryRequirementsInfoEXT, pNext) - 8usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::indirectExecutionSet"][::std::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        indirectExecutionSet
    )
        - 16usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::indirectCommandsLayout"][::std::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        indirectCommandsLayout
    )
        - 24usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::maxSequenceCount"][::std::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        maxSequenceCount
    )
        - 32usize];
    ["Offset of field: VkGeneratedCommandsMemoryRequirementsInfoEXT::maxDrawCount"][::std::mem::offset_of!(
        VkGeneratedCommandsMemoryRequirementsInfoEXT,
        maxDrawCount
    ) - 36usize];
};
impl Default for VkGeneratedCommandsMemoryRequirementsInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectExecutionSetPipelineInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub initialPipeline: VkPipeline,
    pub maxPipelineCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetPipelineInfoEXT"]
        [::std::mem::size_of::<VkIndirectExecutionSetPipelineInfoEXT>() - 32usize];
    ["Alignment of VkIndirectExecutionSetPipelineInfoEXT"]
        [::std::mem::align_of::<VkIndirectExecutionSetPipelineInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::sType"]
        [::std::mem::offset_of!(VkIndirectExecutionSetPipelineInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::pNext"]
        [::std::mem::offset_of!(VkIndirectExecutionSetPipelineInfoEXT, pNext) - 8usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::initialPipeline"]
        [::std::mem::offset_of!(VkIndirectExecutionSetPipelineInfoEXT, initialPipeline) - 16usize];
    ["Offset of field: VkIndirectExecutionSetPipelineInfoEXT::maxPipelineCount"]
        [::std::mem::offset_of!(VkIndirectExecutionSetPipelineInfoEXT, maxPipelineCount) - 24usize];
};
impl Default for VkIndirectExecutionSetPipelineInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectExecutionSetShaderLayoutInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub setLayoutCount: u32,
    pub pSetLayouts: *const VkDescriptorSetLayout,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetShaderLayoutInfoEXT"]
        [::std::mem::size_of::<VkIndirectExecutionSetShaderLayoutInfoEXT>() - 32usize];
    ["Alignment of VkIndirectExecutionSetShaderLayoutInfoEXT"]
        [::std::mem::align_of::<VkIndirectExecutionSetShaderLayoutInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::sType"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderLayoutInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::pNext"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderLayoutInfoEXT, pNext) - 8usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::setLayoutCount"][::std::mem::offset_of!(
        VkIndirectExecutionSetShaderLayoutInfoEXT,
        setLayoutCount
    ) - 16usize];
    ["Offset of field: VkIndirectExecutionSetShaderLayoutInfoEXT::pSetLayouts"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderLayoutInfoEXT, pSetLayouts) - 24usize];
};
impl Default for VkIndirectExecutionSetShaderLayoutInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectExecutionSetShaderInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub shaderCount: u32,
    pub pInitialShaders: *const VkShaderEXT,
    pub pSetLayoutInfos: *const VkIndirectExecutionSetShaderLayoutInfoEXT,
    pub maxShaderCount: u32,
    pub pushConstantRangeCount: u32,
    pub pPushConstantRanges: *const VkPushConstantRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetShaderInfoEXT"]
        [::std::mem::size_of::<VkIndirectExecutionSetShaderInfoEXT>() - 56usize];
    ["Alignment of VkIndirectExecutionSetShaderInfoEXT"]
        [::std::mem::align_of::<VkIndirectExecutionSetShaderInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::sType"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pNext"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, pNext) - 8usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::shaderCount"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, shaderCount) - 16usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pInitialShaders"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, pInitialShaders) - 24usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pSetLayoutInfos"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, pSetLayoutInfos) - 32usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::maxShaderCount"]
        [::std::mem::offset_of!(VkIndirectExecutionSetShaderInfoEXT, maxShaderCount) - 40usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pushConstantRangeCount"][::std::mem::offset_of!(
        VkIndirectExecutionSetShaderInfoEXT,
        pushConstantRangeCount
    ) - 44usize];
    ["Offset of field: VkIndirectExecutionSetShaderInfoEXT::pPushConstantRanges"][::std::mem::offset_of!(
        VkIndirectExecutionSetShaderInfoEXT,
        pPushConstantRanges
    ) - 48usize];
};
impl Default for VkIndirectExecutionSetShaderInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkIndirectExecutionSetInfoEXT {
    pub pPipelineInfo: *const VkIndirectExecutionSetPipelineInfoEXT,
    pub pShaderInfo: *const VkIndirectExecutionSetShaderInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetInfoEXT"]
        [::std::mem::size_of::<VkIndirectExecutionSetInfoEXT>() - 8usize];
    ["Alignment of VkIndirectExecutionSetInfoEXT"]
        [::std::mem::align_of::<VkIndirectExecutionSetInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectExecutionSetInfoEXT::pPipelineInfo"]
        [::std::mem::offset_of!(VkIndirectExecutionSetInfoEXT, pPipelineInfo) - 0usize];
    ["Offset of field: VkIndirectExecutionSetInfoEXT::pShaderInfo"]
        [::std::mem::offset_of!(VkIndirectExecutionSetInfoEXT, pShaderInfo) - 0usize];
};
impl Default for VkIndirectExecutionSetInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectExecutionSetCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkIndirectExecutionSetInfoTypeEXT,
    pub info: VkIndirectExecutionSetInfoEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectExecutionSetCreateInfoEXT"]
        [::std::mem::size_of::<VkIndirectExecutionSetCreateInfoEXT>() - 32usize];
    ["Alignment of VkIndirectExecutionSetCreateInfoEXT"]
        [::std::mem::align_of::<VkIndirectExecutionSetCreateInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::type_"]
        [::std::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, type_) - 16usize];
    ["Offset of field: VkIndirectExecutionSetCreateInfoEXT::info"]
        [::std::mem::offset_of!(VkIndirectExecutionSetCreateInfoEXT, info) - 24usize];
};
impl Default for VkIndirectExecutionSetCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub shaderStages: VkShaderStageFlags,
    pub indirectExecutionSet: VkIndirectExecutionSetEXT,
    pub indirectCommandsLayout: VkIndirectCommandsLayoutEXT,
    pub indirectAddress: VkDeviceAddress,
    pub indirectAddressSize: VkDeviceSize,
    pub preprocessAddress: VkDeviceAddress,
    pub preprocessSize: VkDeviceSize,
    pub maxSequenceCount: u32,
    pub sequenceCountAddress: VkDeviceAddress,
    pub maxDrawCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsInfoEXT"]
        [::std::mem::size_of::<VkGeneratedCommandsInfoEXT>() - 96usize];
    ["Alignment of VkGeneratedCommandsInfoEXT"]
        [::std::mem::align_of::<VkGeneratedCommandsInfoEXT>() - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::sType"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::pNext"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, pNext) - 8usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::shaderStages"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, shaderStages) - 16usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectExecutionSet"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectExecutionSet) - 24usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectCommandsLayout"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectCommandsLayout) - 32usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectAddress"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectAddress) - 40usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::indirectAddressSize"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, indirectAddressSize) - 48usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::preprocessAddress"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, preprocessAddress) - 56usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::preprocessSize"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, preprocessSize) - 64usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::maxSequenceCount"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, maxSequenceCount) - 72usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::sequenceCountAddress"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, sequenceCountAddress) - 80usize];
    ["Offset of field: VkGeneratedCommandsInfoEXT::maxDrawCount"]
        [::std::mem::offset_of!(VkGeneratedCommandsInfoEXT, maxDrawCount) - 88usize];
};
impl Default for VkGeneratedCommandsInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteIndirectExecutionSetPipelineEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub index: u32,
    pub pipeline: VkPipeline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteIndirectExecutionSetPipelineEXT"]
        [::std::mem::size_of::<VkWriteIndirectExecutionSetPipelineEXT>() - 32usize];
    ["Alignment of VkWriteIndirectExecutionSetPipelineEXT"]
        [::std::mem::align_of::<VkWriteIndirectExecutionSetPipelineEXT>() - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::sType"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, sType) - 0usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::pNext"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, pNext) - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::index"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, index) - 16usize];
    ["Offset of field: VkWriteIndirectExecutionSetPipelineEXT::pipeline"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetPipelineEXT, pipeline) - 24usize];
};
impl Default for VkWriteIndirectExecutionSetPipelineEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkIndirectCommandsPushConstantTokenEXT {
    pub updateRange: VkPushConstantRange,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsPushConstantTokenEXT"]
        [::std::mem::size_of::<VkIndirectCommandsPushConstantTokenEXT>() - 12usize];
    ["Alignment of VkIndirectCommandsPushConstantTokenEXT"]
        [::std::mem::align_of::<VkIndirectCommandsPushConstantTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsPushConstantTokenEXT::updateRange"]
        [::std::mem::offset_of!(VkIndirectCommandsPushConstantTokenEXT, updateRange) - 0usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkIndirectCommandsVertexBufferTokenEXT {
    pub vertexBindingUnit: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsVertexBufferTokenEXT"]
        [::std::mem::size_of::<VkIndirectCommandsVertexBufferTokenEXT>() - 4usize];
    ["Alignment of VkIndirectCommandsVertexBufferTokenEXT"]
        [::std::mem::align_of::<VkIndirectCommandsVertexBufferTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsVertexBufferTokenEXT::vertexBindingUnit"][::std::mem::offset_of!(
        VkIndirectCommandsVertexBufferTokenEXT,
        vertexBindingUnit
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsIndexBufferTokenEXT {
    pub mode: VkIndirectCommandsInputModeFlagBitsEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsIndexBufferTokenEXT"]
        [::std::mem::size_of::<VkIndirectCommandsIndexBufferTokenEXT>() - 4usize];
    ["Alignment of VkIndirectCommandsIndexBufferTokenEXT"]
        [::std::mem::align_of::<VkIndirectCommandsIndexBufferTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsIndexBufferTokenEXT::mode"]
        [::std::mem::offset_of!(VkIndirectCommandsIndexBufferTokenEXT, mode) - 0usize];
};
impl Default for VkIndirectCommandsIndexBufferTokenEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsExecutionSetTokenEXT {
    pub type_: VkIndirectExecutionSetInfoTypeEXT,
    pub shaderStages: VkShaderStageFlags,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsExecutionSetTokenEXT"]
        [::std::mem::size_of::<VkIndirectCommandsExecutionSetTokenEXT>() - 8usize];
    ["Alignment of VkIndirectCommandsExecutionSetTokenEXT"]
        [::std::mem::align_of::<VkIndirectCommandsExecutionSetTokenEXT>() - 4usize];
    ["Offset of field: VkIndirectCommandsExecutionSetTokenEXT::type_"]
        [::std::mem::offset_of!(VkIndirectCommandsExecutionSetTokenEXT, type_) - 0usize];
    ["Offset of field: VkIndirectCommandsExecutionSetTokenEXT::shaderStages"]
        [::std::mem::offset_of!(VkIndirectCommandsExecutionSetTokenEXT, shaderStages) - 4usize];
};
impl Default for VkIndirectCommandsExecutionSetTokenEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkIndirectCommandsTokenDataEXT {
    pub pPushConstant: *const VkIndirectCommandsPushConstantTokenEXT,
    pub pVertexBuffer: *const VkIndirectCommandsVertexBufferTokenEXT,
    pub pIndexBuffer: *const VkIndirectCommandsIndexBufferTokenEXT,
    pub pExecutionSet: *const VkIndirectCommandsExecutionSetTokenEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsTokenDataEXT"]
        [::std::mem::size_of::<VkIndirectCommandsTokenDataEXT>() - 8usize];
    ["Alignment of VkIndirectCommandsTokenDataEXT"]
        [::std::mem::align_of::<VkIndirectCommandsTokenDataEXT>() - 8usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pPushConstant"]
        [::std::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pPushConstant) - 0usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pVertexBuffer"]
        [::std::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pVertexBuffer) - 0usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pIndexBuffer"]
        [::std::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pIndexBuffer) - 0usize];
    ["Offset of field: VkIndirectCommandsTokenDataEXT::pExecutionSet"]
        [::std::mem::offset_of!(VkIndirectCommandsTokenDataEXT, pExecutionSet) - 0usize];
};
impl Default for VkIndirectCommandsTokenDataEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutTokenEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkIndirectCommandsTokenTypeEXT,
    pub data: VkIndirectCommandsTokenDataEXT,
    pub offset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutTokenEXT"]
        [::std::mem::size_of::<VkIndirectCommandsLayoutTokenEXT>() - 40usize];
    ["Alignment of VkIndirectCommandsLayoutTokenEXT"]
        [::std::mem::align_of::<VkIndirectCommandsLayoutTokenEXT>() - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::sType"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::pNext"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, pNext) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::type_"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, type_) - 16usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::data"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, data) - 24usize];
    ["Offset of field: VkIndirectCommandsLayoutTokenEXT::offset"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutTokenEXT, offset) - 32usize];
};
impl Default for VkIndirectCommandsLayoutTokenEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkIndirectCommandsLayoutCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkIndirectCommandsLayoutUsageFlagsEXT,
    pub shaderStages: VkShaderStageFlags,
    pub indirectStride: u32,
    pub pipelineLayout: VkPipelineLayout,
    pub tokenCount: u32,
    pub pTokens: *const VkIndirectCommandsLayoutTokenEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkIndirectCommandsLayoutCreateInfoEXT"]
        [::std::mem::size_of::<VkIndirectCommandsLayoutCreateInfoEXT>() - 56usize];
    ["Alignment of VkIndirectCommandsLayoutCreateInfoEXT"]
        [::std::mem::align_of::<VkIndirectCommandsLayoutCreateInfoEXT>() - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::flags"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, flags) - 16usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::shaderStages"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, shaderStages) - 20usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::indirectStride"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, indirectStride) - 24usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::pipelineLayout"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, pipelineLayout) - 32usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::tokenCount"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, tokenCount) - 40usize];
    ["Offset of field: VkIndirectCommandsLayoutCreateInfoEXT::pTokens"]
        [::std::mem::offset_of!(VkIndirectCommandsLayoutCreateInfoEXT, pTokens) - 48usize];
};
impl Default for VkIndirectCommandsLayoutCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawIndirectCountIndirectCommandEXT {
    pub bufferAddress: VkDeviceAddress,
    pub stride: u32,
    pub commandCount: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawIndirectCountIndirectCommandEXT"]
        [::std::mem::size_of::<VkDrawIndirectCountIndirectCommandEXT>() - 16usize];
    ["Alignment of VkDrawIndirectCountIndirectCommandEXT"]
        [::std::mem::align_of::<VkDrawIndirectCountIndirectCommandEXT>() - 8usize];
    ["Offset of field: VkDrawIndirectCountIndirectCommandEXT::bufferAddress"]
        [::std::mem::offset_of!(VkDrawIndirectCountIndirectCommandEXT, bufferAddress) - 0usize];
    ["Offset of field: VkDrawIndirectCountIndirectCommandEXT::stride"]
        [::std::mem::offset_of!(VkDrawIndirectCountIndirectCommandEXT, stride) - 8usize];
    ["Offset of field: VkDrawIndirectCountIndirectCommandEXT::commandCount"]
        [::std::mem::offset_of!(VkDrawIndirectCountIndirectCommandEXT, commandCount) - 12usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkBindVertexBufferIndirectCommandEXT {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub stride: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindVertexBufferIndirectCommandEXT"]
        [::std::mem::size_of::<VkBindVertexBufferIndirectCommandEXT>() - 16usize];
    ["Alignment of VkBindVertexBufferIndirectCommandEXT"]
        [::std::mem::align_of::<VkBindVertexBufferIndirectCommandEXT>() - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandEXT::bufferAddress"]
        [::std::mem::offset_of!(VkBindVertexBufferIndirectCommandEXT, bufferAddress) - 0usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandEXT::size"]
        [::std::mem::offset_of!(VkBindVertexBufferIndirectCommandEXT, size) - 8usize];
    ["Offset of field: VkBindVertexBufferIndirectCommandEXT::stride"]
        [::std::mem::offset_of!(VkBindVertexBufferIndirectCommandEXT, stride) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkBindIndexBufferIndirectCommandEXT {
    pub bufferAddress: VkDeviceAddress,
    pub size: u32,
    pub indexType: VkIndexType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkBindIndexBufferIndirectCommandEXT"]
        [::std::mem::size_of::<VkBindIndexBufferIndirectCommandEXT>() - 16usize];
    ["Alignment of VkBindIndexBufferIndirectCommandEXT"]
        [::std::mem::align_of::<VkBindIndexBufferIndirectCommandEXT>() - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandEXT::bufferAddress"]
        [::std::mem::offset_of!(VkBindIndexBufferIndirectCommandEXT, bufferAddress) - 0usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandEXT::size"]
        [::std::mem::offset_of!(VkBindIndexBufferIndirectCommandEXT, size) - 8usize];
    ["Offset of field: VkBindIndexBufferIndirectCommandEXT::indexType"]
        [::std::mem::offset_of!(VkBindIndexBufferIndirectCommandEXT, indexType) - 12usize];
};
impl Default for VkBindIndexBufferIndirectCommandEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsPipelineInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipeline: VkPipeline,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsPipelineInfoEXT"]
        [::std::mem::size_of::<VkGeneratedCommandsPipelineInfoEXT>() - 24usize];
    ["Alignment of VkGeneratedCommandsPipelineInfoEXT"]
        [::std::mem::align_of::<VkGeneratedCommandsPipelineInfoEXT>() - 8usize];
    ["Offset of field: VkGeneratedCommandsPipelineInfoEXT::sType"]
        [::std::mem::offset_of!(VkGeneratedCommandsPipelineInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsPipelineInfoEXT::pNext"]
        [::std::mem::offset_of!(VkGeneratedCommandsPipelineInfoEXT, pNext) - 8usize];
    ["Offset of field: VkGeneratedCommandsPipelineInfoEXT::pipeline"]
        [::std::mem::offset_of!(VkGeneratedCommandsPipelineInfoEXT, pipeline) - 16usize];
};
impl Default for VkGeneratedCommandsPipelineInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkGeneratedCommandsShaderInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderCount: u32,
    pub pShaders: *const VkShaderEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkGeneratedCommandsShaderInfoEXT"]
        [::std::mem::size_of::<VkGeneratedCommandsShaderInfoEXT>() - 32usize];
    ["Alignment of VkGeneratedCommandsShaderInfoEXT"]
        [::std::mem::align_of::<VkGeneratedCommandsShaderInfoEXT>() - 8usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::sType"]
        [::std::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, sType) - 0usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::pNext"]
        [::std::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, pNext) - 8usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::shaderCount"]
        [::std::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, shaderCount) - 16usize];
    ["Offset of field: VkGeneratedCommandsShaderInfoEXT::pShaders"]
        [::std::mem::offset_of!(VkGeneratedCommandsShaderInfoEXT, pShaders) - 24usize];
};
impl Default for VkGeneratedCommandsShaderInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteIndirectExecutionSetShaderEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub index: u32,
    pub shader: VkShaderEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteIndirectExecutionSetShaderEXT"]
        [::std::mem::size_of::<VkWriteIndirectExecutionSetShaderEXT>() - 32usize];
    ["Alignment of VkWriteIndirectExecutionSetShaderEXT"]
        [::std::mem::align_of::<VkWriteIndirectExecutionSetShaderEXT>() - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::sType"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, sType) - 0usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::pNext"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, pNext) - 8usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::index"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, index) - 16usize];
    ["Offset of field: VkWriteIndirectExecutionSetShaderEXT::shader"]
        [::std::mem::offset_of!(VkWriteIndirectExecutionSetShaderEXT, shader) - 24usize];
};
impl Default for VkWriteIndirectExecutionSetShaderEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetGeneratedCommandsMemoryRequirementsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoEXT,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    ),
>;
pub type PFN_vkCmdPreprocessGeneratedCommandsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoEXT,
        stateCommandBuffer: VkCommandBuffer,
    ),
>;
pub type PFN_vkCmdExecuteGeneratedCommandsEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoEXT,
    ),
>;
pub type PFN_vkCreateIndirectCommandsLayoutEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectCommandsLayoutEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCreateIndirectExecutionSetEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkIndirectExecutionSetCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectExecutionSet: *mut VkIndirectExecutionSetEXT,
    ) -> VkResult,
>;
pub type PFN_vkDestroyIndirectExecutionSetEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkUpdateIndirectExecutionSetPipelineEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        executionSetWriteCount: u32,
        pExecutionSetWrites: *const VkWriteIndirectExecutionSetPipelineEXT,
    ),
>;
pub type PFN_vkUpdateIndirectExecutionSetShaderEXT = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        executionSetWriteCount: u32,
        pExecutionSetWrites: *const VkWriteIndirectExecutionSetShaderEXT,
    ),
>;
unsafe extern "system" {
    pub fn vkGetGeneratedCommandsMemoryRequirementsEXT(
        device: VkDevice,
        pInfo: *const VkGeneratedCommandsMemoryRequirementsInfoEXT,
        pMemoryRequirements: *mut VkMemoryRequirements2,
    );
}
unsafe extern "system" {
    pub fn vkCmdPreprocessGeneratedCommandsEXT(
        commandBuffer: VkCommandBuffer,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoEXT,
        stateCommandBuffer: VkCommandBuffer,
    );
}
unsafe extern "system" {
    pub fn vkCmdExecuteGeneratedCommandsEXT(
        commandBuffer: VkCommandBuffer,
        isPreprocessed: VkBool32,
        pGeneratedCommandsInfo: *const VkGeneratedCommandsInfoEXT,
    );
}
unsafe extern "system" {
    pub fn vkCreateIndirectCommandsLayoutEXT(
        device: VkDevice,
        pCreateInfo: *const VkIndirectCommandsLayoutCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyIndirectCommandsLayoutEXT(
        device: VkDevice,
        indirectCommandsLayout: VkIndirectCommandsLayoutEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCreateIndirectExecutionSetEXT(
        device: VkDevice,
        pCreateInfo: *const VkIndirectExecutionSetCreateInfoEXT,
        pAllocator: *const VkAllocationCallbacks,
        pIndirectExecutionSet: *mut VkIndirectExecutionSetEXT,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyIndirectExecutionSetEXT(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkUpdateIndirectExecutionSetPipelineEXT(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        executionSetWriteCount: u32,
        pExecutionSetWrites: *const VkWriteIndirectExecutionSetPipelineEXT,
    );
}
unsafe extern "system" {
    pub fn vkUpdateIndirectExecutionSetShaderEXT(
        device: VkDevice,
        indirectExecutionSet: VkIndirectExecutionSetEXT,
        executionSetWriteCount: u32,
        pExecutionSetWrites: *const VkWriteIndirectExecutionSetShaderEXT,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageAlignmentControlFeaturesMESA {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub imageAlignmentControl: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageAlignmentControlFeaturesMESA"]
        [::std::mem::size_of::<VkPhysicalDeviceImageAlignmentControlFeaturesMESA>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageAlignmentControlFeaturesMESA"]
        [::std::mem::align_of::<VkPhysicalDeviceImageAlignmentControlFeaturesMESA>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlFeaturesMESA::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageAlignmentControlFeaturesMESA, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlFeaturesMESA::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceImageAlignmentControlFeaturesMESA, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlFeaturesMESA::imageAlignmentControl"][::std::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlFeaturesMESA,
        imageAlignmentControl
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceImageAlignmentControlFeaturesMESA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceImageAlignmentControlPropertiesMESA {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub supportedImageAlignmentMask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceImageAlignmentControlPropertiesMESA"]
        [::std::mem::size_of::<VkPhysicalDeviceImageAlignmentControlPropertiesMESA>() - 24usize];
    ["Alignment of VkPhysicalDeviceImageAlignmentControlPropertiesMESA"]
        [::std::mem::align_of::<VkPhysicalDeviceImageAlignmentControlPropertiesMESA>() - 8usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlPropertiesMESA::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlPropertiesMESA,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlPropertiesMESA::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceImageAlignmentControlPropertiesMESA,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceImageAlignmentControlPropertiesMESA::supportedImageAlignmentMask"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceImageAlignmentControlPropertiesMESA , supportedImageAlignmentMask) - 16usize] ;
};
impl Default for VkPhysicalDeviceImageAlignmentControlPropertiesMESA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkImageAlignmentControlCreateInfoMESA {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maximumRequestedAlignment: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkImageAlignmentControlCreateInfoMESA"]
        [::std::mem::size_of::<VkImageAlignmentControlCreateInfoMESA>() - 24usize];
    ["Alignment of VkImageAlignmentControlCreateInfoMESA"]
        [::std::mem::align_of::<VkImageAlignmentControlCreateInfoMESA>() - 8usize];
    ["Offset of field: VkImageAlignmentControlCreateInfoMESA::sType"]
        [::std::mem::offset_of!(VkImageAlignmentControlCreateInfoMESA, sType) - 0usize];
    ["Offset of field: VkImageAlignmentControlCreateInfoMESA::pNext"]
        [::std::mem::offset_of!(VkImageAlignmentControlCreateInfoMESA, pNext) - 8usize];
    ["Offset of field: VkImageAlignmentControlCreateInfoMESA::maximumRequestedAlignment"][::std::mem::offset_of!(
        VkImageAlignmentControlCreateInfoMESA,
        maximumRequestedAlignment
    )
        - 16usize];
};
impl Default for VkImageAlignmentControlCreateInfoMESA {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceDepthClampControlFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub depthClampControl: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceDepthClampControlFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceDepthClampControlFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceDepthClampControlFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceDepthClampControlFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClampControlFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClampControlFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceDepthClampControlFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceDepthClampControlFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceDepthClampControlFeaturesEXT::depthClampControl"][::std::mem::offset_of!(
        VkPhysicalDeviceDepthClampControlFeaturesEXT,
        depthClampControl
    )
        - 16usize];
};
impl Default for VkPhysicalDeviceDepthClampControlFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPipelineViewportDepthClampControlCreateInfoEXT {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub depthClampMode: VkDepthClampModeEXT,
    pub pDepthClampRange: *const VkDepthClampRangeEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPipelineViewportDepthClampControlCreateInfoEXT"]
        [::std::mem::size_of::<VkPipelineViewportDepthClampControlCreateInfoEXT>() - 32usize];
    ["Alignment of VkPipelineViewportDepthClampControlCreateInfoEXT"]
        [::std::mem::align_of::<VkPipelineViewportDepthClampControlCreateInfoEXT>() - 8usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::sType"]
        [::std::mem::offset_of!(VkPipelineViewportDepthClampControlCreateInfoEXT, sType) - 0usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::pNext"]
        [::std::mem::offset_of!(VkPipelineViewportDepthClampControlCreateInfoEXT, pNext) - 8usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::depthClampMode"][::std::mem::offset_of!(
        VkPipelineViewportDepthClampControlCreateInfoEXT,
        depthClampMode
    )
        - 16usize];
    ["Offset of field: VkPipelineViewportDepthClampControlCreateInfoEXT::pDepthClampRange"][::std::mem::offset_of!(
        VkPipelineViewportDepthClampControlCreateInfoEXT,
        pDepthClampRange
    )
        - 24usize];
};
impl Default for VkPipelineViewportDepthClampControlCreateInfoEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceHdrVividFeaturesHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub hdrVivid: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceHdrVividFeaturesHUAWEI"]
        [::std::mem::size_of::<VkPhysicalDeviceHdrVividFeaturesHUAWEI>() - 24usize];
    ["Alignment of VkPhysicalDeviceHdrVividFeaturesHUAWEI"]
        [::std::mem::align_of::<VkPhysicalDeviceHdrVividFeaturesHUAWEI>() - 8usize];
    ["Offset of field: VkPhysicalDeviceHdrVividFeaturesHUAWEI::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceHdrVividFeaturesHUAWEI, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceHdrVividFeaturesHUAWEI::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceHdrVividFeaturesHUAWEI, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceHdrVividFeaturesHUAWEI::hdrVivid"]
        [::std::mem::offset_of!(VkPhysicalDeviceHdrVividFeaturesHUAWEI, hdrVivid) - 16usize];
};
impl Default for VkPhysicalDeviceHdrVividFeaturesHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkHdrVividDynamicMetadataHUAWEI {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub dynamicMetadataSize: usize,
    pub pDynamicMetadata: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkHdrVividDynamicMetadataHUAWEI"]
        [::std::mem::size_of::<VkHdrVividDynamicMetadataHUAWEI>() - 32usize];
    ["Alignment of VkHdrVividDynamicMetadataHUAWEI"]
        [::std::mem::align_of::<VkHdrVividDynamicMetadataHUAWEI>() - 8usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::sType"]
        [::std::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, sType) - 0usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::pNext"]
        [::std::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, pNext) - 8usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::dynamicMetadataSize"]
        [::std::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, dynamicMetadataSize) - 16usize];
    ["Offset of field: VkHdrVividDynamicMetadataHUAWEI::pDynamicMetadata"]
        [::std::mem::offset_of!(VkHdrVividDynamicMetadataHUAWEI, pDynamicMetadata) - 24usize];
};
impl Default for VkHdrVividDynamicMetadataHUAWEI {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCooperativeMatrixFlexibleDimensionsPropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub MGranularity: u32,
    pub NGranularity: u32,
    pub KGranularity: u32,
    pub AType: VkComponentTypeKHR,
    pub BType: VkComponentTypeKHR,
    pub CType: VkComponentTypeKHR,
    pub ResultType: VkComponentTypeKHR,
    pub saturatingAccumulation: VkBool32,
    pub scope: VkScopeKHR,
    pub workgroupInvocations: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCooperativeMatrixFlexibleDimensionsPropertiesNV"]
        [::std::mem::size_of::<VkCooperativeMatrixFlexibleDimensionsPropertiesNV>() - 56usize];
    ["Alignment of VkCooperativeMatrixFlexibleDimensionsPropertiesNV"]
        [::std::mem::align_of::<VkCooperativeMatrixFlexibleDimensionsPropertiesNV>() - 8usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::sType"]
        [::std::mem::offset_of!(VkCooperativeMatrixFlexibleDimensionsPropertiesNV, sType) - 0usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::pNext"]
        [::std::mem::offset_of!(VkCooperativeMatrixFlexibleDimensionsPropertiesNV, pNext) - 8usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::MGranularity"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        MGranularity
    )
        - 16usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::NGranularity"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        NGranularity
    )
        - 20usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::KGranularity"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        KGranularity
    )
        - 24usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::AType"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        AType
    ) - 28usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::BType"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        BType
    ) - 32usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::CType"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        CType
    ) - 36usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::ResultType"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        ResultType
    ) - 40usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::saturatingAccumulation"] [:: std :: mem :: offset_of ! (VkCooperativeMatrixFlexibleDimensionsPropertiesNV , saturatingAccumulation) - 44usize] ;
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::scope"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        scope
    ) - 48usize];
    ["Offset of field: VkCooperativeMatrixFlexibleDimensionsPropertiesNV::workgroupInvocations"][::std::mem::offset_of!(
        VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        workgroupInvocations
    )
        - 52usize];
};
impl Default for VkCooperativeMatrixFlexibleDimensionsPropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrix2FeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrixWorkgroupScope: VkBool32,
    pub cooperativeMatrixFlexibleDimensions: VkBool32,
    pub cooperativeMatrixReductions: VkBool32,
    pub cooperativeMatrixConversions: VkBool32,
    pub cooperativeMatrixPerElementOperations: VkBool32,
    pub cooperativeMatrixTensorAddressing: VkBool32,
    pub cooperativeMatrixBlockLoads: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrix2FeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrix2FeaturesNV>() - 48usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrix2FeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrix2FeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2FeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2FeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixWorkgroupScope"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixWorkgroupScope) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixFlexibleDimensions"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixFlexibleDimensions) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixReductions"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixReductions) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixConversions"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixConversions) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixPerElementOperations"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixPerElementOperations) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixTensorAddressing"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixTensorAddressing) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2FeaturesNV::cooperativeMatrixBlockLoads"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2FeaturesNV , cooperativeMatrixBlockLoads) - 40usize] ;
};
impl Default for VkPhysicalDeviceCooperativeMatrix2FeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceCooperativeMatrix2PropertiesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub cooperativeMatrixWorkgroupScopeMaxWorkgroupSize: u32,
    pub cooperativeMatrixFlexibleDimensionsMaxDimension: u32,
    pub cooperativeMatrixWorkgroupScopeReservedSharedMemory: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceCooperativeMatrix2PropertiesNV"]
        [::std::mem::size_of::<VkPhysicalDeviceCooperativeMatrix2PropertiesNV>() - 32usize];
    ["Alignment of VkPhysicalDeviceCooperativeMatrix2PropertiesNV"]
        [::std::mem::align_of::<VkPhysicalDeviceCooperativeMatrix2PropertiesNV>() - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2PropertiesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceCooperativeMatrix2PropertiesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::cooperativeMatrixWorkgroupScopeMaxWorkgroupSize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2PropertiesNV , cooperativeMatrixWorkgroupScopeMaxWorkgroupSize) - 16usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::cooperativeMatrixFlexibleDimensionsMaxDimension"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2PropertiesNV , cooperativeMatrixFlexibleDimensionsMaxDimension) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceCooperativeMatrix2PropertiesNV::cooperativeMatrixWorkgroupScopeReservedSharedMemory"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceCooperativeMatrix2PropertiesNV , cooperativeMatrixWorkgroupScopeReservedSharedMemory) - 24usize] ;
};
impl Default for VkPhysicalDeviceCooperativeMatrix2PropertiesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV =
    ::std::option::Option<
        unsafe extern "system" fn(
            physicalDevice: VkPhysicalDevice,
            pPropertyCount: *mut u32,
            pProperties: *mut VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
        ) -> VkResult,
    >;
unsafe extern "system" {
    pub fn vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(
        physicalDevice: VkPhysicalDevice,
        pPropertyCount: *mut u32,
        pProperties: *mut VkCooperativeMatrixFlexibleDimensionsPropertiesNV,
    ) -> VkResult;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePipelineOpacityMicromapFeaturesARM {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub pipelineOpacityMicromap: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePipelineOpacityMicromapFeaturesARM"]
        [::std::mem::size_of::<VkPhysicalDevicePipelineOpacityMicromapFeaturesARM>() - 24usize];
    ["Alignment of VkPhysicalDevicePipelineOpacityMicromapFeaturesARM"]
        [::std::mem::align_of::<VkPhysicalDevicePipelineOpacityMicromapFeaturesARM>() - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineOpacityMicromapFeaturesARM::sType"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineOpacityMicromapFeaturesARM,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDevicePipelineOpacityMicromapFeaturesARM::pNext"][::std::mem::offset_of!(
        VkPhysicalDevicePipelineOpacityMicromapFeaturesARM,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDevicePipelineOpacityMicromapFeaturesARM::pipelineOpacityMicromap"] [:: std :: mem :: offset_of ! (VkPhysicalDevicePipelineOpacityMicromapFeaturesARM , pipelineOpacityMicromap) - 16usize] ;
};
impl Default for VkPhysicalDevicePipelineOpacityMicromapFeaturesARM {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub vertexAttributeRobustness: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT>() - 24usize];
    ["Alignment of VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT::vertexAttributeRobustness"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT , vertexAttributeRobustness) - 16usize] ;
};
impl Default for VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkSetPresentConfigNV {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub numFramesPerBatch: u32,
    pub presentConfigFeedback: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkSetPresentConfigNV"][::std::mem::size_of::<VkSetPresentConfigNV>() - 24usize];
    ["Alignment of VkSetPresentConfigNV"][::std::mem::align_of::<VkSetPresentConfigNV>() - 8usize];
    ["Offset of field: VkSetPresentConfigNV::sType"]
        [::std::mem::offset_of!(VkSetPresentConfigNV, sType) - 0usize];
    ["Offset of field: VkSetPresentConfigNV::pNext"]
        [::std::mem::offset_of!(VkSetPresentConfigNV, pNext) - 8usize];
    ["Offset of field: VkSetPresentConfigNV::numFramesPerBatch"]
        [::std::mem::offset_of!(VkSetPresentConfigNV, numFramesPerBatch) - 16usize];
    ["Offset of field: VkSetPresentConfigNV::presentConfigFeedback"]
        [::std::mem::offset_of!(VkSetPresentConfigNV, presentConfigFeedback) - 20usize];
};
impl Default for VkSetPresentConfigNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDevicePresentMeteringFeaturesNV {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub presentMetering: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDevicePresentMeteringFeaturesNV"]
        [::std::mem::size_of::<VkPhysicalDevicePresentMeteringFeaturesNV>() - 24usize];
    ["Alignment of VkPhysicalDevicePresentMeteringFeaturesNV"]
        [::std::mem::align_of::<VkPhysicalDevicePresentMeteringFeaturesNV>() - 8usize];
    ["Offset of field: VkPhysicalDevicePresentMeteringFeaturesNV::sType"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentMeteringFeaturesNV, sType) - 0usize];
    ["Offset of field: VkPhysicalDevicePresentMeteringFeaturesNV::pNext"]
        [::std::mem::offset_of!(VkPhysicalDevicePresentMeteringFeaturesNV, pNext) - 8usize];
    ["Offset of field: VkPhysicalDevicePresentMeteringFeaturesNV::presentMetering"][::std::mem::offset_of!(
        VkPhysicalDevicePresentMeteringFeaturesNV,
        presentMetering
    ) - 16usize];
};
impl Default for VkPhysicalDevicePresentMeteringFeaturesNV {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const VkBuildAccelerationStructureModeKHR_VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR:
    VkBuildAccelerationStructureModeKHR = 0;
pub const VkBuildAccelerationStructureModeKHR_VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR:
    VkBuildAccelerationStructureModeKHR = 1;
pub const VkBuildAccelerationStructureModeKHR_VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR:
    VkBuildAccelerationStructureModeKHR = 2147483647;
pub type VkBuildAccelerationStructureModeKHR = ::std::os::raw::c_uint;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR : VkAccelerationStructureCreateFlagBitsKHR = 1 ;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT : VkAccelerationStructureCreateFlagBitsKHR = 8 ;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV : VkAccelerationStructureCreateFlagBitsKHR = 4 ;
pub const VkAccelerationStructureCreateFlagBitsKHR_VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR : VkAccelerationStructureCreateFlagBitsKHR = 2147483647 ;
pub type VkAccelerationStructureCreateFlagBitsKHR = ::std::os::raw::c_uint;
pub type VkAccelerationStructureCreateFlagsKHR = VkFlags;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkAccelerationStructureBuildRangeInfoKHR {
    pub primitiveCount: u32,
    pub primitiveOffset: u32,
    pub firstVertex: u32,
    pub transformOffset: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureBuildRangeInfoKHR"]
        [::std::mem::size_of::<VkAccelerationStructureBuildRangeInfoKHR>() - 16usize];
    ["Alignment of VkAccelerationStructureBuildRangeInfoKHR"]
        [::std::mem::align_of::<VkAccelerationStructureBuildRangeInfoKHR>() - 4usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::primitiveCount"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildRangeInfoKHR, primitiveCount) - 0usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::primitiveOffset"][::std::mem::offset_of!(
        VkAccelerationStructureBuildRangeInfoKHR,
        primitiveOffset
    ) - 4usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::firstVertex"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildRangeInfoKHR, firstVertex) - 8usize];
    ["Offset of field: VkAccelerationStructureBuildRangeInfoKHR::transformOffset"][::std::mem::offset_of!(
        VkAccelerationStructureBuildRangeInfoKHR,
        transformOffset
    ) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryTrianglesDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub vertexFormat: VkFormat,
    pub vertexData: VkDeviceOrHostAddressConstKHR,
    pub vertexStride: VkDeviceSize,
    pub maxVertex: u32,
    pub indexType: VkIndexType,
    pub indexData: VkDeviceOrHostAddressConstKHR,
    pub transformData: VkDeviceOrHostAddressConstKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryTrianglesDataKHR"]
        [::std::mem::size_of::<VkAccelerationStructureGeometryTrianglesDataKHR>() - 64usize];
    ["Alignment of VkAccelerationStructureGeometryTrianglesDataKHR"]
        [::std::mem::align_of::<VkAccelerationStructureGeometryTrianglesDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryTrianglesDataKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryTrianglesDataKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::vertexFormat"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        vertexFormat
    ) - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::vertexData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        vertexData
    ) - 24usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::vertexStride"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        vertexStride
    ) - 32usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::maxVertex"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        maxVertex
    ) - 40usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::indexType"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        indexType
    ) - 44usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::indexData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        indexData
    ) - 48usize];
    ["Offset of field: VkAccelerationStructureGeometryTrianglesDataKHR::transformData"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryTrianglesDataKHR,
        transformData
    )
        - 56usize];
};
impl Default for VkAccelerationStructureGeometryTrianglesDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryAabbsDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub data: VkDeviceOrHostAddressConstKHR,
    pub stride: VkDeviceSize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryAabbsDataKHR"]
        [::std::mem::size_of::<VkAccelerationStructureGeometryAabbsDataKHR>() - 32usize];
    ["Alignment of VkAccelerationStructureGeometryAabbsDataKHR"]
        [::std::mem::align_of::<VkAccelerationStructureGeometryAabbsDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::data"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, data) - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryAabbsDataKHR::stride"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryAabbsDataKHR, stride) - 24usize];
};
impl Default for VkAccelerationStructureGeometryAabbsDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryInstancesDataKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub arrayOfPointers: VkBool32,
    pub data: VkDeviceOrHostAddressConstKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryInstancesDataKHR"]
        [::std::mem::size_of::<VkAccelerationStructureGeometryInstancesDataKHR>() - 32usize];
    ["Alignment of VkAccelerationStructureGeometryInstancesDataKHR"]
        [::std::mem::align_of::<VkAccelerationStructureGeometryInstancesDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryInstancesDataKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryInstancesDataKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::arrayOfPointers"][::std::mem::offset_of!(
        VkAccelerationStructureGeometryInstancesDataKHR,
        arrayOfPointers
    )
        - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryInstancesDataKHR::data"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryInstancesDataKHR, data) - 24usize];
};
impl Default for VkAccelerationStructureGeometryInstancesDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VkAccelerationStructureGeometryDataKHR {
    pub triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
    pub aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
    pub instances: VkAccelerationStructureGeometryInstancesDataKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryDataKHR"]
        [::std::mem::size_of::<VkAccelerationStructureGeometryDataKHR>() - 64usize];
    ["Alignment of VkAccelerationStructureGeometryDataKHR"]
        [::std::mem::align_of::<VkAccelerationStructureGeometryDataKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryDataKHR::triangles"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryDataKHR, triangles) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryDataKHR::aabbs"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryDataKHR, aabbs) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryDataKHR::instances"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryDataKHR, instances) - 0usize];
};
impl Default for VkAccelerationStructureGeometryDataKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureGeometryKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub geometryType: VkGeometryTypeKHR,
    pub geometry: VkAccelerationStructureGeometryDataKHR,
    pub flags: VkGeometryFlagsKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureGeometryKHR"]
        [::std::mem::size_of::<VkAccelerationStructureGeometryKHR>() - 96usize];
    ["Alignment of VkAccelerationStructureGeometryKHR"]
        [::std::mem::align_of::<VkAccelerationStructureGeometryKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::geometryType"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryKHR, geometryType) - 16usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::geometry"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryKHR, geometry) - 24usize];
    ["Offset of field: VkAccelerationStructureGeometryKHR::flags"]
        [::std::mem::offset_of!(VkAccelerationStructureGeometryKHR, flags) - 88usize];
};
impl Default for VkAccelerationStructureGeometryKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureBuildGeometryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkAccelerationStructureTypeKHR,
    pub flags: VkBuildAccelerationStructureFlagsKHR,
    pub mode: VkBuildAccelerationStructureModeKHR,
    pub srcAccelerationStructure: VkAccelerationStructureKHR,
    pub dstAccelerationStructure: VkAccelerationStructureKHR,
    pub geometryCount: u32,
    pub pGeometries: *const VkAccelerationStructureGeometryKHR,
    pub ppGeometries: *const *const VkAccelerationStructureGeometryKHR,
    pub scratchData: VkDeviceOrHostAddressKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureBuildGeometryInfoKHR"]
        [::std::mem::size_of::<VkAccelerationStructureBuildGeometryInfoKHR>() - 80usize];
    ["Alignment of VkAccelerationStructureBuildGeometryInfoKHR"]
        [::std::mem::align_of::<VkAccelerationStructureBuildGeometryInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::type_"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, type_) - 16usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::flags"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, flags) - 20usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::mode"]
        [::std::mem::offset_of!(VkAccelerationStructureBuildGeometryInfoKHR, mode) - 24usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::srcAccelerationStructure"][::std::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        srcAccelerationStructure
    )
        - 32usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::dstAccelerationStructure"][::std::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        dstAccelerationStructure
    )
        - 40usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::geometryCount"][::std::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        geometryCount
    ) - 48usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::pGeometries"][::std::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        pGeometries
    ) - 56usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::ppGeometries"][::std::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        ppGeometries
    ) - 64usize];
    ["Offset of field: VkAccelerationStructureBuildGeometryInfoKHR::scratchData"][::std::mem::offset_of!(
        VkAccelerationStructureBuildGeometryInfoKHR,
        scratchData
    ) - 72usize];
};
impl Default for VkAccelerationStructureBuildGeometryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub createFlags: VkAccelerationStructureCreateFlagsKHR,
    pub buffer: VkBuffer,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub type_: VkAccelerationStructureTypeKHR,
    pub deviceAddress: VkDeviceAddress,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureCreateInfoKHR"]
        [::std::mem::size_of::<VkAccelerationStructureCreateInfoKHR>() - 64usize];
    ["Alignment of VkAccelerationStructureCreateInfoKHR"]
        [::std::mem::align_of::<VkAccelerationStructureCreateInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::createFlags"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, createFlags) - 16usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::buffer"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, buffer) - 24usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::offset"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, offset) - 32usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::size"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, size) - 40usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::type_"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, type_) - 48usize];
    ["Offset of field: VkAccelerationStructureCreateInfoKHR::deviceAddress"]
        [::std::mem::offset_of!(VkAccelerationStructureCreateInfoKHR, deviceAddress) - 56usize];
};
impl Default for VkAccelerationStructureCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkWriteDescriptorSetAccelerationStructureKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructureCount: u32,
    pub pAccelerationStructures: *const VkAccelerationStructureKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkWriteDescriptorSetAccelerationStructureKHR"]
        [::std::mem::size_of::<VkWriteDescriptorSetAccelerationStructureKHR>() - 32usize];
    ["Alignment of VkWriteDescriptorSetAccelerationStructureKHR"]
        [::std::mem::align_of::<VkWriteDescriptorSetAccelerationStructureKHR>() - 8usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::sType"]
        [::std::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureKHR, sType) - 0usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::pNext"]
        [::std::mem::offset_of!(VkWriteDescriptorSetAccelerationStructureKHR, pNext) - 8usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::accelerationStructureCount"][::std::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureKHR,
        accelerationStructureCount
    )
        - 16usize];
    ["Offset of field: VkWriteDescriptorSetAccelerationStructureKHR::pAccelerationStructures"][::std::mem::offset_of!(
        VkWriteDescriptorSetAccelerationStructureKHR,
        pAccelerationStructures
    )
        - 24usize];
};
impl Default for VkWriteDescriptorSetAccelerationStructureKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub accelerationStructure: VkBool32,
    pub accelerationStructureCaptureReplay: VkBool32,
    pub accelerationStructureIndirectBuild: VkBool32,
    pub accelerationStructureHostCommands: VkBool32,
    pub descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAccelerationStructureFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceAccelerationStructureFeaturesKHR>() - 40usize];
    ["Alignment of VkPhysicalDeviceAccelerationStructureFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceAccelerationStructureFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceAccelerationStructureFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceAccelerationStructureFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructure"][::std::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructureFeaturesKHR,
        accelerationStructure
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureCaptureReplay"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , accelerationStructureCaptureReplay) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureIndirectBuild"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , accelerationStructureIndirectBuild) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureHostCommands"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , accelerationStructureHostCommands) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructureFeaturesKHR::descriptorBindingAccelerationStructureUpdateAfterBind"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructureFeaturesKHR , descriptorBindingAccelerationStructureUpdateAfterBind) - 32usize] ;
};
impl Default for VkPhysicalDeviceAccelerationStructureFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxGeometryCount: u64,
    pub maxInstanceCount: u64,
    pub maxPrimitiveCount: u64,
    pub maxPerStageDescriptorAccelerationStructures: u32,
    pub maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32,
    pub maxDescriptorSetAccelerationStructures: u32,
    pub maxDescriptorSetUpdateAfterBindAccelerationStructures: u32,
    pub minAccelerationStructureScratchOffsetAlignment: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceAccelerationStructurePropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceAccelerationStructurePropertiesKHR>() - 64usize];
    ["Alignment of VkPhysicalDeviceAccelerationStructurePropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceAccelerationStructurePropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::sType"][::std::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        sType
    ) - 0usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::pNext"][::std::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        pNext
    ) - 8usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxGeometryCount"][::std::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        maxGeometryCount
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxInstanceCount"][::std::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        maxInstanceCount
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPrimitiveCount"][::std::mem::offset_of!(
        VkPhysicalDeviceAccelerationStructurePropertiesKHR,
        maxPrimitiveCount
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPerStageDescriptorAccelerationStructures"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxPerStageDescriptorAccelerationStructures) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPerStageDescriptorUpdateAfterBindAccelerationStructures"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxPerStageDescriptorUpdateAfterBindAccelerationStructures) - 44usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxDescriptorSetAccelerationStructures"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxDescriptorSetAccelerationStructures) - 48usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxDescriptorSetUpdateAfterBindAccelerationStructures"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , maxDescriptorSetUpdateAfterBindAccelerationStructures) - 52usize] ;
    ["Offset of field: VkPhysicalDeviceAccelerationStructurePropertiesKHR::minAccelerationStructureScratchOffsetAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceAccelerationStructurePropertiesKHR , minAccelerationStructureScratchOffsetAlignment) - 56usize] ;
};
impl Default for VkPhysicalDeviceAccelerationStructurePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureDeviceAddressInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub accelerationStructure: VkAccelerationStructureKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureDeviceAddressInfoKHR"]
        [::std::mem::size_of::<VkAccelerationStructureDeviceAddressInfoKHR>() - 24usize];
    ["Alignment of VkAccelerationStructureDeviceAddressInfoKHR"]
        [::std::mem::align_of::<VkAccelerationStructureDeviceAddressInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureDeviceAddressInfoKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureDeviceAddressInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureDeviceAddressInfoKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureDeviceAddressInfoKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureDeviceAddressInfoKHR::accelerationStructure"][::std::mem::offset_of!(
        VkAccelerationStructureDeviceAddressInfoKHR,
        accelerationStructure
    )
        - 16usize];
};
impl Default for VkAccelerationStructureDeviceAddressInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkAccelerationStructureVersionInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub pVersionData: *const u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkAccelerationStructureVersionInfoKHR"]
        [::std::mem::size_of::<VkAccelerationStructureVersionInfoKHR>() - 24usize];
    ["Alignment of VkAccelerationStructureVersionInfoKHR"]
        [::std::mem::align_of::<VkAccelerationStructureVersionInfoKHR>() - 8usize];
    ["Offset of field: VkAccelerationStructureVersionInfoKHR::sType"]
        [::std::mem::offset_of!(VkAccelerationStructureVersionInfoKHR, sType) - 0usize];
    ["Offset of field: VkAccelerationStructureVersionInfoKHR::pNext"]
        [::std::mem::offset_of!(VkAccelerationStructureVersionInfoKHR, pNext) - 8usize];
    ["Offset of field: VkAccelerationStructureVersionInfoKHR::pVersionData"]
        [::std::mem::offset_of!(VkAccelerationStructureVersionInfoKHR, pVersionData) - 16usize];
};
impl Default for VkAccelerationStructureVersionInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyAccelerationStructureToMemoryInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkAccelerationStructureKHR,
    pub dst: VkDeviceOrHostAddressKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyAccelerationStructureToMemoryInfoKHR"]
        [::std::mem::size_of::<VkCopyAccelerationStructureToMemoryInfoKHR>() - 40usize];
    ["Alignment of VkCopyAccelerationStructureToMemoryInfoKHR"]
        [::std::mem::align_of::<VkCopyAccelerationStructureToMemoryInfoKHR>() - 8usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::sType"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, sType) - 0usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::pNext"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, pNext) - 8usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::src"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, src) - 16usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::dst"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, dst) - 24usize];
    ["Offset of field: VkCopyAccelerationStructureToMemoryInfoKHR::mode"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureToMemoryInfoKHR, mode) - 32usize];
};
impl Default for VkCopyAccelerationStructureToMemoryInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyMemoryToAccelerationStructureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkDeviceOrHostAddressConstKHR,
    pub dst: VkAccelerationStructureKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyMemoryToAccelerationStructureInfoKHR"]
        [::std::mem::size_of::<VkCopyMemoryToAccelerationStructureInfoKHR>() - 40usize];
    ["Alignment of VkCopyMemoryToAccelerationStructureInfoKHR"]
        [::std::mem::align_of::<VkCopyMemoryToAccelerationStructureInfoKHR>() - 8usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::sType"]
        [::std::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, sType) - 0usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::src"]
        [::std::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, src) - 16usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::dst"]
        [::std::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, dst) - 24usize];
    ["Offset of field: VkCopyMemoryToAccelerationStructureInfoKHR::mode"]
        [::std::mem::offset_of!(VkCopyMemoryToAccelerationStructureInfoKHR, mode) - 32usize];
};
impl Default for VkCopyMemoryToAccelerationStructureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkCopyAccelerationStructureInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub src: VkAccelerationStructureKHR,
    pub dst: VkAccelerationStructureKHR,
    pub mode: VkCopyAccelerationStructureModeKHR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkCopyAccelerationStructureInfoKHR"]
        [::std::mem::size_of::<VkCopyAccelerationStructureInfoKHR>() - 40usize];
    ["Alignment of VkCopyAccelerationStructureInfoKHR"]
        [::std::mem::align_of::<VkCopyAccelerationStructureInfoKHR>() - 8usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::sType"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, sType) - 0usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::pNext"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, pNext) - 8usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::src"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, src) - 16usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::dst"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, dst) - 24usize];
    ["Offset of field: VkCopyAccelerationStructureInfoKHR::mode"]
        [::std::mem::offset_of!(VkCopyAccelerationStructureInfoKHR, mode) - 32usize];
};
impl Default for VkCopyAccelerationStructureInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type PFN_vkCreateAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureKHR,
    ) -> VkResult,
>;
pub type PFN_vkDestroyAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    ),
>;
pub type PFN_vkCmdBuildAccelerationStructuresKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ),
>;
pub type PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pIndirectDeviceAddresses: *const VkDeviceAddress,
        pIndirectStrides: *const u32,
        ppMaxPrimitiveCounts: *const *const u32,
    ),
>;
pub type PFN_vkBuildAccelerationStructuresKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyAccelerationStructureToMemoryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkCopyMemoryToAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ) -> VkResult,
>;
pub type PFN_vkWriteAccelerationStructuresPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult,
>;
pub type PFN_vkCmdCopyAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ),
>;
pub type PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ),
>;
pub type PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ),
>;
pub type PFN_vkGetAccelerationStructureDeviceAddressKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureDeviceAddressInfoKHR,
    ) -> VkDeviceAddress,
>;
pub type PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    ),
>;
pub type PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pVersionInfo: *const VkAccelerationStructureVersionInfoKHR,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    ),
>;
pub type PFN_vkGetAccelerationStructureBuildSizesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pMaxPrimitiveCounts: *const u32,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    ),
>;
unsafe extern "system" {
    pub fn vkCreateAccelerationStructureKHR(
        device: VkDevice,
        pCreateInfo: *const VkAccelerationStructureCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pAccelerationStructure: *mut VkAccelerationStructureKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkDestroyAccelerationStructureKHR(
        device: VkDevice,
        accelerationStructure: VkAccelerationStructureKHR,
        pAllocator: *const VkAllocationCallbacks,
    );
}
unsafe extern "system" {
    pub fn vkCmdBuildAccelerationStructuresKHR(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdBuildAccelerationStructuresIndirectKHR(
        commandBuffer: VkCommandBuffer,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pIndirectDeviceAddresses: *const VkDeviceAddress,
        pIndirectStrides: *const u32,
        ppMaxPrimitiveCounts: *const *const u32,
    );
}
unsafe extern "system" {
    pub fn vkBuildAccelerationStructuresKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        infoCount: u32,
        pInfos: *const VkAccelerationStructureBuildGeometryInfoKHR,
        ppBuildRangeInfos: *const *const VkAccelerationStructureBuildRangeInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyAccelerationStructureKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyAccelerationStructureToMemoryKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCopyMemoryToAccelerationStructureKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkWriteAccelerationStructuresPropertiesKHR(
        device: VkDevice,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
        stride: usize,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdCopyAccelerationStructureKHR(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyAccelerationStructureToMemoryKHR(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyAccelerationStructureToMemoryInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkCmdCopyMemoryToAccelerationStructureKHR(
        commandBuffer: VkCommandBuffer,
        pInfo: *const VkCopyMemoryToAccelerationStructureInfoKHR,
    );
}
unsafe extern "system" {
    pub fn vkGetAccelerationStructureDeviceAddressKHR(
        device: VkDevice,
        pInfo: *const VkAccelerationStructureDeviceAddressInfoKHR,
    ) -> VkDeviceAddress;
}
unsafe extern "system" {
    pub fn vkCmdWriteAccelerationStructuresPropertiesKHR(
        commandBuffer: VkCommandBuffer,
        accelerationStructureCount: u32,
        pAccelerationStructures: *const VkAccelerationStructureKHR,
        queryType: VkQueryType,
        queryPool: VkQueryPool,
        firstQuery: u32,
    );
}
unsafe extern "system" {
    pub fn vkGetDeviceAccelerationStructureCompatibilityKHR(
        device: VkDevice,
        pVersionInfo: *const VkAccelerationStructureVersionInfoKHR,
        pCompatibility: *mut VkAccelerationStructureCompatibilityKHR,
    );
}
unsafe extern "system" {
    pub fn vkGetAccelerationStructureBuildSizesKHR(
        device: VkDevice,
        buildType: VkAccelerationStructureBuildTypeKHR,
        pBuildInfo: *const VkAccelerationStructureBuildGeometryInfoKHR,
        pMaxPrimitiveCounts: *const u32,
        pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR,
    );
}
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_GENERAL_KHR: VkShaderGroupShaderKHR = 0;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: VkShaderGroupShaderKHR = 1;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: VkShaderGroupShaderKHR = 2;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: VkShaderGroupShaderKHR =
    3;
pub const VkShaderGroupShaderKHR_VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR: VkShaderGroupShaderKHR =
    2147483647;
pub type VkShaderGroupShaderKHR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingShaderGroupCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub type_: VkRayTracingShaderGroupTypeKHR,
    pub generalShader: u32,
    pub closestHitShader: u32,
    pub anyHitShader: u32,
    pub intersectionShader: u32,
    pub pShaderGroupCaptureReplayHandle: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingShaderGroupCreateInfoKHR"]
        [::std::mem::size_of::<VkRayTracingShaderGroupCreateInfoKHR>() - 48usize];
    ["Alignment of VkRayTracingShaderGroupCreateInfoKHR"]
        [::std::mem::align_of::<VkRayTracingShaderGroupCreateInfoKHR>() - 8usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::type_"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, type_) - 16usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::generalShader"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, generalShader) - 20usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::closestHitShader"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, closestHitShader) - 24usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::anyHitShader"]
        [::std::mem::offset_of!(VkRayTracingShaderGroupCreateInfoKHR, anyHitShader) - 28usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::intersectionShader"][::std::mem::offset_of!(
        VkRayTracingShaderGroupCreateInfoKHR,
        intersectionShader
    ) - 32usize];
    ["Offset of field: VkRayTracingShaderGroupCreateInfoKHR::pShaderGroupCaptureReplayHandle"][::std::mem::offset_of!(
        VkRayTracingShaderGroupCreateInfoKHR,
        pShaderGroupCaptureReplayHandle
    )
        - 40usize];
};
impl Default for VkRayTracingShaderGroupCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingPipelineInterfaceCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub maxPipelineRayPayloadSize: u32,
    pub maxPipelineRayHitAttributeSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineInterfaceCreateInfoKHR"]
        [::std::mem::size_of::<VkRayTracingPipelineInterfaceCreateInfoKHR>() - 24usize];
    ["Alignment of VkRayTracingPipelineInterfaceCreateInfoKHR"]
        [::std::mem::align_of::<VkRayTracingPipelineInterfaceCreateInfoKHR>() - 8usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkRayTracingPipelineInterfaceCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkRayTracingPipelineInterfaceCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::maxPipelineRayPayloadSize"][::std::mem::offset_of!(
        VkRayTracingPipelineInterfaceCreateInfoKHR,
        maxPipelineRayPayloadSize
    )
        - 16usize];
    ["Offset of field: VkRayTracingPipelineInterfaceCreateInfoKHR::maxPipelineRayHitAttributeSize"] [:: std :: mem :: offset_of ! (VkRayTracingPipelineInterfaceCreateInfoKHR , maxPipelineRayHitAttributeSize) - 20usize] ;
};
impl Default for VkRayTracingPipelineInterfaceCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkRayTracingPipelineCreateInfoKHR {
    pub sType: VkStructureType,
    pub pNext: *const ::std::os::raw::c_void,
    pub flags: VkPipelineCreateFlags,
    pub stageCount: u32,
    pub pStages: *const VkPipelineShaderStageCreateInfo,
    pub groupCount: u32,
    pub pGroups: *const VkRayTracingShaderGroupCreateInfoKHR,
    pub maxPipelineRayRecursionDepth: u32,
    pub pLibraryInfo: *const VkPipelineLibraryCreateInfoKHR,
    pub pLibraryInterface: *const VkRayTracingPipelineInterfaceCreateInfoKHR,
    pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
    pub layout: VkPipelineLayout,
    pub basePipelineHandle: VkPipeline,
    pub basePipelineIndex: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkRayTracingPipelineCreateInfoKHR"]
        [::std::mem::size_of::<VkRayTracingPipelineCreateInfoKHR>() - 104usize];
    ["Alignment of VkRayTracingPipelineCreateInfoKHR"]
        [::std::mem::align_of::<VkRayTracingPipelineCreateInfoKHR>() - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::sType"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, sType) - 0usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pNext"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pNext) - 8usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::flags"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, flags) - 16usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::stageCount"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, stageCount) - 20usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pStages"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pStages) - 24usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::groupCount"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, groupCount) - 32usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pGroups"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pGroups) - 40usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::maxPipelineRayRecursionDepth"][::std::mem::offset_of!(
        VkRayTracingPipelineCreateInfoKHR,
        maxPipelineRayRecursionDepth
    )
        - 48usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pLibraryInfo"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pLibraryInfo) - 56usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pLibraryInterface"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pLibraryInterface) - 64usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::pDynamicState"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, pDynamicState) - 72usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::layout"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, layout) - 80usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::basePipelineHandle"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, basePipelineHandle) - 88usize];
    ["Offset of field: VkRayTracingPipelineCreateInfoKHR::basePipelineIndex"]
        [::std::mem::offset_of!(VkRayTracingPipelineCreateInfoKHR, basePipelineIndex) - 96usize];
};
impl Default for VkRayTracingPipelineCreateInfoKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayTracingPipeline: VkBool32,
    pub rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32,
    pub rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32,
    pub rayTracingPipelineTraceRaysIndirect: VkBool32,
    pub rayTraversalPrimitiveCulling: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPipelineFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>() - 40usize];
    ["Alignment of VkPhysicalDeviceRayTracingPipelineFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingPipelineFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingPipelineFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipeline"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelineFeaturesKHR,
        rayTracingPipeline
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineShaderGroupHandleCaptureReplay"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTracingPipelineShaderGroupHandleCaptureReplay) - 20usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineShaderGroupHandleCaptureReplayMixed"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTracingPipelineShaderGroupHandleCaptureReplayMixed) - 24usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTracingPipelineTraceRaysIndirect"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTracingPipelineTraceRaysIndirect) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelineFeaturesKHR::rayTraversalPrimitiveCulling"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelineFeaturesKHR , rayTraversalPrimitiveCulling) - 32usize] ;
};
impl Default for VkPhysicalDeviceRayTracingPipelineFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub shaderGroupHandleSize: u32,
    pub maxRayRecursionDepth: u32,
    pub maxShaderGroupStride: u32,
    pub shaderGroupBaseAlignment: u32,
    pub shaderGroupHandleCaptureReplaySize: u32,
    pub maxRayDispatchInvocationCount: u32,
    pub shaderGroupHandleAlignment: u32,
    pub maxRayHitAttributeSize: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayTracingPipelinePropertiesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>() - 48usize];
    ["Alignment of VkPhysicalDeviceRayTracingPipelinePropertiesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceRayTracingPipelinePropertiesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayTracingPipelinePropertiesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleSize"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        shaderGroupHandleSize
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayRecursionDepth"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        maxRayRecursionDepth
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxShaderGroupStride"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        maxShaderGroupStride
    )
        - 24usize];
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupBaseAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , shaderGroupBaseAlignment) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleCaptureReplaySize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , shaderGroupHandleCaptureReplaySize) - 32usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayDispatchInvocationCount"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , maxRayDispatchInvocationCount) - 36usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleAlignment"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceRayTracingPipelinePropertiesKHR , shaderGroupHandleAlignment) - 40usize] ;
    ["Offset of field: VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayHitAttributeSize"][::std::mem::offset_of!(
        VkPhysicalDeviceRayTracingPipelinePropertiesKHR,
        maxRayHitAttributeSize
    )
        - 44usize];
};
impl Default for VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkTraceRaysIndirectCommandKHR {
    pub width: u32,
    pub height: u32,
    pub depth: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkTraceRaysIndirectCommandKHR"]
        [::std::mem::size_of::<VkTraceRaysIndirectCommandKHR>() - 12usize];
    ["Alignment of VkTraceRaysIndirectCommandKHR"]
        [::std::mem::align_of::<VkTraceRaysIndirectCommandKHR>() - 4usize];
    ["Offset of field: VkTraceRaysIndirectCommandKHR::width"]
        [::std::mem::offset_of!(VkTraceRaysIndirectCommandKHR, width) - 0usize];
    ["Offset of field: VkTraceRaysIndirectCommandKHR::height"]
        [::std::mem::offset_of!(VkTraceRaysIndirectCommandKHR, height) - 4usize];
    ["Offset of field: VkTraceRaysIndirectCommandKHR::depth"]
        [::std::mem::offset_of!(VkTraceRaysIndirectCommandKHR, depth) - 8usize];
};
pub type PFN_vkCmdTraceRaysKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        width: u32,
        height: u32,
        depth: u32,
    ),
>;
pub type PFN_vkCreateRayTracingPipelinesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult,
>;
pub type PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult,
>;
pub type PFN_vkCmdTraceRaysIndirectKHR = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        indirectDeviceAddress: VkDeviceAddress,
    ),
>;
pub type PFN_vkGetRayTracingShaderGroupStackSizeKHR = ::std::option::Option<
    unsafe extern "system" fn(
        device: VkDevice,
        pipeline: VkPipeline,
        group: u32,
        groupShader: VkShaderGroupShaderKHR,
    ) -> VkDeviceSize,
>;
pub type PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ::std::option::Option<
    unsafe extern "system" fn(commandBuffer: VkCommandBuffer, pipelineStackSize: u32),
>;
unsafe extern "system" {
    pub fn vkCmdTraceRaysKHR(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        width: u32,
        height: u32,
        depth: u32,
    );
}
unsafe extern "system" {
    pub fn vkCreateRayTracingPipelinesKHR(
        device: VkDevice,
        deferredOperation: VkDeferredOperationKHR,
        pipelineCache: VkPipelineCache,
        createInfoCount: u32,
        pCreateInfos: *const VkRayTracingPipelineCreateInfoKHR,
        pAllocator: *const VkAllocationCallbacks,
        pPipelines: *mut VkPipeline,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(
        device: VkDevice,
        pipeline: VkPipeline,
        firstGroup: u32,
        groupCount: u32,
        dataSize: usize,
        pData: *mut ::std::os::raw::c_void,
    ) -> VkResult;
}
unsafe extern "system" {
    pub fn vkCmdTraceRaysIndirectKHR(
        commandBuffer: VkCommandBuffer,
        pRaygenShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pMissShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pHitShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        pCallableShaderBindingTable: *const VkStridedDeviceAddressRegionKHR,
        indirectDeviceAddress: VkDeviceAddress,
    );
}
unsafe extern "system" {
    pub fn vkGetRayTracingShaderGroupStackSizeKHR(
        device: VkDevice,
        pipeline: VkPipeline,
        group: u32,
        groupShader: VkShaderGroupShaderKHR,
    ) -> VkDeviceSize;
}
unsafe extern "system" {
    pub fn vkCmdSetRayTracingPipelineStackSizeKHR(
        commandBuffer: VkCommandBuffer,
        pipelineStackSize: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceRayQueryFeaturesKHR {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub rayQuery: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceRayQueryFeaturesKHR"]
        [::std::mem::size_of::<VkPhysicalDeviceRayQueryFeaturesKHR>() - 24usize];
    ["Alignment of VkPhysicalDeviceRayQueryFeaturesKHR"]
        [::std::mem::align_of::<VkPhysicalDeviceRayQueryFeaturesKHR>() - 8usize];
    ["Offset of field: VkPhysicalDeviceRayQueryFeaturesKHR::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayQueryFeaturesKHR, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceRayQueryFeaturesKHR::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayQueryFeaturesKHR, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceRayQueryFeaturesKHR::rayQuery"]
        [::std::mem::offset_of!(VkPhysicalDeviceRayQueryFeaturesKHR, rayQuery) - 16usize];
};
impl Default for VkPhysicalDeviceRayQueryFeaturesKHR {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderFeaturesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub taskShader: VkBool32,
    pub meshShader: VkBool32,
    pub multiviewMeshShader: VkBool32,
    pub primitiveFragmentShadingRateMeshShader: VkBool32,
    pub meshShaderQueries: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderFeaturesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMeshShaderFeaturesEXT>() - 40usize];
    ["Alignment of VkPhysicalDeviceMeshShaderFeaturesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMeshShaderFeaturesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::taskShader"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, taskShader) - 16usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::meshShader"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderFeaturesEXT, meshShader) - 20usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::multiviewMeshShader"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderFeaturesEXT,
        multiviewMeshShader
    ) - 24usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::primitiveFragmentShadingRateMeshShader"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderFeaturesEXT , primitiveFragmentShadingRateMeshShader) - 28usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderFeaturesEXT::meshShaderQueries"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderFeaturesEXT,
        meshShaderQueries
    ) - 32usize];
};
impl Default for VkPhysicalDeviceMeshShaderFeaturesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VkPhysicalDeviceMeshShaderPropertiesEXT {
    pub sType: VkStructureType,
    pub pNext: *mut ::std::os::raw::c_void,
    pub maxTaskWorkGroupTotalCount: u32,
    pub maxTaskWorkGroupCount: [u32; 3usize],
    pub maxTaskWorkGroupInvocations: u32,
    pub maxTaskWorkGroupSize: [u32; 3usize],
    pub maxTaskPayloadSize: u32,
    pub maxTaskSharedMemorySize: u32,
    pub maxTaskPayloadAndSharedMemorySize: u32,
    pub maxMeshWorkGroupTotalCount: u32,
    pub maxMeshWorkGroupCount: [u32; 3usize],
    pub maxMeshWorkGroupInvocations: u32,
    pub maxMeshWorkGroupSize: [u32; 3usize],
    pub maxMeshSharedMemorySize: u32,
    pub maxMeshPayloadAndSharedMemorySize: u32,
    pub maxMeshOutputMemorySize: u32,
    pub maxMeshPayloadAndOutputMemorySize: u32,
    pub maxMeshOutputComponents: u32,
    pub maxMeshOutputVertices: u32,
    pub maxMeshOutputPrimitives: u32,
    pub maxMeshOutputLayers: u32,
    pub maxMeshMultiviewViewCount: u32,
    pub meshOutputPerVertexGranularity: u32,
    pub meshOutputPerPrimitiveGranularity: u32,
    pub maxPreferredTaskWorkGroupInvocations: u32,
    pub maxPreferredMeshWorkGroupInvocations: u32,
    pub prefersLocalInvocationVertexOutput: VkBool32,
    pub prefersLocalInvocationPrimitiveOutput: VkBool32,
    pub prefersCompactVertexOutput: VkBool32,
    pub prefersCompactPrimitiveOutput: VkBool32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkPhysicalDeviceMeshShaderPropertiesEXT"]
        [::std::mem::size_of::<VkPhysicalDeviceMeshShaderPropertiesEXT>() - 160usize];
    ["Alignment of VkPhysicalDeviceMeshShaderPropertiesEXT"]
        [::std::mem::align_of::<VkPhysicalDeviceMeshShaderPropertiesEXT>() - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::sType"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesEXT, sType) - 0usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::pNext"]
        [::std::mem::offset_of!(VkPhysicalDeviceMeshShaderPropertiesEXT, pNext) - 8usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupTotalCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupTotalCount
    )
        - 16usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupCount
    )
        - 20usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupInvocations"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupInvocations
    )
        - 32usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupSize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskWorkGroupSize
    ) - 36usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskPayloadSize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskPayloadSize
    ) - 48usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskSharedMemorySize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxTaskSharedMemorySize
    )
        - 52usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskPayloadAndSharedMemorySize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxTaskPayloadAndSharedMemorySize) - 56usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupTotalCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupTotalCount
    )
        - 60usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupCount
    )
        - 64usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupInvocations"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupInvocations
    )
        - 76usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshWorkGroupSize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshWorkGroupSize
    ) - 80usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshSharedMemorySize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshSharedMemorySize
    )
        - 92usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshPayloadAndSharedMemorySize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxMeshPayloadAndSharedMemorySize) - 96usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputMemorySize"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputMemorySize
    )
        - 100usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshPayloadAndOutputMemorySize"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxMeshPayloadAndOutputMemorySize) - 104usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputComponents"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputComponents
    )
        - 108usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputVertices"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputVertices
    )
        - 112usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputPrimitives"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputPrimitives
    )
        - 116usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputLayers"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshOutputLayers
    ) - 120usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshMultiviewViewCount"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        maxMeshMultiviewViewCount
    )
        - 124usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::meshOutputPerVertexGranularity"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        meshOutputPerVertexGranularity
    )
        - 128usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::meshOutputPerPrimitiveGranularity"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , meshOutputPerPrimitiveGranularity) - 132usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxPreferredTaskWorkGroupInvocations"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxPreferredTaskWorkGroupInvocations) - 136usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::maxPreferredMeshWorkGroupInvocations"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , maxPreferredMeshWorkGroupInvocations) - 140usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersLocalInvocationVertexOutput"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , prefersLocalInvocationVertexOutput) - 144usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersLocalInvocationPrimitiveOutput"] [:: std :: mem :: offset_of ! (VkPhysicalDeviceMeshShaderPropertiesEXT , prefersLocalInvocationPrimitiveOutput) - 148usize] ;
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersCompactVertexOutput"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        prefersCompactVertexOutput
    )
        - 152usize];
    ["Offset of field: VkPhysicalDeviceMeshShaderPropertiesEXT::prefersCompactPrimitiveOutput"][::std::mem::offset_of!(
        VkPhysicalDeviceMeshShaderPropertiesEXT,
        prefersCompactPrimitiveOutput
    )
        - 156usize];
};
impl Default for VkPhysicalDeviceMeshShaderPropertiesEXT {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct VkDrawMeshTasksIndirectCommandEXT {
    pub groupCountX: u32,
    pub groupCountY: u32,
    pub groupCountZ: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VkDrawMeshTasksIndirectCommandEXT"]
        [::std::mem::size_of::<VkDrawMeshTasksIndirectCommandEXT>() - 12usize];
    ["Alignment of VkDrawMeshTasksIndirectCommandEXT"]
        [::std::mem::align_of::<VkDrawMeshTasksIndirectCommandEXT>() - 4usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandEXT::groupCountX"]
        [::std::mem::offset_of!(VkDrawMeshTasksIndirectCommandEXT, groupCountX) - 0usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandEXT::groupCountY"]
        [::std::mem::offset_of!(VkDrawMeshTasksIndirectCommandEXT, groupCountY) - 4usize];
    ["Offset of field: VkDrawMeshTasksIndirectCommandEXT::groupCountZ"]
        [::std::mem::offset_of!(VkDrawMeshTasksIndirectCommandEXT, groupCountZ) - 8usize];
};
pub type PFN_vkCmdDrawMeshTasksEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    ),
>;
pub type PFN_vkCmdDrawMeshTasksIndirectCountEXT = ::std::option::Option<
    unsafe extern "system" fn(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    ),
>;
unsafe extern "system" {
    pub fn vkCmdDrawMeshTasksEXT(
        commandBuffer: VkCommandBuffer,
        groupCountX: u32,
        groupCountY: u32,
        groupCountZ: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectEXT(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        drawCount: u32,
        stride: u32,
    );
}
unsafe extern "system" {
    pub fn vkCmdDrawMeshTasksIndirectCountEXT(
        commandBuffer: VkCommandBuffer,
        buffer: VkBuffer,
        offset: VkDeviceSize,
        countBuffer: VkBuffer,
        countBufferOffset: VkDeviceSize,
        maxDrawCount: u32,
        stride: u32,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanInstance {
    pub pipelineCache: VkPipelineCache,
    pub instance: VkInstance,
    pub physicalDevice: VkPhysicalDevice,
    pub device: VkDevice,
    pub graphicsQueue: VkQueue,
    pub getInstanceProcAddr: PFN_vkGetInstanceProcAddr,
    pub queueFamilyIndex: ::std::os::raw::c_uint,
    pub reserved: [*mut ::std::os::raw::c_void; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityVulkanInstance"][::std::mem::size_of::<UnityVulkanInstance>() - 120usize];
    ["Alignment of UnityVulkanInstance"][::std::mem::align_of::<UnityVulkanInstance>() - 8usize];
    ["Offset of field: UnityVulkanInstance::pipelineCache"]
        [::std::mem::offset_of!(UnityVulkanInstance, pipelineCache) - 0usize];
    ["Offset of field: UnityVulkanInstance::instance"]
        [::std::mem::offset_of!(UnityVulkanInstance, instance) - 8usize];
    ["Offset of field: UnityVulkanInstance::physicalDevice"]
        [::std::mem::offset_of!(UnityVulkanInstance, physicalDevice) - 16usize];
    ["Offset of field: UnityVulkanInstance::device"]
        [::std::mem::offset_of!(UnityVulkanInstance, device) - 24usize];
    ["Offset of field: UnityVulkanInstance::graphicsQueue"]
        [::std::mem::offset_of!(UnityVulkanInstance, graphicsQueue) - 32usize];
    ["Offset of field: UnityVulkanInstance::getInstanceProcAddr"]
        [::std::mem::offset_of!(UnityVulkanInstance, getInstanceProcAddr) - 40usize];
    ["Offset of field: UnityVulkanInstance::queueFamilyIndex"]
        [::std::mem::offset_of!(UnityVulkanInstance, queueFamilyIndex) - 48usize];
    ["Offset of field: UnityVulkanInstance::reserved"]
        [::std::mem::offset_of!(UnityVulkanInstance, reserved) - 56usize];
};
impl Default for UnityVulkanInstance {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanMemory {
    pub memory: VkDeviceMemory,
    pub offset: VkDeviceSize,
    pub size: VkDeviceSize,
    pub mapped: *mut ::std::os::raw::c_void,
    pub flags: VkMemoryPropertyFlags,
    pub memoryTypeIndex: ::std::os::raw::c_uint,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityVulkanMemory"][::std::mem::size_of::<UnityVulkanMemory>() - 72usize];
    ["Alignment of UnityVulkanMemory"][::std::mem::align_of::<UnityVulkanMemory>() - 8usize];
    ["Offset of field: UnityVulkanMemory::memory"]
        [::std::mem::offset_of!(UnityVulkanMemory, memory) - 0usize];
    ["Offset of field: UnityVulkanMemory::offset"]
        [::std::mem::offset_of!(UnityVulkanMemory, offset) - 8usize];
    ["Offset of field: UnityVulkanMemory::size"]
        [::std::mem::offset_of!(UnityVulkanMemory, size) - 16usize];
    ["Offset of field: UnityVulkanMemory::mapped"]
        [::std::mem::offset_of!(UnityVulkanMemory, mapped) - 24usize];
    ["Offset of field: UnityVulkanMemory::flags"]
        [::std::mem::offset_of!(UnityVulkanMemory, flags) - 32usize];
    ["Offset of field: UnityVulkanMemory::memoryTypeIndex"]
        [::std::mem::offset_of!(UnityVulkanMemory, memoryTypeIndex) - 36usize];
    ["Offset of field: UnityVulkanMemory::reserved"]
        [::std::mem::offset_of!(UnityVulkanMemory, reserved) - 40usize];
};
impl Default for UnityVulkanMemory {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const UnityVulkanResourceAccessMode_kUnityVulkanResourceAccess_ObserveOnly:
    UnityVulkanResourceAccessMode = 0;
pub const UnityVulkanResourceAccessMode_kUnityVulkanResourceAccess_PipelineBarrier:
    UnityVulkanResourceAccessMode = 1;
pub const UnityVulkanResourceAccessMode_kUnityVulkanResourceAccess_Recreate:
    UnityVulkanResourceAccessMode = 2;
pub type UnityVulkanResourceAccessMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanImage {
    pub memory: UnityVulkanMemory,
    pub image: VkImage,
    pub layout: VkImageLayout,
    pub aspect: VkImageAspectFlags,
    pub usage: VkImageUsageFlags,
    pub format: VkFormat,
    pub extent: VkExtent3D,
    pub tiling: VkImageTiling,
    pub type_: VkImageType,
    pub samples: VkSampleCountFlagBits,
    pub layers: ::std::os::raw::c_int,
    pub mipCount: ::std::os::raw::c_int,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityVulkanImage"][::std::mem::size_of::<UnityVulkanImage>() - 160usize];
    ["Alignment of UnityVulkanImage"][::std::mem::align_of::<UnityVulkanImage>() - 8usize];
    ["Offset of field: UnityVulkanImage::memory"]
        [::std::mem::offset_of!(UnityVulkanImage, memory) - 0usize];
    ["Offset of field: UnityVulkanImage::image"]
        [::std::mem::offset_of!(UnityVulkanImage, image) - 72usize];
    ["Offset of field: UnityVulkanImage::layout"]
        [::std::mem::offset_of!(UnityVulkanImage, layout) - 80usize];
    ["Offset of field: UnityVulkanImage::aspect"]
        [::std::mem::offset_of!(UnityVulkanImage, aspect) - 84usize];
    ["Offset of field: UnityVulkanImage::usage"]
        [::std::mem::offset_of!(UnityVulkanImage, usage) - 88usize];
    ["Offset of field: UnityVulkanImage::format"]
        [::std::mem::offset_of!(UnityVulkanImage, format) - 92usize];
    ["Offset of field: UnityVulkanImage::extent"]
        [::std::mem::offset_of!(UnityVulkanImage, extent) - 96usize];
    ["Offset of field: UnityVulkanImage::tiling"]
        [::std::mem::offset_of!(UnityVulkanImage, tiling) - 108usize];
    ["Offset of field: UnityVulkanImage::type_"]
        [::std::mem::offset_of!(UnityVulkanImage, type_) - 112usize];
    ["Offset of field: UnityVulkanImage::samples"]
        [::std::mem::offset_of!(UnityVulkanImage, samples) - 116usize];
    ["Offset of field: UnityVulkanImage::layers"]
        [::std::mem::offset_of!(UnityVulkanImage, layers) - 120usize];
    ["Offset of field: UnityVulkanImage::mipCount"]
        [::std::mem::offset_of!(UnityVulkanImage, mipCount) - 124usize];
    ["Offset of field: UnityVulkanImage::reserved"]
        [::std::mem::offset_of!(UnityVulkanImage, reserved) - 128usize];
};
impl Default for UnityVulkanImage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanBuffer {
    pub memory: UnityVulkanMemory,
    pub buffer: VkBuffer,
    pub sizeInBytes: usize,
    pub usage: VkBufferUsageFlags,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityVulkanBuffer"][::std::mem::size_of::<UnityVulkanBuffer>() - 128usize];
    ["Alignment of UnityVulkanBuffer"][::std::mem::align_of::<UnityVulkanBuffer>() - 8usize];
    ["Offset of field: UnityVulkanBuffer::memory"]
        [::std::mem::offset_of!(UnityVulkanBuffer, memory) - 0usize];
    ["Offset of field: UnityVulkanBuffer::buffer"]
        [::std::mem::offset_of!(UnityVulkanBuffer, buffer) - 72usize];
    ["Offset of field: UnityVulkanBuffer::sizeInBytes"]
        [::std::mem::offset_of!(UnityVulkanBuffer, sizeInBytes) - 80usize];
    ["Offset of field: UnityVulkanBuffer::usage"]
        [::std::mem::offset_of!(UnityVulkanBuffer, usage) - 88usize];
    ["Offset of field: UnityVulkanBuffer::reserved"]
        [::std::mem::offset_of!(UnityVulkanBuffer, reserved) - 96usize];
};
impl Default for UnityVulkanBuffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanRecordingState {
    pub commandBuffer: VkCommandBuffer,
    pub commandBufferLevel: VkCommandBufferLevel,
    pub renderPass: VkRenderPass,
    pub framebuffer: VkFramebuffer,
    pub subPassIndex: ::std::os::raw::c_int,
    pub currentFrameNumber: ::std::os::raw::c_ulonglong,
    pub safeFrameNumber: ::std::os::raw::c_ulonglong,
    pub reserved: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityVulkanRecordingState"]
        [::std::mem::size_of::<UnityVulkanRecordingState>() - 88usize];
    ["Alignment of UnityVulkanRecordingState"]
        [::std::mem::align_of::<UnityVulkanRecordingState>() - 8usize];
    ["Offset of field: UnityVulkanRecordingState::commandBuffer"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, commandBuffer) - 0usize];
    ["Offset of field: UnityVulkanRecordingState::commandBufferLevel"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, commandBufferLevel) - 8usize];
    ["Offset of field: UnityVulkanRecordingState::renderPass"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, renderPass) - 16usize];
    ["Offset of field: UnityVulkanRecordingState::framebuffer"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, framebuffer) - 24usize];
    ["Offset of field: UnityVulkanRecordingState::subPassIndex"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, subPassIndex) - 32usize];
    ["Offset of field: UnityVulkanRecordingState::currentFrameNumber"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, currentFrameNumber) - 40usize];
    ["Offset of field: UnityVulkanRecordingState::safeFrameNumber"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, safeFrameNumber) - 48usize];
    ["Offset of field: UnityVulkanRecordingState::reserved"]
        [::std::mem::offset_of!(UnityVulkanRecordingState, reserved) - 56usize];
};
impl Default for UnityVulkanRecordingState {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const UnityVulkanEventRenderPassPreCondition_kUnityVulkanRenderPass_DontCare:
    UnityVulkanEventRenderPassPreCondition = 0;
pub const UnityVulkanEventRenderPassPreCondition_kUnityVulkanRenderPass_EnsureInside:
    UnityVulkanEventRenderPassPreCondition = 1;
pub const UnityVulkanEventRenderPassPreCondition_kUnityVulkanRenderPass_EnsureOutside:
    UnityVulkanEventRenderPassPreCondition = 2;
pub type UnityVulkanEventRenderPassPreCondition = ::std::os::raw::c_uint;
pub const UnityVulkanGraphicsQueueAccess_kUnityVulkanGraphicsQueueAccess_DontCare:
    UnityVulkanGraphicsQueueAccess = 0;
pub const UnityVulkanGraphicsQueueAccess_kUnityVulkanGraphicsQueueAccess_Allow:
    UnityVulkanGraphicsQueueAccess = 1;
pub type UnityVulkanGraphicsQueueAccess = ::std::os::raw::c_uint;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_EnsurePreviousFrameSubmission : UnityVulkanEventConfigFlagBits = 1 ;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_FlushCommandBuffers:
    UnityVulkanEventConfigFlagBits = 2;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_SyncWorkerThreads:
    UnityVulkanEventConfigFlagBits = 4;
pub const UnityVulkanEventConfigFlagBits_kUnityVulkanEventConfigFlag_ModifiesCommandBuffersState:
    UnityVulkanEventConfigFlagBits = 8;
pub type UnityVulkanEventConfigFlagBits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanPluginEventConfig {
    pub renderPassPrecondition: UnityVulkanEventRenderPassPreCondition,
    pub graphicsQueueAccess: UnityVulkanGraphicsQueueAccess,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityVulkanPluginEventConfig"]
        [::std::mem::size_of::<UnityVulkanPluginEventConfig>() - 12usize];
    ["Alignment of UnityVulkanPluginEventConfig"]
        [::std::mem::align_of::<UnityVulkanPluginEventConfig>() - 4usize];
    ["Offset of field: UnityVulkanPluginEventConfig::renderPassPrecondition"]
        [::std::mem::offset_of!(UnityVulkanPluginEventConfig, renderPassPrecondition) - 0usize];
    ["Offset of field: UnityVulkanPluginEventConfig::graphicsQueueAccess"]
        [::std::mem::offset_of!(UnityVulkanPluginEventConfig, graphicsQueueAccess) - 4usize];
    ["Offset of field: UnityVulkanPluginEventConfig::flags"]
        [::std::mem::offset_of!(UnityVulkanPluginEventConfig, flags) - 8usize];
};
impl Default for UnityVulkanPluginEventConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "system" {
    #[link_name = "\u{1}_ZL21UnityVulkanWholeImage"]
    pub static UnityVulkanWholeImage: *const VkImageSubresource;
}
pub type UnityVulkanInitCallback = ::std::option::Option<
    unsafe extern "system" fn(
        getInstanceProcAddr: PFN_vkGetInstanceProcAddr,
        userdata: *mut ::std::os::raw::c_void,
    ) -> PFN_vkGetInstanceProcAddr,
>;
pub const UnityVulkanSwapchainMode_kUnityVulkanSwapchainMode_Default: UnityVulkanSwapchainMode = 0;
pub const UnityVulkanSwapchainMode_kUnityVulkanSwapchainMode_Offscreen: UnityVulkanSwapchainMode =
    1;
pub type UnityVulkanSwapchainMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityVulkanSwapchainConfiguration {
    pub mode: UnityVulkanSwapchainMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityVulkanSwapchainConfiguration"]
        [::std::mem::size_of::<UnityVulkanSwapchainConfiguration>() - 4usize];
    ["Alignment of UnityVulkanSwapchainConfiguration"]
        [::std::mem::align_of::<UnityVulkanSwapchainConfiguration>() - 4usize];
    ["Offset of field: UnityVulkanSwapchainConfiguration::mode"]
        [::std::mem::offset_of!(UnityVulkanSwapchainConfiguration, mode) - 0usize];
};
impl Default for UnityVulkanSwapchainConfiguration {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const kUnityVulkanInitCallbackMaxPriority: _bindgen_ty_1 = 2147483647;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsVulkanV2 {
    pub InterceptInitialization: ::std::option::Option<
        unsafe extern "system" fn(
            func: UnityVulkanInitCallback,
            userdata: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub InterceptVulkanAPI: ::std::option::Option<
        unsafe extern "system" fn(
            name: *const ::std::os::raw::c_char,
            func: PFN_vkVoidFunction,
        ) -> PFN_vkVoidFunction,
    >,
    pub ConfigureEvent: ::std::option::Option<
        unsafe extern "system" fn(
            eventID: ::std::os::raw::c_int,
            pluginEventConfig: *const UnityVulkanPluginEventConfig,
        ),
    >,
    pub Instance: ::std::option::Option<unsafe extern "system" fn() -> UnityVulkanInstance>,
    pub CommandRecordingState: ::std::option::Option<
        unsafe extern "system" fn(
            outCommandRecordingState: *mut UnityVulkanRecordingState,
            queueAccess: UnityVulkanGraphicsQueueAccess,
        ) -> bool,
    >,
    pub AccessTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeTexture: *mut ::std::os::raw::c_void,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessRenderBufferTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeRenderBuffer: UnityRenderBuffer,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessRenderBufferResolveTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeRenderBuffer: UnityRenderBuffer,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessBuffer: ::std::option::Option<
        unsafe extern "system" fn(
            nativeBuffer: *mut ::std::os::raw::c_void,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outBuffer: *mut UnityVulkanBuffer,
        ) -> bool,
    >,
    pub EnsureOutsideRenderPass: ::std::option::Option<unsafe extern "system" fn()>,
    pub EnsureInsideRenderPass: ::std::option::Option<unsafe extern "system" fn()>,
    pub AccessQueue: ::std::option::Option<
        unsafe extern "system" fn(
            arg1: UnityRenderingEventAndData,
            eventId: ::std::os::raw::c_int,
            userData: *mut ::std::os::raw::c_void,
            flush: bool,
        ),
    >,
    pub ConfigureSwapchain: ::std::option::Option<
        unsafe extern "system" fn(swapChainConfig: *const UnityVulkanSwapchainConfiguration) -> bool,
    >,
    pub AccessTextureByID: ::std::option::Option<
        unsafe extern "system" fn(
            textureID: UnityTextureID,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AddInterceptInitialization: ::std::option::Option<
        unsafe extern "system" fn(
            func: UnityVulkanInitCallback,
            userdata: *mut ::std::os::raw::c_void,
            priority: i32,
        ) -> bool,
    >,
    pub RemoveInterceptInitialization:
        ::std::option::Option<unsafe extern "system" fn(func: UnityVulkanInitCallback) -> bool>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsVulkanV2"][::std::mem::size_of::<IUnityGraphicsVulkanV2>() - 128usize];
    ["Alignment of IUnityGraphicsVulkanV2"]
        [::std::mem::align_of::<IUnityGraphicsVulkanV2>() - 8usize];
    ["Offset of field: IUnityGraphicsVulkanV2::InterceptInitialization"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, InterceptInitialization) - 0usize];
    ["Offset of field: IUnityGraphicsVulkanV2::InterceptVulkanAPI"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, InterceptVulkanAPI) - 8usize];
    ["Offset of field: IUnityGraphicsVulkanV2::ConfigureEvent"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, ConfigureEvent) - 16usize];
    ["Offset of field: IUnityGraphicsVulkanV2::Instance"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, Instance) - 24usize];
    ["Offset of field: IUnityGraphicsVulkanV2::CommandRecordingState"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, CommandRecordingState) - 32usize];
    ["Offset of field: IUnityGraphicsVulkanV2::AccessTexture"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, AccessTexture) - 40usize];
    ["Offset of field: IUnityGraphicsVulkanV2::AccessRenderBufferTexture"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, AccessRenderBufferTexture) - 48usize];
    ["Offset of field: IUnityGraphicsVulkanV2::AccessRenderBufferResolveTexture"][::std::mem::offset_of!(
        IUnityGraphicsVulkanV2,
        AccessRenderBufferResolveTexture
    ) - 56usize];
    ["Offset of field: IUnityGraphicsVulkanV2::AccessBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, AccessBuffer) - 64usize];
    ["Offset of field: IUnityGraphicsVulkanV2::EnsureOutsideRenderPass"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, EnsureOutsideRenderPass) - 72usize];
    ["Offset of field: IUnityGraphicsVulkanV2::EnsureInsideRenderPass"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, EnsureInsideRenderPass) - 80usize];
    ["Offset of field: IUnityGraphicsVulkanV2::AccessQueue"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, AccessQueue) - 88usize];
    ["Offset of field: IUnityGraphicsVulkanV2::ConfigureSwapchain"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, ConfigureSwapchain) - 96usize];
    ["Offset of field: IUnityGraphicsVulkanV2::AccessTextureByID"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, AccessTextureByID) - 104usize];
    ["Offset of field: IUnityGraphicsVulkanV2::AddInterceptInitialization"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, AddInterceptInitialization) - 112usize];
    ["Offset of field: IUnityGraphicsVulkanV2::RemoveInterceptInitialization"]
        [::std::mem::offset_of!(IUnityGraphicsVulkanV2, RemoveInterceptInitialization) - 120usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityGraphicsVulkan {
    pub InterceptInitialization: ::std::option::Option<
        unsafe extern "system" fn(
            func: UnityVulkanInitCallback,
            userdata: *mut ::std::os::raw::c_void,
        ) -> bool,
    >,
    pub InterceptVulkanAPI: ::std::option::Option<
        unsafe extern "system" fn(
            name: *const ::std::os::raw::c_char,
            func: PFN_vkVoidFunction,
        ) -> PFN_vkVoidFunction,
    >,
    pub ConfigureEvent: ::std::option::Option<
        unsafe extern "system" fn(
            eventID: ::std::os::raw::c_int,
            pluginEventConfig: *const UnityVulkanPluginEventConfig,
        ),
    >,
    pub Instance: ::std::option::Option<unsafe extern "system" fn() -> UnityVulkanInstance>,
    pub CommandRecordingState: ::std::option::Option<
        unsafe extern "system" fn(
            outCommandRecordingState: *mut UnityVulkanRecordingState,
            queueAccess: UnityVulkanGraphicsQueueAccess,
        ) -> bool,
    >,
    pub AccessTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeTexture: *mut ::std::os::raw::c_void,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessRenderBufferTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeRenderBuffer: UnityRenderBuffer,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessRenderBufferResolveTexture: ::std::option::Option<
        unsafe extern "system" fn(
            nativeRenderBuffer: UnityRenderBuffer,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
    pub AccessBuffer: ::std::option::Option<
        unsafe extern "system" fn(
            nativeBuffer: *mut ::std::os::raw::c_void,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outBuffer: *mut UnityVulkanBuffer,
        ) -> bool,
    >,
    pub EnsureOutsideRenderPass: ::std::option::Option<unsafe extern "system" fn()>,
    pub EnsureInsideRenderPass: ::std::option::Option<unsafe extern "system" fn()>,
    pub AccessQueue: ::std::option::Option<
        unsafe extern "system" fn(
            arg1: UnityRenderingEventAndData,
            eventId: ::std::os::raw::c_int,
            userData: *mut ::std::os::raw::c_void,
            flush: bool,
        ),
    >,
    pub ConfigureSwapchain: ::std::option::Option<
        unsafe extern "system" fn(swapChainConfig: *const UnityVulkanSwapchainConfiguration) -> bool,
    >,
    pub AccessTextureByID: ::std::option::Option<
        unsafe extern "system" fn(
            textureID: UnityTextureID,
            subResource: *const VkImageSubresource,
            layout: VkImageLayout,
            pipelineStageFlags: VkPipelineStageFlags,
            accessFlags: VkAccessFlags,
            accessMode: UnityVulkanResourceAccessMode,
            outImage: *mut UnityVulkanImage,
        ) -> bool,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityGraphicsVulkan"][::std::mem::size_of::<IUnityGraphicsVulkan>() - 112usize];
    ["Alignment of IUnityGraphicsVulkan"][::std::mem::align_of::<IUnityGraphicsVulkan>() - 8usize];
    ["Offset of field: IUnityGraphicsVulkan::InterceptInitialization"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, InterceptInitialization) - 0usize];
    ["Offset of field: IUnityGraphicsVulkan::InterceptVulkanAPI"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, InterceptVulkanAPI) - 8usize];
    ["Offset of field: IUnityGraphicsVulkan::ConfigureEvent"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, ConfigureEvent) - 16usize];
    ["Offset of field: IUnityGraphicsVulkan::Instance"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, Instance) - 24usize];
    ["Offset of field: IUnityGraphicsVulkan::CommandRecordingState"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, CommandRecordingState) - 32usize];
    ["Offset of field: IUnityGraphicsVulkan::AccessTexture"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, AccessTexture) - 40usize];
    ["Offset of field: IUnityGraphicsVulkan::AccessRenderBufferTexture"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, AccessRenderBufferTexture) - 48usize];
    ["Offset of field: IUnityGraphicsVulkan::AccessRenderBufferResolveTexture"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, AccessRenderBufferResolveTexture) - 56usize];
    ["Offset of field: IUnityGraphicsVulkan::AccessBuffer"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, AccessBuffer) - 64usize];
    ["Offset of field: IUnityGraphicsVulkan::EnsureOutsideRenderPass"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, EnsureOutsideRenderPass) - 72usize];
    ["Offset of field: IUnityGraphicsVulkan::EnsureInsideRenderPass"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, EnsureInsideRenderPass) - 80usize];
    ["Offset of field: IUnityGraphicsVulkan::AccessQueue"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, AccessQueue) - 88usize];
    ["Offset of field: IUnityGraphicsVulkan::ConfigureSwapchain"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, ConfigureSwapchain) - 96usize];
    ["Offset of field: IUnityGraphicsVulkan::AccessTextureByID"]
        [::std::mem::offset_of!(IUnityGraphicsVulkan, AccessTextureByID) - 104usize];
};
pub const UnityRenderingExtEventType_kUnityRenderingExtEventSetStereoTarget:
    UnityRenderingExtEventType = 0;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventSetStereoEye:
    UnityRenderingExtEventType = 1;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventStereoRenderingDone:
    UnityRenderingExtEventType = 2;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventBeforeDrawCall:
    UnityRenderingExtEventType = 3;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventAfterDrawCall:
    UnityRenderingExtEventType = 4;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventCustomGrab: UnityRenderingExtEventType =
    5;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventCustomBlit: UnityRenderingExtEventType =
    6;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureBegin:
    UnityRenderingExtEventType = 7;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureEnd:
    UnityRenderingExtEventType = 8;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureBeginV1:
    UnityRenderingExtEventType = 7;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureEndV1:
    UnityRenderingExtEventType = 8;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureBeginV2:
    UnityRenderingExtEventType = 9;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventUpdateTextureEndV2:
    UnityRenderingExtEventType = 10;
pub const UnityRenderingExtEventType_kUnityRenderingExtEventCount: UnityRenderingExtEventType = 11;
pub const UnityRenderingExtEventType_kUnityRenderingExtUserEventsStart: UnityRenderingExtEventType =
    11;
pub type UnityRenderingExtEventType = ::std::os::raw::c_uint;
pub const UnityRenderingExtCustomBlitCommands_kUnityRenderingExtCustomBlitVRFlush:
    UnityRenderingExtCustomBlitCommands = 0;
pub const UnityRenderingExtCustomBlitCommands_kUnityRenderingExtCustomBlitCount:
    UnityRenderingExtCustomBlitCommands = 1;
pub const UnityRenderingExtCustomBlitCommands_kUnityRenderingExtUserCustomBlitStart:
    UnityRenderingExtCustomBlitCommands = 1;
pub type UnityRenderingExtCustomBlitCommands = ::std::os::raw::c_uint;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideViewport:
    UnityRenderingExtQueryType = 1;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideScissor:
    UnityRenderingExtQueryType = 2;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideVROcclussionMesh:
    UnityRenderingExtQueryType = 4;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverrideVRSinglePass:
    UnityRenderingExtQueryType = 8;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryKeepOriginalDoubleWideWidth_DEPRECATED : UnityRenderingExtQueryType = 16 ;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryRequestVRFlushCallback:
    UnityRenderingExtQueryType = 32;
pub const UnityRenderingExtQueryType_kUnityRenderingExtQueryOverridePresentFrame:
    UnityRenderingExtQueryType = 64;
pub type UnityRenderingExtQueryType = ::std::os::raw::c_uint;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatNone:
    UnityRenderingExtTextureFormat = 0;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatFirst:
    UnityRenderingExtTextureFormat = 0;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_SRGB:
    UnityRenderingExtTextureFormat = 1;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_SRGB:
    UnityRenderingExtTextureFormat = 2;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_SRGB:
    UnityRenderingExtTextureFormat = 3;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_SRGB:
    UnityRenderingExtTextureFormat = 4;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_UNorm:
    UnityRenderingExtTextureFormat = 5;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_UNorm:
    UnityRenderingExtTextureFormat = 6;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_UNorm:
    UnityRenderingExtTextureFormat = 7;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_UNorm:
    UnityRenderingExtTextureFormat = 8;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_SNorm:
    UnityRenderingExtTextureFormat = 9;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_SNorm:
    UnityRenderingExtTextureFormat = 10;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_SNorm:
    UnityRenderingExtTextureFormat = 11;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_SNorm:
    UnityRenderingExtTextureFormat = 12;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_UInt:
    UnityRenderingExtTextureFormat = 13;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_UInt:
    UnityRenderingExtTextureFormat = 14;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_UInt:
    UnityRenderingExtTextureFormat = 15;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_UInt:
    UnityRenderingExtTextureFormat = 16;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8_SInt:
    UnityRenderingExtTextureFormat = 17;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8_SInt:
    UnityRenderingExtTextureFormat = 18;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8_SInt:
    UnityRenderingExtTextureFormat = 19;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR8G8B8A8_SInt:
    UnityRenderingExtTextureFormat = 20;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_UNorm:
    UnityRenderingExtTextureFormat = 21;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_UNorm:
    UnityRenderingExtTextureFormat = 22;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_UNorm:
    UnityRenderingExtTextureFormat = 23;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_UNorm:
    UnityRenderingExtTextureFormat = 24;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_SNorm:
    UnityRenderingExtTextureFormat = 25;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_SNorm:
    UnityRenderingExtTextureFormat = 26;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_SNorm:
    UnityRenderingExtTextureFormat = 27;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_SNorm:
    UnityRenderingExtTextureFormat = 28;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_UInt:
    UnityRenderingExtTextureFormat = 29;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_UInt:
    UnityRenderingExtTextureFormat = 30;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_UInt:
    UnityRenderingExtTextureFormat = 31;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_UInt:
    UnityRenderingExtTextureFormat = 32;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_SInt:
    UnityRenderingExtTextureFormat = 33;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_SInt:
    UnityRenderingExtTextureFormat = 34;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_SInt:
    UnityRenderingExtTextureFormat = 35;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_SInt:
    UnityRenderingExtTextureFormat = 36;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32_UInt:
    UnityRenderingExtTextureFormat = 37;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32_UInt:
    UnityRenderingExtTextureFormat = 38;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32_UInt:
    UnityRenderingExtTextureFormat = 39;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32A32_UInt:
    UnityRenderingExtTextureFormat = 40;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32_SInt:
    UnityRenderingExtTextureFormat = 41;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32_SInt:
    UnityRenderingExtTextureFormat = 42;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32_SInt:
    UnityRenderingExtTextureFormat = 43;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32A32_SInt:
    UnityRenderingExtTextureFormat = 44;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16_SFloat:
    UnityRenderingExtTextureFormat = 45;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16_SFloat:
    UnityRenderingExtTextureFormat = 46;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16_SFloat:
    UnityRenderingExtTextureFormat = 47;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR16G16B16A16_SFloat:
    UnityRenderingExtTextureFormat = 48;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32_SFloat:
    UnityRenderingExtTextureFormat = 49;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32_SFloat:
    UnityRenderingExtTextureFormat = 50;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32_SFloat:
    UnityRenderingExtTextureFormat = 51;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR32G32B32A32_SFloat:
    UnityRenderingExtTextureFormat = 52;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatL8_UNorm:
    UnityRenderingExtTextureFormat = 53;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA8_UNorm:
    UnityRenderingExtTextureFormat = 54;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA16_UNorm:
    UnityRenderingExtTextureFormat = 55;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_SRGB:
    UnityRenderingExtTextureFormat = 56;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_SRGB:
    UnityRenderingExtTextureFormat = 57;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_UNorm:
    UnityRenderingExtTextureFormat = 58;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_UNorm:
    UnityRenderingExtTextureFormat = 59;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_SNorm:
    UnityRenderingExtTextureFormat = 60;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_SNorm:
    UnityRenderingExtTextureFormat = 61;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_UInt:
    UnityRenderingExtTextureFormat = 62;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_UInt:
    UnityRenderingExtTextureFormat = 63;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8_SInt:
    UnityRenderingExtTextureFormat = 64;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB8G8R8A8_SInt:
    UnityRenderingExtTextureFormat = 65;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR4G4B4A4_UNormPack16:
    UnityRenderingExtTextureFormat = 66;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB4G4R4A4_UNormPack16:
    UnityRenderingExtTextureFormat = 67;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR5G6B5_UNormPack16:
    UnityRenderingExtTextureFormat = 68;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB5G6R5_UNormPack16:
    UnityRenderingExtTextureFormat = 69;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR5G5B5A1_UNormPack16:
    UnityRenderingExtTextureFormat = 70;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB5G5R5A1_UNormPack16:
    UnityRenderingExtTextureFormat = 71;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA1R5G5B5_UNormPack16:
    UnityRenderingExtTextureFormat = 72;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatE5B9G9R9_UFloatPack32:
    UnityRenderingExtTextureFormat = 73;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatB10G11R11_UFloatPack32:
    UnityRenderingExtTextureFormat = 74;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2B10G10R10_UNormPack32:
    UnityRenderingExtTextureFormat = 75;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2B10G10R10_UIntPack32:
    UnityRenderingExtTextureFormat = 76;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2B10G10R10_SIntPack32:
    UnityRenderingExtTextureFormat = 77;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_UNormPack32:
    UnityRenderingExtTextureFormat = 78;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_UIntPack32:
    UnityRenderingExtTextureFormat = 79;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_SIntPack32:
    UnityRenderingExtTextureFormat = 80;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_XRSRGBPack32:
    UnityRenderingExtTextureFormat = 81;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA2R10G10B10_XRUNormPack32:
    UnityRenderingExtTextureFormat = 82;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR10G10B10_XRSRGBPack32:
    UnityRenderingExtTextureFormat = 83;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR10G10B10_XRUNormPack32:
    UnityRenderingExtTextureFormat = 84;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA10R10G10B10_XRSRGBPack32:
    UnityRenderingExtTextureFormat = 85;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA10R10G10B10_XRUNormPack32:
    UnityRenderingExtTextureFormat = 86;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA8R8G8B8_SRGB:
    UnityRenderingExtTextureFormat = 87;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA8R8G8B8_UNorm:
    UnityRenderingExtTextureFormat = 88;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatA32R32G32B32_SFloat:
    UnityRenderingExtTextureFormat = 89;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD16_UNorm:
    UnityRenderingExtTextureFormat = 90;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD24_UNorm:
    UnityRenderingExtTextureFormat = 91;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD24_UNorm_S8_UInt:
    UnityRenderingExtTextureFormat = 92;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD32_SFloat:
    UnityRenderingExtTextureFormat = 93;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatD32_SFloat_S8_UInt:
    UnityRenderingExtTextureFormat = 94;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatS8_UInt:
    UnityRenderingExtTextureFormat = 95;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT1_SRGB:
    UnityRenderingExtTextureFormat = 96;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT1_UNorm:
    UnityRenderingExtTextureFormat = 97;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT3_SRGB:
    UnityRenderingExtTextureFormat = 98;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT3_UNorm:
    UnityRenderingExtTextureFormat = 99;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT5_SRGB:
    UnityRenderingExtTextureFormat = 100;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_DXT5_UNorm:
    UnityRenderingExtTextureFormat = 101;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_BC4_UNorm:
    UnityRenderingExtTextureFormat = 102;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_BC4_SNorm:
    UnityRenderingExtTextureFormat = 103;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_BC5_UNorm:
    UnityRenderingExtTextureFormat = 104;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_BC5_SNorm:
    UnityRenderingExtTextureFormat = 105;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_BC6H_UFloat:
    UnityRenderingExtTextureFormat = 106;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_BC6H_SFloat:
    UnityRenderingExtTextureFormat = 107;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_BC7_SRGB:
    UnityRenderingExtTextureFormat = 108;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_BC7_UNorm:
    UnityRenderingExtTextureFormat = 109;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_2Bpp_SRGB:
    UnityRenderingExtTextureFormat = 110;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_2Bpp_UNorm:
    UnityRenderingExtTextureFormat = 111;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_4Bpp_SRGB:
    UnityRenderingExtTextureFormat = 112;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_PVRTC_4Bpp_UNorm:
    UnityRenderingExtTextureFormat = 113;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_2Bpp_SRGB:
    UnityRenderingExtTextureFormat = 114;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_2Bpp_UNorm:
    UnityRenderingExtTextureFormat = 115;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_4Bpp_SRGB:
    UnityRenderingExtTextureFormat = 116;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_PVRTC_4Bpp_UNorm:
    UnityRenderingExtTextureFormat = 117;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_ETC_UNorm:
    UnityRenderingExtTextureFormat = 118;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_ETC2_SRGB:
    UnityRenderingExtTextureFormat = 119;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_ETC2_UNorm:
    UnityRenderingExtTextureFormat = 120;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_A1_ETC2_SRGB:
    UnityRenderingExtTextureFormat = 121;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGB_A1_ETC2_UNorm:
    UnityRenderingExtTextureFormat = 122;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ETC2_SRGB:
    UnityRenderingExtTextureFormat = 123;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ETC2_UNorm:
    UnityRenderingExtTextureFormat = 124;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_EAC_UNorm:
    UnityRenderingExtTextureFormat = 125;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatR_EAC_SNorm:
    UnityRenderingExtTextureFormat = 126;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_EAC_UNorm:
    UnityRenderingExtTextureFormat = 127;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRG_EAC_SNorm:
    UnityRenderingExtTextureFormat = 128;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC4X4_SRGB:
    UnityRenderingExtTextureFormat = 129;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC4X4_UNorm:
    UnityRenderingExtTextureFormat = 130;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC5X5_SRGB:
    UnityRenderingExtTextureFormat = 131;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC5X5_UNorm:
    UnityRenderingExtTextureFormat = 132;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC6X6_SRGB:
    UnityRenderingExtTextureFormat = 133;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC6X6_UNorm:
    UnityRenderingExtTextureFormat = 134;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC8X8_SRGB:
    UnityRenderingExtTextureFormat = 135;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC8X8_UNorm:
    UnityRenderingExtTextureFormat = 136;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC10X10_SRGB:
    UnityRenderingExtTextureFormat = 137;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC10X10_UNorm:
    UnityRenderingExtTextureFormat = 138;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC12X12_SRGB:
    UnityRenderingExtTextureFormat = 139;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC12X12_UNorm:
    UnityRenderingExtTextureFormat = 140;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatYUV2:
    UnityRenderingExtTextureFormat = 141;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC4X4_UFloat:
    UnityRenderingExtTextureFormat = 145;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC5X5_UFloat:
    UnityRenderingExtTextureFormat = 146;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC6X6_UFloat:
    UnityRenderingExtTextureFormat = 147;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC8X8_UFloat:
    UnityRenderingExtTextureFormat = 148;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC10X10_UFloat:
    UnityRenderingExtTextureFormat = 149;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatRGBA_ASTC12X12_UFloat:
    UnityRenderingExtTextureFormat = 150;
pub const UnityRenderingExtTextureFormat_kUnityRenderingExtFormatLast:
    UnityRenderingExtTextureFormat = 150;
pub type UnityRenderingExtTextureFormat = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtBeforeDrawCallParams {
    pub vertexShader: *mut ::std::os::raw::c_void,
    pub fragmentShader: *mut ::std::os::raw::c_void,
    pub geometryShader: *mut ::std::os::raw::c_void,
    pub hullShader: *mut ::std::os::raw::c_void,
    pub domainShader: *mut ::std::os::raw::c_void,
    pub eyeIndex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityRenderingExtBeforeDrawCallParams"]
        [::std::mem::size_of::<UnityRenderingExtBeforeDrawCallParams>() - 48usize];
    ["Alignment of UnityRenderingExtBeforeDrawCallParams"]
        [::std::mem::align_of::<UnityRenderingExtBeforeDrawCallParams>() - 8usize];
    ["Offset of field: UnityRenderingExtBeforeDrawCallParams::vertexShader"]
        [::std::mem::offset_of!(UnityRenderingExtBeforeDrawCallParams, vertexShader) - 0usize];
    ["Offset of field: UnityRenderingExtBeforeDrawCallParams::fragmentShader"]
        [::std::mem::offset_of!(UnityRenderingExtBeforeDrawCallParams, fragmentShader) - 8usize];
    ["Offset of field: UnityRenderingExtBeforeDrawCallParams::geometryShader"]
        [::std::mem::offset_of!(UnityRenderingExtBeforeDrawCallParams, geometryShader) - 16usize];
    ["Offset of field: UnityRenderingExtBeforeDrawCallParams::hullShader"]
        [::std::mem::offset_of!(UnityRenderingExtBeforeDrawCallParams, hullShader) - 24usize];
    ["Offset of field: UnityRenderingExtBeforeDrawCallParams::domainShader"]
        [::std::mem::offset_of!(UnityRenderingExtBeforeDrawCallParams, domainShader) - 32usize];
    ["Offset of field: UnityRenderingExtBeforeDrawCallParams::eyeIndex"]
        [::std::mem::offset_of!(UnityRenderingExtBeforeDrawCallParams, eyeIndex) - 40usize];
};
impl Default for UnityRenderingExtBeforeDrawCallParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtCustomBlitParams {
    pub source: UnityTextureID,
    pub destination: UnityRenderBuffer,
    pub command: ::std::os::raw::c_uint,
    pub commandParam: ::std::os::raw::c_uint,
    pub commandFlags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityRenderingExtCustomBlitParams"]
        [::std::mem::size_of::<UnityRenderingExtCustomBlitParams>() - 32usize];
    ["Alignment of UnityRenderingExtCustomBlitParams"]
        [::std::mem::align_of::<UnityRenderingExtCustomBlitParams>() - 8usize];
    ["Offset of field: UnityRenderingExtCustomBlitParams::source"]
        [::std::mem::offset_of!(UnityRenderingExtCustomBlitParams, source) - 0usize];
    ["Offset of field: UnityRenderingExtCustomBlitParams::destination"]
        [::std::mem::offset_of!(UnityRenderingExtCustomBlitParams, destination) - 8usize];
    ["Offset of field: UnityRenderingExtCustomBlitParams::command"]
        [::std::mem::offset_of!(UnityRenderingExtCustomBlitParams, command) - 16usize];
    ["Offset of field: UnityRenderingExtCustomBlitParams::commandParam"]
        [::std::mem::offset_of!(UnityRenderingExtCustomBlitParams, commandParam) - 20usize];
    ["Offset of field: UnityRenderingExtCustomBlitParams::commandFlags"]
        [::std::mem::offset_of!(UnityRenderingExtCustomBlitParams, commandFlags) - 24usize];
};
impl Default for UnityRenderingExtCustomBlitParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtTextureUpdateParamsV1 {
    pub texData: *mut ::std::os::raw::c_void,
    pub userData: ::std::os::raw::c_uint,
    pub textureID: ::std::os::raw::c_uint,
    pub format: UnityRenderingExtTextureFormat,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub bpp: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityRenderingExtTextureUpdateParamsV1"]
        [::std::mem::size_of::<UnityRenderingExtTextureUpdateParamsV1>() - 32usize];
    ["Alignment of UnityRenderingExtTextureUpdateParamsV1"]
        [::std::mem::align_of::<UnityRenderingExtTextureUpdateParamsV1>() - 8usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV1::texData"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV1, texData) - 0usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV1::userData"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV1, userData) - 8usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV1::textureID"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV1, textureID) - 12usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV1::format"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV1, format) - 16usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV1::width"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV1, width) - 20usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV1::height"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV1, height) - 24usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV1::bpp"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV1, bpp) - 28usize];
};
impl Default for UnityRenderingExtTextureUpdateParamsV1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type UnityRenderingExtTextureUpdateParams = UnityRenderingExtTextureUpdateParamsV1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityRenderingExtTextureUpdateParamsV2 {
    pub texData: *mut ::std::os::raw::c_void,
    pub textureID: isize,
    pub userData: ::std::os::raw::c_uint,
    pub format: UnityRenderingExtTextureFormat,
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub bpp: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityRenderingExtTextureUpdateParamsV2"]
        [::std::mem::size_of::<UnityRenderingExtTextureUpdateParamsV2>() - 40usize];
    ["Alignment of UnityRenderingExtTextureUpdateParamsV2"]
        [::std::mem::align_of::<UnityRenderingExtTextureUpdateParamsV2>() - 8usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV2::texData"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV2, texData) - 0usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV2::textureID"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV2, textureID) - 8usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV2::userData"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV2, userData) - 16usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV2::format"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV2, format) - 20usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV2::width"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV2, width) - 24usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV2::height"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV2, height) - 28usize];
    ["Offset of field: UnityRenderingExtTextureUpdateParamsV2::bpp"]
        [::std::mem::offset_of!(UnityRenderingExtTextureUpdateParamsV2, bpp) - 32usize];
};
impl Default for UnityRenderingExtTextureUpdateParamsV2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "system" {
    pub fn UnityRenderingExtEvent(
        event: UnityRenderingExtEventType,
        data: *mut ::std::os::raw::c_void,
    );
}
unsafe extern "system" {
    pub fn UnityRenderingExtQuery(query: UnityRenderingExtQueryType) -> bool;
}
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused0:
    UnityShaderCompilerExtCompilerPlatform = 0;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused1:
    UnityShaderCompilerExtCompilerPlatform = 1;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused2:
    UnityShaderCompilerExtCompilerPlatform = 2;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused3:
    UnityShaderCompilerExtCompilerPlatform = 3;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformD3D11:
    UnityShaderCompilerExtCompilerPlatform = 4;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused5:
    UnityShaderCompilerExtCompilerPlatform = 5;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused6:
    UnityShaderCompilerExtCompilerPlatform = 6;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused7:
    UnityShaderCompilerExtCompilerPlatform = 7;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused8:
    UnityShaderCompilerExtCompilerPlatform = 8;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformGLES3Plus:
    UnityShaderCompilerExtCompilerPlatform = 9;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused10:
    UnityShaderCompilerExtCompilerPlatform = 10;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformPS4:
    UnityShaderCompilerExtCompilerPlatform = 11;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformXboxOne:
    UnityShaderCompilerExtCompilerPlatform = 12;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused13:
    UnityShaderCompilerExtCompilerPlatform = 13;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformMetal:
    UnityShaderCompilerExtCompilerPlatform = 14;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformOpenGLCore:
    UnityShaderCompilerExtCompilerPlatform = 15;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused16:
    UnityShaderCompilerExtCompilerPlatform = 16;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused17:
    UnityShaderCompilerExtCompilerPlatform = 17;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformVulkan:
    UnityShaderCompilerExtCompilerPlatform = 18;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformSwitch:
    UnityShaderCompilerExtCompilerPlatform = 19;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformXboxOneD3D12:
    UnityShaderCompilerExtCompilerPlatform = 20;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformGameCoreXboxOne : UnityShaderCompilerExtCompilerPlatform = 21 ;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformGameCoreXboxSeries : UnityShaderCompilerExtCompilerPlatform = 22 ;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformPS5:
    UnityShaderCompilerExtCompilerPlatform = 23;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformPS5NGGC:
    UnityShaderCompilerExtCompilerPlatform = 24;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformUnused25:
    UnityShaderCompilerExtCompilerPlatform = 25;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformWebGPU:
    UnityShaderCompilerExtCompilerPlatform = 26;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformReservedCFE:
    UnityShaderCompilerExtCompilerPlatform = 27;
pub const UnityShaderCompilerExtCompilerPlatform_kUnityShaderCompilerExtCompPlatformCount:
    UnityShaderCompilerExtCompilerPlatform = 28;
pub type UnityShaderCompilerExtCompilerPlatform = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderNone:
    UnityShaderCompilerExtShaderType = 0;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderVertex:
    UnityShaderCompilerExtShaderType = 1;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderFragment:
    UnityShaderCompilerExtShaderType = 2;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderGeometry:
    UnityShaderCompilerExtShaderType = 3;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderHull:
    UnityShaderCompilerExtShaderType = 4;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderDomain:
    UnityShaderCompilerExtShaderType = 5;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderRayTracing:
    UnityShaderCompilerExtShaderType = 6;
pub const UnityShaderCompilerExtShaderType_kUnityShaderCompilerExtShaderTypeCount:
    UnityShaderCompilerExtShaderType = 7;
pub type UnityShaderCompilerExtShaderType = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnknown:
    UnityShaderCompilerExtGPUProgramType = 0;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLLegacy:
    UnityShaderCompilerExtGPUProgramType = 1;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES31AEP:
    UnityShaderCompilerExtGPUProgramType = 2;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES31:
    UnityShaderCompilerExtGPUProgramType = 3;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES3:
    UnityShaderCompilerExtGPUProgramType = 4;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLES:
    UnityShaderCompilerExtGPUProgramType = 5;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLCore32:
    UnityShaderCompilerExtGPUProgramType = 6;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLCore41:
    UnityShaderCompilerExtGPUProgramType = 7;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetGLCore43:
    UnityShaderCompilerExtGPUProgramType = 8;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9VertexSM20 : UnityShaderCompilerExtGPUProgramType = 9 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9VertexSM30 : UnityShaderCompilerExtGPUProgramType = 10 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9PixelSM20 : UnityShaderCompilerExtGPUProgramType = 11 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX9PixelSM30 : UnityShaderCompilerExtGPUProgramType = 12 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX10Level9Vertex : UnityShaderCompilerExtGPUProgramType = 13 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX10Level9Pixel : UnityShaderCompilerExtGPUProgramType = 14 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11VertexSM40 : UnityShaderCompilerExtGPUProgramType = 15 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11VertexSM50 : UnityShaderCompilerExtGPUProgramType = 16 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11PixelSM40 : UnityShaderCompilerExtGPUProgramType = 17 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11PixelSM50 : UnityShaderCompilerExtGPUProgramType = 18 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11GeometrySM40 : UnityShaderCompilerExtGPUProgramType = 19 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11GeometrySM50 : UnityShaderCompilerExtGPUProgramType = 20 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11HullSM50 : UnityShaderCompilerExtGPUProgramType = 21 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetDX11DomainSM50 : UnityShaderCompilerExtGPUProgramType = 22 ;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetMetalVS:
    UnityShaderCompilerExtGPUProgramType = 23;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetMetalFS:
    UnityShaderCompilerExtGPUProgramType = 24;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetSPIRV:
    UnityShaderCompilerExtGPUProgramType = 25;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused1:
    UnityShaderCompilerExtGPUProgramType = 26;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused2:
    UnityShaderCompilerExtGPUProgramType = 27;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused3:
    UnityShaderCompilerExtGPUProgramType = 28;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused4:
    UnityShaderCompilerExtGPUProgramType = 29;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetUnused5:
    UnityShaderCompilerExtGPUProgramType = 30;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetRayTracing:
    UnityShaderCompilerExtGPUProgramType = 31;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetPS5NGGC:
    UnityShaderCompilerExtGPUProgramType = 32;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetWebGPU:
    UnityShaderCompilerExtGPUProgramType = 33;
pub const UnityShaderCompilerExtGPUProgramType_kUnityShaderCompilerExtGPUProgramTargetCount:
    UnityShaderCompilerExtGPUProgramType = 34;
pub type UnityShaderCompilerExtGPUProgramType = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramVS:
    UnityShaderCompilerExtGPUProgram = 2;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramPS:
    UnityShaderCompilerExtGPUProgram = 4;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramGS:
    UnityShaderCompilerExtGPUProgram = 8;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramHS:
    UnityShaderCompilerExtGPUProgram = 16;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramDS:
    UnityShaderCompilerExtGPUProgram = 32;
pub const UnityShaderCompilerExtGPUProgram_kUnityShaderCompilerExtGPUProgramCustom:
    UnityShaderCompilerExtGPUProgram = 128;
pub type UnityShaderCompilerExtGPUProgram = ::std::os::raw::c_uint;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomSourceVariant:
    UnityShaderCompilerExtEventType = 0;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomSourceVariantCleanup : UnityShaderCompilerExtEventType = 1 ;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomBinaryVariant:
    UnityShaderCompilerExtEventType = 2;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCreateCustomBinaryVariantCleanup : UnityShaderCompilerExtEventType = 3 ;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventPluginConfigure:
    UnityShaderCompilerExtEventType = 4;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtEventCount:
    UnityShaderCompilerExtEventType = 5;
pub const UnityShaderCompilerExtEventType_kUnityShaderCompilerExtUserEventsStart:
    UnityShaderCompilerExtEventType = 5;
pub type UnityShaderCompilerExtEventType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityShaderCompilerExtCustomSourceVariantParams {
    pub outputSnippet: *mut ::std::os::raw::c_char,
    pub outputKeywords: *mut ::std::os::raw::c_char,
    pub inputSnippet: *const ::std::os::raw::c_char,
    pub vr: bool,
    pub platform: UnityShaderCompilerExtCompilerPlatform,
    pub shaderType: UnityShaderCompilerExtShaderType,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityShaderCompilerExtCustomSourceVariantParams"]
        [::std::mem::size_of::<UnityShaderCompilerExtCustomSourceVariantParams>() - 40usize];
    ["Alignment of UnityShaderCompilerExtCustomSourceVariantParams"]
        [::std::mem::align_of::<UnityShaderCompilerExtCustomSourceVariantParams>() - 8usize];
    ["Offset of field: UnityShaderCompilerExtCustomSourceVariantParams::outputSnippet"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomSourceVariantParams,
        outputSnippet
    ) - 0usize];
    ["Offset of field: UnityShaderCompilerExtCustomSourceVariantParams::outputKeywords"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomSourceVariantParams,
        outputKeywords
    )
        - 8usize];
    ["Offset of field: UnityShaderCompilerExtCustomSourceVariantParams::inputSnippet"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomSourceVariantParams,
        inputSnippet
    ) - 16usize];
    ["Offset of field: UnityShaderCompilerExtCustomSourceVariantParams::vr"]
        [::std::mem::offset_of!(UnityShaderCompilerExtCustomSourceVariantParams, vr) - 24usize];
    ["Offset of field: UnityShaderCompilerExtCustomSourceVariantParams::platform"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomSourceVariantParams,
        platform
    ) - 28usize];
    ["Offset of field: UnityShaderCompilerExtCustomSourceVariantParams::shaderType"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomSourceVariantParams,
        shaderType
    ) - 32usize];
};
impl Default for UnityShaderCompilerExtCustomSourceVariantParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityShaderCompilerExtCustomBinaryVariantParams {
    pub outputBinaryShader: *mut *mut ::std::os::raw::c_void,
    pub inputByteCode: *const ::std::os::raw::c_uchar,
    pub inputByteCodeSize: ::std::os::raw::c_uint,
    pub programTypeMask: ::std::os::raw::c_uint,
    pub platform: UnityShaderCompilerExtCompilerPlatform,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityShaderCompilerExtCustomBinaryVariantParams"]
        [::std::mem::size_of::<UnityShaderCompilerExtCustomBinaryVariantParams>() - 32usize];
    ["Alignment of UnityShaderCompilerExtCustomBinaryVariantParams"]
        [::std::mem::align_of::<UnityShaderCompilerExtCustomBinaryVariantParams>() - 8usize];
    ["Offset of field: UnityShaderCompilerExtCustomBinaryVariantParams::outputBinaryShader"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomBinaryVariantParams,
        outputBinaryShader
    )
        - 0usize];
    ["Offset of field: UnityShaderCompilerExtCustomBinaryVariantParams::inputByteCode"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomBinaryVariantParams,
        inputByteCode
    ) - 8usize];
    ["Offset of field: UnityShaderCompilerExtCustomBinaryVariantParams::inputByteCodeSize"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomBinaryVariantParams,
        inputByteCodeSize
    )
        - 16usize];
    ["Offset of field: UnityShaderCompilerExtCustomBinaryVariantParams::programTypeMask"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomBinaryVariantParams,
        programTypeMask
    )
        - 20usize];
    ["Offset of field: UnityShaderCompilerExtCustomBinaryVariantParams::platform"][::std::mem::offset_of!(
        UnityShaderCompilerExtCustomBinaryVariantParams,
        platform
    ) - 24usize];
};
impl Default for UnityShaderCompilerExtCustomBinaryVariantParams {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct IUnityShaderCompilerExtPluginConfigure__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct IUnityShaderCompilerExtPluginConfigure {
    pub vtable_: *const IUnityShaderCompilerExtPluginConfigure__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityShaderCompilerExtPluginConfigure"]
        [::std::mem::size_of::<IUnityShaderCompilerExtPluginConfigure>() - 8usize];
    ["Alignment of IUnityShaderCompilerExtPluginConfigure"]
        [::std::mem::align_of::<IUnityShaderCompilerExtPluginConfigure>() - 8usize];
};
impl Default for IUnityShaderCompilerExtPluginConfigure {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "system" {
    pub fn UnityShaderCompilerExtEvent(
        event: UnityShaderCompilerExtEventType,
        data: *mut ::std::os::raw::c_void,
    );
}
pub type UnityProfilerMarkerId = u32;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryRender:
    UnityBuiltinProfilerCategory_ = 0;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryScripts:
    UnityBuiltinProfilerCategory_ = 1;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryManagedJobs:
    UnityBuiltinProfilerCategory_ = 2;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryBurstJobs:
    UnityBuiltinProfilerCategory_ = 3;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryGUI: UnityBuiltinProfilerCategory_ =
    4;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryPhysics:
    UnityBuiltinProfilerCategory_ = 5;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAnimation:
    UnityBuiltinProfilerCategory_ = 6;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAI: UnityBuiltinProfilerCategory_ = 7;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAudio: UnityBuiltinProfilerCategory_ =
    8;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAudioJob:
    UnityBuiltinProfilerCategory_ = 9;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAudioUpdateJob:
    UnityBuiltinProfilerCategory_ = 10;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVideo: UnityBuiltinProfilerCategory_ =
    11;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryParticles:
    UnityBuiltinProfilerCategory_ = 12;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryGi: UnityBuiltinProfilerCategory_ =
    13;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryNetwork:
    UnityBuiltinProfilerCategory_ = 14;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryLoading:
    UnityBuiltinProfilerCategory_ = 15;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryOther: UnityBuiltinProfilerCategory_ =
    16;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryGC: UnityBuiltinProfilerCategory_ =
    17;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVSync: UnityBuiltinProfilerCategory_ =
    18;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryOverhead:
    UnityBuiltinProfilerCategory_ = 19;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryPlayerLoop:
    UnityBuiltinProfilerCategory_ = 20;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryDirector:
    UnityBuiltinProfilerCategory_ = 21;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVR: UnityBuiltinProfilerCategory_ =
    22;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryAllocation:
    UnityBuiltinProfilerCategory_ = 23;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryMemory:
    UnityBuiltinProfilerCategory_ = 23;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryInternal:
    UnityBuiltinProfilerCategory_ = 24;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryFileIO:
    UnityBuiltinProfilerCategory_ = 25;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryUISystemLayout:
    UnityBuiltinProfilerCategory_ = 26;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryUISystemRender:
    UnityBuiltinProfilerCategory_ = 27;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVFX: UnityBuiltinProfilerCategory_ =
    28;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryBuildInterface:
    UnityBuiltinProfilerCategory_ = 29;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryInput: UnityBuiltinProfilerCategory_ =
    30;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryVirtualTexturing:
    UnityBuiltinProfilerCategory_ = 31;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryGPU: UnityBuiltinProfilerCategory_ =
    32;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryPhysics2D:
    UnityBuiltinProfilerCategory_ = 33;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryNetworkOperations:
    UnityBuiltinProfilerCategory_ = 34;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryUIDetails:
    UnityBuiltinProfilerCategory_ = 35;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryDebug: UnityBuiltinProfilerCategory_ =
    36;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryJobs: UnityBuiltinProfilerCategory_ =
    37;
pub const UnityBuiltinProfilerCategory__kUnityProfilerCategoryText: UnityBuiltinProfilerCategory_ =
    38;
pub type UnityBuiltinProfilerCategory_ = ::std::os::raw::c_uint;
pub type UnityProfilerCategoryId = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerCategoryDesc {
    pub id: UnityProfilerCategoryId,
    pub reserved0: u16,
    pub rgbaColor: u32,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityProfilerCategoryDesc"]
        [::std::mem::size_of::<UnityProfilerCategoryDesc>() - 16usize];
    ["Alignment of UnityProfilerCategoryDesc"]
        [::std::mem::align_of::<UnityProfilerCategoryDesc>() - 8usize];
    ["Offset of field: UnityProfilerCategoryDesc::id"]
        [::std::mem::offset_of!(UnityProfilerCategoryDesc, id) - 0usize];
    ["Offset of field: UnityProfilerCategoryDesc::reserved0"]
        [::std::mem::offset_of!(UnityProfilerCategoryDesc, reserved0) - 2usize];
    ["Offset of field: UnityProfilerCategoryDesc::rgbaColor"]
        [::std::mem::offset_of!(UnityProfilerCategoryDesc, rgbaColor) - 4usize];
    ["Offset of field: UnityProfilerCategoryDesc::name"]
        [::std::mem::offset_of!(UnityProfilerCategoryDesc, name) - 8usize];
};
impl Default for UnityProfilerCategoryDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagDefault: UnityProfilerMarkerFlag_ = 0;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagScriptUser: UnityProfilerMarkerFlag_ = 2;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagScriptInvoke: UnityProfilerMarkerFlag_ =
    32;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagScriptEnterLeave:
    UnityProfilerMarkerFlag_ = 64;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagAvailabilityEditor:
    UnityProfilerMarkerFlag_ = 4;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagAvailabilityNonDev:
    UnityProfilerMarkerFlag_ = 8;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagWarning: UnityProfilerMarkerFlag_ = 16;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagCounter: UnityProfilerMarkerFlag_ = 128;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagVerbosityDebug:
    UnityProfilerMarkerFlag_ = 1024;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagVerbosityInternal:
    UnityProfilerMarkerFlag_ = 2048;
pub const UnityProfilerMarkerFlag__kUnityProfilerMarkerFlagVerbosityAdvanced:
    UnityProfilerMarkerFlag_ = 4096;
pub type UnityProfilerMarkerFlag_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerFlags = u16;
pub const UnityProfilerMarkerEventType__kUnityProfilerMarkerEventTypeBegin:
    UnityProfilerMarkerEventType_ = 0;
pub const UnityProfilerMarkerEventType__kUnityProfilerMarkerEventTypeEnd:
    UnityProfilerMarkerEventType_ = 1;
pub const UnityProfilerMarkerEventType__kUnityProfilerMarkerEventTypeSingle:
    UnityProfilerMarkerEventType_ = 2;
pub type UnityProfilerMarkerEventType_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerEventType = u16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerMarkerDesc {
    pub callback: *const ::std::os::raw::c_void,
    pub id: UnityProfilerMarkerId,
    pub flags: UnityProfilerMarkerFlags,
    pub categoryId: UnityProfilerCategoryId,
    pub name: *const ::std::os::raw::c_char,
    pub metaDataDesc: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityProfilerMarkerDesc"][::std::mem::size_of::<UnityProfilerMarkerDesc>() - 32usize];
    ["Alignment of UnityProfilerMarkerDesc"]
        [::std::mem::align_of::<UnityProfilerMarkerDesc>() - 8usize];
    ["Offset of field: UnityProfilerMarkerDesc::callback"]
        [::std::mem::offset_of!(UnityProfilerMarkerDesc, callback) - 0usize];
    ["Offset of field: UnityProfilerMarkerDesc::id"]
        [::std::mem::offset_of!(UnityProfilerMarkerDesc, id) - 8usize];
    ["Offset of field: UnityProfilerMarkerDesc::flags"]
        [::std::mem::offset_of!(UnityProfilerMarkerDesc, flags) - 12usize];
    ["Offset of field: UnityProfilerMarkerDesc::categoryId"]
        [::std::mem::offset_of!(UnityProfilerMarkerDesc, categoryId) - 14usize];
    ["Offset of field: UnityProfilerMarkerDesc::name"]
        [::std::mem::offset_of!(UnityProfilerMarkerDesc, name) - 16usize];
    ["Offset of field: UnityProfilerMarkerDesc::metaDataDesc"]
        [::std::mem::offset_of!(UnityProfilerMarkerDesc, metaDataDesc) - 24usize];
};
impl Default for UnityProfilerMarkerDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeNone:
    UnityProfilerMarkerDataType_ = 0;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeInstanceId:
    UnityProfilerMarkerDataType_ = 1;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeInt32:
    UnityProfilerMarkerDataType_ = 2;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeUInt32:
    UnityProfilerMarkerDataType_ = 3;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeInt64:
    UnityProfilerMarkerDataType_ = 4;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeUInt64:
    UnityProfilerMarkerDataType_ = 5;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeFloat:
    UnityProfilerMarkerDataType_ = 6;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeDouble:
    UnityProfilerMarkerDataType_ = 7;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeString:
    UnityProfilerMarkerDataType_ = 8;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeString16:
    UnityProfilerMarkerDataType_ = 9;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeBlob8:
    UnityProfilerMarkerDataType_ = 11;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeGfxResourceId:
    UnityProfilerMarkerDataType_ = 12;
pub const UnityProfilerMarkerDataType__kUnityProfilerMarkerDataTypeCount:
    UnityProfilerMarkerDataType_ = 13;
pub type UnityProfilerMarkerDataType_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerDataType = u8;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitUndefined:
    UnityProfilerMarkerDataUnit_ = 0;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitTimeNanoseconds:
    UnityProfilerMarkerDataUnit_ = 1;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitBytes:
    UnityProfilerMarkerDataUnit_ = 2;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitCount:
    UnityProfilerMarkerDataUnit_ = 3;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitPercent:
    UnityProfilerMarkerDataUnit_ = 4;
pub const UnityProfilerMarkerDataUnit__kUnityProfilerMarkerDataUnitFrequencyHz:
    UnityProfilerMarkerDataUnit_ = 5;
pub type UnityProfilerMarkerDataUnit_ = ::std::os::raw::c_uint;
pub type UnityProfilerMarkerDataUnit = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerMarkerData {
    pub type_: UnityProfilerMarkerDataType,
    pub reserved0: u8,
    pub reserved1: u16,
    pub size: u32,
    pub ptr: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityProfilerMarkerData"][::std::mem::size_of::<UnityProfilerMarkerData>() - 16usize];
    ["Alignment of UnityProfilerMarkerData"]
        [::std::mem::align_of::<UnityProfilerMarkerData>() - 8usize];
    ["Offset of field: UnityProfilerMarkerData::type_"]
        [::std::mem::offset_of!(UnityProfilerMarkerData, type_) - 0usize];
    ["Offset of field: UnityProfilerMarkerData::reserved0"]
        [::std::mem::offset_of!(UnityProfilerMarkerData, reserved0) - 1usize];
    ["Offset of field: UnityProfilerMarkerData::reserved1"]
        [::std::mem::offset_of!(UnityProfilerMarkerData, reserved1) - 2usize];
    ["Offset of field: UnityProfilerMarkerData::size"]
        [::std::mem::offset_of!(UnityProfilerMarkerData, size) - 4usize];
    ["Offset of field: UnityProfilerMarkerData::ptr"]
        [::std::mem::offset_of!(UnityProfilerMarkerData, ptr) - 8usize];
};
impl Default for UnityProfilerMarkerData {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const UnityProfilerFlowEventType__kUnityProfilerFlowEventTypeBegin:
    UnityProfilerFlowEventType_ = 0;
pub const UnityProfilerFlowEventType__kUnityProfilerFlowEventTypeParallelNext:
    UnityProfilerFlowEventType_ = 1;
pub const UnityProfilerFlowEventType__kUnityProfilerFlowEventTypeEnd: UnityProfilerFlowEventType_ =
    2;
pub const UnityProfilerFlowEventType__kUnityProfilerFlowEventTypeNext: UnityProfilerFlowEventType_ =
    3;
pub type UnityProfilerFlowEventType_ = ::std::os::raw::c_uint;
pub type UnityProfilerFlowEventType = u8;
pub const UnityProfilerCounterFlags__kUnityProfilerCounterFlagNone: UnityProfilerCounterFlags_ = 0;
pub const UnityProfilerCounterFlags__kUnityProfilerCounterFlushOnEndOfFrame:
    UnityProfilerCounterFlags_ = 2;
pub const UnityProfilerCounterFlags__kUnityProfilerCounterFlagResetToZeroOnFlush:
    UnityProfilerCounterFlags_ = 4;
pub const UnityProfilerCounterFlags__kUnityProfilerCounterFlagAtomic: UnityProfilerCounterFlags_ =
    8;
pub const UnityProfilerCounterFlags__kUnityProfilerCounterFlagGetter: UnityProfilerCounterFlags_ =
    16;
pub type UnityProfilerCounterFlags_ = ::std::os::raw::c_uint;
pub type UnityProfilerCounterFlags = u16;
pub type UnityProfilerThreadId = u64;
pub type UnityProfilerCounterStatePtrCallback =
    ::std::option::Option<unsafe extern "system" fn(userData: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct UnityProfilerDataUnitHelper {
    pub _address: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: UnityProfilerDataUnitHelper_open0_int_close0"]
        [::std::mem::size_of::<UnityProfilerDataUnitHelper>() - 1usize];
    ["Align of template specialization: UnityProfilerDataUnitHelper_open0_int_close0"]
        [::std::mem::align_of::<UnityProfilerDataUnitHelper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: UnityProfilerDataUnitHelper_open0_unsigned_int_close0"]
        [::std::mem::size_of::<UnityProfilerDataUnitHelper>() - 1usize];
    ["Align of template specialization: UnityProfilerDataUnitHelper_open0_unsigned_int_close0"]
        [::std::mem::align_of::<UnityProfilerDataUnitHelper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: UnityProfilerDataUnitHelper_open0_long_close0"]
        [::std::mem::size_of::<UnityProfilerDataUnitHelper>() - 1usize];
    ["Align of template specialization: UnityProfilerDataUnitHelper_open0_long_close0"]
        [::std::mem::align_of::<UnityProfilerDataUnitHelper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: UnityProfilerDataUnitHelper_open0_unsigned_long_close0"]
        [::std::mem::size_of::<UnityProfilerDataUnitHelper>() - 1usize];
    ["Align of template specialization: UnityProfilerDataUnitHelper_open0_unsigned_long_close0"]
        [::std::mem::align_of::<UnityProfilerDataUnitHelper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: UnityProfilerDataUnitHelper_open0_float_close0"]
        [::std::mem::size_of::<UnityProfilerDataUnitHelper>() - 1usize];
    ["Align of template specialization: UnityProfilerDataUnitHelper_open0_float_close0"]
        [::std::mem::align_of::<UnityProfilerDataUnitHelper>() - 1usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of template specialization: UnityProfilerDataUnitHelper_open0_double_close0"]
        [::std::mem::size_of::<UnityProfilerDataUnitHelper>() - 1usize];
    ["Align of template specialization: UnityProfilerDataUnitHelper_open0_double_close0"]
        [::std::mem::align_of::<UnityProfilerDataUnitHelper>() - 1usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityProfilerV2 {
    pub EmitEvent: ::std::option::Option<
        unsafe extern "system" fn(
            markerDesc: *const UnityProfilerMarkerDesc,
            eventType: UnityProfilerMarkerEventType,
            eventDataCount: u16,
            eventData: *const UnityProfilerMarkerData,
        ),
    >,
    pub IsEnabled: ::std::option::Option<unsafe extern "system" fn() -> ::std::os::raw::c_int>,
    pub IsAvailable: ::std::option::Option<unsafe extern "system" fn() -> ::std::os::raw::c_int>,
    pub CreateMarker: ::std::option::Option<
        unsafe extern "system" fn(
            desc: *mut *const UnityProfilerMarkerDesc,
            name: *const ::std::os::raw::c_char,
            category: UnityProfilerCategoryId,
            flags: UnityProfilerMarkerFlags,
            eventDataCount: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub SetMarkerMetadataName: ::std::option::Option<
        unsafe extern "system" fn(
            desc: *const UnityProfilerMarkerDesc,
            index: ::std::os::raw::c_int,
            metadataName: *const ::std::os::raw::c_char,
            metadataType: UnityProfilerMarkerDataType,
            metadataUnit: UnityProfilerMarkerDataUnit,
        ) -> ::std::os::raw::c_int,
    >,
    pub CreateCategory: ::std::option::Option<
        unsafe extern "system" fn(
            category: *mut UnityProfilerCategoryId,
            name: *const ::std::os::raw::c_char,
            unused: u32,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterThread: ::std::option::Option<
        unsafe extern "system" fn(
            threadId: *mut UnityProfilerThreadId,
            groupName: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterThread: ::std::option::Option<
        unsafe extern "system" fn(threadId: UnityProfilerThreadId) -> ::std::os::raw::c_int,
    >,
    pub CreateCounterValue: ::std::option::Option<
        unsafe extern "system" fn(
            category: UnityProfilerCategoryId,
            name: *const ::std::os::raw::c_char,
            flags: UnityProfilerMarkerFlags,
            valueType: UnityProfilerMarkerDataType,
            valueUnit: UnityProfilerMarkerDataUnit,
            valueSize: usize,
            counterFlags: UnityProfilerCounterFlags,
            activateFunc: UnityProfilerCounterStatePtrCallback,
            deactivateFunc: UnityProfilerCounterStatePtrCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub FlushCounterValue:
        ::std::option::Option<unsafe extern "system" fn(counter: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityProfilerV2"][::std::mem::size_of::<IUnityProfilerV2>() - 80usize];
    ["Alignment of IUnityProfilerV2"][::std::mem::align_of::<IUnityProfilerV2>() - 8usize];
    ["Offset of field: IUnityProfilerV2::EmitEvent"]
        [::std::mem::offset_of!(IUnityProfilerV2, EmitEvent) - 0usize];
    ["Offset of field: IUnityProfilerV2::IsEnabled"]
        [::std::mem::offset_of!(IUnityProfilerV2, IsEnabled) - 8usize];
    ["Offset of field: IUnityProfilerV2::IsAvailable"]
        [::std::mem::offset_of!(IUnityProfilerV2, IsAvailable) - 16usize];
    ["Offset of field: IUnityProfilerV2::CreateMarker"]
        [::std::mem::offset_of!(IUnityProfilerV2, CreateMarker) - 24usize];
    ["Offset of field: IUnityProfilerV2::SetMarkerMetadataName"]
        [::std::mem::offset_of!(IUnityProfilerV2, SetMarkerMetadataName) - 32usize];
    ["Offset of field: IUnityProfilerV2::CreateCategory"]
        [::std::mem::offset_of!(IUnityProfilerV2, CreateCategory) - 40usize];
    ["Offset of field: IUnityProfilerV2::RegisterThread"]
        [::std::mem::offset_of!(IUnityProfilerV2, RegisterThread) - 48usize];
    ["Offset of field: IUnityProfilerV2::UnregisterThread"]
        [::std::mem::offset_of!(IUnityProfilerV2, UnregisterThread) - 56usize];
    ["Offset of field: IUnityProfilerV2::CreateCounterValue"]
        [::std::mem::offset_of!(IUnityProfilerV2, CreateCounterValue) - 64usize];
    ["Offset of field: IUnityProfilerV2::FlushCounterValue"]
        [::std::mem::offset_of!(IUnityProfilerV2, FlushCounterValue) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerCounterValue {
    pub m_Value: *mut ::std::os::raw::c_void,
    pub m_Profiler: *mut IUnityProfilerV2,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityProfilerCounterValue"]
        [::std::mem::size_of::<UnityProfilerCounterValue>() - 16usize];
    ["Alignment of UnityProfilerCounterValue"]
        [::std::mem::align_of::<UnityProfilerCounterValue>() - 8usize];
    ["Offset of field: UnityProfilerCounterValue::m_Value"]
        [::std::mem::offset_of!(UnityProfilerCounterValue, m_Value) - 0usize];
    ["Offset of field: UnityProfilerCounterValue::m_Profiler"]
        [::std::mem::offset_of!(UnityProfilerCounterValue, m_Profiler) - 8usize];
};
impl Default for UnityProfilerCounterValue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerCounter {
    pub _base: UnityProfilerCounterValue,
}
impl Default for UnityProfilerCounter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityProfiler {
    pub EmitEvent: ::std::option::Option<
        unsafe extern "system" fn(
            markerDesc: *const UnityProfilerMarkerDesc,
            eventType: UnityProfilerMarkerEventType,
            eventDataCount: u16,
            eventData: *const UnityProfilerMarkerData,
        ),
    >,
    pub IsEnabled: ::std::option::Option<unsafe extern "system" fn() -> ::std::os::raw::c_int>,
    pub IsAvailable: ::std::option::Option<unsafe extern "system" fn() -> ::std::os::raw::c_int>,
    pub CreateMarker: ::std::option::Option<
        unsafe extern "system" fn(
            desc: *mut *const UnityProfilerMarkerDesc,
            name: *const ::std::os::raw::c_char,
            category: UnityProfilerCategoryId,
            flags: UnityProfilerMarkerFlags,
            eventDataCount: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub SetMarkerMetadataName: ::std::option::Option<
        unsafe extern "system" fn(
            desc: *const UnityProfilerMarkerDesc,
            index: ::std::os::raw::c_int,
            metadataName: *const ::std::os::raw::c_char,
            metadataType: UnityProfilerMarkerDataType,
            metadataUnit: UnityProfilerMarkerDataUnit,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterThread: ::std::option::Option<
        unsafe extern "system" fn(
            threadId: *mut UnityProfilerThreadId,
            groupName: *const ::std::os::raw::c_char,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterThread: ::std::option::Option<
        unsafe extern "system" fn(threadId: UnityProfilerThreadId) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityProfiler"][::std::mem::size_of::<IUnityProfiler>() - 56usize];
    ["Alignment of IUnityProfiler"][::std::mem::align_of::<IUnityProfiler>() - 8usize];
    ["Offset of field: IUnityProfiler::EmitEvent"]
        [::std::mem::offset_of!(IUnityProfiler, EmitEvent) - 0usize];
    ["Offset of field: IUnityProfiler::IsEnabled"]
        [::std::mem::offset_of!(IUnityProfiler, IsEnabled) - 8usize];
    ["Offset of field: IUnityProfiler::IsAvailable"]
        [::std::mem::offset_of!(IUnityProfiler, IsAvailable) - 16usize];
    ["Offset of field: IUnityProfiler::CreateMarker"]
        [::std::mem::offset_of!(IUnityProfiler, CreateMarker) - 24usize];
    ["Offset of field: IUnityProfiler::SetMarkerMetadataName"]
        [::std::mem::offset_of!(IUnityProfiler, SetMarkerMetadataName) - 32usize];
    ["Offset of field: IUnityProfiler::RegisterThread"]
        [::std::mem::offset_of!(IUnityProfiler, RegisterThread) - 40usize];
    ["Offset of field: IUnityProfiler::UnregisterThread"]
        [::std::mem::offset_of!(IUnityProfiler, UnregisterThread) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityProfilerThreadDesc {
    pub threadId: UnityProfilerThreadId,
    pub groupName: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityProfilerThreadDesc"][::std::mem::size_of::<UnityProfilerThreadDesc>() - 24usize];
    ["Alignment of UnityProfilerThreadDesc"]
        [::std::mem::align_of::<UnityProfilerThreadDesc>() - 8usize];
    ["Offset of field: UnityProfilerThreadDesc::threadId"]
        [::std::mem::offset_of!(UnityProfilerThreadDesc, threadId) - 0usize];
    ["Offset of field: UnityProfilerThreadDesc::groupName"]
        [::std::mem::offset_of!(UnityProfilerThreadDesc, groupName) - 8usize];
    ["Offset of field: UnityProfilerThreadDesc::name"]
        [::std::mem::offset_of!(UnityProfilerThreadDesc, name) - 16usize];
};
impl Default for UnityProfilerThreadDesc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type IUnityProfilerCreateCategoryCallback = ::std::option::Option<
    unsafe extern "system" fn(
        categoryDesc: *const UnityProfilerCategoryDesc,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub type IUnityProfilerCreateMarkerCallback = ::std::option::Option<
    unsafe extern "system" fn(
        markerDesc: *const UnityProfilerMarkerDesc,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub type IUnityProfilerMarkerEventCallback = ::std::option::Option<
    unsafe extern "system" fn(
        markerDesc: *const UnityProfilerMarkerDesc,
        eventType: UnityProfilerMarkerEventType,
        eventDataCount: u16,
        eventData: *const UnityProfilerMarkerData,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub type IUnityProfilerBulkCounterDataEventCallback = ::std::option::Option<
    unsafe extern "system" fn(
        counterGroup: ::std::os::raw::c_int,
        size: usize,
        data: *mut ::std::os::raw::c_void,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub type IUnityProfilerFrameCallback =
    ::std::option::Option<unsafe extern "system" fn(userData: *mut ::std::os::raw::c_void)>;
pub type IUnityProfilerThreadCallback = ::std::option::Option<
    unsafe extern "system" fn(
        threadDesc: *const UnityProfilerThreadDesc,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
pub type IUnityProfilerFlowEventCallback = ::std::option::Option<
    unsafe extern "system" fn(
        flowEventType: UnityProfilerFlowEventType,
        flowId: u32,
        userData: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityProfilerCallbacksV2 {
    pub RegisterCreateCategoryCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateCategoryCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterCreateCategoryCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateCategoryCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterCreateMarkerCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateMarkerCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterCreateMarkerCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateMarkerCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterMarkerEventCallback: ::std::option::Option<
        unsafe extern "system" fn(
            markerDesc: *const UnityProfilerMarkerDesc,
            callback: IUnityProfilerMarkerEventCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterMarkerEventCallback: ::std::option::Option<
        unsafe extern "system" fn(
            markerDesc: *const UnityProfilerMarkerDesc,
            callback: IUnityProfilerMarkerEventCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterFrameCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerFrameCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterFrameCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerFrameCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterCreateThreadCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerThreadCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterCreateThreadCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerThreadCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterFlowEventCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerFlowEventCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterFlowEventCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerFlowEventCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityProfilerCallbacksV2"]
        [::std::mem::size_of::<IUnityProfilerCallbacksV2>() - 96usize];
    ["Alignment of IUnityProfilerCallbacksV2"]
        [::std::mem::align_of::<IUnityProfilerCallbacksV2>() - 8usize];
    ["Offset of field: IUnityProfilerCallbacksV2::RegisterCreateCategoryCallback"][::std::mem::offset_of!(
        IUnityProfilerCallbacksV2,
        RegisterCreateCategoryCallback
    ) - 0usize];
    ["Offset of field: IUnityProfilerCallbacksV2::UnregisterCreateCategoryCallback"][::std::mem::offset_of!(
        IUnityProfilerCallbacksV2,
        UnregisterCreateCategoryCallback
    ) - 8usize];
    ["Offset of field: IUnityProfilerCallbacksV2::RegisterCreateMarkerCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacksV2, RegisterCreateMarkerCallback) - 16usize];
    ["Offset of field: IUnityProfilerCallbacksV2::UnregisterCreateMarkerCallback"][::std::mem::offset_of!(
        IUnityProfilerCallbacksV2,
        UnregisterCreateMarkerCallback
    ) - 24usize];
    ["Offset of field: IUnityProfilerCallbacksV2::RegisterMarkerEventCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacksV2, RegisterMarkerEventCallback) - 32usize];
    ["Offset of field: IUnityProfilerCallbacksV2::UnregisterMarkerEventCallback"][::std::mem::offset_of!(
        IUnityProfilerCallbacksV2,
        UnregisterMarkerEventCallback
    ) - 40usize];
    ["Offset of field: IUnityProfilerCallbacksV2::RegisterFrameCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacksV2, RegisterFrameCallback) - 48usize];
    ["Offset of field: IUnityProfilerCallbacksV2::UnregisterFrameCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacksV2, UnregisterFrameCallback) - 56usize];
    ["Offset of field: IUnityProfilerCallbacksV2::RegisterCreateThreadCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacksV2, RegisterCreateThreadCallback) - 64usize];
    ["Offset of field: IUnityProfilerCallbacksV2::UnregisterCreateThreadCallback"][::std::mem::offset_of!(
        IUnityProfilerCallbacksV2,
        UnregisterCreateThreadCallback
    ) - 72usize];
    ["Offset of field: IUnityProfilerCallbacksV2::RegisterFlowEventCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacksV2, RegisterFlowEventCallback) - 80usize];
    ["Offset of field: IUnityProfilerCallbacksV2::UnregisterFlowEventCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacksV2, UnregisterFlowEventCallback) - 88usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityProfilerCallbacks {
    pub RegisterCreateCategoryCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateCategoryCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterCreateCategoryCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateCategoryCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterCreateMarkerCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateMarkerCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterCreateMarkerCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerCreateMarkerCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterMarkerEventCallback: ::std::option::Option<
        unsafe extern "system" fn(
            markerDesc: *const UnityProfilerMarkerDesc,
            callback: IUnityProfilerMarkerEventCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterMarkerEventCallback: ::std::option::Option<
        unsafe extern "system" fn(
            markerDesc: *const UnityProfilerMarkerDesc,
            callback: IUnityProfilerMarkerEventCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterFrameCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerFrameCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterFrameCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerFrameCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub RegisterCreateThreadCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerThreadCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub UnregisterCreateThreadCallback: ::std::option::Option<
        unsafe extern "system" fn(
            callback: IUnityProfilerThreadCallback,
            userData: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityProfilerCallbacks"][::std::mem::size_of::<IUnityProfilerCallbacks>() - 80usize];
    ["Alignment of IUnityProfilerCallbacks"]
        [::std::mem::align_of::<IUnityProfilerCallbacks>() - 8usize];
    ["Offset of field: IUnityProfilerCallbacks::RegisterCreateCategoryCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, RegisterCreateCategoryCallback) - 0usize];
    ["Offset of field: IUnityProfilerCallbacks::UnregisterCreateCategoryCallback"][::std::mem::offset_of!(
        IUnityProfilerCallbacks,
        UnregisterCreateCategoryCallback
    ) - 8usize];
    ["Offset of field: IUnityProfilerCallbacks::RegisterCreateMarkerCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, RegisterCreateMarkerCallback) - 16usize];
    ["Offset of field: IUnityProfilerCallbacks::UnregisterCreateMarkerCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, UnregisterCreateMarkerCallback) - 24usize];
    ["Offset of field: IUnityProfilerCallbacks::RegisterMarkerEventCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, RegisterMarkerEventCallback) - 32usize];
    ["Offset of field: IUnityProfilerCallbacks::UnregisterMarkerEventCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, UnregisterMarkerEventCallback) - 40usize];
    ["Offset of field: IUnityProfilerCallbacks::RegisterFrameCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, RegisterFrameCallback) - 48usize];
    ["Offset of field: IUnityProfilerCallbacks::UnregisterFrameCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, UnregisterFrameCallback) - 56usize];
    ["Offset of field: IUnityProfilerCallbacks::RegisterCreateThreadCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, RegisterCreateThreadCallback) - 64usize];
    ["Offset of field: IUnityProfilerCallbacks::UnregisterCreateThreadCallback"]
        [::std::mem::offset_of!(IUnityProfilerCallbacks, UnregisterCreateThreadCallback) - 72usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PluginAllocator {
    _unused: [u8; 0],
}
pub type UnityAllocator = PluginAllocator;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityMemoryManager {
    pub CreateAllocator: ::std::option::Option<
        unsafe extern "system" fn(
            areaName: *const ::std::os::raw::c_char,
            objectName: *const ::std::os::raw::c_char,
        ) -> *mut UnityAllocator,
    >,
    pub DestroyAllocator:
        ::std::option::Option<unsafe extern "system" fn(allocator: *mut UnityAllocator)>,
    pub Allocate: ::std::option::Option<
        unsafe extern "system" fn(
            allocator: *mut UnityAllocator,
            size: usize,
            align: usize,
            file: *const ::std::os::raw::c_char,
            line: i32,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub Deallocate: ::std::option::Option<
        unsafe extern "system" fn(
            allocator: *mut UnityAllocator,
            ptr: *mut ::std::os::raw::c_void,
            file: *const ::std::os::raw::c_char,
            line: i32,
        ),
    >,
    pub Reallocate: ::std::option::Option<
        unsafe extern "system" fn(
            allocator: *mut UnityAllocator,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            align: usize,
            file: *const ::std::os::raw::c_char,
            line: i32,
        ) -> *mut ::std::os::raw::c_void,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityMemoryManager"][::std::mem::size_of::<IUnityMemoryManager>() - 40usize];
    ["Alignment of IUnityMemoryManager"][::std::mem::align_of::<IUnityMemoryManager>() - 8usize];
    ["Offset of field: IUnityMemoryManager::CreateAllocator"]
        [::std::mem::offset_of!(IUnityMemoryManager, CreateAllocator) - 0usize];
    ["Offset of field: IUnityMemoryManager::DestroyAllocator"]
        [::std::mem::offset_of!(IUnityMemoryManager, DestroyAllocator) - 8usize];
    ["Offset of field: IUnityMemoryManager::Allocate"]
        [::std::mem::offset_of!(IUnityMemoryManager, Allocate) - 16usize];
    ["Offset of field: IUnityMemoryManager::Deallocate"]
        [::std::mem::offset_of!(IUnityMemoryManager, Deallocate) - 24usize];
    ["Offset of field: IUnityMemoryManager::Reallocate"]
        [::std::mem::offset_of!(IUnityMemoryManager, Reallocate) - 32usize];
};
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct UnityEventQueue_EventId {
    pub mGUIDHigh: ::std::os::raw::c_ulonglong,
    pub mGUIDLow: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityEventQueue_EventId"][::std::mem::size_of::<UnityEventQueue_EventId>() - 16usize];
    ["Alignment of UnityEventQueue_EventId"]
        [::std::mem::align_of::<UnityEventQueue_EventId>() - 8usize];
    ["Offset of field: UnityEventQueue_EventId::mGUIDHigh"]
        [::std::mem::offset_of!(UnityEventQueue_EventId, mGUIDHigh) - 0usize];
    ["Offset of field: UnityEventQueue_EventId::mGUIDLow"]
        [::std::mem::offset_of!(UnityEventQueue_EventId, mGUIDLow) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityEventQueue_EventQueue {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct UnityEventQueue_EventHandler__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct UnityEventQueue_EventHandler {
    pub vtable_: *const UnityEventQueue_EventHandler__bindgen_vtable,
    pub m_Next: *mut UnityEventQueue_EventHandler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityEventQueue_EventHandler"]
        [::std::mem::size_of::<UnityEventQueue_EventHandler>() - 16usize];
    ["Alignment of UnityEventQueue_EventHandler"]
        [::std::mem::align_of::<UnityEventQueue_EventHandler>() - 8usize];
    ["Offset of field: UnityEventQueue_EventHandler::m_Next"]
        [::std::mem::offset_of!(UnityEventQueue_EventHandler, m_Next) - 8usize];
};
impl Default for UnityEventQueue_EventHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct UnityEventQueue_ClassBasedEventHandler<OBJECTTYPE> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<OBJECTTYPE>>,
    pub _base: UnityEventQueue_EventHandler,
    pub m_Handler: *mut OBJECTTYPE,
}
impl<OBJECTTYPE> Default for UnityEventQueue_ClassBasedEventHandler<OBJECTTYPE> {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct UnityEventQueue_StaticFunctionEventHandler<EVENTTYPE> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<EVENTTYPE>>,
    pub _base: UnityEventQueue_EventHandler,
    pub m_Handler: UnityEventQueue_StaticFunctionEventHandler_HandlerFunction<EVENTTYPE>,
}
pub type UnityEventQueue_StaticFunctionEventHandler_HandlerFunction<EVENTTYPE> =
    ::std::option::Option<unsafe extern "system" fn(payload: *const EVENTTYPE)>;
impl<EVENTTYPE> Default for UnityEventQueue_StaticFunctionEventHandler<EVENTTYPE> {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityEventQueue_AddEventHandler {
    pub m_Handler: *mut UnityEventQueue_EventHandler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityEventQueue_AddEventHandler"]
        [::std::mem::size_of::<UnityEventQueue_AddEventHandler>() - 8usize];
    ["Alignment of UnityEventQueue_AddEventHandler"]
        [::std::mem::align_of::<UnityEventQueue_AddEventHandler>() - 8usize];
    ["Offset of field: UnityEventQueue_AddEventHandler::m_Handler"]
        [::std::mem::offset_of!(UnityEventQueue_AddEventHandler, m_Handler) - 0usize];
};
impl Default for UnityEventQueue_AddEventHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnityEventQueue_RemoveEventHandler {
    pub m_Handler: *mut UnityEventQueue_EventHandler,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityEventQueue_RemoveEventHandler"]
        [::std::mem::size_of::<UnityEventQueue_RemoveEventHandler>() - 8usize];
    ["Alignment of UnityEventQueue_RemoveEventHandler"]
        [::std::mem::align_of::<UnityEventQueue_RemoveEventHandler>() - 8usize];
    ["Offset of field: UnityEventQueue_RemoveEventHandler::m_Handler"]
        [::std::mem::offset_of!(UnityEventQueue_RemoveEventHandler, m_Handler) - 0usize];
};
impl Default for UnityEventQueue_RemoveEventHandler {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct UnityEventQueue_IUnityEventQueue__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct UnityEventQueue_IUnityEventQueue {
    pub vtable_: *const UnityEventQueue_IUnityEventQueue__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnityEventQueue_IUnityEventQueue"]
        [::std::mem::size_of::<UnityEventQueue_IUnityEventQueue>() - 8usize];
    ["Alignment of UnityEventQueue_IUnityEventQueue"]
        [::std::mem::align_of::<UnityEventQueue_IUnityEventQueue>() - 8usize];
};
impl Default for UnityEventQueue_IUnityEventQueue {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
unsafe extern "system" {
    #[link_name = "\u{1}_ZL21IUnityEventQueue_GUID"]
    pub static IUnityEventQueue_GUID: UnityInterfaceGUID;
}
#[doc = " UnityLogType used for Errors."]
pub const UnityLogType_kUnityLogTypeError: UnityLogType = 0;
#[doc = " UnityLogType used for Warnings."]
pub const UnityLogType_kUnityLogTypeWarning: UnityLogType = 2;
#[doc = " UnityLogType used for regular log messages."]
pub const UnityLogType_kUnityLogTypeLog: UnityLogType = 3;
#[doc = " UnityLogType used for Exceptions."]
pub const UnityLogType_kUnityLogTypeException: UnityLogType = 4;
#[doc = " The type of the log message"]
pub type UnityLogType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct IUnityLog {
    pub Log: ::std::option::Option<
        unsafe extern "system" fn(
            type_: UnityLogType,
            message: *const ::std::os::raw::c_char,
            fileName: *const ::std::os::raw::c_char,
            fileLine: ::std::os::raw::c_int,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IUnityLog"][::std::mem::size_of::<IUnityLog>() - 8usize];
    ["Alignment of IUnityLog"][::std::mem::align_of::<IUnityLog>() - 8usize];
    ["Offset of field: IUnityLog::Log"][::std::mem::offset_of!(IUnityLog, Log) - 0usize];
};
